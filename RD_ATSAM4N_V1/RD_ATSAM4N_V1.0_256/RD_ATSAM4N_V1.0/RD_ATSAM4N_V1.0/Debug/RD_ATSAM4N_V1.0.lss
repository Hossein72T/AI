
RD_ATSAM4N_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013b6c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00413b6c  00413b6c  00023b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f8  20000000  00413b74  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000dfc  200009f8  0041456c  000309f8  2**2
                  ALLOC
  4 .stack        00003004  200017f4  00415368  000309f8  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000309f8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a22  2**0
                  CONTENTS, READONLY
  7 .debug_info   00043252  00000000  00000000  00030a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007069  00000000  00000000  00073ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00012818  00000000  00000000  0007ad36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001048  00000000  00000000  0008d54e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001110  00000000  00000000  0008e596  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019ec6  00000000  00000000  0008f6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00021139  00000000  00000000  000a956c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004a6ca  00000000  00000000  000ca6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000035d4  00000000  00000000  00114d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 47 00 20 41 94 40 00 3d 94 40 00 3d 94 40 00     .G. A.@.=.@.=.@.
  400010:	3d 94 40 00 3d 94 40 00 3d 94 40 00 00 00 00 00     =.@.=.@.=.@.....
	...
  40002c:	3d 94 40 00 3d 94 40 00 00 00 00 00 3d 94 40 00     =.@.=.@.....=.@.
  40003c:	f1 be 40 00 3d 94 40 00 3d 94 40 00 3d 94 40 00     ..@.=.@.=.@.=.@.
  40004c:	3d 94 40 00 e1 c6 40 00 3d 94 40 00 3d 94 40 00     =.@...@.=.@.=.@.
  40005c:	00 00 00 00 c1 5d 40 00 3d 94 40 00 e5 61 40 00     .....]@.=.@..a@.
  40006c:	3d 94 40 00 3d 94 40 00 00 00 00 00 3d 94 40 00     =.@.=.@.....=.@.
  40007c:	3d 94 40 00 3d 94 40 00 00 00 00 00 00 00 00 00     =.@.=.@.........
  40008c:	3d 94 40 00 3d 94 40 00 3d 94 40 00 3d 94 40 00     =.@.=.@.=.@.=.@.
  40009c:	9d b4 40 00 3d 94 40 00 3d 94 40 00 00 00 00 00     ..@.=.@.=.@.....
	...
  4000b4:	c9 36 40 00 3d 94 40 00 3d 94 40 00                 .6@.=.@.=.@.

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	200009f8 	.word	0x200009f8
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00413b74 	.word	0x00413b74

004000e4 <frame_dummy>:
  4000e4:	4b0c      	ldr	r3, [pc, #48]	; (400118 <frame_dummy+0x34>)
  4000e6:	b143      	cbz	r3, 4000fa <frame_dummy+0x16>
  4000e8:	480c      	ldr	r0, [pc, #48]	; (40011c <frame_dummy+0x38>)
  4000ea:	490d      	ldr	r1, [pc, #52]	; (400120 <frame_dummy+0x3c>)
  4000ec:	b510      	push	{r4, lr}
  4000ee:	f3af 8000 	nop.w
  4000f2:	480c      	ldr	r0, [pc, #48]	; (400124 <frame_dummy+0x40>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b923      	cbnz	r3, 400102 <frame_dummy+0x1e>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	480a      	ldr	r0, [pc, #40]	; (400124 <frame_dummy+0x40>)
  4000fc:	6803      	ldr	r3, [r0, #0]
  4000fe:	b933      	cbnz	r3, 40010e <frame_dummy+0x2a>
  400100:	4770      	bx	lr
  400102:	4b09      	ldr	r3, [pc, #36]	; (400128 <frame_dummy+0x44>)
  400104:	2b00      	cmp	r3, #0
  400106:	d0f7      	beq.n	4000f8 <frame_dummy+0x14>
  400108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40010c:	4718      	bx	r3
  40010e:	4b06      	ldr	r3, [pc, #24]	; (400128 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f5      	beq.n	400100 <frame_dummy+0x1c>
  400114:	4718      	bx	r3
  400116:	bf00      	nop
  400118:	00000000 	.word	0x00000000
  40011c:	00413b74 	.word	0x00413b74
  400120:	200009fc 	.word	0x200009fc
  400124:	00413b74 	.word	0x00413b74
  400128:	00000000 	.word	0x00000000

0040012c <DigitAccessoryOperating>:
// Ritorna lo stato dell'accessorio se è operativo 
// o no (link KO / Diabilitato).
//----------------------------------------------------
Byte DigitAccessoryOperating(int nAcc_I2C)
{  
   if ((sData.AccI2C[nAcc_I2C].sts & STS_ACC_OPERATIVE) && (nAcc_I2C < TOT_ACCESSORY_I2C))
  40012c:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
  400130:	4b06      	ldr	r3, [pc, #24]	; (40014c <DigitAccessoryOperating+0x20>)
  400132:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  400136:	79db      	ldrb	r3, [r3, #7]
  400138:	f013 0f02 	tst.w	r3, #2
  40013c:	d004      	beq.n	400148 <DigitAccessoryOperating+0x1c>
  40013e:	2816      	cmp	r0, #22
  400140:	bfcc      	ite	gt
  400142:	2000      	movgt	r0, #0
  400144:	2001      	movle	r0, #1
  400146:	4770      	bx	lr
  400148:	2000      	movs	r0, #0
     return 1;
  
   return 0; 
}  
  40014a:	4770      	bx	lr
  40014c:	200013ac 	.word	0x200013ac

00400150 <DigitAccessoryOn>:
//----------------------------------------------------
// Ritorna lo stato dell'acccessorio Acceso/ Spento
//----------------------------------------------------
Byte DigitAccessoryOn(int nAcc_I2C)
{  
   if ((sData.AccI2C[nAcc_I2C].sts & STS_ACC_ON) && (nAcc_I2C < TOT_ACCESSORY_I2C))
  400150:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
  400154:	4b06      	ldr	r3, [pc, #24]	; (400170 <DigitAccessoryOn+0x20>)
  400156:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  40015a:	79db      	ldrb	r3, [r3, #7]
  40015c:	f013 0f04 	tst.w	r3, #4
  400160:	d004      	beq.n	40016c <DigitAccessoryOn+0x1c>
  400162:	2816      	cmp	r0, #22
  400164:	bfcc      	ite	gt
  400166:	2000      	movgt	r0, #0
  400168:	2001      	movle	r0, #1
  40016a:	4770      	bx	lr
  40016c:	2000      	movs	r0, #0
     return 1;
  
   return 0; 
}  
  40016e:	4770      	bx	lr
  400170:	200013ac 	.word	0x200013ac

00400174 <AccessoryPresent_EepList>:
//
// input: 
//  nAcc = ACC_EEP_PEHD,  ACC_EEP_PHWD,  ACC_EEP_HWD,..
//----------------------------------------------------------
Byte AccessoryPresent_EepList(int nAccEep)
{
  400174:	b510      	push	{r4, lr}
  400176:	4604      	mov	r4, r0
   Byte nb, msk, val;
   
   nb = (nAccEep >> 3);
   msk  = 1 << (nAccEep & 0x07);  
   
   val = read_byte_eeprom(ADDR_EEP(AccessoyHW[nb]));
  400178:	f3c0 00c7 	ubfx	r0, r0, #3, #8
  40017c:	302a      	adds	r0, #42	; 0x2a
  40017e:	4b06      	ldr	r3, [pc, #24]	; (400198 <AccessoryPresent_EepList+0x24>)
  400180:	4798      	blx	r3
   msk  = 1 << (nAccEep & 0x07);  
  400182:	f004 0407 	and.w	r4, r4, #7
  400186:	2301      	movs	r3, #1
  400188:	40a3      	lsls	r3, r4
     
   if(val & msk)
  40018a:	4018      	ands	r0, r3
  40018c:	f010 0fff 	tst.w	r0, #255	; 0xff
      return 1;
   
   return 0;   
}
  400190:	bf14      	ite	ne
  400192:	2001      	movne	r0, #1
  400194:	2000      	moveq	r0, #0
  400196:	bd10      	pop	{r4, pc}
  400198:	0040a26d 	.word	0x0040a26d

0040019c <TAG_DigitAccessoryOn>:
//----------------------------------------------------------
//  Accendi l'accessorio, inviando il comando tramte I2C.
//----------------------------------------------------------
void TAG_DigitAccessoryOn(int nAcc_I2C)
{ 
    if(nAcc_I2C < TOT_ACCESSORY_I2C) {
  40019c:	2816      	cmp	r0, #22
  40019e:	dc15      	bgt.n	4001cc <TAG_DigitAccessoryOn+0x30>
{ 
  4001a0:	b510      	push	{r4, lr}
  4001a2:	4604      	mov	r4, r0
       if(!DigitAccessoryOn(nAcc_I2C)) // non è acceso invia il comando di accensione
  4001a4:	4b0a      	ldr	r3, [pc, #40]	; (4001d0 <TAG_DigitAccessoryOn+0x34>)
  4001a6:	4798      	blx	r3
  4001a8:	b930      	cbnz	r0, 4001b8 <TAG_DigitAccessoryOn+0x1c>
         sData.AccI2C[nAcc_I2C].comand = (WRITE_CMD | CMD_ON);
  4001aa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4001ae:	4a09      	ldr	r2, [pc, #36]	; (4001d4 <TAG_DigitAccessoryOn+0x38>)
  4001b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  4001b4:	2281      	movs	r2, #129	; 0x81
  4001b6:	719a      	strb	r2, [r3, #6]
              
       sData.AccI2C[nAcc_I2C].sts |= STS_CMD_ACC_ON;   
  4001b8:	4b06      	ldr	r3, [pc, #24]	; (4001d4 <TAG_DigitAccessoryOn+0x38>)
  4001ba:	00e0      	lsls	r0, r4, #3
  4001bc:	1902      	adds	r2, r0, r4
  4001be:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  4001c2:	79d3      	ldrb	r3, [r2, #7]
  4001c4:	f043 0310 	orr.w	r3, r3, #16
  4001c8:	71d3      	strb	r3, [r2, #7]
  4001ca:	bd10      	pop	{r4, pc}
  4001cc:	4770      	bx	lr
  4001ce:	bf00      	nop
  4001d0:	00400151 	.word	0x00400151
  4001d4:	200013ac 	.word	0x200013ac

004001d8 <TAG_DigitAccessoryOff>:
//----------------------------------------------------------
// Spegni l'accessorio, inviando il comando tramte I2C.
//----------------------------------------------------------
void TAG_DigitAccessoryOff(int nAcc_I2C)
{ 
   if(nAcc_I2C < TOT_ACCESSORY_I2C) {
  4001d8:	2816      	cmp	r0, #22
  4001da:	dc15      	bgt.n	400208 <TAG_DigitAccessoryOff+0x30>
{ 
  4001dc:	b510      	push	{r4, lr}
  4001de:	4604      	mov	r4, r0
     if(DigitAccessoryOn(nAcc_I2C))   // se è acceso invia il comando di spegnimento.
  4001e0:	4b0a      	ldr	r3, [pc, #40]	; (40020c <TAG_DigitAccessoryOff+0x34>)
  4001e2:	4798      	blx	r3
  4001e4:	b130      	cbz	r0, 4001f4 <TAG_DigitAccessoryOff+0x1c>
       sData.AccI2C[nAcc_I2C].comand = WRITE_CMD; 
  4001e6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4001ea:	4a09      	ldr	r2, [pc, #36]	; (400210 <TAG_DigitAccessoryOff+0x38>)
  4001ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  4001f0:	2280      	movs	r2, #128	; 0x80
  4001f2:	719a      	strb	r2, [r3, #6]

     
     sData.AccI2C[nAcc_I2C].sts &= ~STS_CMD_ACC_ON; 
  4001f4:	4b06      	ldr	r3, [pc, #24]	; (400210 <TAG_DigitAccessoryOff+0x38>)
  4001f6:	00e0      	lsls	r0, r4, #3
  4001f8:	1902      	adds	r2, r0, r4
  4001fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  4001fe:	79d3      	ldrb	r3, [r2, #7]
  400200:	f023 0310 	bic.w	r3, r3, #16
  400204:	71d3      	strb	r3, [r2, #7]
  400206:	bd10      	pop	{r4, pc}
  400208:	4770      	bx	lr
  40020a:	bf00      	nop
  40020c:	00400151 	.word	0x00400151
  400210:	200013ac 	.word	0x200013ac

00400214 <TAG_DigitAccessoryOperating>:
//----------------------------------------------------------
// Segna che l'accessorio Digitale è operativo.
//----------------------------------------------------------
void TAG_DigitAccessoryOperating(int nAcc_I2C)
{ 
    if(nAcc_I2C < TOT_ACCESSORY_I2C)  
  400214:	2816      	cmp	r0, #22
  400216:	dc08      	bgt.n	40022a <TAG_DigitAccessoryOperating+0x16>
       sData.AccI2C[nAcc_I2C].sts |= (STS_ACC_OPERATIVE | STS_ACC_CONNECT);   
  400218:	4b04      	ldr	r3, [pc, #16]	; (40022c <TAG_DigitAccessoryOperating+0x18>)
  40021a:	00c2      	lsls	r2, r0, #3
  40021c:	1811      	adds	r1, r2, r0
  40021e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  400222:	79cb      	ldrb	r3, [r1, #7]
  400224:	f043 0303 	orr.w	r3, r3, #3
  400228:	71cb      	strb	r3, [r1, #7]
  40022a:	4770      	bx	lr
  40022c:	200013ac 	.word	0x200013ac

00400230 <TAG_DigitAccessoryNotOperating>:
//----------------------------------------------------------
// Togli l'operatitività dell'Accessorio Digitale 
//----------------------------------------------------------
void TAG_DigitAccessoryNotOperating(int nAcc_I2C)
{ 
   if(nAcc_I2C < TOT_ACCESSORY_I2C) 
  400230:	2816      	cmp	r0, #22
  400232:	dc08      	bgt.n	400246 <TAG_DigitAccessoryNotOperating+0x16>
    // sData.AccI2C[nAcc_I2C].sts &= ~STS_ACC_OPERATIVE;
      sData.AccI2C[nAcc_I2C].sts &= 0xFD;    
  400234:	4b04      	ldr	r3, [pc, #16]	; (400248 <TAG_DigitAccessoryNotOperating+0x18>)
  400236:	00c2      	lsls	r2, r0, #3
  400238:	1811      	adds	r1, r2, r0
  40023a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40023e:	79cb      	ldrb	r3, [r1, #7]
  400240:	f023 0302 	bic.w	r3, r3, #2
  400244:	71cb      	strb	r3, [r1, #7]
  400246:	4770      	bx	lr
  400248:	200013ac 	.word	0x200013ac

0040024c <located_pos_AccessoyToEep>:
//------------------------------------------------------------------------------
// In base all'accessorio digitale che gira sul Bus I2C, ritorna il byte ed il 
// bit dell'array <AccessoyHW[4]>  in eeprom.
//------------------------------------------------------------------------------
void located_pos_AccessoyToEep(byte nAcc_I2C, byte sts, byte *nbyte_eep, byte *nbit_eep)
{ 
  40024c:	b500      	push	{lr}
   switch(nAcc_I2C)
  40024e:	2816      	cmp	r0, #22
  400250:	f200 809d 	bhi.w	40038e <located_pos_AccessoyToEep+0x142>
  400254:	e8df f000 	tbb	[pc, r0]
  400258:	271c160c 	.word	0x271c160c
  40025c:	3f39332d 	.word	0x3f39332d
  400260:	57514b45 	.word	0x57514b45
  400264:	6f69635d 	.word	0x6f69635d
  400268:	86807a75 	.word	0x86807a75
  40026c:	918c      	.short	0x918c
  40026e:	97          	.byte	0x97
  40026f:	00          	.byte	0x00
   {
        case ACC_I2C_HEATER:          
          if(sts & STS_ACC_ELECT){
  400270:	f011 0f08 	tst.w	r1, #8
            *nbyte_eep = (ACC_EEP_EHD >> 3);
  400274:	bf1d      	ittte	ne
  400276:	2100      	movne	r1, #0
  400278:	7011      	strbne	r1, [r2, #0]
            *nbit_eep  = (ACC_EEP_EHD & 0x07); 
  40027a:	2203      	movne	r2, #3
          }else{
            *nbit_eep  = (ACC_EEP_HWD >> 3); 
            *nbit_eep  = (ACC_EEP_HWD & 0x07);  
  40027c:	2202      	moveq	r2, #2
  40027e:	701a      	strb	r2, [r3, #0]
  400280:	f85d fb04 	ldr.w	pc, [sp], #4
          }  
        break;
        
        case ACC_I2C_COOLER:
          *nbyte_eep = (ACC_EEP_CWD  >> 3);
  400284:	2100      	movs	r1, #0
  400286:	7011      	strb	r1, [r2, #0]
          *nbit_eep  = (ACC_EEP_CWD  & 0x07);           
  400288:	2204      	movs	r2, #4
  40028a:	701a      	strb	r2, [r3, #0]
        break;
  40028c:	f85d fb04 	ldr.w	pc, [sp], #4
             
        case ACC_I2C_PREHEATER: 
          if(sts & STS_ACC_ELECT) {
  400290:	f011 0f08 	tst.w	r1, #8
             *nbyte_eep = (ACC_EEP_PEHD  >> 3);
  400294:	f04f 0100 	mov.w	r1, #0
  400298:	7011      	strb	r1, [r2, #0]
             *nbit_eep  = (ACC_EEP_PEHD  & 0x07);   
  40029a:	bf12      	itee	ne
  40029c:	7019      	strbne	r1, [r3, #0]
          }else{
             *nbyte_eep = (ACC_EEP_PHWD  >> 3);
             *nbit_eep  = (ACC_EEP_PHWD  & 0x07);   
  40029e:	2201      	moveq	r2, #1
  4002a0:	701a      	strbeq	r2, [r3, #0]
  4002a2:	f85d fb04 	ldr.w	pc, [sp], #4
          }  
        break;
                
        case ACC_I2C_CO2_1:
           *nbyte_eep = (ACC_EEP_P1CO2 >> 3);
  4002a6:	2102      	movs	r1, #2
  4002a8:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_P1CO2 & 0x07);  
  4002aa:	2206      	movs	r2, #6
  4002ac:	701a      	strb	r2, [r3, #0]
        break;
  4002ae:	f85d fb04 	ldr.w	pc, [sp], #4
        
        case ACC_I2C_CO2_2:
           *nbyte_eep = (ACC_EEP_P2CO2 >> 3);
  4002b2:	2102      	movs	r1, #2
  4002b4:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_P2CO2 & 0x07);   
  4002b6:	2207      	movs	r2, #7
  4002b8:	701a      	strb	r2, [r3, #0]
        break; 
  4002ba:	f85d fb04 	ldr.w	pc, [sp], #4
        
        case ACC_I2C_RH_1:
           *nbyte_eep = (ACC_EEP_P1RH >> 3);
  4002be:	2102      	movs	r1, #2
  4002c0:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_P1RH & 0x07);  
  4002c2:	2203      	movs	r2, #3
  4002c4:	701a      	strb	r2, [r3, #0]
        break; 
  4002c6:	f85d fb04 	ldr.w	pc, [sp], #4
        
        case ACC_I2C_RH_2:
           *nbyte_eep = (ACC_EEP_P2RH >> 3);
  4002ca:	2102      	movs	r1, #2
  4002cc:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_P2RH & 0x07);  
  4002ce:	2204      	movs	r2, #4
  4002d0:	701a      	strb	r2, [r3, #0]
        break; 
  4002d2:	f85d fb04 	ldr.w	pc, [sp], #4
       
        case ACC_I2C_VOC:
           *nbyte_eep = (ACC_EEP_P1VOC >> 3);
  4002d6:	2102      	movs	r1, #2
  4002d8:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_P1VOC & 0x07);  
  4002da:	2201      	movs	r2, #1
  4002dc:	701a      	strb	r2, [r3, #0]
        break; 
  4002de:	f85d fb04 	ldr.w	pc, [sp], #4
        
        case ACC_I2C_AWP:
           *nbyte_eep = (ACC_EEP_AWP >> 3);
  4002e2:	2100      	movs	r1, #0
  4002e4:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_AWP & 0x07);  
  4002e6:	2205      	movs	r2, #5
  4002e8:	701a      	strb	r2, [r3, #0]
        break; 
  4002ea:	f85d fb04 	ldr.w	pc, [sp], #4
       
        case ACC_I2C_PCAP:
           *nbyte_eep = (ACC_EEP_PCAP >> 3);
  4002ee:	2101      	movs	r1, #1
  4002f0:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_PCAP & 0x07);  
  4002f2:	2205      	movs	r2, #5
  4002f4:	701a      	strb	r2, [r3, #0]
        break; 
  4002f6:	f85d fb04 	ldr.w	pc, [sp], #4
         
        case ACC_I2C_PCAF:
           *nbyte_eep = (ACC_EEP_PCAF >> 3);
  4002fa:	2101      	movs	r1, #1
  4002fc:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_PCAF & 0x07);  
  4002fe:	2206      	movs	r2, #6
  400300:	701a      	strb	r2, [r3, #0]
        break;
  400302:	f85d fb04 	ldr.w	pc, [sp], #4
        
        case ACC_I2C_DPP:
           *nbyte_eep = (ACC_EEP_DPP >> 3);
  400306:	2101      	movs	r1, #1
  400308:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_DPP & 0x07);  
  40030a:	2207      	movs	r2, #7
  40030c:	701a      	strb	r2, [r3, #0]
        break;
  40030e:	f85d fb04 	ldr.w	pc, [sp], #4
        
         case ACC_I2C_DXD:
           *nbyte_eep = (ACC_EEP_DXD >> 3);
  400312:	2100      	movs	r1, #0
  400314:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_DXD & 0x07);  
  400316:	2207      	movs	r2, #7
  400318:	701a      	strb	r2, [r3, #0]
        break; 
  40031a:	f85d fb04 	ldr.w	pc, [sp], #4
 
         case ACC_I2C_EXT1:
           *nbyte_eep = (ACC_EEP_EXT1 >> 3);
  40031e:	2103      	movs	r1, #3
  400320:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_EXT1 & 0x07);  
  400322:	2200      	movs	r2, #0
  400324:	701a      	strb	r2, [r3, #0]
        break; 
  400326:	f85d fb04 	ldr.w	pc, [sp], #4

         case ACC_I2C_EXT2:
           *nbyte_eep = (ACC_EEP_EXT2 >> 3);
  40032a:	2103      	movs	r1, #3
  40032c:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_EXT2 & 0x07);  
  40032e:	2201      	movs	r2, #1
  400330:	701a      	strb	r2, [r3, #0]
        break; 
  400332:	f85d fb04 	ldr.w	pc, [sp], #4

         case ACC_I2C_EXT3:
           *nbyte_eep = (ACC_EEP_EXT3 >> 3);
  400336:	2103      	movs	r1, #3
  400338:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_EXT3 & 0x07);  
  40033a:	2202      	movs	r2, #2
  40033c:	701a      	strb	r2, [r3, #0]
        break; 
  40033e:	f85d fb04 	ldr.w	pc, [sp], #4

         case ACC_I2C_EXT4:
           *nbyte_eep = (ACC_EEP_EXT4 >> 3);
  400342:	2103      	movs	r1, #3
  400344:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_EXT4 & 0x07);  
  400346:	7019      	strb	r1, [r3, #0]
        break;         
  400348:	f85d fb04 	ldr.w	pc, [sp], #4
          
        case ACC_I2C_FLW1:
           *nbyte_eep = (ACC_EEP_FLW1 >> 3);
  40034c:	2103      	movs	r1, #3
  40034e:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_FLW1 & 0x07);  
  400350:	2204      	movs	r2, #4
  400352:	701a      	strb	r2, [r3, #0]
        break;         		  
  400354:	f85d fb04 	ldr.w	pc, [sp], #4
		
	case ACC_I2C_FLW2:
           *nbyte_eep = (ACC_EEP_FLW2 >> 3);
  400358:	2103      	movs	r1, #3
  40035a:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_FLW2 & 0x07);  
  40035c:	2205      	movs	r2, #5
  40035e:	701a      	strb	r2, [r3, #0]
        break;  
  400360:	f85d fb04 	ldr.w	pc, [sp], #4
		
	case ACC_I2C_EBPD:
           *nbyte_eep = (ACC_EEP_EBPD >> 3);
  400364:	2102      	movs	r1, #2
  400366:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_EBPD & 0x07);  
  400368:	2205      	movs	r2, #5
  40036a:	701a      	strb	r2, [r3, #0]
        break;  
  40036c:	f85d fb04 	ldr.w	pc, [sp], #4

	case ACC_I2C_SSR:
           *nbyte_eep = (ACC_EEP_SSR >> 3);
  400370:	2102      	movs	r1, #2
  400372:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_SSR & 0x07);  
  400374:	7019      	strb	r1, [r3, #0]
        break;  
  400376:	f85d fb04 	ldr.w	pc, [sp], #4
        
        case ACC_I2C_EBP2:
           *nbyte_eep = (ACC_EEP_EBP2 >> 3);
  40037a:	2102      	movs	r1, #2
  40037c:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_EBP2 & 0x07);  
  40037e:	2200      	movs	r2, #0
  400380:	701a      	strb	r2, [r3, #0]
        break;
  400382:	f85d fb04 	ldr.w	pc, [sp], #4
        
        case ACC_I2C_DSC:
           *nbyte_eep = (ACC_EEP_DSC >> 3);
  400386:	2103      	movs	r1, #3
  400388:	7011      	strb	r1, [r2, #0]
           *nbit_eep  = (ACC_EEP_DSC & 0x07);  
  40038a:	2206      	movs	r2, #6
  40038c:	701a      	strb	r2, [r3, #0]
  40038e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00400394 <InsertDigitAccessory>:
{
  byte nbit, nbyte, val;
  word addr;
  
  
  if(nAcc_I2C < TOT_ACCESSORY_I2C) {
  400394:	2816      	cmp	r0, #22
  400396:	dd00      	ble.n	40039a <InsertDigitAccessory+0x6>
  400398:	4770      	bx	lr
{
  40039a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40039c:	b083      	sub	sp, #12
  40039e:	4604      	mov	r4, r0
     TAG_DigitAccessoryOperating(nAcc_I2C);
  4003a0:	4b1d      	ldr	r3, [pc, #116]	; (400418 <InsertDigitAccessory+0x84>)
  4003a2:	4798      	blx	r3
     sData.AccI2C[nAcc_I2C].level_link  = 10;        // livello della comunicazione (valore espresso in 10/10) 
  4003a4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4003a8:	491c      	ldr	r1, [pc, #112]	; (40041c <InsertDigitAccessory+0x88>)
  4003aa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  4003ae:	230a      	movs	r3, #10
  4003b0:	74cb      	strb	r3, [r1, #19]
     sData.AccI2C[nAcc_I2C].cnt_link_ok = 1;         // Contatore Link buoni
  4003b2:	2501      	movs	r5, #1
  4003b4:	750d      	strb	r5, [r1, #20]
     sData.AccI2C[nAcc_I2C].cnt_link_ko = 0;         // Contatore Link falliti
  4003b6:	2300      	movs	r3, #0
  4003b8:	754b      	strb	r3, [r1, #21]
     sData.AccI2C[nAcc_I2C].cnt_persist_link_ko = 0; // contatore di persistenza di collegamenti Falliti
  4003ba:	758b      	strb	r3, [r1, #22]
     
     located_pos_AccessoyToEep(nAcc_I2C, sData.AccI2C[nAcc_I2C].sts,  &nbyte, &nbit);
  4003bc:	f10d 0307 	add.w	r3, sp, #7
  4003c0:	f10d 0206 	add.w	r2, sp, #6
  4003c4:	79c9      	ldrb	r1, [r1, #7]
  4003c6:	b2e0      	uxtb	r0, r4
  4003c8:	4e15      	ldr	r6, [pc, #84]	; (400420 <InsertDigitAccessory+0x8c>)
  4003ca:	47b0      	blx	r6
      
     addr = ADDR_EEP(AccessoyHW[nbyte]);     
  4003cc:	f89d 6006 	ldrb.w	r6, [sp, #6]
  4003d0:	362a      	adds	r6, #42	; 0x2a
     val = read_byte_eeprom(addr);                
  4003d2:	4630      	mov	r0, r6
  4003d4:	4f13      	ldr	r7, [pc, #76]	; (400424 <InsertDigitAccessory+0x90>)
  4003d6:	47b8      	blx	r7
     
     val |= (1 << nbit);    
  4003d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
  4003dc:	408d      	lsls	r5, r1
  4003de:	4305      	orrs	r5, r0
     write_byte_eeprom(addr, val);       
  4003e0:	b2e9      	uxtb	r1, r5
  4003e2:	4630      	mov	r0, r6
  4003e4:	4d10      	ldr	r5, [pc, #64]	; (400428 <InsertDigitAccessory+0x94>)
  4003e6:	47a8      	blx	r5
     // aggiorniamo anche il contatore dell'area delle info.
     addr = ADDR_EEP(cntUpdate_info);
     val = read_byte_eeprom(addr);
  4003e8:	203a      	movs	r0, #58	; 0x3a
  4003ea:	47b8      	blx	r7
     val++;
  4003ec:	1c41      	adds	r1, r0, #1
     write_byte_eeprom(addr, val); 
  4003ee:	b2c9      	uxtb	r1, r1
  4003f0:	203a      	movs	r0, #58	; 0x3a
  4003f2:	47a8      	blx	r5
     
     // attiva il buzzer per segnalare che è stato rilevato un  nuovo HW
     ActiveBuzzer(2, 3); // 2beep, 0,3 sec.
  4003f4:	2103      	movs	r1, #3
  4003f6:	2002      	movs	r0, #2
  4003f8:	4b0c      	ldr	r3, [pc, #48]	; (40042c <InsertDigitAccessory+0x98>)
  4003fa:	4798      	blx	r3
     
     // Verifichiamo le maschere dei bit di controllo motori, in base alla nuova config.
	 // Let's check the motor control bit masks, based on the new config.
     if((nAcc_I2C == ACC_I2C_PCAP) || (nAcc_I2C == ACC_I2C_PCAF))
  4003fc:	f1a4 0309 	sub.w	r3, r4, #9
  400400:	2b01      	cmp	r3, #1
  400402:	d903      	bls.n	40040c <InsertDigitAccessory+0x78>
       check_control_speed_func();
	   
	 if(nAcc_I2C == ACC_I2C_FLW1) 
  400404:	2c11      	cmp	r4, #17
  400406:	d004      	beq.n	400412 <InsertDigitAccessory+0x7e>
    Serial_println(val, HEX);
#endif   //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg     

  }  
  
}  
  400408:	b003      	add	sp, #12
  40040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
       check_control_speed_func();
  40040c:	4b08      	ldr	r3, [pc, #32]	; (400430 <InsertDigitAccessory+0x9c>)
  40040e:	4798      	blx	r3
  400410:	e7f8      	b.n	400404 <InsertDigitAccessory+0x70>
		check_control_speed_func1();
  400412:	4b08      	ldr	r3, [pc, #32]	; (400434 <InsertDigitAccessory+0xa0>)
  400414:	4798      	blx	r3
}  
  400416:	e7f7      	b.n	400408 <InsertDigitAccessory+0x74>
  400418:	00400215 	.word	0x00400215
  40041c:	200013ac 	.word	0x200013ac
  400420:	0040024d 	.word	0x0040024d
  400424:	0040a26d 	.word	0x0040a26d
  400428:	0040a1fd 	.word	0x0040a1fd
  40042c:	0040b725 	.word	0x0040b725
  400430:	0040a2dd 	.word	0x0040a2dd
  400434:	0040a411 	.word	0x0040a411

00400438 <RemoveDigitAccessory>:

//------------------------------------------------------------------------------
// Rimuove l'accessorio digitale dall'unità e dalla lista in eeprom
//------------------------------------------------------------------------------
void RemoveDigitAccessory(int nAcc_I2C) 
{
  400438:	b570      	push	{r4, r5, r6, lr}
  40043a:	b082      	sub	sp, #8
  byte nbit= 0, nbyte=3, val;
  40043c:	2300      	movs	r3, #0
  40043e:	f88d 3007 	strb.w	r3, [sp, #7]
  400442:	2303      	movs	r3, #3
  400444:	f88d 3006 	strb.w	r3, [sp, #6]
  int addr;
  
  if(nAcc_I2C < TOT_ACCESSORY_I2C) { 
  400448:	2816      	cmp	r0, #22
  40044a:	dd01      	ble.n	400450 <RemoveDigitAccessory+0x18>
    val = read_byte_eeprom(ADDR_EEP(AccessoyHW[2]));
    Serial_println(val, HEX);
#endif   //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg            
  }  
      
}  
  40044c:	b002      	add	sp, #8
  40044e:	bd70      	pop	{r4, r5, r6, pc}
  400450:	4605      	mov	r5, r0
     located_pos_AccessoyToEep(nAcc_I2C, sData.AccI2C[nAcc_I2C].sts,  &nbyte, &nbit);
  400452:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  400456:	4c32      	ldr	r4, [pc, #200]	; (400520 <RemoveDigitAccessory+0xe8>)
  400458:	eb04 0443 	add.w	r4, r4, r3, lsl #1
  40045c:	f10d 0307 	add.w	r3, sp, #7
  400460:	f10d 0206 	add.w	r2, sp, #6
  400464:	79e1      	ldrb	r1, [r4, #7]
  400466:	b2c0      	uxtb	r0, r0
  400468:	4e2e      	ldr	r6, [pc, #184]	; (400524 <RemoveDigitAccessory+0xec>)
  40046a:	47b0      	blx	r6
     sData.AccI2C[nAcc_I2C].numCmdDisable = 0;
  40046c:	2300      	movs	r3, #0
  40046e:	7223      	strb	r3, [r4, #8]
     sData.AccI2C[nAcc_I2C].sts = 0;
  400470:	71e3      	strb	r3, [r4, #7]
     sData.AccI2C[nAcc_I2C].comand   = 0;
  400472:	71a3      	strb	r3, [r4, #6]
     sData.AccI2C[nAcc_I2C].measure1 = 0;            // misura 1
  400474:	7263      	strb	r3, [r4, #9]
  400476:	72a3      	strb	r3, [r4, #10]
     sData.AccI2C[nAcc_I2C].measure2 = 0;            // misura 2
  400478:	72e3      	strb	r3, [r4, #11]
  40047a:	7323      	strb	r3, [r4, #12]
     sData.AccI2C[nAcc_I2C].measure3 = 0;            // misura 3
  40047c:	7363      	strb	r3, [r4, #13]
  40047e:	73a3      	strb	r3, [r4, #14]
     sData.AccI2C[nAcc_I2C].measure4 = 0;            // misura 4
  400480:	73e3      	strb	r3, [r4, #15]
  400482:	7423      	strb	r3, [r4, #16]
     sData.AccI2C[nAcc_I2C].data     = 0;            // per CWD, EHD è la taglia, per le sonde è la tipologia es: da canale o d'ambiente 
  400484:	7463      	strb	r3, [r4, #17]
     sData.AccI2C[nAcc_I2C].status_comand = 0;
  400486:	75e3      	strb	r3, [r4, #23]
     addr = ADDR_EEP(AccessoyHW[nbyte]);     
  400488:	f89d 4006 	ldrb.w	r4, [sp, #6]
     val = read_byte_eeprom(addr);                
  40048c:	342a      	adds	r4, #42	; 0x2a
  40048e:	4620      	mov	r0, r4
  400490:	4e25      	ldr	r6, [pc, #148]	; (400528 <RemoveDigitAccessory+0xf0>)
  400492:	47b0      	blx	r6
     val &= ~(1 << nbit);    
  400494:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400498:	2101      	movs	r1, #1
  40049a:	4099      	lsls	r1, r3
  40049c:	ea20 0101 	bic.w	r1, r0, r1
     write_byte_eeprom(addr, val); 
  4004a0:	b2c9      	uxtb	r1, r1
  4004a2:	4620      	mov	r0, r4
  4004a4:	4c21      	ldr	r4, [pc, #132]	; (40052c <RemoveDigitAccessory+0xf4>)
  4004a6:	47a0      	blx	r4
     val = read_byte_eeprom(addr);
  4004a8:	203a      	movs	r0, #58	; 0x3a
  4004aa:	47b0      	blx	r6
     val++;
  4004ac:	1c41      	adds	r1, r0, #1
     write_byte_eeprom(addr, val);  
  4004ae:	b2c9      	uxtb	r1, r1
  4004b0:	203a      	movs	r0, #58	; 0x3a
  4004b2:	47a0      	blx	r4
     if((nAcc_I2C == ACC_I2C_PCAP) || (nAcc_I2C == ACC_I2C_PCAF) || (nAcc_I2C == ACC_I2C_FLW1) || (nAcc_I2C == ACC_I2C_FLW2)) {
  4004b4:	f1a5 0309 	sub.w	r3, r5, #9
  4004b8:	2b01      	cmp	r3, #1
  4004ba:	d908      	bls.n	4004ce <RemoveDigitAccessory+0x96>
  4004bc:	f1a5 0011 	sub.w	r0, r5, #17
  4004c0:	2801      	cmp	r0, #1
  4004c2:	d904      	bls.n	4004ce <RemoveDigitAccessory+0x96>
     ActiveBuzzer(1, 6); // 1 beep, 0,6 sec.   
  4004c4:	2106      	movs	r1, #6
  4004c6:	2001      	movs	r0, #1
  4004c8:	4b19      	ldr	r3, [pc, #100]	; (400530 <RemoveDigitAccessory+0xf8>)
  4004ca:	4798      	blx	r3
}  
  4004cc:	e7be      	b.n	40044c <RemoveDigitAccessory+0x14>
          enab_func     = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  4004ce:	202e      	movs	r0, #46	; 0x2e
  4004d0:	4d18      	ldr	r5, [pc, #96]	; (400534 <RemoveDigitAccessory+0xfc>)
  4004d2:	47a8      	blx	r5
  4004d4:	4604      	mov	r4, r0
          msk_enab_func = read_word_eeprom(ADDR_EEP(msk_Enab_Fuction)); 
  4004d6:	2030      	movs	r0, #48	; 0x30
  4004d8:	47a8      	blx	r5
  4004da:	4605      	mov	r5, r0
          cnt_info      = read_byte_eeprom(ADDR_EEP(cntUpdate_info));
  4004dc:	203a      	movs	r0, #58	; 0x3a
  4004de:	4b12      	ldr	r3, [pc, #72]	; (400528 <RemoveDigitAccessory+0xf0>)
  4004e0:	4798      	blx	r3
  4004e2:	4606      	mov	r6, r0
          enab_func  &= ~0x00E0;
  4004e4:	f024 01e0 	bic.w	r1, r4, #224	; 0xe0
  4004e8:	b289      	uxth	r1, r1
		  if (( msk_enab_func & 0x0080) == 0x0080 ) // CAF enabled
  4004ea:	f015 0f80 	tst.w	r5, #128	; 0x80
				enab_func  |= (1 << ENAB_CAF);
  4004ee:	bf19      	ittee	ne
  4004f0:	f041 01a0 	orrne.w	r1, r1, #160	; 0xa0
				msk_enab_func &= ~0x0040; // 0x00C0	
  4004f4:	f025 0540 	bicne.w	r5, r5, #64	; 0x40
          enab_func  |= (1 << ENAB_CSF);
  4004f8:	f041 0120 	orreq.w	r1, r1, #32
		    msk_enab_func &= ~0x00C0; // 0x00C0	
  4004fc:	f025 05c0 	biceq.w	r5, r5, #192	; 0xc0
  400500:	b2ad      	uxth	r5, r5
          write_word_eeprom(ADDR_EEP(Enab_Fuction),          enab_func);
  400502:	202e      	movs	r0, #46	; 0x2e
  400504:	4c0c      	ldr	r4, [pc, #48]	; (400538 <RemoveDigitAccessory+0x100>)
  400506:	47a0      	blx	r4
          write_word_eeprom(ADDR_EEP(msk_Enab_Fuction),  msk_enab_func);
  400508:	4629      	mov	r1, r5
  40050a:	2030      	movs	r0, #48	; 0x30
  40050c:	47a0      	blx	r4
          cnt_info++;
  40050e:	1c71      	adds	r1, r6, #1
          write_byte_eeprom(ADDR_EEP(cntUpdate_info),         cnt_info);   
  400510:	b2c9      	uxtb	r1, r1
  400512:	203a      	movs	r0, #58	; 0x3a
  400514:	4b05      	ldr	r3, [pc, #20]	; (40052c <RemoveDigitAccessory+0xf4>)
  400516:	4798      	blx	r3
          countdown_Update_EepromToShadow = 0;  // aggiorniamo velocemente la eeprom.            
  400518:	2200      	movs	r2, #0
  40051a:	4b08      	ldr	r3, [pc, #32]	; (40053c <RemoveDigitAccessory+0x104>)
  40051c:	701a      	strb	r2, [r3, #0]
  40051e:	e7d1      	b.n	4004c4 <RemoveDigitAccessory+0x8c>
  400520:	200013ac 	.word	0x200013ac
  400524:	0040024d 	.word	0x0040024d
  400528:	0040a26d 	.word	0x0040a26d
  40052c:	0040a1fd 	.word	0x0040a1fd
  400530:	0040b725 	.word	0x0040b725
  400534:	0040a279 	.word	0x0040a279
  400538:	0040a215 	.word	0x0040a215
  40053c:	20000043 	.word	0x20000043

00400540 <read_Access_clima>:
//  [00]: 7.HD_LinkErr, 6.NO_Press, 5.ErrorSize, 4.Ta_OvRange, 3.FaultElect, 2.Tw_OvRange, 1.NTCwaterKO, 0.NTCair_KO 
//  [01]: 7.CWD_LinkEr, 6.- - - - , 5.ErrorSize, 4.Ta_OvRange, 3.FaultElect, 2.Tw_OvRange, 1.NTCwaterKo, 0.NTCair_KO 
//  [02]: 7.PHD_LinkEr, 6.NO_Press, 5.ErrorSize, 4.Ta_OvRange, 3.FaultElect, 2.Tw_OvRange, 1.NTCwaterKo, 0.NTCair_KO 
//----------------------------------------------------------------------------------------------
Byte read_Access_clima(byte addrSlave, byte iAcc, byte byte_event, byte bit_event, byte msk_clear_event, byte msk_event_poll)
{
  400540:	b5f0      	push	{r4, r5, r6, r7, lr}
  400542:	b085      	sub	sp, #20
  400544:	460c      	mov	r4, r1
  400546:	4615      	mov	r5, r2
  400548:	461f      	mov	r7, r3
   byte risp = 0, byte_alarm = 0;
   byte buff_Data[12];
   int status_read_slave;
  
   status_read_slave = ReadSlave(addrSlave, 0x01, &buff_Data[0], 8);
  40054a:	2308      	movs	r3, #8
  40054c:	aa01      	add	r2, sp, #4
  40054e:	2101      	movs	r1, #1
  400550:	4e56      	ldr	r6, [pc, #344]	; (4006ac <read_Access_clima+0x16c>)
  400552:	47b0      	blx	r6
  
   if(status_read_slave == 1) 
  400554:	2801      	cmp	r0, #1
  400556:	d002      	beq.n	40055e <read_Access_clima+0x1e>
   byte risp = 0, byte_alarm = 0;
  400558:	2000      	movs	r0, #0
//  else
//      Serial_println1("Not install!!"); 
//--------- x_dbg      
  
   return risp;
}  
  40055a:	b005      	add	sp, #20
  40055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      sData.AccI2C[iAcc].cnt_persist_link_ko = 0;
  40055e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  400562:	4a53      	ldr	r2, [pc, #332]	; (4006b0 <read_Access_clima+0x170>)
  400564:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  400568:	2200      	movs	r2, #0
  40056a:	759a      	strb	r2, [r3, #22]
      sData.AccI2C[iAcc].cnt_link_ok++; 
  40056c:	7d1a      	ldrb	r2, [r3, #20]
  40056e:	3201      	adds	r2, #1
  400570:	751a      	strb	r2, [r3, #20]
      sData.AccI2C[iAcc].sts = (buff_Data[0] | STS_ACC_CONNECT);
  400572:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400576:	f042 0101 	orr.w	r1, r2, #1
  40057a:	71d9      	strb	r1, [r3, #7]
      if(sData.AccI2C[iAcc].sts  & STS_ACC_OPERATIVE) 
  40057c:	f012 0f02 	tst.w	r2, #2
  400580:	d124      	bne.n	4005cc <read_Access_clima+0x8c>
      byte_alarm |= ((buff_Data[1] << bit_event) & msk_event_poll);
  400582:	f89d 1005 	ldrb.w	r1, [sp, #5]
  400586:	40b9      	lsls	r1, r7
  400588:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  40058c:	4019      	ands	r1, r3
      if ((sData.AccI2C[iAcc].sts & STS_ACC_ELECT) && (sData.AccI2C[iAcc].status_comand & CMD_ON)) 
  40058e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  400592:	4a47      	ldr	r2, [pc, #284]	; (4006b0 <read_Access_clima+0x170>)
  400594:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  400598:	79db      	ldrb	r3, [r3, #7]
  40059a:	f013 0f08 	tst.w	r3, #8
  40059e:	d01d      	beq.n	4005dc <read_Access_clima+0x9c>
  4005a0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4005a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  4005a8:	7ddb      	ldrb	r3, [r3, #23]
  4005aa:	f013 0f01 	tst.w	r3, #1
  4005ae:	d015      	beq.n	4005dc <read_Access_clima+0x9c>
          if (byte_alarm & 0x40) 
  4005b0:	f011 0f40 	tst.w	r1, #64	; 0x40
  4005b4:	d00e      	beq.n	4005d4 <read_Access_clima+0x94>
             if (cnt_no_Pressure_for_Electrical_Heater < 9) {
  4005b6:	4b3f      	ldr	r3, [pc, #252]	; (4006b4 <read_Access_clima+0x174>)
  4005b8:	f9b3 3000 	ldrsh.w	r3, [r3]
  4005bc:	2b08      	cmp	r3, #8
  4005be:	dc10      	bgt.n	4005e2 <read_Access_clima+0xa2>
               cnt_no_Pressure_for_Electrical_Heater++; 
  4005c0:	3301      	adds	r3, #1
  4005c2:	4a3c      	ldr	r2, [pc, #240]	; (4006b4 <read_Access_clima+0x174>)
  4005c4:	8013      	strh	r3, [r2, #0]
               byte_alarm &= ~0x40;
  4005c6:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
  4005ca:	e00a      	b.n	4005e2 <read_Access_clima+0xa2>
         TAG_DigitAccessoryOperating(iAcc);                 // segnaliamo che è connesso e operativo     
  4005cc:	4620      	mov	r0, r4
  4005ce:	4b3a      	ldr	r3, [pc, #232]	; (4006b8 <read_Access_clima+0x178>)
  4005d0:	4798      	blx	r3
  4005d2:	e7d6      	b.n	400582 <read_Access_clima+0x42>
             cnt_no_Pressure_for_Electrical_Heater = 0;       
  4005d4:	2200      	movs	r2, #0
  4005d6:	4b37      	ldr	r3, [pc, #220]	; (4006b4 <read_Access_clima+0x174>)
  4005d8:	801a      	strh	r2, [r3, #0]
  4005da:	e002      	b.n	4005e2 <read_Access_clima+0xa2>
        cnt_no_Pressure_for_Electrical_Heater = 0; 
  4005dc:	2200      	movs	r2, #0
  4005de:	4b35      	ldr	r3, [pc, #212]	; (4006b4 <read_Access_clima+0x174>)
  4005e0:	801a      	strh	r2, [r3, #0]
      sData.Events[byte_event] = byte_alarm;
  4005e2:	4b33      	ldr	r3, [pc, #204]	; (4006b0 <read_Access_clima+0x170>)
  4005e4:	441d      	add	r5, r3
  4005e6:	f885 11f7 	strb.w	r1, [r5, #503]	; 0x1f7
      sData.AccI2C[iAcc].measure1 = (word)(((word)buff_Data[3] << 8) | buff_Data[2]);   // misura: T_Air
  4005ea:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
  4005ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  4005f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
  4005f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
  4005fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4005fe:	f8a3 2009 	strh.w	r2, [r3, #9]
      sData.AccI2C[iAcc].measure2 = (word)(((word)buff_Data[5] << 8) | buff_Data[4]);   // misura: (HWD: Twater / EHD:proximity)
  400602:	f89d 1009 	ldrb.w	r1, [sp, #9]
  400606:	f89d 2008 	ldrb.w	r2, [sp, #8]
  40060a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  40060e:	f8a3 200b 	strh.w	r2, [r3, #11]
      sData.AccI2C[iAcc].info = buff_Data[7] & 0x0F;
  400612:	f89d 200b 	ldrb.w	r2, [sp, #11]
  400616:	f002 020f 	and.w	r2, r2, #15
  40061a:	749a      	strb	r2, [r3, #18]
      if(iAcc == ACC_I2C_PREHEATER) {
  40061c:	2c02      	cmp	r4, #2
  40061e:	d017      	beq.n	400650 <read_Access_clima+0x110>
      if ((buff_Data[6] != 0xFF) && (buff_Data[6] != 3)) {     
  400620:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400624:	2bff      	cmp	r3, #255	; 0xff
  400626:	d03b      	beq.n	4006a0 <read_Access_clima+0x160>
  400628:	2b03      	cmp	r3, #3
  40062a:	d039      	beq.n	4006a0 <read_Access_clima+0x160>
         sData.AccI2C[iAcc].data = buff_Data[6];  
  40062c:	4920      	ldr	r1, [pc, #128]	; (4006b0 <read_Access_clima+0x170>)
  40062e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
  400632:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  400636:	7453      	strb	r3, [r2, #17]
         if(sData.AccI2C[iAcc].data != sData.size_unit) 
  400638:	884a      	ldrh	r2, [r1, #2]
  40063a:	429a      	cmp	r2, r3
            InsertAlarm(ALM_EHD_SIZE + (iAcc * 8));
  40063c:	ea4f 00c4 	mov.w	r0, r4, lsl #3
  400640:	f100 0005 	add.w	r0, r0, #5
  400644:	bf14      	ite	ne
  400646:	4b1d      	ldrne	r3, [pc, #116]	; (4006bc <read_Access_clima+0x17c>)
            RemoveAlarm(ALM_EHD_SIZE + (iAcc * 8)); 
  400648:	4b1d      	ldreq	r3, [pc, #116]	; (4006c0 <read_Access_clima+0x180>)
  40064a:	4798      	blx	r3
      risp = 1; 
  40064c:	2001      	movs	r0, #1
  40064e:	e784      	b.n	40055a <read_Access_clima+0x1a>
          if (sData.AccI2C[iAcc].info == 6)
  400650:	2a06      	cmp	r2, #6
  400652:	d00d      	beq.n	400670 <read_Access_clima+0x130>
          else if (sData.AccI2C[iAcc].info == 5) 
  400654:	2a05      	cmp	r2, #5
  400656:	d011      	beq.n	40067c <read_Access_clima+0x13c>
          else if (sData.AccI2C[iAcc].info == 4)  
  400658:	2a04      	cmp	r2, #4
  40065a:	d015      	beq.n	400688 <read_Access_clima+0x148>
          else if (sData.AccI2C[iAcc].info == 3) 
  40065c:	2a03      	cmp	r2, #3
  40065e:	d019      	beq.n	400694 <read_Access_clima+0x154>
          else if (sData.AccI2C[iAcc].info == 2)
  400660:	2a02      	cmp	r2, #2
  400662:	d1dd      	bne.n	400620 <read_Access_clima+0xe0>
             sData.AccI2C[iAcc].measure1 = sData.measure_Temp[I_PROBE_FRESH];
  400664:	4b12      	ldr	r3, [pc, #72]	; (4006b0 <read_Access_clima+0x170>)
  400666:	f9b3 21cd 	ldrsh.w	r2, [r3, #461]	; 0x1cd
  40066a:	f8a3 202d 	strh.w	r2, [r3, #45]	; 0x2d
  40066e:	e7d7      	b.n	400620 <read_Access_clima+0xe0>
             sData.AccI2C[iAcc].measure1 = sData.measure_Temp[I_PROBE_EXHAUST];
  400670:	4b0f      	ldr	r3, [pc, #60]	; (4006b0 <read_Access_clima+0x170>)
  400672:	f9b3 21d3 	ldrsh.w	r2, [r3, #467]	; 0x1d3
  400676:	f8a3 202d 	strh.w	r2, [r3, #45]	; 0x2d
  40067a:	e7d1      	b.n	400620 <read_Access_clima+0xe0>
             sData.AccI2C[iAcc].measure1 = sData.measure_Temp[I_PROBE_EXHAUST]; 
  40067c:	4b0c      	ldr	r3, [pc, #48]	; (4006b0 <read_Access_clima+0x170>)
  40067e:	f9b3 21d3 	ldrsh.w	r2, [r3, #467]	; 0x1d3
  400682:	f8a3 202d 	strh.w	r2, [r3, #45]	; 0x2d
  400686:	e7cb      	b.n	400620 <read_Access_clima+0xe0>
             sData.AccI2C[iAcc].measure1 = sData.measure_Temp[I_PROBE_SUPPLY];   
  400688:	4b09      	ldr	r3, [pc, #36]	; (4006b0 <read_Access_clima+0x170>)
  40068a:	f9b3 21d1 	ldrsh.w	r2, [r3, #465]	; 0x1d1
  40068e:	f8a3 202d 	strh.w	r2, [r3, #45]	; 0x2d
  400692:	e7c5      	b.n	400620 <read_Access_clima+0xe0>
             sData.AccI2C[iAcc].measure1 = sData.measure_Temp[I_PROBE_RETURN];             
  400694:	4b06      	ldr	r3, [pc, #24]	; (4006b0 <read_Access_clima+0x170>)
  400696:	f9b3 21cf 	ldrsh.w	r2, [r3, #463]	; 0x1cf
  40069a:	f8a3 202d 	strh.w	r2, [r3, #45]	; 0x2d
  40069e:	e7bf      	b.n	400620 <read_Access_clima+0xe0>
         RemoveAlarm(ALM_EHD_SIZE + (iAcc * 8)); 
  4006a0:	00e0      	lsls	r0, r4, #3
  4006a2:	3005      	adds	r0, #5
  4006a4:	4b06      	ldr	r3, [pc, #24]	; (4006c0 <read_Access_clima+0x180>)
  4006a6:	4798      	blx	r3
      risp = 1; 
  4006a8:	2001      	movs	r0, #1
  4006aa:	e756      	b.n	40055a <read_Access_clima+0x1a>
  4006ac:	00403e0d 	.word	0x00403e0d
  4006b0:	200013ac 	.word	0x200013ac
  4006b4:	20000e68 	.word	0x20000e68
  4006b8:	00400215 	.word	0x00400215
  4006bc:	00403555 	.word	0x00403555
  4006c0:	004035ad 	.word	0x004035ad

004006c4 <read_Access_Dxd>:
//   007        R/W        1      <info>      'W' = FUNZ_RISCALDO, 'S' = FUNZ_RAFFREDDO
//   008        R/W        1      <data>      valore regolatore 0-10V ,  100 = 10.0V  0 = 0.0V        
//
//---------------------------------------------------------------------------------------------              
Byte read_Access_Dxd(byte addrSlave, byte iAcc, byte byte_event, byte bit_event, byte msk_clear_event, byte msk_event_poll) 
{
  4006c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4006c6:	b085      	sub	sp, #20
  4006c8:	460d      	mov	r5, r1
  4006ca:	4616      	mov	r6, r2
  4006cc:	461f      	mov	r7, r3
   byte buff_Data[10];
   byte status_read_slave = 0;

      
   // leggiamo: sts, alarms, Measures 1 & 2, info 
   status_read_slave = ReadSlave(addrSlave, 0x01, &buff_Data[1], 8); // il byte 0 è dedicato ai comandi
  4006ce:	2308      	movs	r3, #8
  4006d0:	f10d 0205 	add.w	r2, sp, #5
  4006d4:	2101      	movs	r1, #1
  4006d6:	4c2e      	ldr	r4, [pc, #184]	; (400790 <read_Access_Dxd+0xcc>)
  4006d8:	47a0      	blx	r4
  4006da:	b2c4      	uxtb	r4, r0
  
   if(status_read_slave == 1) 
  4006dc:	2c01      	cmp	r4, #1
  4006de:	d003      	beq.n	4006e8 <read_Access_Dxd+0x24>
   byte risp = 0, byte_alarm = 0;
  4006e0:	2400      	movs	r4, #0
          sData.RegDXD.countdown_aligns_val = 0;

    }
    
    return risp;
}
  4006e2:	4620      	mov	r0, r4
  4006e4:	b005      	add	sp, #20
  4006e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      sData.AccI2C[iAcc].cnt_persist_link_ko = 0;
  4006e8:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
  4006ec:	4a29      	ldr	r2, [pc, #164]	; (400794 <read_Access_Dxd+0xd0>)
  4006ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  4006f2:	2200      	movs	r2, #0
  4006f4:	759a      	strb	r2, [r3, #22]
      sData.AccI2C[iAcc].cnt_link_ok++; 
  4006f6:	7d1a      	ldrb	r2, [r3, #20]
  4006f8:	3201      	adds	r2, #1
  4006fa:	751a      	strb	r2, [r3, #20]
      sData.AccI2C[iAcc].sts = (buff_Data[1] | STS_ACC_CONNECT);
  4006fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400700:	f042 0101 	orr.w	r1, r2, #1
  400704:	71d9      	strb	r1, [r3, #7]
      if(buff_Data[1] & STS_DEFROST_ON)
  400706:	f012 0f10 	tst.w	r2, #16
        sData.RegDXD.defrost_on = 1;
  40070a:	bf14      	ite	ne
  40070c:	2101      	movne	r1, #1
        sData.RegDXD.defrost_on = 0;  
  40070e:	2100      	moveq	r1, #0
  400710:	4b20      	ldr	r3, [pc, #128]	; (400794 <read_Access_Dxd+0xd0>)
  400712:	f883 11a8 	strb.w	r1, [r3, #424]	; 0x1a8
      if(sData.AccI2C[iAcc].sts  & STS_ACC_OPERATIVE) 
  400716:	f012 0f02 	tst.w	r2, #2
  40071a:	d12b      	bne.n	400774 <read_Access_Dxd+0xb0>
      sData.Events[byte_event] |= byte_alarm;
  40071c:	4a1d      	ldr	r2, [pc, #116]	; (400794 <read_Access_Dxd+0xd0>)
  40071e:	4416      	add	r6, r2
      byte_alarm  = ((buff_Data[2] << bit_event) & msk_event_poll);
  400720:	f89d 3006 	ldrb.w	r3, [sp, #6]
  400724:	40bb      	lsls	r3, r7
  400726:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
  40072a:	400b      	ands	r3, r1
      sData.Events[byte_event] &= msk_clear_event;
  40072c:	f896 01f7 	ldrb.w	r0, [r6, #503]	; 0x1f7
  400730:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
  400734:	4001      	ands	r1, r0
      sData.Events[byte_event] |= byte_alarm;
  400736:	430b      	orrs	r3, r1
  400738:	f886 31f7 	strb.w	r3, [r6, #503]	; 0x1f7
      sData.AccI2C[iAcc].info  = buff_Data[7];
  40073c:	00eb      	lsls	r3, r5, #3
  40073e:	1959      	adds	r1, r3, r5
  400740:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  400744:	f89d 000b 	ldrb.w	r0, [sp, #11]
  400748:	7488      	strb	r0, [r1, #18]
      sData.AccI2C[iAcc].data  = buff_Data[8];
  40074a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40074e:	441d      	add	r5, r3
  400750:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  400754:	7469      	strb	r1, [r5, #17]
      if(sData.RegDXD.val_0_10V != sData.AccI2C[iAcc].data) 
  400756:	f892 31a5 	ldrb.w	r3, [r2, #421]	; 0x1a5
  40075a:	428b      	cmp	r3, r1
  40075c:	d012      	beq.n	400784 <read_Access_Dxd+0xc0>
          if(sData.RegDXD.countdown_aligns_val++ >= 2) {
  40075e:	f892 31a6 	ldrb.w	r3, [r2, #422]	; 0x1a6
  400762:	2b01      	cmp	r3, #1
  400764:	d90a      	bls.n	40077c <read_Access_Dxd+0xb8>
            sData.RegDXD.countdown_aligns_val = 0;
  400766:	4b0b      	ldr	r3, [pc, #44]	; (400794 <read_Access_Dxd+0xd0>)
  400768:	2200      	movs	r2, #0
  40076a:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
            sData.RegDXD.val_0_10V = sData.AccI2C[iAcc].data;
  40076e:	f883 11a5 	strb.w	r1, [r3, #421]	; 0x1a5
  400772:	e7b6      	b.n	4006e2 <read_Access_Dxd+0x1e>
         TAG_DigitAccessoryOperating(iAcc);                 // segnaliamo che è connesso e operativo     
  400774:	4628      	mov	r0, r5
  400776:	4b08      	ldr	r3, [pc, #32]	; (400798 <read_Access_Dxd+0xd4>)
  400778:	4798      	blx	r3
  40077a:	e7cf      	b.n	40071c <read_Access_Dxd+0x58>
          if(sData.RegDXD.countdown_aligns_val++ >= 2) {
  40077c:	3301      	adds	r3, #1
  40077e:	f882 31a6 	strb.w	r3, [r2, #422]	; 0x1a6
  400782:	e7ae      	b.n	4006e2 <read_Access_Dxd+0x1e>
          sData.RegDXD.countdown_aligns_val = 0;
  400784:	2200      	movs	r2, #0
  400786:	4b03      	ldr	r3, [pc, #12]	; (400794 <read_Access_Dxd+0xd0>)
  400788:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
  40078c:	e7a9      	b.n	4006e2 <read_Access_Dxd+0x1e>
  40078e:	bf00      	nop
  400790:	00403e0d 	.word	0x00403e0d
  400794:	200013ac 	.word	0x200013ac
  400798:	00400215 	.word	0x00400215

0040079c <write_func_compressor_Dxd>:
//
//  Return: = 0 -> link KO
//          = 1 -> Scrittura riuscita
//--------------------------------------------------------------------------------------------
byte write_func_compressor_Dxd(void) 
{
  40079c:	b508      	push	{r3, lr}
   byte risp = 0;
   
   if((sData.RegDXD.func_compressor != 'W') && (sData.RegDXD.func_compressor != 'S'))
  40079e:	4b1a      	ldr	r3, [pc, #104]	; (400808 <write_func_compressor_Dxd+0x6c>)
  4007a0:	f893 21a7 	ldrb.w	r2, [r3, #423]	; 0x1a7
  4007a4:	f002 03fb 	and.w	r3, r2, #251	; 0xfb
  4007a8:	2b53      	cmp	r3, #83	; 0x53
  4007aa:	d001      	beq.n	4007b0 <write_func_compressor_Dxd+0x14>
      return 0; 
  4007ac:	2000      	movs	r0, #0
  4007ae:	bd08      	pop	{r3, pc}
//---------------------------------------x_dbg
//   Serial_println1(" ");
//   Serial_println1("** WR func.Cmp **");
//---------------------------------------x_dbg
   
   if(WriteSlave(ADDR_DXD, 0x07, sData.RegDXD.func_compressor) == 1) {
  4007b0:	2107      	movs	r1, #7
  4007b2:	2019      	movs	r0, #25
  4007b4:	4b15      	ldr	r3, [pc, #84]	; (40080c <write_func_compressor_Dxd+0x70>)
  4007b6:	4798      	blx	r3
  4007b8:	2801      	cmp	r0, #1
  4007ba:	d013      	beq.n	4007e4 <write_func_compressor_Dxd+0x48>
      sData.AccI2C[ACC_I2C_DXD].info = sData.RegDXD.func_compressor;
      sData.RegDXD.processor_I2C &= ~CHANGE_FUNC_COMPRESS;
      sData.RegDXD.cnt_link_err_write = 0;
   }else {
      // dopo 3 tentativi di scrittura, cancella la pendenza.
      if(++sData.RegDXD.cnt_link_err_write > 3) {
  4007bc:	4a12      	ldr	r2, [pc, #72]	; (400808 <write_func_compressor_Dxd+0x6c>)
  4007be:	f892 31a9 	ldrb.w	r3, [r2, #425]	; 0x1a9
  4007c2:	3301      	adds	r3, #1
  4007c4:	b2db      	uxtb	r3, r3
  4007c6:	f882 31a9 	strb.w	r3, [r2, #425]	; 0x1a9
  4007ca:	2b03      	cmp	r3, #3
  4007cc:	d919      	bls.n	400802 <write_func_compressor_Dxd+0x66>
        sData.RegDXD.processor_I2C &= ~CHANGE_FUNC_COMPRESS;
  4007ce:	4613      	mov	r3, r2
  4007d0:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
  4007d4:	f022 0201 	bic.w	r2, r2, #1
  4007d8:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
        sData.RegDXD.cnt_link_err_write = 0;
  4007dc:	2000      	movs	r0, #0
  4007de:	f883 01a9 	strb.w	r0, [r3, #425]	; 0x1a9
  4007e2:	bd08      	pop	{r3, pc}
      sData.AccI2C[ACC_I2C_DXD].info = sData.RegDXD.func_compressor;
  4007e4:	4b08      	ldr	r3, [pc, #32]	; (400808 <write_func_compressor_Dxd+0x6c>)
  4007e6:	f893 21a7 	ldrb.w	r2, [r3, #423]	; 0x1a7
  4007ea:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
      sData.RegDXD.processor_I2C &= ~CHANGE_FUNC_COMPRESS;
  4007ee:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
  4007f2:	f022 0201 	bic.w	r2, r2, #1
  4007f6:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
      sData.RegDXD.cnt_link_err_write = 0;
  4007fa:	2200      	movs	r2, #0
  4007fc:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
  400800:	bd08      	pop	{r3, pc}
   byte risp = 0;
  400802:	2000      	movs	r0, #0
      }        
   }  
     
   return risp;  
}   
  400804:	bd08      	pop	{r3, pc}
  400806:	bf00      	nop
  400808:	200013ac 	.word	0x200013ac
  40080c:	00403cdd 	.word	0x00403cdd

00400810 <write_regulate_Dxd>:
//
//  Return: = 0 -> link KO
//          = 1 -> Scrittura riuscita
//--------------------------------------------------------------------------------------------
byte write_regulate_Dxd(void) 
{
  400810:	b508      	push	{r3, lr}
//---------------------------------------x_dbg
//   Serial_println1(" ");
//   Serial_println1("** WR Regulate Cmp **");
//---------------------------------------x_dbg
 
   if(WriteSlave(ADDR_DXD, 0x08, sData.RegDXD.val_0_10V) == 1) {
  400812:	4b1c      	ldr	r3, [pc, #112]	; (400884 <write_regulate_Dxd+0x74>)
  400814:	f893 21a5 	ldrb.w	r2, [r3, #421]	; 0x1a5
  400818:	2108      	movs	r1, #8
  40081a:	2019      	movs	r0, #25
  40081c:	4b1a      	ldr	r3, [pc, #104]	; (400888 <write_regulate_Dxd+0x78>)
  40081e:	4798      	blx	r3
  400820:	2801      	cmp	r0, #1
  400822:	d013      	beq.n	40084c <write_regulate_Dxd+0x3c>
     
     sData.RegDXD.processor_I2C &= ~CHANGE_VAL_0_10V;
     sData.RegDXD.cnt_link_err_write = 0;
                
   }else {
      if(++sData.RegDXD.cnt_link_err_write > 3) {
  400824:	4a17      	ldr	r2, [pc, #92]	; (400884 <write_regulate_Dxd+0x74>)
  400826:	f892 31a9 	ldrb.w	r3, [r2, #425]	; 0x1a9
  40082a:	3301      	adds	r3, #1
  40082c:	b2db      	uxtb	r3, r3
  40082e:	f882 31a9 	strb.w	r3, [r2, #425]	; 0x1a9
  400832:	2b03      	cmp	r3, #3
  400834:	d923      	bls.n	40087e <write_regulate_Dxd+0x6e>
        sData.RegDXD.processor_I2C &= ~CHANGE_VAL_0_10V;
  400836:	4613      	mov	r3, r2
  400838:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
  40083c:	f022 0202 	bic.w	r2, r2, #2
  400840:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
        sData.RegDXD.cnt_link_err_write = 0;
  400844:	2000      	movs	r0, #0
  400846:	f883 01a9 	strb.w	r0, [r3, #425]	; 0x1a9
  40084a:	bd08      	pop	{r3, pc}
     sData.AccI2C[ACC_I2C_DXD].data = sData.RegDXD.val_0_10V;
  40084c:	4b0d      	ldr	r3, [pc, #52]	; (400884 <write_regulate_Dxd+0x74>)
  40084e:	f893 21a5 	ldrb.w	r2, [r3, #421]	; 0x1a5
  400852:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
     if(DigitAccessoryOn(ACC_I2C_DXD) == 0) 
  400856:	200c      	movs	r0, #12
  400858:	4b0c      	ldr	r3, [pc, #48]	; (40088c <write_regulate_Dxd+0x7c>)
  40085a:	4798      	blx	r3
  40085c:	b158      	cbz	r0, 400876 <write_regulate_Dxd+0x66>
     sData.RegDXD.processor_I2C &= ~CHANGE_VAL_0_10V;
  40085e:	4b09      	ldr	r3, [pc, #36]	; (400884 <write_regulate_Dxd+0x74>)
  400860:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
  400864:	f022 0202 	bic.w	r2, r2, #2
  400868:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
     sData.RegDXD.cnt_link_err_write = 0;
  40086c:	2200      	movs	r2, #0
  40086e:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
     risp = 1; // tutto ok
  400872:	2001      	movs	r0, #1
  400874:	bd08      	pop	{r3, pc}
       TAG_DigitAccessoryOn(ACC_I2C_DXD);        
  400876:	200c      	movs	r0, #12
  400878:	4b05      	ldr	r3, [pc, #20]	; (400890 <write_regulate_Dxd+0x80>)
  40087a:	4798      	blx	r3
  40087c:	e7ef      	b.n	40085e <write_regulate_Dxd+0x4e>
   byte risp = 0;
  40087e:	2000      	movs	r0, #0
      }  
   }  
     
   return risp;  
}   
  400880:	bd08      	pop	{r3, pc}
  400882:	bf00      	nop
  400884:	200013ac 	.word	0x200013ac
  400888:	00403cdd 	.word	0x00403cdd
  40088c:	00400151 	.word	0x00400151
  400890:	0040019d 	.word	0x0040019d

00400894 <read_DSC>:
int Dsc_Data_Size = 0;
byte Write_Buffer[770];
byte Write_To_Dsc = 0;

byte read_DSC(byte addrSlave, byte iAcc, byte byte_event, byte bit_event, byte msk_clear_event)
{
  400894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400898:	b085      	sub	sp, #20
  40089a:	4607      	mov	r7, r0
  40089c:	460d      	mov	r5, r1
  byte Byte1;
  byte Byte2;
  byte *Pointer1 = NULL;
  int Index;
  
    statusBus = ReadSlave(addrSlave, 0x01, &buff_Data[0], 1);
  40089e:	2301      	movs	r3, #1
  4008a0:	aa01      	add	r2, sp, #4
  4008a2:	4619      	mov	r1, r3
  4008a4:	4c2a      	ldr	r4, [pc, #168]	; (400950 <read_DSC+0xbc>)
  4008a6:	47a0      	blx	r4
    
    if(statusBus == 1) 
  4008a8:	2801      	cmp	r0, #1
  4008aa:	d005      	beq.n	4008b8 <read_DSC+0x24>
        TAG_DigitAccessoryOperating(iAcc);                 // we point out that it is connected and operational     
        sData.AccI2C[iAcc].sts &= 0xF3; 
        sData.AccI2C[iAcc].sts |= (buff_Data[0] & 0x04);   // Let's add the status of: b [2] 1 = Power_ON / 0 = Power_SAVE
    }
    else{
      Dsc_Data_Size = 0;
  4008ac:	2000      	movs	r0, #0
  4008ae:	4b29      	ldr	r3, [pc, #164]	; (400954 <read_DSC+0xc0>)
  4008b0:	6018      	str	r0, [r3, #0]
         else
           risp = 1;      
       } 
   
  return risp;
}
  4008b2:	b005      	add	sp, #20
  4008b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sData.AccI2C[iAcc].cnt_persist_link_ko = 0;
  4008b8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 400968 <read_DSC+0xd4>
  4008bc:	00ee      	lsls	r6, r5, #3
  4008be:	1974      	adds	r4, r6, r5
  4008c0:	eb08 0444 	add.w	r4, r8, r4, lsl #1
  4008c4:	f04f 0900 	mov.w	r9, #0
  4008c8:	f884 9016 	strb.w	r9, [r4, #22]
        sData.AccI2C[iAcc].cnt_link_ok++;               
  4008cc:	7d23      	ldrb	r3, [r4, #20]
  4008ce:	3301      	adds	r3, #1
  4008d0:	7523      	strb	r3, [r4, #20]
        TAG_DigitAccessoryOperating(iAcc);                 // we point out that it is connected and operational     
  4008d2:	4628      	mov	r0, r5
  4008d4:	4b20      	ldr	r3, [pc, #128]	; (400958 <read_DSC+0xc4>)
  4008d6:	4798      	blx	r3
        sData.AccI2C[iAcc].sts &= 0xF3; 
  4008d8:	79e3      	ldrb	r3, [r4, #7]
  4008da:	f023 030c 	bic.w	r3, r3, #12
        sData.AccI2C[iAcc].sts |= (buff_Data[0] & 0x04);   // Let's add the status of: b [2] 1 = Power_ON / 0 = Power_SAVE
  4008de:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4008e2:	f002 0204 	and.w	r2, r2, #4
  4008e6:	4313      	orrs	r3, r2
  4008e8:	71e3      	strb	r3, [r4, #7]
  Byte1 = sData.measure_CO2_max >> 8;
  4008ea:	f9b8 41bb 	ldrsh.w	r4, [r8, #443]	; 0x1bb
  statusBus = WriteSlave(addrSlave, 0, Byte1);
  4008ee:	f3c4 2207 	ubfx	r2, r4, #8, #8
  4008f2:	4649      	mov	r1, r9
  4008f4:	4638      	mov	r0, r7
  4008f6:	4b19      	ldr	r3, [pc, #100]	; (40095c <read_DSC+0xc8>)
  4008f8:	4798      	blx	r3
  if(statusBus != 1)
  4008fa:	2801      	cmp	r0, #1
  4008fc:	d005      	beq.n	40090a <read_DSC+0x76>
     Dsc_Data_Size = 0;
  4008fe:	2000      	movs	r0, #0
  400900:	4b14      	ldr	r3, [pc, #80]	; (400954 <read_DSC+0xc0>)
  400902:	6018      	str	r0, [r3, #0]
     Write_To_Dsc = 0;
  400904:	4b16      	ldr	r3, [pc, #88]	; (400960 <read_DSC+0xcc>)
  400906:	7018      	strb	r0, [r3, #0]
     return risp = 0;
  400908:	e7d3      	b.n	4008b2 <read_DSC+0x1e>
  statusBus = WriteSlave(addrSlave, 1, Byte2);
  40090a:	b2e2      	uxtb	r2, r4
  40090c:	2101      	movs	r1, #1
  40090e:	4638      	mov	r0, r7
  400910:	4b12      	ldr	r3, [pc, #72]	; (40095c <read_DSC+0xc8>)
  400912:	4798      	blx	r3
  if(statusBus != 1)
  400914:	2801      	cmp	r0, #1
  400916:	d005      	beq.n	400924 <read_DSC+0x90>
     Dsc_Data_Size = 0;
  400918:	2000      	movs	r0, #0
  40091a:	4b0e      	ldr	r3, [pc, #56]	; (400954 <read_DSC+0xc0>)
  40091c:	6018      	str	r0, [r3, #0]
     Write_To_Dsc = 0;
  40091e:	4b10      	ldr	r3, [pc, #64]	; (400960 <read_DSC+0xcc>)
  400920:	7018      	strb	r0, [r3, #0]
     return risp = 0;
  400922:	e7c6      	b.n	4008b2 <read_DSC+0x1e>
  400924:	2400      	movs	r4, #0
  400926:	4d0f      	ldr	r5, [pc, #60]	; (400964 <read_DSC+0xd0>)
         statusBus = WriteSlave(addrSlave, Index, *Pointer1);
  400928:	4e0c      	ldr	r6, [pc, #48]	; (40095c <read_DSC+0xc8>)
  40092a:	f815 2b01 	ldrb.w	r2, [r5], #1
  40092e:	b2e1      	uxtb	r1, r4
  400930:	4638      	mov	r0, r7
  400932:	47b0      	blx	r6
         if(statusBus != 1)
  400934:	2801      	cmp	r0, #1
  400936:	d104      	bne.n	400942 <read_DSC+0xae>
  for ( Index = 0; Index < sizeof (S_CLOCK_WEEK); Index++ )
  400938:	3401      	adds	r4, #1
  40093a:	2c08      	cmp	r4, #8
  40093c:	d1f5      	bne.n	40092a <read_DSC+0x96>
  return risp;
  40093e:	2001      	movs	r0, #1
  400940:	e7b7      	b.n	4008b2 <read_DSC+0x1e>
             Dsc_Data_Size = 0;
  400942:	2000      	movs	r0, #0
  400944:	4b03      	ldr	r3, [pc, #12]	; (400954 <read_DSC+0xc0>)
  400946:	6018      	str	r0, [r3, #0]
             Write_To_Dsc = 0;
  400948:	4b05      	ldr	r3, [pc, #20]	; (400960 <read_DSC+0xcc>)
  40094a:	7018      	strb	r0, [r3, #0]
             return risp = 0;
  40094c:	e7b1      	b.n	4008b2 <read_DSC+0x1e>
  40094e:	bf00      	nop
  400950:	00403e0d 	.word	0x00403e0d
  400954:	20000ae4 	.word	0x20000ae4
  400958:	00400215 	.word	0x00400215
  40095c:	00403cdd 	.word	0x00403cdd
  400960:	20000aee 	.word	0x20000aee
  400964:	2000173c 	.word	0x2000173c
  400968:	200013ac 	.word	0x200013ac

0040096c <read_Sensor_Air>:
//   [05]: 7.- - - -, 6.- - - - -  , 5.- - - - -, 4.- - - -, 3.S1_VOCLink  , 2.S1_VOC_KO , 1.- - - -, 0.SInt_VOC_KO                                         
//   [06]: 7.DPP_LinkE, 6.DPP_KO   , 5.- - - - -, 4.PCAF_LinkEr, 3.PCAF_KO , 2.- - - - - , 1.PCAP_LinkE, 0.PCAP_KO
//   [07]: 7.AWP_LinkE, 6.AWP_KO   , 5.- - - - -, 4.- - - - -  , 3.- - - - , 2.- - - - - , 1.PIR_LinkEr, 0.PIR_KO 
//---------------------------------------------------------------------------------------------
Byte read_Sensor_Air(byte addrSlave, byte iAcc, byte byte_event, byte bit_event, byte msk_clear_event)
{
  40096c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400970:	b084      	sub	sp, #16
  400972:	460c      	mov	r4, r1
  400974:	4616      	mov	r6, r2
  400976:	461f      	mov	r7, r3
  byte risp = 0, alarm=0;
  byte buff_Data[12];
  int statusBus;
   
  statusBus = ReadSlave(addrSlave, 0x01, &buff_Data[0], 11);
  400978:	230b      	movs	r3, #11
  40097a:	aa01      	add	r2, sp, #4
  40097c:	2101      	movs	r1, #1
  40097e:	4da6      	ldr	r5, [pc, #664]	; (400c18 <read_Sensor_Air+0x2ac>)
  400980:	47a8      	blx	r5
  
  if(statusBus == 1) 
  400982:	2801      	cmp	r0, #1
  400984:	d003      	beq.n	40098e <read_Sensor_Air+0x22>
  byte risp = 0, alarm=0;
  400986:	2000      	movs	r0, #0
#endif   //-------------------------------------- x_dbg    
 
  
   return risp;  
  
}  
  400988:	b004      	add	sp, #16
  40098a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sData.AccI2C[iAcc].cnt_persist_link_ko = 0;
  40098e:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
  400992:	4ba2      	ldr	r3, [pc, #648]	; (400c1c <read_Sensor_Air+0x2b0>)
  400994:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  400998:	2300      	movs	r3, #0
  40099a:	75ab      	strb	r3, [r5, #22]
      sData.AccI2C[iAcc].cnt_link_ok++;               
  40099c:	7d2b      	ldrb	r3, [r5, #20]
  40099e:	3301      	adds	r3, #1
  4009a0:	752b      	strb	r3, [r5, #20]
      TAG_DigitAccessoryOperating(iAcc);                 // segnaliamo che è connesso e operativo     
  4009a2:	4620      	mov	r0, r4
  4009a4:	4b9e      	ldr	r3, [pc, #632]	; (400c20 <read_Sensor_Air+0x2b4>)
  4009a6:	4798      	blx	r3
      sData.AccI2C[iAcc].sts &= 0xF3; 
  4009a8:	79eb      	ldrb	r3, [r5, #7]
  4009aa:	f023 030c 	bic.w	r3, r3, #12
      sData.AccI2C[iAcc].sts |= (buff_Data[0] & 0x04);   // Aggiungiamo lo stato di : b[2] 1=Power_ON /0=Power_SAVE
  4009ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4009b2:	f002 0204 	and.w	r2, r2, #4
  4009b6:	4313      	orrs	r3, r2
  4009b8:	71eb      	strb	r3, [r5, #7]
      sData.AccI2C[iAcc].measure1 = (word)(((word)buff_Data[3] << 8) | buff_Data[2]);   // misura: Sens Co2, RH, Voc
  4009ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
  4009be:	f89d 3006 	ldrb.w	r3, [sp, #6]
  4009c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4009c6:	b21b      	sxth	r3, r3
  4009c8:	f8a5 3009 	strh.w	r3, [r5, #9]
      sData.AccI2C[iAcc].measure2 = (word)(((word)buff_Data[5] << 8) | buff_Data[4]);   // misura: Temperature
  4009cc:	f89d 1009 	ldrb.w	r1, [sp, #9]
  4009d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
  4009d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4009d8:	b212      	sxth	r2, r2
  4009da:	f8a5 200b 	strh.w	r2, [r5, #11]
	  sData.AccI2C[iAcc].measure3 = (word)(((word)buff_Data[7] << 8) | buff_Data[6]);   // misura: RAW GAS
  4009de:	f89d 000b 	ldrb.w	r0, [sp, #11]
  4009e2:	f89d 100a 	ldrb.w	r1, [sp, #10]
  4009e6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  4009ea:	b209      	sxth	r1, r1
  4009ec:	f8a5 100d 	strh.w	r1, [r5, #13]
	  sData.AccI2C[iAcc].measure4 = (word)(((word)buff_Data[9] << 8) | buff_Data[8]);   // misura: RAW GAS
  4009f0:	f89d 000d 	ldrb.w	r0, [sp, #13]
  4009f4:	f89d c00c 	ldrb.w	ip, [sp, #12]
  4009f8:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
  4009fc:	fa0f fc8c 	sxth.w	ip, ip
  400a00:	f8a5 c00f 	strh.w	ip, [r5, #15]
      sData.AccI2C[iAcc].data     = buff_Data[10];      // info (probe: 0x01= Duct, 0x00= Ambient)
  400a04:	f89d e00e 	ldrb.w	lr, [sp, #14]
  400a08:	f885 e011 	strb.w	lr, [r5, #17]
      if (iAcc == ACC_I2C_CO2_1)
  400a0c:	2c03      	cmp	r4, #3
  400a0e:	d00c      	beq.n	400a2a <read_Sensor_Air+0xbe>
	  if (iAcc == ACC_I2C_CO2_2)
  400a10:	2c04      	cmp	r4, #4
  400a12:	d066      	beq.n	400ae2 <read_Sensor_Air+0x176>
      if(iAcc == ACC_I2C_AWP) {
  400a14:	2c08      	cmp	r4, #8
  400a16:	d11f      	bne.n	400a58 <read_Sensor_Air+0xec>
         alarm = ((buff_Data[1] >> 1) & 0x01);
  400a18:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400a1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
         if(!alarm) 
  400a20:	b9f3      	cbnz	r3, 400a60 <read_Sensor_Air+0xf4>
           sData.measure_Temp[I_PROBE_RETURN] = (int)sData.AccI2C[iAcc].measure2;    // Loop Chiuso: misura della temperatura del Sensore AWP  
  400a22:	497e      	ldr	r1, [pc, #504]	; (400c1c <read_Sensor_Air+0x2b0>)
  400a24:	f8a1 21cf 	strh.w	r2, [r1, #463]	; 0x1cf
  400a28:	e01a      	b.n	400a60 <read_Sensor_Air+0xf4>
		  if ( CO2_1_Average_Counter >= 1800000 ) // strore Co2 value every 30 min
  400a2a:	4a7e      	ldr	r2, [pc, #504]	; (400c24 <read_Sensor_Air+0x2b8>)
  400a2c:	6810      	ldr	r0, [r2, #0]
  400a2e:	4a7e      	ldr	r2, [pc, #504]	; (400c28 <read_Sensor_Air+0x2bc>)
  400a30:	4290      	cmp	r0, r2
  400a32:	d90c      	bls.n	400a4e <read_Sensor_Air+0xe2>
				CO2_1_Average_Counter = 0;
  400a34:	2000      	movs	r0, #0
  400a36:	4a7b      	ldr	r2, [pc, #492]	; (400c24 <read_Sensor_Air+0x2b8>)
  400a38:	6010      	str	r0, [r2, #0]
				if ( Index_CO2_1 < 48 ) // we have not yet reached 24 hours
  400a3a:	4a7c      	ldr	r2, [pc, #496]	; (400c2c <read_Sensor_Air+0x2c0>)
  400a3c:	7812      	ldrb	r2, [r2, #0]
  400a3e:	2a2f      	cmp	r2, #47	; 0x2f
  400a40:	d832      	bhi.n	400aa8 <read_Sensor_Air+0x13c>
					CO2_1_array[Index_CO2_1] =  sData.AccI2C[iAcc].measure1; // store CO2 value
  400a42:	487b      	ldr	r0, [pc, #492]	; (400c30 <read_Sensor_Air+0x2c4>)
  400a44:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
					Index_CO2_1++;
  400a48:	3201      	adds	r2, #1
  400a4a:	4b78      	ldr	r3, [pc, #480]	; (400c2c <read_Sensor_Air+0x2c0>)
  400a4c:	701a      	strb	r2, [r3, #0]
		  CO2_1_Raw_Gas_Value = ( sData.AccI2C[iAcc].measure3 & 0xFFFF) | (((long)sData.AccI2C[iAcc].measure4 << 16) & 0xFFFF0000);
  400a4e:	b289      	uxth	r1, r1
  400a50:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  400a54:	4b77      	ldr	r3, [pc, #476]	; (400c34 <read_Sensor_Air+0x2c8>)
  400a56:	6019      	str	r1, [r3, #0]
         alarm =  buff_Data[1] & 0x01;  // gestiamo dal sensore solo l'allarme di Sensore fuori campo. 
  400a58:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400a5c:	f003 0301 	and.w	r3, r3, #1
      sData.Events[byte_event]  |= (alarm << bit_event); 
  400a60:	496e      	ldr	r1, [pc, #440]	; (400c1c <read_Sensor_Air+0x2b0>)
  400a62:	440e      	add	r6, r1
      sData.Events[byte_event]  &= msk_clear_event;  
  400a64:	f896 01f7 	ldrb.w	r0, [r6, #503]	; 0x1f7
  400a68:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
  400a6c:	4002      	ands	r2, r0
      sData.Events[byte_event]  |= (alarm << bit_event); 
  400a6e:	fa03 f707 	lsl.w	r7, r3, r7
  400a72:	4317      	orrs	r7, r2
  400a74:	f886 71f7 	strb.w	r7, [r6, #503]	; 0x1f7
	  sData.AccI2C[iAcc].measure3 = ( sData.AccI2C[iAcc].data >> 1 ) & 0x7F;
  400a78:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  400a7c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  400a80:	ea4f 035e 	mov.w	r3, lr, lsr #1
  400a84:	f8a1 300d 	strh.w	r3, [r1, #13]
      if(sData.AccI2C[iAcc].data & 0x01) {         
  400a88:	f01e 0f01 	tst.w	lr, #1
  400a8c:	f000 808b 	beq.w	400ba6 <read_Sensor_Air+0x23a>
         if (iAcc == ACC_I2C_CO2_2) 
  400a90:	2c04      	cmp	r4, #4
  400a92:	d05b      	beq.n	400b4c <read_Sensor_Air+0x1e0>
         else if (iAcc == ACC_I2C_CO2_1) 
  400a94:	2c03      	cmp	r4, #3
  400a96:	d062      	beq.n	400b5e <read_Sensor_Air+0x1f2>
         else if (iAcc == ACC_I2C_RH_2) 
  400a98:	2c06      	cmp	r4, #6
  400a9a:	d069      	beq.n	400b70 <read_Sensor_Air+0x204>
         else if (iAcc == ACC_I2C_RH_1) 
  400a9c:	2c05      	cmp	r4, #5
  400a9e:	d070      	beq.n	400b82 <read_Sensor_Air+0x216>
         else if (iAcc == ACC_I2C_VOC) 
  400aa0:	2c07      	cmp	r4, #7
  400aa2:	d077      	beq.n	400b94 <read_Sensor_Air+0x228>
      risp = 1; 
  400aa4:	2001      	movs	r0, #1
  400aa6:	e76f      	b.n	400988 <read_Sensor_Air+0x1c>
					Index_CO2_1 = 0; // restart 24hour index to 0
  400aa8:	2200      	movs	r2, #0
  400aaa:	4b60      	ldr	r3, [pc, #384]	; (400c2c <read_Sensor_Air+0x2c0>)
  400aac:	701a      	strb	r2, [r3, #0]
					max = CO2_1_array[0];
  400aae:	4a60      	ldr	r2, [pc, #384]	; (400c30 <read_Sensor_Air+0x2c4>)
  400ab0:	f9b2 0000 	ldrsh.w	r0, [r2]
  400ab4:	4613      	mov	r3, r2
  400ab6:	f102 085e 	add.w	r8, r2, #94	; 0x5e
					min = CO2_1_array[0];
  400aba:	4605      	mov	r5, r0
						if (CO2_1_array[i] > max)
  400abc:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
  400ac0:	4290      	cmp	r0, r2
  400ac2:	bfb8      	it	lt
  400ac4:	4610      	movlt	r0, r2
  400ac6:	4295      	cmp	r5, r2
  400ac8:	bfa8      	it	ge
  400aca:	4615      	movge	r5, r2
					for (i = 1; i < 48; i++)
  400acc:	4598      	cmp	r8, r3
  400ace:	d1f5      	bne.n	400abc <read_Sensor_Air+0x150>
					if ( (max - min) <= 500 )
  400ad0:	1b40      	subs	r0, r0, r5
  400ad2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
						Clean_Event_Flag1 = true;
  400ad6:	bfd4      	ite	le
  400ad8:	2201      	movle	r2, #1
						Clean_Event_Flag1 = false;		
  400ada:	2200      	movgt	r2, #0
  400adc:	4b56      	ldr	r3, [pc, #344]	; (400c38 <read_Sensor_Air+0x2cc>)
  400ade:	701a      	strb	r2, [r3, #0]
  400ae0:	e7b5      	b.n	400a4e <read_Sensor_Air+0xe2>
		  if ( CO2_2_Average_Counter >= 1800000 ) // strore Co2 value every 30 min
  400ae2:	4a56      	ldr	r2, [pc, #344]	; (400c3c <read_Sensor_Air+0x2d0>)
  400ae4:	6810      	ldr	r0, [r2, #0]
  400ae6:	4a50      	ldr	r2, [pc, #320]	; (400c28 <read_Sensor_Air+0x2bc>)
  400ae8:	4290      	cmp	r0, r2
  400aea:	d90c      	bls.n	400b06 <read_Sensor_Air+0x19a>
			  CO2_2_Average_Counter = 0;
  400aec:	2000      	movs	r0, #0
  400aee:	4a53      	ldr	r2, [pc, #332]	; (400c3c <read_Sensor_Air+0x2d0>)
  400af0:	6010      	str	r0, [r2, #0]
			  if ( Index_CO2_2 < 48 ) // we have not yet reached 24 hours
  400af2:	4a53      	ldr	r2, [pc, #332]	; (400c40 <read_Sensor_Air+0x2d4>)
  400af4:	7812      	ldrb	r2, [r2, #0]
  400af6:	2a2f      	cmp	r2, #47	; 0x2f
  400af8:	d80b      	bhi.n	400b12 <read_Sensor_Air+0x1a6>
				  CO2_2_array[Index_CO2_2] =  sData.AccI2C[iAcc].measure1; // store CO2 value
  400afa:	4852      	ldr	r0, [pc, #328]	; (400c44 <read_Sensor_Air+0x2d8>)
  400afc:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				  Index_CO2_2++;
  400b00:	3201      	adds	r2, #1
  400b02:	4b4f      	ldr	r3, [pc, #316]	; (400c40 <read_Sensor_Air+0x2d4>)
  400b04:	701a      	strb	r2, [r3, #0]
		  CO2_2_Raw_Gas_Value = ( sData.AccI2C[iAcc].measure3 & 0xFFFF) | (((long)sData.AccI2C[iAcc].measure4 << 16) & 0xFFFF0000);
  400b06:	b289      	uxth	r1, r1
  400b08:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  400b0c:	4b4e      	ldr	r3, [pc, #312]	; (400c48 <read_Sensor_Air+0x2dc>)
  400b0e:	6019      	str	r1, [r3, #0]
  400b10:	e7a2      	b.n	400a58 <read_Sensor_Air+0xec>
				  Index_CO2_2 = 0; // restart 24hour index to 0
  400b12:	2200      	movs	r2, #0
  400b14:	4b4a      	ldr	r3, [pc, #296]	; (400c40 <read_Sensor_Air+0x2d4>)
  400b16:	701a      	strb	r2, [r3, #0]
				  max1 = CO2_2_array[0];
  400b18:	4a4a      	ldr	r2, [pc, #296]	; (400c44 <read_Sensor_Air+0x2d8>)
  400b1a:	f9b2 0000 	ldrsh.w	r0, [r2]
  400b1e:	4613      	mov	r3, r2
  400b20:	f102 085e 	add.w	r8, r2, #94	; 0x5e
				  min1 = CO2_2_array[0];
  400b24:	4605      	mov	r5, r0
					  if (CO2_2_array[i1] > max1)
  400b26:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
  400b2a:	4290      	cmp	r0, r2
  400b2c:	bfb8      	it	lt
  400b2e:	4610      	movlt	r0, r2
  400b30:	4295      	cmp	r5, r2
  400b32:	bfa8      	it	ge
  400b34:	4615      	movge	r5, r2
				  for (i1 = 1; i1 < 48; i1++)
  400b36:	4543      	cmp	r3, r8
  400b38:	d1f5      	bne.n	400b26 <read_Sensor_Air+0x1ba>
				  if ( (max1 - min1) <= 500 )
  400b3a:	1b40      	subs	r0, r0, r5
  400b3c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
					Clean_Event_Flag2 = true;
  400b40:	bfd4      	ite	le
  400b42:	2201      	movle	r2, #1
					Clean_Event_Flag2 = false;
  400b44:	2200      	movgt	r2, #0
  400b46:	4b41      	ldr	r3, [pc, #260]	; (400c4c <read_Sensor_Air+0x2e0>)
  400b48:	701a      	strb	r2, [r3, #0]
  400b4a:	e7dc      	b.n	400b06 <read_Sensor_Air+0x19a>
            sData.info_ProbesAD |= 0x80;
  400b4c:	4a33      	ldr	r2, [pc, #204]	; (400c1c <read_Sensor_Air+0x2b0>)
  400b4e:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
  400b56:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400b5a:	2001      	movs	r0, #1
  400b5c:	e714      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD |= 0x40;    
  400b5e:	4a2f      	ldr	r2, [pc, #188]	; (400c1c <read_Sensor_Air+0x2b0>)
  400b60:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400b68:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400b6c:	2001      	movs	r0, #1
  400b6e:	e70b      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD |= 0x20;   
  400b70:	4a2a      	ldr	r2, [pc, #168]	; (400c1c <read_Sensor_Air+0x2b0>)
  400b72:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400b76:	f043 0320 	orr.w	r3, r3, #32
  400b7a:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400b7e:	2001      	movs	r0, #1
  400b80:	e702      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD |= 0x10;        
  400b82:	4a26      	ldr	r2, [pc, #152]	; (400c1c <read_Sensor_Air+0x2b0>)
  400b84:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400b88:	f043 0310 	orr.w	r3, r3, #16
  400b8c:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400b90:	2001      	movs	r0, #1
  400b92:	e6f9      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD |= 0x08;  
  400b94:	4a21      	ldr	r2, [pc, #132]	; (400c1c <read_Sensor_Air+0x2b0>)
  400b96:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400b9a:	f043 0308 	orr.w	r3, r3, #8
  400b9e:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400ba2:	2001      	movs	r0, #1
  400ba4:	e6f0      	b.n	400988 <read_Sensor_Air+0x1c>
         if (iAcc == ACC_I2C_CO2_2) 
  400ba6:	2c04      	cmp	r4, #4
  400ba8:	d009      	beq.n	400bbe <read_Sensor_Air+0x252>
         else if (iAcc == ACC_I2C_CO2_1) 
  400baa:	2c03      	cmp	r4, #3
  400bac:	d010      	beq.n	400bd0 <read_Sensor_Air+0x264>
         else if (iAcc == ACC_I2C_RH_2) 
  400bae:	2c06      	cmp	r4, #6
  400bb0:	d017      	beq.n	400be2 <read_Sensor_Air+0x276>
         else if (iAcc == ACC_I2C_RH_1) 
  400bb2:	2c05      	cmp	r4, #5
  400bb4:	d01e      	beq.n	400bf4 <read_Sensor_Air+0x288>
         else if (iAcc == ACC_I2C_VOC) 
  400bb6:	2c07      	cmp	r4, #7
  400bb8:	d025      	beq.n	400c06 <read_Sensor_Air+0x29a>
      risp = 1; 
  400bba:	2001      	movs	r0, #1
  400bbc:	e6e4      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD &= ~0x80;
  400bbe:	4a17      	ldr	r2, [pc, #92]	; (400c1c <read_Sensor_Air+0x2b0>)
  400bc0:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400bc8:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400bcc:	2001      	movs	r0, #1
  400bce:	e6db      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD &= ~0x40;    
  400bd0:	4a12      	ldr	r2, [pc, #72]	; (400c1c <read_Sensor_Air+0x2b0>)
  400bd2:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  400bda:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400bde:	2001      	movs	r0, #1
  400be0:	e6d2      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD &= ~0x20;   
  400be2:	4a0e      	ldr	r2, [pc, #56]	; (400c1c <read_Sensor_Air+0x2b0>)
  400be4:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400be8:	f023 0320 	bic.w	r3, r3, #32
  400bec:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400bf0:	2001      	movs	r0, #1
  400bf2:	e6c9      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD &= ~0x10;        
  400bf4:	4a09      	ldr	r2, [pc, #36]	; (400c1c <read_Sensor_Air+0x2b0>)
  400bf6:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400bfa:	f023 0310 	bic.w	r3, r3, #16
  400bfe:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400c02:	2001      	movs	r0, #1
  400c04:	e6c0      	b.n	400988 <read_Sensor_Air+0x1c>
            sData.info_ProbesAD &= ~0x08;  
  400c06:	4a05      	ldr	r2, [pc, #20]	; (400c1c <read_Sensor_Air+0x2b0>)
  400c08:	f892 31ae 	ldrb.w	r3, [r2, #430]	; 0x1ae
  400c0c:	f023 0308 	bic.w	r3, r3, #8
  400c10:	f882 31ae 	strb.w	r3, [r2, #430]	; 0x1ae
      risp = 1; 
  400c14:	2001      	movs	r0, #1
  400c16:	e6b7      	b.n	400988 <read_Sensor_Air+0x1c>
  400c18:	00403e0d 	.word	0x00403e0d
  400c1c:	200013ac 	.word	0x200013ac
  400c20:	00400215 	.word	0x00400215
  400c24:	20000e18 	.word	0x20000e18
  400c28:	001b773f 	.word	0x001b773f
  400c2c:	20000ae8 	.word	0x20000ae8
  400c30:	20000a1c 	.word	0x20000a1c
  400c34:	20000a18 	.word	0x20000a18
  400c38:	20000ae0 	.word	0x20000ae0
  400c3c:	20000e20 	.word	0x20000e20
  400c40:	20000ae9 	.word	0x20000ae9
  400c44:	20000a80 	.word	0x20000a80
  400c48:	20000a7c 	.word	0x20000a7c
  400c4c:	20000ae1 	.word	0x20000ae1

00400c50 <read_Sensor_Pressure>:
//
//    -------- Alarms --------                                 
//   [06]: 7.DPP_LinkE, 6.DPP_KO   , 5.- - - - -, 4.PCAF_LinkEr, 3.PCAF_KO , 2.- - - - - , 1.PCAP_LinkE, 0.PCAP_KO
//---------------------------------------------------------------------------------------------
byte read_Sensor_Pressure(byte addrSlave, byte iAcc, byte byte_event, byte bit_event, byte msk_clear_event)
{
  400c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400c54:	b085      	sub	sp, #20
  400c56:	460c      	mov	r4, r1
  400c58:	4690      	mov	r8, r2
  byte risp = 0, alarm;
  byte buff_Data[12];
  int statusBus;
   
  // leggiamo solo la misura e il byte allarmi. 
  statusBus = ReadSlave(addrSlave, 0x02, &buff_Data[0], 3); 
  400c5a:	2303      	movs	r3, #3
  400c5c:	aa01      	add	r2, sp, #4
  400c5e:	2102      	movs	r1, #2
  400c60:	4d19      	ldr	r5, [pc, #100]	; (400cc8 <read_Sensor_Pressure+0x78>)
  400c62:	47a8      	blx	r5
  
  if(statusBus == 1) 
  400c64:	2801      	cmp	r0, #1
  400c66:	d00a      	beq.n	400c7e <read_Sensor_Pressure+0x2e>
  byte risp = 0, alarm;
  400c68:	2000      	movs	r0, #0
*/      
//-------------------------
  }
  
   
  sData.AccI2C[iAcc].data  = 0;
  400c6a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
  400c6e:	4b17      	ldr	r3, [pc, #92]	; (400ccc <read_Sensor_Pressure+0x7c>)
  400c70:	eb03 0444 	add.w	r4, r3, r4, lsl #1
  400c74:	2300      	movs	r3, #0
  400c76:	7463      	strb	r3, [r4, #17]
  
  return risp;
}  
  400c78:	b005      	add	sp, #20
  400c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      sData.AccI2C[iAcc].cnt_persist_link_ko = 0;
  400c7e:	4e13      	ldr	r6, [pc, #76]	; (400ccc <read_Sensor_Pressure+0x7c>)
  400c80:	00e5      	lsls	r5, r4, #3
  400c82:	192f      	adds	r7, r5, r4
  400c84:	eb06 0747 	add.w	r7, r6, r7, lsl #1
  400c88:	f04f 0900 	mov.w	r9, #0
  400c8c:	f887 9016 	strb.w	r9, [r7, #22]
      sData.AccI2C[iAcc].cnt_link_ok++;               
  400c90:	7d3b      	ldrb	r3, [r7, #20]
  400c92:	3301      	adds	r3, #1
  400c94:	753b      	strb	r3, [r7, #20]
      TAG_DigitAccessoryOperating(iAcc);                 // segnaliamo che è connesso e operativo   
  400c96:	4620      	mov	r0, r4
  400c98:	4b0d      	ldr	r3, [pc, #52]	; (400cd0 <read_Sensor_Pressure+0x80>)
  400c9a:	4798      	blx	r3
      sData.AccI2C[iAcc].measure1 = (word)(((word)buff_Data[2] << 8) | buff_Data[1]);   // misura: pressione
  400c9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
  400ca0:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400ca4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400ca8:	f8a7 3009 	strh.w	r3, [r7, #9]
      sData.AccI2C[iAcc].measure2 = 1; // la seconda misura la uso per segnalare una nuova lettura del sensore.  
  400cac:	2301      	movs	r3, #1
  400cae:	72fb      	strb	r3, [r7, #11]
  400cb0:	f887 900c 	strb.w	r9, [r7, #12]
      sData.Events[byte_event]  &= msk_clear_event;  
  400cb4:	4446      	add	r6, r8
  400cb6:	f896 21f7 	ldrb.w	r2, [r6, #503]	; 0x1f7
  400cba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  400cbe:	4013      	ands	r3, r2
  400cc0:	f886 31f7 	strb.w	r3, [r6, #503]	; 0x1f7
      risp = 1; 
  400cc4:	2001      	movs	r0, #1
  400cc6:	e7d0      	b.n	400c6a <read_Sensor_Pressure+0x1a>
  400cc8:	00403e0d 	.word	0x00403e0d
  400ccc:	200013ac 	.word	0x200013ac
  400cd0:	00400215 	.word	0x00400215

00400cd4 <probeQAirActive>:
    if(DigitAccessoryOperating(ACC_I2C_AWP))
      sData.measure_AWP_max = sData.AccI2C[ACC_I2C_AWP].measure2;
}*/

void probeQAirActive()
{
  400cd4:	b508      	push	{r3, lr}
    int temp_measure_RH_max  = 0;                   
    int temp_measure_VOC_max = 0;  
    int temp_measure_AWP_max = 0;  

    // Sonde RH digitali
    if(DigitAccessoryOperating(ACC_I2C_RH_1) || DigitAccessoryOperating(ACC_I2C_RH_2))
  400cd6:	2005      	movs	r0, #5
  400cd8:	4b1d      	ldr	r3, [pc, #116]	; (400d50 <probeQAirActive+0x7c>)
  400cda:	4798      	blx	r3
  400cdc:	b918      	cbnz	r0, 400ce6 <probeQAirActive+0x12>
  400cde:	2006      	movs	r0, #6
  400ce0:	4b1b      	ldr	r3, [pc, #108]	; (400d50 <probeQAirActive+0x7c>)
  400ce2:	4798      	blx	r3
  400ce4:	b380      	cbz	r0, 400d48 <probeQAirActive+0x74>
    {
       if(sData.AccI2C[ACC_I2C_RH_1].measure1 > sData.AccI2C[ACC_I2C_RH_2].measure1)     
  400ce6:	4a1b      	ldr	r2, [pc, #108]	; (400d54 <probeQAirActive+0x80>)
  400ce8:	f9b2 3063 	ldrsh.w	r3, [r2, #99]	; 0x63
  400cec:	f9b2 2075 	ldrsh.w	r2, [r2, #117]	; 0x75
         temp_measure_RH_max = sData.AccI2C[ACC_I2C_RH_1].measure1;
  400cf0:	4293      	cmp	r3, r2
  400cf2:	bfb8      	it	lt
  400cf4:	4613      	movlt	r3, r2
       else  
         temp_measure_RH_max = sData.AccI2C[ACC_I2C_RH_2].measure1;
         
    }  
         
    sData.measure_RH_max = temp_measure_RH_max;    
  400cf6:	4a17      	ldr	r2, [pc, #92]	; (400d54 <probeQAirActive+0x80>)
  400cf8:	f8a2 31bd 	strh.w	r3, [r2, #445]	; 0x1bd

      
    // Sonde CO2 digitali         
    if(DigitAccessoryOperating(ACC_I2C_CO2_1) || DigitAccessoryOperating(ACC_I2C_CO2_2))
  400cfc:	2003      	movs	r0, #3
  400cfe:	4b14      	ldr	r3, [pc, #80]	; (400d50 <probeQAirActive+0x7c>)
  400d00:	4798      	blx	r3
  400d02:	b918      	cbnz	r0, 400d0c <probeQAirActive+0x38>
  400d04:	2004      	movs	r0, #4
  400d06:	4b12      	ldr	r3, [pc, #72]	; (400d50 <probeQAirActive+0x7c>)
  400d08:	4798      	blx	r3
  400d0a:	b1f8      	cbz	r0, 400d4c <probeQAirActive+0x78>
    {   
       if(sData.AccI2C[ACC_I2C_CO2_1].measure1 > sData.AccI2C[ACC_I2C_CO2_2].measure1)     
  400d0c:	4a11      	ldr	r2, [pc, #68]	; (400d54 <probeQAirActive+0x80>)
  400d0e:	f9b2 303f 	ldrsh.w	r3, [r2, #63]	; 0x3f
  400d12:	f9b2 2051 	ldrsh.w	r2, [r2, #81]	; 0x51
         temp_measure_CO2_max = sData.AccI2C[ACC_I2C_CO2_1].measure1;
  400d16:	4293      	cmp	r3, r2
  400d18:	bfb8      	it	lt
  400d1a:	4613      	movlt	r3, r2
       else  
         temp_measure_CO2_max = sData.AccI2C[ACC_I2C_CO2_2].measure1;             
    }  
    
	sData.measure_CO2_max = temp_measure_CO2_max;
  400d1c:	4a0d      	ldr	r2, [pc, #52]	; (400d54 <probeQAirActive+0x80>)
  400d1e:	f8a2 31bb 	strh.w	r3, [r2, #443]	; 0x1bb
        sData.measure_CO2_max = (short)(float)293.88*log(temp_measure_CO2_max)-1367.3;  
    else
        sData.measure_CO2_max = (short)(float)140.65*log(temp_measure_CO2_max)-321.98;*/
 
    // Sonde VOC digitali
    if(DigitAccessoryOperating(ACC_I2C_VOC))  
  400d22:	2007      	movs	r0, #7
  400d24:	4b0a      	ldr	r3, [pc, #40]	; (400d50 <probeQAirActive+0x7c>)
  400d26:	4798      	blx	r3
  400d28:	b120      	cbz	r0, 400d34 <probeQAirActive+0x60>
      sData.measure_VOC_max = sData.AccI2C[ACC_I2C_VOC].measure1;
  400d2a:	4b0a      	ldr	r3, [pc, #40]	; (400d54 <probeQAirActive+0x80>)
  400d2c:	f9b3 2087 	ldrsh.w	r2, [r3, #135]	; 0x87
  400d30:	f8a3 21bf 	strh.w	r2, [r3, #447]	; 0x1bf
        
    if(DigitAccessoryOperating(ACC_I2C_AWP))
  400d34:	2008      	movs	r0, #8
  400d36:	4b06      	ldr	r3, [pc, #24]	; (400d50 <probeQAirActive+0x7c>)
  400d38:	4798      	blx	r3
  400d3a:	b120      	cbz	r0, 400d46 <probeQAirActive+0x72>
      sData.measure_AWP_max = sData.AccI2C[ACC_I2C_AWP].measure2;
  400d3c:	4b05      	ldr	r3, [pc, #20]	; (400d54 <probeQAirActive+0x80>)
  400d3e:	f9b3 209b 	ldrsh.w	r2, [r3, #155]	; 0x9b
  400d42:	f8a3 21c1 	strh.w	r2, [r3, #449]	; 0x1c1
  400d46:	bd08      	pop	{r3, pc}
    int temp_measure_RH_max  = 0;                   
  400d48:	2300      	movs	r3, #0
  400d4a:	e7d4      	b.n	400cf6 <probeQAirActive+0x22>
    int temp_measure_CO2_max = 0;                  
  400d4c:	2300      	movs	r3, #0
  400d4e:	e7e5      	b.n	400d1c <probeQAirActive+0x48>
  400d50:	0040012d 	.word	0x0040012d
  400d54:	200013ac 	.word	0x200013ac

00400d58 <calcola_portata>:
}

short calcola_portata(float pressione, int flow)

{
  400d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d5a:	4606      	mov	r6, r0
  400d5c:	460c      	mov	r4, r1
  float portata, avg_press;
  
  if (pressione <= 0)
  400d5e:	2100      	movs	r1, #0
  400d60:	4b4f      	ldr	r3, [pc, #316]	; (400ea0 <calcola_portata+0x148>)
  400d62:	4798      	blx	r3
  400d64:	b940      	cbnz	r0, 400d78 <calcola_portata+0x20>
  pressione = 0;
  
if (flow ==K_FLOW1)
  400d66:	2c01      	cmp	r4, #1
  400d68:	d008      	beq.n	400d7c <calcola_portata+0x24>
		portata = 908;	
	    sumpress_1  = 0;
		contaflow_1 = 0;
	}
}		
else if (flow ==K_FLOW2)
  400d6a:	2c02      	cmp	r4, #2
  400d6c:	d04f      	beq.n	400e0e <calcola_portata+0xb6>
	}
  
}
  
  
  return portata;
  400d6e:	4628      	mov	r0, r5
  400d70:	4b4c      	ldr	r3, [pc, #304]	; (400ea4 <calcola_portata+0x14c>)
  400d72:	4798      	blx	r3

}
  400d74:	b200      	sxth	r0, r0
  400d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  pressione = 0;
  400d78:	2600      	movs	r6, #0
  400d7a:	e7f4      	b.n	400d66 <calcola_portata+0xe>
	if (contaflow_1 < MAX_KF_SAMPLE )
  400d7c:	4b4a      	ldr	r3, [pc, #296]	; (400ea8 <calcola_portata+0x150>)
  400d7e:	681c      	ldr	r4, [r3, #0]
  400d80:	2c00      	cmp	r4, #0
  400d82:	dd2c      	ble.n	400dde <calcola_portata+0x86>
		avg_press = (float) sumpress_1 / MAX_KF_SAMPLE;
  400d84:	4b49      	ldr	r3, [pc, #292]	; (400eac <calcola_portata+0x154>)
  400d86:	681d      	ldr	r5, [r3, #0]
        portata = (float)((float)((float)(KF1_1 * avg_press) * avg_press)*avg_press) + (float)((float)(KF1_2 * avg_press) * avg_press)  + (float)(KF1_3 * avg_press) +  KF1_4;
  400d88:	4c49      	ldr	r4, [pc, #292]	; (400eb0 <calcola_portata+0x158>)
  400d8a:	4b4a      	ldr	r3, [pc, #296]	; (400eb4 <calcola_portata+0x15c>)
  400d8c:	6819      	ldr	r1, [r3, #0]
  400d8e:	4628      	mov	r0, r5
  400d90:	47a0      	blx	r4
  400d92:	4629      	mov	r1, r5
  400d94:	47a0      	blx	r4
  400d96:	4629      	mov	r1, r5
  400d98:	47a0      	blx	r4
  400d9a:	4607      	mov	r7, r0
  400d9c:	4b46      	ldr	r3, [pc, #280]	; (400eb8 <calcola_portata+0x160>)
  400d9e:	6819      	ldr	r1, [r3, #0]
  400da0:	4628      	mov	r0, r5
  400da2:	47a0      	blx	r4
  400da4:	4629      	mov	r1, r5
  400da6:	47a0      	blx	r4
  400da8:	4e44      	ldr	r6, [pc, #272]	; (400ebc <calcola_portata+0x164>)
  400daa:	4601      	mov	r1, r0
  400dac:	4638      	mov	r0, r7
  400dae:	47b0      	blx	r6
  400db0:	4607      	mov	r7, r0
  400db2:	4b43      	ldr	r3, [pc, #268]	; (400ec0 <calcola_portata+0x168>)
  400db4:	6819      	ldr	r1, [r3, #0]
  400db6:	4628      	mov	r0, r5
  400db8:	47a0      	blx	r4
  400dba:	4601      	mov	r1, r0
  400dbc:	4638      	mov	r0, r7
  400dbe:	47b0      	blx	r6
  400dc0:	4b40      	ldr	r3, [pc, #256]	; (400ec4 <calcola_portata+0x16c>)
  400dc2:	6819      	ldr	r1, [r3, #0]
  400dc4:	47b0      	blx	r6
  400dc6:	4605      	mov	r5, r0
		if (portata <=20)
  400dc8:	493f      	ldr	r1, [pc, #252]	; (400ec8 <calcola_portata+0x170>)
  400dca:	4b35      	ldr	r3, [pc, #212]	; (400ea0 <calcola_portata+0x148>)
  400dcc:	4798      	blx	r3
  400dce:	b9b0      	cbnz	r0, 400dfe <calcola_portata+0xa6>
	    else if (portata >= 908)
  400dd0:	493e      	ldr	r1, [pc, #248]	; (400ecc <calcola_portata+0x174>)
  400dd2:	4628      	mov	r0, r5
  400dd4:	4b3e      	ldr	r3, [pc, #248]	; (400ed0 <calcola_portata+0x178>)
  400dd6:	4798      	blx	r3
  400dd8:	b190      	cbz	r0, 400e00 <calcola_portata+0xa8>
		portata = 908;	
  400dda:	4d3c      	ldr	r5, [pc, #240]	; (400ecc <calcola_portata+0x174>)
  400ddc:	e010      	b.n	400e00 <calcola_portata+0xa8>
		sumpress_1 += pressione;
  400dde:	4d33      	ldr	r5, [pc, #204]	; (400eac <calcola_portata+0x154>)
  400de0:	4631      	mov	r1, r6
  400de2:	6828      	ldr	r0, [r5, #0]
  400de4:	4b35      	ldr	r3, [pc, #212]	; (400ebc <calcola_portata+0x164>)
  400de6:	4798      	blx	r3
  400de8:	6028      	str	r0, [r5, #0]
		contaflow_1++;
  400dea:	3401      	adds	r4, #1
  400dec:	4b2e      	ldr	r3, [pc, #184]	; (400ea8 <calcola_portata+0x150>)
  400dee:	601c      	str	r4, [r3, #0]
		portata = flow_motor_1;
  400df0:	4b38      	ldr	r3, [pc, #224]	; (400ed4 <calcola_portata+0x17c>)
  400df2:	f9b3 0000 	ldrsh.w	r0, [r3]
  400df6:	4b38      	ldr	r3, [pc, #224]	; (400ed8 <calcola_portata+0x180>)
  400df8:	4798      	blx	r3
  400dfa:	4605      	mov	r5, r0
  400dfc:	e7b7      	b.n	400d6e <calcola_portata+0x16>
        portata = 0;
  400dfe:	2500      	movs	r5, #0
	    sumpress_1  = 0;
  400e00:	2200      	movs	r2, #0
  400e02:	4b2a      	ldr	r3, [pc, #168]	; (400eac <calcola_portata+0x154>)
  400e04:	601a      	str	r2, [r3, #0]
		contaflow_1 = 0;
  400e06:	2200      	movs	r2, #0
  400e08:	4b27      	ldr	r3, [pc, #156]	; (400ea8 <calcola_portata+0x150>)
  400e0a:	601a      	str	r2, [r3, #0]
  400e0c:	e7af      	b.n	400d6e <calcola_portata+0x16>
	if (contaflow_2 < MAX_KF_SAMPLE )
  400e0e:	4b33      	ldr	r3, [pc, #204]	; (400edc <calcola_portata+0x184>)
  400e10:	681c      	ldr	r4, [r3, #0]
  400e12:	2c00      	cmp	r4, #0
  400e14:	dd2c      	ble.n	400e70 <calcola_portata+0x118>
		avg_press = (float) sumpress_2 / MAX_KF_SAMPLE;
  400e16:	4b32      	ldr	r3, [pc, #200]	; (400ee0 <calcola_portata+0x188>)
  400e18:	681d      	ldr	r5, [r3, #0]
		portata = (float)((float)((float)(KF1_1 * avg_press) * avg_press)*avg_press) + (float)((float)(KF1_2 * avg_press) * avg_press)  + (float)(KF1_3 * avg_press) +  KF1_4;   
  400e1a:	4c25      	ldr	r4, [pc, #148]	; (400eb0 <calcola_portata+0x158>)
  400e1c:	4b25      	ldr	r3, [pc, #148]	; (400eb4 <calcola_portata+0x15c>)
  400e1e:	6819      	ldr	r1, [r3, #0]
  400e20:	4628      	mov	r0, r5
  400e22:	47a0      	blx	r4
  400e24:	4629      	mov	r1, r5
  400e26:	47a0      	blx	r4
  400e28:	4629      	mov	r1, r5
  400e2a:	47a0      	blx	r4
  400e2c:	4607      	mov	r7, r0
  400e2e:	4b22      	ldr	r3, [pc, #136]	; (400eb8 <calcola_portata+0x160>)
  400e30:	6819      	ldr	r1, [r3, #0]
  400e32:	4628      	mov	r0, r5
  400e34:	47a0      	blx	r4
  400e36:	4629      	mov	r1, r5
  400e38:	47a0      	blx	r4
  400e3a:	4e20      	ldr	r6, [pc, #128]	; (400ebc <calcola_portata+0x164>)
  400e3c:	4601      	mov	r1, r0
  400e3e:	4638      	mov	r0, r7
  400e40:	47b0      	blx	r6
  400e42:	4607      	mov	r7, r0
  400e44:	4b1e      	ldr	r3, [pc, #120]	; (400ec0 <calcola_portata+0x168>)
  400e46:	6819      	ldr	r1, [r3, #0]
  400e48:	4628      	mov	r0, r5
  400e4a:	47a0      	blx	r4
  400e4c:	4601      	mov	r1, r0
  400e4e:	4638      	mov	r0, r7
  400e50:	47b0      	blx	r6
  400e52:	4b1c      	ldr	r3, [pc, #112]	; (400ec4 <calcola_portata+0x16c>)
  400e54:	6819      	ldr	r1, [r3, #0]
  400e56:	47b0      	blx	r6
  400e58:	4605      	mov	r5, r0
		if (portata <=20)
  400e5a:	491b      	ldr	r1, [pc, #108]	; (400ec8 <calcola_portata+0x170>)
  400e5c:	4b10      	ldr	r3, [pc, #64]	; (400ea0 <calcola_portata+0x148>)
  400e5e:	4798      	blx	r3
  400e60:	b9b0      	cbnz	r0, 400e90 <calcola_portata+0x138>
	    else if (portata >= 908)
  400e62:	491a      	ldr	r1, [pc, #104]	; (400ecc <calcola_portata+0x174>)
  400e64:	4628      	mov	r0, r5
  400e66:	4b1a      	ldr	r3, [pc, #104]	; (400ed0 <calcola_portata+0x178>)
  400e68:	4798      	blx	r3
  400e6a:	b190      	cbz	r0, 400e92 <calcola_portata+0x13a>
		portata = 908;
  400e6c:	4d17      	ldr	r5, [pc, #92]	; (400ecc <calcola_portata+0x174>)
  400e6e:	e010      	b.n	400e92 <calcola_portata+0x13a>
		sumpress_2 += pressione;
  400e70:	4d1b      	ldr	r5, [pc, #108]	; (400ee0 <calcola_portata+0x188>)
  400e72:	4631      	mov	r1, r6
  400e74:	6828      	ldr	r0, [r5, #0]
  400e76:	4b11      	ldr	r3, [pc, #68]	; (400ebc <calcola_portata+0x164>)
  400e78:	4798      	blx	r3
  400e7a:	6028      	str	r0, [r5, #0]
		contaflow_2++;
  400e7c:	3401      	adds	r4, #1
  400e7e:	4b17      	ldr	r3, [pc, #92]	; (400edc <calcola_portata+0x184>)
  400e80:	601c      	str	r4, [r3, #0]
		portata = flow_motor_2;
  400e82:	4b18      	ldr	r3, [pc, #96]	; (400ee4 <calcola_portata+0x18c>)
  400e84:	f9b3 0000 	ldrsh.w	r0, [r3]
  400e88:	4b13      	ldr	r3, [pc, #76]	; (400ed8 <calcola_portata+0x180>)
  400e8a:	4798      	blx	r3
  400e8c:	4605      	mov	r5, r0
  400e8e:	e76e      	b.n	400d6e <calcola_portata+0x16>
        portata = 0;
  400e90:	2500      	movs	r5, #0
	    sumpress_2  = 0;
  400e92:	2200      	movs	r2, #0
  400e94:	4b12      	ldr	r3, [pc, #72]	; (400ee0 <calcola_portata+0x188>)
  400e96:	601a      	str	r2, [r3, #0]
		contaflow_2 = 0;
  400e98:	2200      	movs	r2, #0
  400e9a:	4b10      	ldr	r3, [pc, #64]	; (400edc <calcola_portata+0x184>)
  400e9c:	601a      	str	r2, [r3, #0]
  400e9e:	e766      	b.n	400d6e <calcola_portata+0x16>
  400ea0:	0040db45 	.word	0x0040db45
  400ea4:	0040db81 	.word	0x0040db81
  400ea8:	20000e74 	.word	0x20000e74
  400eac:	20000e90 	.word	0x20000e90
  400eb0:	0040d7f5 	.word	0x0040d7f5
  400eb4:	00413898 	.word	0x00413898
  400eb8:	0041389c 	.word	0x0041389c
  400ebc:	0040d5e5 	.word	0x0040d5e5
  400ec0:	004138a0 	.word	0x004138a0
  400ec4:	004138a4 	.word	0x004138a4
  400ec8:	41a00000 	.word	0x41a00000
  400ecc:	44630000 	.word	0x44630000
  400ed0:	0040db59 	.word	0x0040db59
  400ed4:	20000e86 	.word	0x20000e86
  400ed8:	0040d74d 	.word	0x0040d74d
  400edc:	20000e78 	.word	0x20000e78
  400ee0:	20000e94 	.word	0x20000e94
  400ee4:	20000e88 	.word	0x20000e88

00400ee8 <read_ext_Sensor>:
{
  400ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400eec:	b084      	sub	sp, #16
  400eee:	4606      	mov	r6, r0
  400ef0:	460d      	mov	r5, r1
  400ef2:	4617      	mov	r7, r2
  statusBus = ReadSlave(addrSlave, 0x01, &buff_Data[0], 11);
  400ef4:	230b      	movs	r3, #11
  400ef6:	aa01      	add	r2, sp, #4
  400ef8:	2101      	movs	r1, #1
  400efa:	4c3f      	ldr	r4, [pc, #252]	; (400ff8 <read_ext_Sensor+0x110>)
  400efc:	47a0      	blx	r4
  if(statusBus == 1) 
  400efe:	2801      	cmp	r0, #1
  400f00:	d003      	beq.n	400f0a <read_ext_Sensor+0x22>
  byte risp = 0, alarm=0, info=0;
  400f02:	2000      	movs	r0, #0
}  
  400f04:	b004      	add	sp, #16
  400f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sData.AccI2C[iAcc].cnt_persist_link_ko = 0;
  400f0a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401000 <read_ext_Sensor+0x118>
  400f0e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
  400f12:	eb08 0444 	add.w	r4, r8, r4, lsl #1
  400f16:	2300      	movs	r3, #0
  400f18:	75a3      	strb	r3, [r4, #22]
      sData.AccI2C[iAcc].cnt_link_ok++;               
  400f1a:	7d23      	ldrb	r3, [r4, #20]
  400f1c:	3301      	adds	r3, #1
  400f1e:	7523      	strb	r3, [r4, #20]
      TAG_DigitAccessoryOperating(iAcc);                 // segnaliamo che è connesso e operativo     
  400f20:	4628      	mov	r0, r5
  400f22:	4b36      	ldr	r3, [pc, #216]	; (400ffc <read_ext_Sensor+0x114>)
  400f24:	4798      	blx	r3
      sData.AccI2C[iAcc].sts &= 0xF3; 
  400f26:	79e3      	ldrb	r3, [r4, #7]
  400f28:	f023 030c 	bic.w	r3, r3, #12
      sData.AccI2C[iAcc].sts |= (buff_Data[0] & 0x04);   // Aggiungiamo lo stato di : b[2] 1=Power_ON /0=Power_SAVE
  400f2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400f30:	f002 0204 	and.w	r2, r2, #4
  400f34:	4313      	orrs	r3, r2
  400f36:	71e3      	strb	r3, [r4, #7]
      sData.AccI2C[iAcc].measure1 = (word)(((word)buff_Data[3] << 8) | buff_Data[2]);   // misura: Temperature  // misura: Tempo CW     // misura: T1           // misura: T1       //
  400f38:	f89d 2007 	ldrb.w	r2, [sp, #7]
  400f3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
  400f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400f44:	f8a4 3009 	strh.w	r3, [r4, #9]
      sData.AccI2C[iAcc].measure2 = (word)(((word)buff_Data[5] << 8) | buff_Data[4]);   // misura: RH           // misura: Tempo CCW    // misura: T2           // misura: T1       //
  400f48:	f89d 2009 	ldrb.w	r2, [sp, #9]
  400f4c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400f54:	f8a4 300b 	strh.w	r3, [r4, #11]
      sData.AccI2C[iAcc].measure3 = (word)(((word)buff_Data[7] << 8) | buff_Data[6]);   // misura: CO2          // misura: Corrente CW  // misura: T3           // misura: T1       //
  400f58:	f89d 200b 	ldrb.w	r2, [sp, #11]
  400f5c:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400f60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400f64:	f8a4 300d 	strh.w	r3, [r4, #13]
      sData.AccI2C[iAcc].measure4 = (word)(((word)buff_Data[9] << 8) | buff_Data[8]);   // misura: VOC          // misura: Corrente CCW // misura: Pressure     // misura: Pressure //
  400f68:	f89d 200d 	ldrb.w	r2, [sp, #13]
  400f6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
  400f70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400f74:	b21b      	sxth	r3, r3
  400f76:	f8a4 300f 	strh.w	r3, [r4, #15]
      sData.AccI2C[iAcc].data     = buff_Data[10];                                      // info  : TBD          // info:  0-100 comando // info:  0-100 comando // info:  TBD       //
  400f7a:	f89d 200e 	ldrb.w	r2, [sp, #14]
  400f7e:	7462      	strb	r2, [r4, #17]
      sData.Events[byte_event]  &= msk_clear_event;  
  400f80:	4447      	add	r7, r8
  400f82:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
  400f86:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
  400f8a:	400a      	ands	r2, r1
  400f8c:	f887 21f7 	strb.w	r2, [r7, #503]	; 0x1f7
   if ( addrSlave == ADDR_SSR)
  400f90:	2e3e      	cmp	r6, #62	; 0x3e
  400f92:	d010      	beq.n	400fb6 <read_ext_Sensor+0xce>
   if ( addrSlave == ADDR_FLW1)
  400f94:	2e3c      	cmp	r6, #60	; 0x3c
  400f96:	d028      	beq.n	400fea <read_ext_Sensor+0x102>
   if ( addrSlave == ADDR_FLW2)
  400f98:	2e3d      	cmp	r6, #61	; 0x3d
  400f9a:	d12a      	bne.n	400ff2 <read_ext_Sensor+0x10a>
	  Pressure_CAPR =  sData.AccI2C[iAcc].measure4;
  400f9c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
  400fa0:	4b17      	ldr	r3, [pc, #92]	; (401000 <read_ext_Sensor+0x118>)
  400fa2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  400fa6:	7beb      	ldrb	r3, [r5, #15]
  400fa8:	7c2a      	ldrb	r2, [r5, #16]
  400faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400fae:	4a15      	ldr	r2, [pc, #84]	; (401004 <read_ext_Sensor+0x11c>)
  400fb0:	8013      	strh	r3, [r2, #0]
      risp = 1; 
  400fb2:	2001      	movs	r0, #1
  400fb4:	e7a6      	b.n	400f04 <read_ext_Sensor+0x1c>
       flow_motor_1 = calcola_portata(sData.AccI2C[ACC_I2C_SSR].measure4, K_FLOW1);
  400fb6:	f9b8 0177 	ldrsh.w	r0, [r8, #375]	; 0x177
  400fba:	4b13      	ldr	r3, [pc, #76]	; (401008 <read_ext_Sensor+0x120>)
  400fbc:	4798      	blx	r3
  400fbe:	2101      	movs	r1, #1
  400fc0:	4b12      	ldr	r3, [pc, #72]	; (40100c <read_ext_Sensor+0x124>)
  400fc2:	4798      	blx	r3
  400fc4:	4b12      	ldr	r3, [pc, #72]	; (401010 <read_ext_Sensor+0x128>)
  400fc6:	8018      	strh	r0, [r3, #0]
       sData.AccI2C[ACC_I2C_SSR].measure1=sData.AccI2C[ACC_I2C_SSR].measure1+100;
  400fc8:	f9b8 3171 	ldrsh.w	r3, [r8, #369]	; 0x171
  400fcc:	3364      	adds	r3, #100	; 0x64
  400fce:	f8a8 3171 	strh.w	r3, [r8, #369]	; 0x171
       sData.AccI2C[ACC_I2C_SSR].measure2=sData.AccI2C[ACC_I2C_SSR].measure2+100;
  400fd2:	f9b8 3173 	ldrsh.w	r3, [r8, #371]	; 0x173
  400fd6:	3364      	adds	r3, #100	; 0x64
  400fd8:	f8a8 3173 	strh.w	r3, [r8, #371]	; 0x173
       sData.AccI2C[ACC_I2C_SSR].measure3=sData.AccI2C[ACC_I2C_SSR].measure3+100;
  400fdc:	f9b8 3175 	ldrsh.w	r3, [r8, #373]	; 0x175
  400fe0:	3364      	adds	r3, #100	; 0x64
  400fe2:	f8a8 3175 	strh.w	r3, [r8, #373]	; 0x175
      risp = 1; 
  400fe6:	2001      	movs	r0, #1
  400fe8:	e78c      	b.n	400f04 <read_ext_Sensor+0x1c>
	  Pressure_CAPS =  sData.AccI2C[iAcc].measure4;
  400fea:	4a0a      	ldr	r2, [pc, #40]	; (401014 <read_ext_Sensor+0x12c>)
  400fec:	8013      	strh	r3, [r2, #0]
      risp = 1; 
  400fee:	2001      	movs	r0, #1
  400ff0:	e788      	b.n	400f04 <read_ext_Sensor+0x1c>
  400ff2:	2001      	movs	r0, #1
  400ff4:	e786      	b.n	400f04 <read_ext_Sensor+0x1c>
  400ff6:	bf00      	nop
  400ff8:	00403e0d 	.word	0x00403e0d
  400ffc:	00400215 	.word	0x00400215
  401000:	200013ac 	.word	0x200013ac
  401004:	20000aea 	.word	0x20000aea
  401008:	0040d74d 	.word	0x0040d74d
  40100c:	00400d59 	.word	0x00400d59
  401010:	20000e86 	.word	0x20000e86
  401014:	20000aec 	.word	0x20000aec

00401018 <pollingDigitAccessory>:
   if ((sData.status_test & MSK_TEST_LEDS) || (counter_ipehd > 0) ) 
  401018:	4bb6      	ldr	r3, [pc, #728]	; (4012f4 <pollingDigitAccessory+0x2dc>)
  40101a:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  40101e:	f013 0f20 	tst.w	r3, #32
  401022:	d103      	bne.n	40102c <pollingDigitAccessory+0x14>
  401024:	4bb4      	ldr	r3, [pc, #720]	; (4012f8 <pollingDigitAccessory+0x2e0>)
  401026:	681b      	ldr	r3, [r3, #0]
  401028:	2b00      	cmp	r3, #0
  40102a:	dd3d      	ble.n	4010a8 <pollingDigitAccessory+0x90>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40102c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401030:	4bb2      	ldr	r3, [pc, #712]	; (4012fc <pollingDigitAccessory+0x2e4>)
  401032:	631a      	str	r2, [r3, #48]	; 0x30
   if(flag_poll++ & 0x01)
  401034:	4ab2      	ldr	r2, [pc, #712]	; (401300 <pollingDigitAccessory+0x2e8>)
  401036:	7813      	ldrb	r3, [r2, #0]
  401038:	1c59      	adds	r1, r3, #1
  40103a:	7011      	strb	r1, [r2, #0]
  40103c:	f013 0f01 	tst.w	r3, #1
  401040:	f040 8440 	bne.w	4018c4 <pollingDigitAccessory+0x8ac>
{
  401044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401048:	b083      	sub	sp, #12
   idxAcc = idxSeq;
  40104a:	4bae      	ldr	r3, [pc, #696]	; (401304 <pollingDigitAccessory+0x2ec>)
  40104c:	781c      	ldrb	r4, [r3, #0]
   idxSeq++;  
  40104e:	1c63      	adds	r3, r4, #1
  401050:	b2db      	uxtb	r3, r3
   if(idxSeq >= TOT_ACCESSORY_I2C)
  401052:	2b16      	cmp	r3, #22
  401054:	d82d      	bhi.n	4010b2 <pollingDigitAccessory+0x9a>
   idxSeq++;  
  401056:	4aab      	ldr	r2, [pc, #684]	; (401304 <pollingDigitAccessory+0x2ec>)
  401058:	7013      	strb	r3, [r2, #0]
   if(change_SSR == 1)
  40105a:	4bab      	ldr	r3, [pc, #684]	; (401308 <pollingDigitAccessory+0x2f0>)
  40105c:	781b      	ldrb	r3, [r3, #0]
  40105e:	2b01      	cmp	r3, #1
  401060:	d02b      	beq.n	4010ba <pollingDigitAccessory+0xa2>
   if(change_EBPD == 1)
  401062:	4baa      	ldr	r3, [pc, #680]	; (40130c <pollingDigitAccessory+0x2f4>)
  401064:	781b      	ldrb	r3, [r3, #0]
  401066:	2b01      	cmp	r3, #1
  401068:	d034      	beq.n	4010d4 <pollingDigitAccessory+0xbc>
  wdt_restart(WATCH_DOG);    
  40106a:	48a9      	ldr	r0, [pc, #676]	; (401310 <pollingDigitAccessory+0x2f8>)
  40106c:	4ba9      	ldr	r3, [pc, #676]	; (401314 <pollingDigitAccessory+0x2fc>)
  40106e:	4798      	blx	r3
   switch (idxAcc) 
  401070:	2c16      	cmp	r4, #22
  401072:	f200 8204 	bhi.w	40147e <pollingDigitAccessory+0x466>
  401076:	e8df f014 	tbh	[pc, r4, lsl #1]
  40107a:	003c      	.short	0x003c
  40107c:	009900aa 	.word	0x009900aa
  401080:	00c700b8 	.word	0x00c700b8
  401084:	00e400d5 	.word	0x00e400d5
  401088:	010200f3 	.word	0x010200f3
  40108c:	0110011f 	.word	0x0110011f
  401090:	015d012e 	.word	0x015d012e
  401094:	017b016c 	.word	0x017b016c
  401098:	0199018a 	.word	0x0199018a
  40109c:	01b701a8 	.word	0x01b701a8
  4010a0:	01d501c6 	.word	0x01d501c6
  4010a4:	01f301e4 	.word	0x01f301e4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4010a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4010ac:	4b93      	ldr	r3, [pc, #588]	; (4012fc <pollingDigitAccessory+0x2e4>)
  4010ae:	635a      	str	r2, [r3, #52]	; 0x34
  4010b0:	e7c0      	b.n	401034 <pollingDigitAccessory+0x1c>
     idxSeq = ACC_I2C_HEATER;    
  4010b2:	2200      	movs	r2, #0
  4010b4:	4b93      	ldr	r3, [pc, #588]	; (401304 <pollingDigitAccessory+0x2ec>)
  4010b6:	701a      	strb	r2, [r3, #0]
  4010b8:	e7cf      	b.n	40105a <pollingDigitAccessory+0x42>
     info = read_byte_eeprom(ADDR_EEP(Set_EHD_mod));   
  4010ba:	2096      	movs	r0, #150	; 0x96
  4010bc:	4b96      	ldr	r3, [pc, #600]	; (401318 <pollingDigitAccessory+0x300>)
  4010be:	4798      	blx	r3
     if (info_SSR != info)
  4010c0:	4b96      	ldr	r3, [pc, #600]	; (40131c <pollingDigitAccessory+0x304>)
  4010c2:	781b      	ldrb	r3, [r3, #0]
  4010c4:	4283      	cmp	r3, r0
  4010c6:	d0cc      	beq.n	401062 <pollingDigitAccessory+0x4a>
      change_SSR = 0;
  4010c8:	2200      	movs	r2, #0
  4010ca:	4b8f      	ldr	r3, [pc, #572]	; (401308 <pollingDigitAccessory+0x2f0>)
  4010cc:	701a      	strb	r2, [r3, #0]
      info_SSR = info;  
  4010ce:	4b93      	ldr	r3, [pc, #588]	; (40131c <pollingDigitAccessory+0x304>)
  4010d0:	7018      	strb	r0, [r3, #0]
  4010d2:	e7c6      	b.n	401062 <pollingDigitAccessory+0x4a>
     info = read_byte_eeprom(ADDR_EEP(Set_BPD_mod));  
  4010d4:	2097      	movs	r0, #151	; 0x97
  4010d6:	4b90      	ldr	r3, [pc, #576]	; (401318 <pollingDigitAccessory+0x300>)
  4010d8:	4798      	blx	r3
     if (info_EBPD != info)
  4010da:	4b91      	ldr	r3, [pc, #580]	; (401320 <pollingDigitAccessory+0x308>)
  4010dc:	781b      	ldrb	r3, [r3, #0]
  4010de:	4283      	cmp	r3, r0
  4010e0:	d0c3      	beq.n	40106a <pollingDigitAccessory+0x52>
      change_EBPD = 0;
  4010e2:	2300      	movs	r3, #0
  4010e4:	4a89      	ldr	r2, [pc, #548]	; (40130c <pollingDigitAccessory+0x2f4>)
  4010e6:	7013      	strb	r3, [r2, #0]
	  change_EBP2 = 0;
  4010e8:	4a8e      	ldr	r2, [pc, #568]	; (401324 <pollingDigitAccessory+0x30c>)
  4010ea:	7013      	strb	r3, [r2, #0]
      info_EBPD = info;  
  4010ec:	4b8c      	ldr	r3, [pc, #560]	; (401320 <pollingDigitAccessory+0x308>)
  4010ee:	7018      	strb	r0, [r3, #0]
  4010f0:	e7bb      	b.n	40106a <pollingDigitAccessory+0x52>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_HWD) + AccessoryPresent_EepList(ACC_EEP_EHD);
  4010f2:	2002      	movs	r0, #2
  4010f4:	4e8c      	ldr	r6, [pc, #560]	; (401328 <pollingDigitAccessory+0x310>)
  4010f6:	47b0      	blx	r6
  4010f8:	4605      	mov	r5, r0
  4010fa:	2003      	movs	r0, #3
  4010fc:	47b0      	blx	r6
  4010fe:	4405      	add	r5, r0
  401100:	b2ed      	uxtb	r5, r5
           msk_clear_event = 0;                          // cancella tutto il byte 
  401102:	46a3      	mov	fp, r4
           bit_event       = (ALM_EHD_NTC_KO & 0x07);    // calcoliamo il primo bit degli allarmi dell'accessorio
  401104:	46a1      	mov	r9, r4
           byte_event      = (ALM_EHD_NTC_KO >> 3);      // troviamo il byte degli allarmi associati all'acc.
  401106:	4626      	mov	r6, r4
           nAlmLinkKO      = ALM_EHD_LINK;
  401108:	2707      	movs	r7, #7
           msk_event_poll  = 0x5F;                       //  i bit 7, 5, vengono assegnati dal modulo rd 
  40110a:	f04f 0a5f 	mov.w	sl, #95	; 0x5f
           addrSlave       = ADDR_HEATER; 
  40110e:	f04f 080a 	mov.w	r8, #10
   if(!AccPres_eepList && (sData.AccI2C[idxAcc].sts & STS_ACC_CONNECT))
  401112:	2d00      	cmp	r5, #0
  401114:	f040 81b6 	bne.w	401484 <pollingDigitAccessory+0x46c>
  401118:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  40111c:	4a75      	ldr	r2, [pc, #468]	; (4012f4 <pollingDigitAccessory+0x2dc>)
  40111e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  401122:	79db      	ldrb	r3, [r3, #7]
  401124:	f013 0f01 	tst.w	r3, #1
  401128:	f000 81ac 	beq.w	401484 <pollingDigitAccessory+0x46c>
       sData.AccI2C[idxAcc].comand = (WRITE_CMD | DISABLE_SLAVE);
  40112c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  401130:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  401134:	2282      	movs	r2, #130	; 0x82
  401136:	719a      	strb	r2, [r3, #6]
     sData.AccI2C[idxAcc].status_comand = (sData.AccI2C[idxAcc].comand & 0x3F); 
  401138:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  40113c:	496d      	ldr	r1, [pc, #436]	; (4012f4 <pollingDigitAccessory+0x2dc>)
  40113e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  401142:	f002 013f 	and.w	r1, r2, #63	; 0x3f
  401146:	75d9      	strb	r1, [r3, #23]
     if(WriteSlave(addrSlave, 0x00, sData.AccI2C[idxAcc].comand) == 1) 
  401148:	2100      	movs	r1, #0
  40114a:	4640      	mov	r0, r8
  40114c:	4b77      	ldr	r3, [pc, #476]	; (40132c <pollingDigitAccessory+0x314>)
  40114e:	4798      	blx	r3
  401150:	2801      	cmp	r0, #1
  401152:	f000 81f5 	beq.w	401540 <pollingDigitAccessory+0x528>
        if(sData.AccI2C[idxAcc].comand &  DISABLE_SLAVE) {   
  401156:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  40115a:	4a66      	ldr	r2, [pc, #408]	; (4012f4 <pollingDigitAccessory+0x2dc>)
  40115c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  401160:	799b      	ldrb	r3, [r3, #6]
  401162:	f013 0f02 	tst.w	r3, #2
  401166:	f000 81b0 	beq.w	4014ca <pollingDigitAccessory+0x4b2>
          sData.AccI2C[idxAcc].numCmdDisable++;   
  40116a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
  40116e:	4b61      	ldr	r3, [pc, #388]	; (4012f4 <pollingDigitAccessory+0x2dc>)
  401170:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  401174:	7a13      	ldrb	r3, [r2, #8]
  401176:	3301      	adds	r3, #1
  401178:	b2db      	uxtb	r3, r3
  40117a:	7213      	strb	r3, [r2, #8]
          sData.AccI2C[idxAcc].comand = (WRITE_CMD | DISABLE_SLAVE);
  40117c:	2182      	movs	r1, #130	; 0x82
  40117e:	7191      	strb	r1, [r2, #6]
          if(idxSeq)
  401180:	4a60      	ldr	r2, [pc, #384]	; (401304 <pollingDigitAccessory+0x2ec>)
  401182:	7812      	ldrb	r2, [r2, #0]
  401184:	2a00      	cmp	r2, #0
  401186:	f000 822b 	beq.w	4015e0 <pollingDigitAccessory+0x5c8>
            idxSeq--;  // riesegui almeno 3 tentativi prima di forzare la cancellazione.
  40118a:	3a01      	subs	r2, #1
  40118c:	495d      	ldr	r1, [pc, #372]	; (401304 <pollingDigitAccessory+0x2ec>)
  40118e:	700a      	strb	r2, [r1, #0]
          if (sData.AccI2C[idxAcc].numCmdDisable > 3) {
  401190:	2b03      	cmp	r3, #3
  401192:	f240 819a 	bls.w	4014ca <pollingDigitAccessory+0x4b2>
             RemoveDigitAccessory(idxAcc);  
  401196:	4620      	mov	r0, r4
  401198:	4b65      	ldr	r3, [pc, #404]	; (401330 <pollingDigitAccessory+0x318>)
  40119a:	4798      	blx	r3
             sData.AccI2C[idxAcc].comand = 0;  
  40119c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
  4011a0:	4b54      	ldr	r3, [pc, #336]	; (4012f4 <pollingDigitAccessory+0x2dc>)
  4011a2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  4011a6:	2200      	movs	r2, #0
  4011a8:	719a      	strb	r2, [r3, #6]
             return 1;
  4011aa:	e36c      	b.n	401886 <pollingDigitAccessory+0x86e>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_PHWD) + AccessoryPresent_EepList(ACC_EEP_PEHD);
  4011ac:	2001      	movs	r0, #1
  4011ae:	4e5e      	ldr	r6, [pc, #376]	; (401328 <pollingDigitAccessory+0x310>)
  4011b0:	47b0      	blx	r6
  4011b2:	4605      	mov	r5, r0
  4011b4:	2000      	movs	r0, #0
  4011b6:	47b0      	blx	r6
  4011b8:	4405      	add	r5, r0
  4011ba:	b2ed      	uxtb	r5, r5
           byte_event      = (ALM_PEH_NTC_KO >> 3);     // troviamo il byte degli allarmi associati all'acc.  
  4011bc:	4626      	mov	r6, r4
           addrSlave       = ADDR_PREHEATER;  
  4011be:	46a0      	mov	r8, r4
           nAlmLinkKO      = ALM_PEH_LINK;     
  4011c0:	2717      	movs	r7, #23
           msk_clear_event = 0;                         // cancella tutto il byte 
  4011c2:	f04f 0b00 	mov.w	fp, #0
           msk_event_poll  = 0x5F;                      //  i bit 7, 5, vengono assegnati dal modulo rd 
  4011c6:	f04f 0a5f 	mov.w	sl, #95	; 0x5f
           bit_event       = (ALM_PEH_NTC_KO & 0x07);   // calcoliamo il primo bit degli allarmi dell'accessorio
  4011ca:	46d9      	mov	r9, fp
        break;  
  4011cc:	e7a1      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_CWD);
  4011ce:	2004      	movs	r0, #4
  4011d0:	4b55      	ldr	r3, [pc, #340]	; (401328 <pollingDigitAccessory+0x310>)
  4011d2:	4798      	blx	r3
  4011d4:	4605      	mov	r5, r0
           byte_event      = (ALM_CWD_NTC_KO >> 3);     // troviamo il byte degli allarmi associati all'acc. 
  4011d6:	4626      	mov	r6, r4
           nAlmLinkKO      = ALM_CWD_LINK;
  4011d8:	270f      	movs	r7, #15
           msk_clear_event = 0;                         // cancella tutto il byte 
  4011da:	f04f 0b00 	mov.w	fp, #0
           msk_event_poll  = 0x1F;                      // i bits 7, 5, vengono assegnati dal modulo rd, mentre il bit 6 non gestito
  4011de:	f04f 0a1f 	mov.w	sl, #31
           bit_event       = (ALM_CWD_NTC_KO & 0x07);   // calcoliamo il primo bit degli allarmi dell'accessorio
  4011e2:	46d9      	mov	r9, fp
           addrSlave       = ADDR_COOLER;
  4011e4:	f04f 0814 	mov.w	r8, #20
        break;    
  4011e8:	e793      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_P1CO2);    
  4011ea:	2016      	movs	r0, #22
  4011ec:	4b4e      	ldr	r3, [pc, #312]	; (401328 <pollingDigitAccessory+0x310>)
  4011ee:	4798      	blx	r3
  4011f0:	4605      	mov	r5, r0
           byte_event      = (ALM_PCO2_EX1_KO >> 3);    // troviamo il byte degli allarmi associati all'acc. 
  4011f2:	4626      	mov	r6, r4
           nAlmLinkKO      = ALM_PCO2_EX1_LINK;           
  4011f4:	271b      	movs	r7, #27
           msk_clear_event = 0xF3;                      // cancella i bits 3, 2 
  4011f6:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
           msk_event_poll  = 0x04;                      // il bit 3 viene assegnato dal modulo RD, riceviamo solo il bit 2 dall'acc.
  4011fa:	f04f 0a04 	mov.w	sl, #4
           bit_event       = (ALM_PCO2_EX1_KO & 0x07);  // troviamo il primo bit degli allarmi dell'accessorio
  4011fe:	f04f 0902 	mov.w	r9, #2
           addrSlave       = ADDR_PROBE1_CO2;
  401202:	f04f 081e 	mov.w	r8, #30
        break;
  401206:	e784      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_P2CO2); 
  401208:	2017      	movs	r0, #23
  40120a:	4b47      	ldr	r3, [pc, #284]	; (401328 <pollingDigitAccessory+0x310>)
  40120c:	4798      	blx	r3
  40120e:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_PCO2_EX2_LINK;
  401210:	271e      	movs	r7, #30
           msk_clear_event = 0x1F;                      // cancella i bits 7, 6, 5
  401212:	f04f 0b1f 	mov.w	fp, #31
           msk_event_poll  = 0x10;                      // il bit 6, viene gestito dal modulo RD, riceviamo solo il bit 5 dall'acc.
  401216:	f04f 0a10 	mov.w	sl, #16
           bit_event       = (ALM_PCO2_EX2_KO & 0x07);  // troviamo il primo bit degli allarmi dell'accessorio
  40121a:	f04f 0905 	mov.w	r9, #5
           byte_event      = (ALM_PCO2_EX2_KO >> 3);    // troviamo il byte degli allarmi associati all'acc. 
  40121e:	2603      	movs	r6, #3
           addrSlave       = ADDR_PROBE2_CO2; 
  401220:	46d8      	mov	r8, fp
        break;
  401222:	e776      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_P1RH);   
  401224:	2013      	movs	r0, #19
  401226:	4b40      	ldr	r3, [pc, #256]	; (401328 <pollingDigitAccessory+0x310>)
  401228:	4798      	blx	r3
  40122a:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_PRH_EX1_LINK;
  40122c:	2723      	movs	r7, #35	; 0x23
           msk_clear_event = 0xE3;                      // cancella i bits 4, 3, 2 
  40122e:	f04f 0be3 	mov.w	fp, #227	; 0xe3
           msk_event_poll  = 0x04;                      // il bit 3, viene gestito dal modulo RD, riceviamo solo il bit 2 dall'acc.
  401232:	f04f 0a04 	mov.w	sl, #4
           bit_event       = (ALM_PRH_EX1_KO & 0x07);   // troviamo il primo bit degli allarmi dell'accessorio
  401236:	f04f 0902 	mov.w	r9, #2
           byte_event      = (ALM_PRH_EX1_KO >> 3);     // troviamo il byte degli allarmi associati all'acc. 
  40123a:	4656      	mov	r6, sl
           addrSlave       = ADDR_PROBE1_RH;
  40123c:	f04f 0822 	mov.w	r8, #34	; 0x22
        break;
  401240:	e767      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_P2RH);       
  401242:	2014      	movs	r0, #20
  401244:	4b38      	ldr	r3, [pc, #224]	; (401328 <pollingDigitAccessory+0x310>)
  401246:	4798      	blx	r3
  401248:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_PRH_EX2_LINK;
  40124a:	2726      	movs	r7, #38	; 0x26
           msk_clear_event = 0x1F;                      // cancella i bits 7, 6, 5
  40124c:	f04f 0b1f 	mov.w	fp, #31
           msk_event_poll  = 0x10;                      // il bit 6, viene gestito dal modulo RD, riceviamo solo il bit 5 dall'acc.
  401250:	f04f 0a10 	mov.w	sl, #16
           bit_event       = (ALM_PRH_EX2_KO & 0x07);   // troviamo il primo bit degli allarmi dell'accessorio
  401254:	f04f 0905 	mov.w	r9, #5
           byte_event      = (ALM_PRH_EX2_KO >> 3);     // troviamo il byte degli allarmi associati all'acc. 
  401258:	2604      	movs	r6, #4
           addrSlave       = ADDR_PROBE2_RH;
  40125a:	f04f 0823 	mov.w	r8, #35	; 0x23
        break;
  40125e:	e758      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_P1VOC);  
  401260:	2011      	movs	r0, #17
  401262:	4b31      	ldr	r3, [pc, #196]	; (401328 <pollingDigitAccessory+0x310>)
  401264:	4798      	blx	r3
  401266:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_VOC_EX1_LINK;
  401268:	272b      	movs	r7, #43	; 0x2b
           msk_clear_event = 0xF3;                       // cancella i bits 3, 2 
  40126a:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
           msk_event_poll  = 0x04;                       // il bit 3, viene gestito dal modulo RD, riceviamo solo il bit 2 dall'acc.
  40126e:	f04f 0a04 	mov.w	sl, #4
           bit_event       = (ALM_VOC_EX1_KO & 0x07);    // troviamo il primo bit degli allarmi dell'accessorio
  401272:	f04f 0902 	mov.w	r9, #2
           byte_event      = (ALM_VOC_EX1_KO >> 3);      // troviamo il byte degli allarmi associati all'acc. 
  401276:	2605      	movs	r6, #5
           addrSlave       = ADDR_PROBE1_VOC;
  401278:	f04f 0826 	mov.w	r8, #38	; 0x26
        break; 
  40127c:	e749      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList  = AccessoryPresent_EepList(ACC_EEP_AWP);   
  40127e:	2005      	movs	r0, #5
  401280:	4b29      	ldr	r3, [pc, #164]	; (401328 <pollingDigitAccessory+0x310>)
  401282:	4798      	blx	r3
  401284:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_AWP_LINK;
  401286:	273f      	movs	r7, #63	; 0x3f
           msk_clear_event = 0x3F;                    // cancella i bits 7, 6 
  401288:	46bb      	mov	fp, r7
           msk_event_poll  = 0x40;                    // il bit 7, viene gestito dal modulo RD.
  40128a:	f04f 0a40 	mov.w	sl, #64	; 0x40
           bit_event       = (ALM_AWP_KO & 0x07);     // troviamo il primo bit degli allarmi dell'accessorio
  40128e:	f04f 0906 	mov.w	r9, #6
           byte_event      = (ALM_AWP_KO >> 3);       // troviamo il byte degli allarmi associati all'acc. 
  401292:	2607      	movs	r6, #7
           addrSlave       = ADDR_AWP;
  401294:	f04f 0832 	mov.w	r8, #50	; 0x32
        break;    
  401298:	e73b      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList   = AccessoryPresent_EepList(ACC_EEP_PCAF);  
  40129a:	200e      	movs	r0, #14
  40129c:	4b22      	ldr	r3, [pc, #136]	; (401328 <pollingDigitAccessory+0x310>)
  40129e:	4798      	blx	r3
  4012a0:	4605      	mov	r5, r0
           nAlmLinkKO       = ALM_PCAF_LINK;
  4012a2:	2734      	movs	r7, #52	; 0x34
           msk_clear_event  = 0xC7;                    // cancella i bits 5, 4, 3
  4012a4:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
           msk_event_poll   = 0x08;                    // il bit 4, viene gestito dal modulo RD.
  4012a8:	f04f 0a08 	mov.w	sl, #8
           bit_event        = (ALM_PCAF_KO & 0x07);    // troviamo il primo bit degli allarmi dell'accessorio
  4012ac:	f04f 0903 	mov.w	r9, #3
           byte_event       = (ALM_PCAF_KO >> 3);      // troviamo il byte degli allarmi associati all'acc. 
  4012b0:	2606      	movs	r6, #6
           addrSlave        = ADDR_PROBE_CAF;
  4012b2:	f04f 0829 	mov.w	r8, #41	; 0x29
       break;
  4012b6:	e72c      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_PCAP);  
  4012b8:	200d      	movs	r0, #13
  4012ba:	4b1b      	ldr	r3, [pc, #108]	; (401328 <pollingDigitAccessory+0x310>)
  4012bc:	4798      	blx	r3
  4012be:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_PCAP_LINK;
  4012c0:	2731      	movs	r7, #49	; 0x31
           msk_clear_event = 0xF8;                    // cancella i bits 2, 1, 0
  4012c2:	f04f 0bf8 	mov.w	fp, #248	; 0xf8
           msk_event_poll  = 0x01;                    // il bit 1, viene gestito dal modulo RD.
  4012c6:	f04f 0a01 	mov.w	sl, #1
           bit_event       = (ALM_PCAP_KO & 0x07);    // troviamo il primo bit degli allarmi dell'accessorio
  4012ca:	f04f 0900 	mov.w	r9, #0
           byte_event      = (ALM_PCAP_KO >> 3);      // troviamo il byte degli allarmi associati all'acc. 
  4012ce:	2606      	movs	r6, #6
           addrSlave       = ADDR_PROBE_CAP;
  4012d0:	f04f 0828 	mov.w	r8, #40	; 0x28
        break;
  4012d4:	e71d      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_DPP);  
  4012d6:	200f      	movs	r0, #15
  4012d8:	4b13      	ldr	r3, [pc, #76]	; (401328 <pollingDigitAccessory+0x310>)
  4012da:	4798      	blx	r3
  4012dc:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_DPP_LINK;
  4012de:	2737      	movs	r7, #55	; 0x37
           msk_clear_event = 0x3F;                   // cancella i bits 7, 6 
  4012e0:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
           msk_event_poll  = 0x40;                   // il bit 7, viene gestito dal modulo RD.
  4012e4:	f04f 0a40 	mov.w	sl, #64	; 0x40
           bit_event       = (ALM_DPP_KO & 0x07);    // troviamo il primo bit degli allarmi dell'accessorio 
  4012e8:	f04f 0906 	mov.w	r9, #6
           byte_event      = (ALM_DPP_KO >> 3);      // troviamo il byte degli allarmi associati all'acc. 
  4012ec:	464e      	mov	r6, r9
           addrSlave       = ADDR_PROBE_DSP;
  4012ee:	f04f 082a 	mov.w	r8, #42	; 0x2a
        break;
  4012f2:	e70e      	b.n	401112 <pollingDigitAccessory+0xfa>
  4012f4:	200013ac 	.word	0x200013ac
  4012f8:	20000e80 	.word	0x20000e80
  4012fc:	400e0e00 	.word	0x400e0e00
  401300:	20000aef 	.word	0x20000aef
  401304:	20000af0 	.word	0x20000af0
  401308:	20000042 	.word	0x20000042
  40130c:	20000041 	.word	0x20000041
  401310:	400e1450 	.word	0x400e1450
  401314:	00403a89 	.word	0x00403a89
  401318:	0040a26d 	.word	0x0040a26d
  40131c:	20000e8b 	.word	0x20000e8b
  401320:	20000047 	.word	0x20000047
  401324:	20000040 	.word	0x20000040
  401328:	00400175 	.word	0x00400175
  40132c:	00403cdd 	.word	0x00403cdd
  401330:	00400439 	.word	0x00400439
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_DXD);  
  401334:	2007      	movs	r0, #7
  401336:	4bc0      	ldr	r3, [pc, #768]	; (401638 <pollingDigitAccessory+0x620>)
  401338:	4798      	blx	r3
  40133a:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_DXD_LINK;
  40133c:	272f      	movs	r7, #47	; 0x2f
           msk_clear_event = 0x3F;                         // cancella i bits 7, 6, 
  40133e:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
           msk_event_poll  = 0x40;                         // il bit 7, viene gestito dal modulo RD.
  401342:	f04f 0a40 	mov.w	sl, #64	; 0x40
           bit_event       = (ALM_DXD_COMPRESS & 0x07);    // troviamo il primo bit degli allarmi dell'accessorio 
  401346:	f04f 0906 	mov.w	r9, #6
           byte_event      = (ALM_DXD_COMPRESS >> 3);      // troviamo il byte degli allarmi associati all'acc. 
  40134a:	2605      	movs	r6, #5
           addrSlave       = ADDR_DXD;
  40134c:	f04f 0819 	mov.w	r8, #25
        break;   
  401350:	e6df      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_EXT1);
  401352:	2018      	movs	r0, #24
  401354:	4bb8      	ldr	r3, [pc, #736]	; (401638 <pollingDigitAccessory+0x620>)
  401356:	4798      	blx	r3
  401358:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_EXT1_LINK;
  40135a:	275c      	movs	r7, #92	; 0x5c
           msk_clear_event = 0xCF;                       // cancella i bits 4, 5 
  40135c:	f04f 0bcf 	mov.w	fp, #207	; 0xcf
           msk_event_poll  = 0x20;                       // il bit 4, viene gestito dal modulo RD, riceviamo solo il bit 5 dall'acc.
  401360:	f04f 0a20 	mov.w	sl, #32
           bit_event       = (ALM_EXT1_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  401364:	f04f 0905 	mov.w	r9, #5
           byte_event      = (ALM_EXT1_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  401368:	260b      	movs	r6, #11
           addrSlave       = ADDR_EXT1;
  40136a:	f04f 0833 	mov.w	r8, #51	; 0x33
        break;   
  40136e:	e6d0      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_EXT2);
  401370:	2019      	movs	r0, #25
  401372:	4bb1      	ldr	r3, [pc, #708]	; (401638 <pollingDigitAccessory+0x620>)
  401374:	4798      	blx	r3
  401376:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_EXT2_LINK;
  401378:	275e      	movs	r7, #94	; 0x5e
           msk_clear_event = 0x3F;                       // cancella i bits 6, 7 
  40137a:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
           msk_event_poll  = 0x80;                       // il bit 6, viene gestito dal modulo RD, riceviamo solo il bit 7 dall'acc.
  40137e:	f04f 0a80 	mov.w	sl, #128	; 0x80
           bit_event       = (ALM_EXT2_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  401382:	f04f 0907 	mov.w	r9, #7
           byte_event      = (ALM_EXT2_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  401386:	260b      	movs	r6, #11
           addrSlave       = ADDR_EXT2;
  401388:	f04f 0834 	mov.w	r8, #52	; 0x34
        break;
  40138c:	e6c1      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_EXT3);
  40138e:	201a      	movs	r0, #26
  401390:	4ba9      	ldr	r3, [pc, #676]	; (401638 <pollingDigitAccessory+0x620>)
  401392:	4798      	blx	r3
  401394:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_EXT3_LINK;
  401396:	2760      	movs	r7, #96	; 0x60
           msk_clear_event = 0xFC;                       // cancella i bits 0, 1 
  401398:	f04f 0bfc 	mov.w	fp, #252	; 0xfc
           msk_event_poll  = 0x02;                       // il bit 0, viene gestito dal modulo RD, riceviamo solo il bit 1 dall'acc.
  40139c:	f04f 0a02 	mov.w	sl, #2
           bit_event       = (ALM_EXT3_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  4013a0:	f04f 0901 	mov.w	r9, #1
           byte_event      = (ALM_EXT3_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  4013a4:	260c      	movs	r6, #12
           addrSlave       = ADDR_EXT3;
  4013a6:	f04f 0835 	mov.w	r8, #53	; 0x35
        break;
  4013aa:	e6b2      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_EXT4);
  4013ac:	201b      	movs	r0, #27
  4013ae:	4ba2      	ldr	r3, [pc, #648]	; (401638 <pollingDigitAccessory+0x620>)
  4013b0:	4798      	blx	r3
  4013b2:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_EXT4_LINK;
  4013b4:	2762      	movs	r7, #98	; 0x62
           msk_clear_event = 0xF3;                       // cancella i bits 2, 3 
  4013b6:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
           msk_event_poll  = 0x04;                       // il bit 2, viene gestito dal modulo RD, riceviamo solo il bit 3 dall'acc.
  4013ba:	f04f 0a04 	mov.w	sl, #4
           bit_event       = (ALM_EXT4_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  4013be:	f04f 0903 	mov.w	r9, #3
           byte_event      = (ALM_EXT4_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  4013c2:	260c      	movs	r6, #12
           addrSlave       = ADDR_EXT4;
  4013c4:	f04f 0836 	mov.w	r8, #54	; 0x36
        break;
  4013c8:	e6a3      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_FLW1);
  4013ca:	201c      	movs	r0, #28
  4013cc:	4b9a      	ldr	r3, [pc, #616]	; (401638 <pollingDigitAccessory+0x620>)
  4013ce:	4798      	blx	r3
  4013d0:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_FLW1_LINK;
  4013d2:	2764      	movs	r7, #100	; 0x64
           msk_clear_event = 0xCF;                       // cancella i bits 4, 5 
  4013d4:	f04f 0bcf 	mov.w	fp, #207	; 0xcf
           msk_event_poll  = 0x20;                       // il bit 4, viene gestito dal modulo RD, riceviamo solo il bit 5 dall'acc.
  4013d8:	f04f 0a20 	mov.w	sl, #32
           bit_event       = (ALM_FLW1_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  4013dc:	f04f 0905 	mov.w	r9, #5
           byte_event      = (ALM_FLW1_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  4013e0:	260c      	movs	r6, #12
           addrSlave       = ADDR_FLW1;
  4013e2:	f04f 083c 	mov.w	r8, #60	; 0x3c
        break;   
  4013e6:	e694      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_FLW2);
  4013e8:	201d      	movs	r0, #29
  4013ea:	4b93      	ldr	r3, [pc, #588]	; (401638 <pollingDigitAccessory+0x620>)
  4013ec:	4798      	blx	r3
  4013ee:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_FLW2_LINK;
  4013f0:	2766      	movs	r7, #102	; 0x66
           msk_clear_event = 0x3F;                       // cancella i bits 6, 7 
  4013f2:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
           msk_event_poll  = 0x80;                       // il bit 6, viene gestito dal modulo RD, riceviamo solo il bit 7 dall'acc.
  4013f6:	f04f 0a80 	mov.w	sl, #128	; 0x80
           bit_event       = (ALM_FLW2_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  4013fa:	f04f 0907 	mov.w	r9, #7
           byte_event      = (ALM_FLW2_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  4013fe:	260c      	movs	r6, #12
           addrSlave       = ADDR_FLW2;
  401400:	f04f 083d 	mov.w	r8, #61	; 0x3d
        break; 
  401404:	e685      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_EBPD);
  401406:	2015      	movs	r0, #21
  401408:	4b8b      	ldr	r3, [pc, #556]	; (401638 <pollingDigitAccessory+0x620>)
  40140a:	4798      	blx	r3
  40140c:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_EBPD_LINK;
  40140e:	2768      	movs	r7, #104	; 0x68
           msk_clear_event = 0xFC;                      // cancella i bits 0, 1 
  401410:	f04f 0bfc 	mov.w	fp, #252	; 0xfc
           msk_event_poll  = 0x02;                      // il bit 0, viene gestito dal modulo RD, riceviamo solo il bit 1 dall'acc.
  401414:	f04f 0a02 	mov.w	sl, #2
           bit_event       = (ALM_EBPD_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  401418:	f04f 0901 	mov.w	r9, #1
           byte_event      = (ALM_EBPD_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  40141c:	260d      	movs	r6, #13
           addrSlave       = ADDR_EBPD;
  40141e:	f04f 083f 	mov.w	r8, #63	; 0x3f
        break; 
  401422:	e676      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_SSR);
  401424:	2012      	movs	r0, #18
  401426:	4b84      	ldr	r3, [pc, #528]	; (401638 <pollingDigitAccessory+0x620>)
  401428:	4798      	blx	r3
  40142a:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_SSR_LINK;
  40142c:	276a      	movs	r7, #106	; 0x6a
           msk_clear_event = 0xF3;                      // cancella i bits 2, 3 
  40142e:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
           msk_event_poll  = 0x04;                      // il bit 2, viene gestito dal modulo RD, riceviamo solo il bit 3 dall'acc.
  401432:	f04f 0a04 	mov.w	sl, #4
           bit_event       = (ALM_SSR_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  401436:	f04f 0903 	mov.w	r9, #3
           byte_event      = (ALM_SSR_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  40143a:	260d      	movs	r6, #13
           addrSlave       = ADDR_SSR;
  40143c:	f04f 083e 	mov.w	r8, #62	; 0x3e
        break; 
  401440:	e667      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_EBP2);
  401442:	2010      	movs	r0, #16
  401444:	4b7c      	ldr	r3, [pc, #496]	; (401638 <pollingDigitAccessory+0x620>)
  401446:	4798      	blx	r3
  401448:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_EBP2_LINK;
  40144a:	276c      	movs	r7, #108	; 0x6c
           msk_clear_event = 0xCF;                       // cancella i bits 4, 5 
  40144c:	f04f 0bcf 	mov.w	fp, #207	; 0xcf
           msk_event_poll  = 0x20;                       // il bit 4, viene gestito dal modulo RD, riceviamo solo il bit 5 dall'acc.
  401450:	f04f 0a20 	mov.w	sl, #32
           bit_event       = (ALM_EBP2_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  401454:	f04f 0905 	mov.w	r9, #5
           byte_event      = (ALM_EBP2_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  401458:	260d      	movs	r6, #13
           addrSlave       = ADDR_EBP2;
  40145a:	f04f 0840 	mov.w	r8, #64	; 0x40
        break; 		
  40145e:	e658      	b.n	401112 <pollingDigitAccessory+0xfa>
           AccPres_eepList = AccessoryPresent_EepList(ACC_EEP_DSC);
  401460:	201e      	movs	r0, #30
  401462:	4b75      	ldr	r3, [pc, #468]	; (401638 <pollingDigitAccessory+0x620>)
  401464:	4798      	blx	r3
  401466:	4605      	mov	r5, r0
           nAlmLinkKO      = ALM_DSC_LINK;
  401468:	2719      	movs	r7, #25
           msk_clear_event = 0xFC;                       // cancella i bits 0, 1 
  40146a:	f04f 0bfc 	mov.w	fp, #252	; 0xfc
           msk_event_poll  = 0x02;                       // il bit 1, viene gestito dal modulo RD, riceviamo solo il bit 5 dall'acc.
  40146e:	f04f 0a02 	mov.w	sl, #2
           bit_event       = (ALM_DSC_KO & 0x07);       // troviamo il primo bit degli allarmi dell'accessorio
  401472:	f04f 0900 	mov.w	r9, #0
           byte_event      = (ALM_DSC_KO >> 3);         // troviamo il byte degli allarmi associati all'acc. 
  401476:	2603      	movs	r6, #3
           addrSlave       = ADDR_DSC;
  401478:	f04f 0841 	mov.w	r8, #65	; 0x41
        break; 	
  40147c:	e649      	b.n	401112 <pollingDigitAccessory+0xfa>
   byte byte_event, bit_event, msk_event_poll, msk_clear_event = 0, nAlmLinkKO;
  40147e:	f04f 0b00 	mov.w	fp, #0
  401482:	e646      	b.n	401112 <pollingDigitAccessory+0xfa>
   if(sData.AccI2C[idxAcc].comand & WRITE_CMD) 
  401484:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  401488:	4a6c      	ldr	r2, [pc, #432]	; (40163c <pollingDigitAccessory+0x624>)
  40148a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40148e:	799a      	ldrb	r2, [r3, #6]
  401490:	f012 0f80 	tst.w	r2, #128	; 0x80
  401494:	f47f ae50 	bne.w	401138 <pollingDigitAccessory+0x120>
  }else if(sData.RegDXD.processor_I2C && (sData.AccI2C[ACC_I2C_DXD].sts & STS_ACC_CONNECT)) {
  401498:	4b68      	ldr	r3, [pc, #416]	; (40163c <pollingDigitAccessory+0x624>)
  40149a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
  40149e:	2b00      	cmp	r3, #0
  4014a0:	f000 80a8 	beq.w	4015f4 <pollingDigitAccessory+0x5dc>
  4014a4:	4a65      	ldr	r2, [pc, #404]	; (40163c <pollingDigitAccessory+0x624>)
  4014a6:	f892 20df 	ldrb.w	r2, [r2, #223]	; 0xdf
  4014aa:	f012 0f01 	tst.w	r2, #1
  4014ae:	f000 80a1 	beq.w	4015f4 <pollingDigitAccessory+0x5dc>
    if(sData.RegDXD.processor_I2C & CHANGE_FUNC_COMPRESS)        // Cambia modo di funzionare da Caldo a Freddo e viceversa 
  4014b2:	f013 0f01 	tst.w	r3, #1
  4014b6:	f040 8097 	bne.w	4015e8 <pollingDigitAccessory+0x5d0>
    else if (sData.RegDXD.processor_I2C & CHANGE_VAL_0_10V)  // Cambia il valore della potenza del Compressore (da 0.0V a 10.0V).
  4014ba:	f013 0f02 	tst.w	r3, #2
  4014be:	f040 8096 	bne.w	4015ee <pollingDigitAccessory+0x5d6>
      sData.RegDXD.processor_I2C = 0;  
  4014c2:	2200      	movs	r2, #0
  4014c4:	4b5d      	ldr	r3, [pc, #372]	; (40163c <pollingDigitAccessory+0x624>)
  4014c6:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
      if (!AccPres_eepList) {
  4014ca:	2d00      	cmp	r5, #0
  4014cc:	f000 81df 	beq.w	40188e <pollingDigitAccessory+0x876>
         sData.AccI2C[idxAcc].cnt_link_ko++; 
  4014d0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4014d4:	4a59      	ldr	r2, [pc, #356]	; (40163c <pollingDigitAccessory+0x624>)
  4014d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  4014da:	7d5a      	ldrb	r2, [r3, #21]
  4014dc:	3201      	adds	r2, #1
  4014de:	755a      	strb	r2, [r3, #21]
         sData.AccI2C[idxAcc].cnt_persist_link_ko++;
  4014e0:	7d9b      	ldrb	r3, [r3, #22]
  4014e2:	3301      	adds	r3, #1
  4014e4:	b2db      	uxtb	r3, r3
         if(sData.AccI2C[idxAcc].cnt_persist_link_ko > NUM_CONSECUTIVE_CALLS_MISSING)
  4014e6:	2b24      	cmp	r3, #36	; 0x24
  4014e8:	f240 81e3 	bls.w	4018b2 <pollingDigitAccessory+0x89a>
            sData.AccI2C[idxAcc].cnt_persist_link_ko = NUM_CONSECUTIVE_CALLS_MISSING;
  4014ec:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4014f0:	4a52      	ldr	r2, [pc, #328]	; (40163c <pollingDigitAccessory+0x624>)
  4014f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  4014f6:	2224      	movs	r2, #36	; 0x24
  4014f8:	759a      	strb	r2, [r3, #22]
         sData.Events[byte_event] &= msk_clear_event; 
  4014fa:	4b50      	ldr	r3, [pc, #320]	; (40163c <pollingDigitAccessory+0x624>)
  4014fc:	441e      	add	r6, r3
  4014fe:	f896 21f7 	ldrb.w	r2, [r6, #503]	; 0x1f7
  401502:	ea0b 0b02 	and.w	fp, fp, r2
  401506:	f886 b1f7 	strb.w	fp, [r6, #503]	; 0x1f7
         sData.AccI2C[idxAcc].measure1 = 0;
  40150a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
  40150e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  401512:	2200      	movs	r2, #0
  401514:	725a      	strb	r2, [r3, #9]
  401516:	729a      	strb	r2, [r3, #10]
         sData.AccI2C[idxAcc].measure2 = 0;
  401518:	72da      	strb	r2, [r3, #11]
  40151a:	731a      	strb	r2, [r3, #12]
         sData.AccI2C[idxAcc].measure3 = 0;
  40151c:	735a      	strb	r2, [r3, #13]
  40151e:	739a      	strb	r2, [r3, #14]
         sData.AccI2C[idxAcc].measure4 = 0;
  401520:	73da      	strb	r2, [r3, #15]
  401522:	741a      	strb	r2, [r3, #16]
         InsertAlarm(nAlmLinkKO);  
  401524:	4638      	mov	r0, r7
  401526:	4b46      	ldr	r3, [pc, #280]	; (401640 <pollingDigitAccessory+0x628>)
  401528:	4798      	blx	r3
         TAG_DigitAccessoryNotOperating(idxAcc);
  40152a:	4620      	mov	r0, r4
  40152c:	4b45      	ldr	r3, [pc, #276]	; (401644 <pollingDigitAccessory+0x62c>)
  40152e:	4798      	blx	r3
         if(idxAcc == ACC_I2C_DXD)
  401530:	2c0c      	cmp	r4, #12
  401532:	f040 8188 	bne.w	401846 <pollingDigitAccessory+0x82e>
           sData.RegDXD.defrost_on = 0;
  401536:	2200      	movs	r2, #0
  401538:	4b40      	ldr	r3, [pc, #256]	; (40163c <pollingDigitAccessory+0x624>)
  40153a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
  40153e:	e182      	b.n	401846 <pollingDigitAccessory+0x82e>
       if(sData.AccI2C[idxAcc].comand & CMD_ON) {
  401540:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  401544:	4a3d      	ldr	r2, [pc, #244]	; (40163c <pollingDigitAccessory+0x624>)
  401546:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40154a:	799b      	ldrb	r3, [r3, #6]
  40154c:	f013 0f01 	tst.w	r3, #1
  401550:	d023      	beq.n	40159a <pollingDigitAccessory+0x582>
         TAG_DigitAccessoryOn(idxAcc);
  401552:	4620      	mov	r0, r4
  401554:	4b3c      	ldr	r3, [pc, #240]	; (401648 <pollingDigitAccessory+0x630>)
  401556:	4798      	blx	r3
         sData.AccI2C[idxAcc].comand &= ~CMD_ON;
  401558:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  40155c:	4a37      	ldr	r2, [pc, #220]	; (40163c <pollingDigitAccessory+0x624>)
  40155e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  401562:	799a      	ldrb	r2, [r3, #6]
  401564:	f022 0201 	bic.w	r2, r2, #1
  401568:	719a      	strb	r2, [r3, #6]
       if(sData.AccI2C[idxAcc].comand &  DISABLE_SLAVE) {
  40156a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  40156e:	4a33      	ldr	r2, [pc, #204]	; (40163c <pollingDigitAccessory+0x624>)
  401570:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  401574:	799b      	ldrb	r3, [r3, #6]
  401576:	f013 0f02 	tst.w	r3, #2
  40157a:	d11b      	bne.n	4015b4 <pollingDigitAccessory+0x59c>
           if(idxSeq)
  40157c:	4a33      	ldr	r2, [pc, #204]	; (40164c <pollingDigitAccessory+0x634>)
  40157e:	7812      	ldrb	r2, [r2, #0]
  401580:	b352      	cbz	r2, 4015d8 <pollingDigitAccessory+0x5c0>
             idxSeq--; 
  401582:	3a01      	subs	r2, #1
  401584:	4931      	ldr	r1, [pc, #196]	; (40164c <pollingDigitAccessory+0x634>)
  401586:	700a      	strb	r2, [r1, #0]
       sData.AccI2C[idxAcc].comand &= ~WRITE_CMD;  
  401588:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
  40158c:	492b      	ldr	r1, [pc, #172]	; (40163c <pollingDigitAccessory+0x624>)
  40158e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  401592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401596:	7193      	strb	r3, [r2, #6]
  401598:	e0b8      	b.n	40170c <pollingDigitAccessory+0x6f4>
         TAG_DigitAccessoryOff(idxAcc);
  40159a:	4620      	mov	r0, r4
  40159c:	4b2c      	ldr	r3, [pc, #176]	; (401650 <pollingDigitAccessory+0x638>)
  40159e:	4798      	blx	r3
         sData.AccI2C[idxAcc].sts &= ~STS_ACC_ON;
  4015a0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4015a4:	4a25      	ldr	r2, [pc, #148]	; (40163c <pollingDigitAccessory+0x624>)
  4015a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  4015aa:	79da      	ldrb	r2, [r3, #7]
  4015ac:	f022 0204 	bic.w	r2, r2, #4
  4015b0:	71da      	strb	r2, [r3, #7]
  4015b2:	e7da      	b.n	40156a <pollingDigitAccessory+0x552>
         sData.Events[byte_event]  &=  msk_clear_event;
  4015b4:	4613      	mov	r3, r2
  4015b6:	4416      	add	r6, r2
  4015b8:	f896 21f7 	ldrb.w	r2, [r6, #503]	; 0x1f7
  4015bc:	ea0b 0b02 	and.w	fp, fp, r2
  4015c0:	f886 b1f7 	strb.w	fp, [r6, #503]	; 0x1f7
         sData.AccI2C[idxAcc].comand = 0;  
  4015c4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
  4015c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  4015cc:	2200      	movs	r2, #0
  4015ce:	719a      	strb	r2, [r3, #6]
         RemoveDigitAccessory(idxAcc);
  4015d0:	4620      	mov	r0, r4
  4015d2:	4b20      	ldr	r3, [pc, #128]	; (401654 <pollingDigitAccessory+0x63c>)
  4015d4:	4798      	blx	r3
         return 1;
  4015d6:	e156      	b.n	401886 <pollingDigitAccessory+0x86e>
             idxSeq = (TOT_ACCESSORY_I2C-1);                
  4015d8:	2116      	movs	r1, #22
  4015da:	4a1c      	ldr	r2, [pc, #112]	; (40164c <pollingDigitAccessory+0x634>)
  4015dc:	7011      	strb	r1, [r2, #0]
  4015de:	e7d3      	b.n	401588 <pollingDigitAccessory+0x570>
            idxSeq = (TOT_ACCESSORY_I2C-1);  
  4015e0:	2116      	movs	r1, #22
  4015e2:	4a1a      	ldr	r2, [pc, #104]	; (40164c <pollingDigitAccessory+0x634>)
  4015e4:	7011      	strb	r1, [r2, #0]
  4015e6:	e5d3      	b.n	401190 <pollingDigitAccessory+0x178>
      write_func_compressor_Dxd();
  4015e8:	4b1b      	ldr	r3, [pc, #108]	; (401658 <pollingDigitAccessory+0x640>)
  4015ea:	4798      	blx	r3
  4015ec:	e76d      	b.n	4014ca <pollingDigitAccessory+0x4b2>
      write_regulate_Dxd();
  4015ee:	4b1b      	ldr	r3, [pc, #108]	; (40165c <pollingDigitAccessory+0x644>)
  4015f0:	4798      	blx	r3
  4015f2:	e76a      	b.n	4014ca <pollingDigitAccessory+0x4b2>
  } else if ((idxAcc == ACC_I2C_EBPD) && (change_EBPD == 0))
  4015f4:	2c13      	cmp	r4, #19
  4015f6:	d033      	beq.n	401660 <pollingDigitAccessory+0x648>
  }else if ((idxAcc == ACC_I2C_EBP2) && (change_EBP2 == 0))
  4015f8:	2c15      	cmp	r4, #21
  4015fa:	d04b      	beq.n	401694 <pollingDigitAccessory+0x67c>
  else if ((idxAcc == ACC_I2C_SSR) && (change_SSR == 0))
  4015fc:	2c14      	cmp	r4, #20
  4015fe:	d05d      	beq.n	4016bc <pollingDigitAccessory+0x6a4>
     switch (idxAcc) 
  401600:	2c16      	cmp	r4, #22
  401602:	f63f af62 	bhi.w	4014ca <pollingDigitAccessory+0x4b2>
  401606:	e8df f014 	tbh	[pc, r4, lsl #1]
  40160a:	0073      	.short	0x0073
  40160c:	00730073 	.word	0x00730073
  401610:	00a400a4 	.word	0x00a400a4
  401614:	00a400a4 	.word	0x00a400a4
  401618:	00a400a4 	.word	0x00a400a4
  40161c:	00f400ea 	.word	0x00f400ea
  401620:	00980108 	.word	0x00980108
  401624:	00b800ae 	.word	0x00b800ae
  401628:	00cc00c2 	.word	0x00cc00c2
  40162c:	00e000d6 	.word	0x00e000d6
  401630:	005c002e 	.word	0x005c002e
  401634:	00fe002e 	.word	0x00fe002e
  401638:	00400175 	.word	0x00400175
  40163c:	200013ac 	.word	0x200013ac
  401640:	00403555 	.word	0x00403555
  401644:	00400231 	.word	0x00400231
  401648:	0040019d 	.word	0x0040019d
  40164c:	20000af0 	.word	0x20000af0
  401650:	004001d9 	.word	0x004001d9
  401654:	00400439 	.word	0x00400439
  401658:	0040079d 	.word	0x0040079d
  40165c:	00400811 	.word	0x00400811
  } else if ((idxAcc == ACC_I2C_EBPD) && (change_EBPD == 0))
  401660:	4b99      	ldr	r3, [pc, #612]	; (4018c8 <pollingDigitAccessory+0x8b0>)
  401662:	781b      	ldrb	r3, [r3, #0]
  401664:	b14b      	cbz	r3, 40167a <pollingDigitAccessory+0x662>
            risp = read_ext_Sensor(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  401666:	f8cd b000 	str.w	fp, [sp]
  40166a:	464b      	mov	r3, r9
  40166c:	4632      	mov	r2, r6
  40166e:	4621      	mov	r1, r4
  401670:	4640      	mov	r0, r8
  401672:	f8df 827c 	ldr.w	r8, [pc, #636]	; 4018f0 <pollingDigitAccessory+0x8d8>
  401676:	47c0      	blx	r8
         break;
  401678:	e045      	b.n	401706 <pollingDigitAccessory+0x6ee>
      if(WriteSlave(ADDR_EBPD, 0x0B, (byte)info_EBPD)==1)
  40167a:	4b94      	ldr	r3, [pc, #592]	; (4018cc <pollingDigitAccessory+0x8b4>)
  40167c:	781a      	ldrb	r2, [r3, #0]
  40167e:	210b      	movs	r1, #11
  401680:	203f      	movs	r0, #63	; 0x3f
  401682:	4b93      	ldr	r3, [pc, #588]	; (4018d0 <pollingDigitAccessory+0x8b8>)
  401684:	4798      	blx	r3
  401686:	2801      	cmp	r0, #1
  401688:	f47f af1f 	bne.w	4014ca <pollingDigitAccessory+0x4b2>
      change_EBPD = 1;
  40168c:	2201      	movs	r2, #1
  40168e:	4b8e      	ldr	r3, [pc, #568]	; (4018c8 <pollingDigitAccessory+0x8b0>)
  401690:	701a      	strb	r2, [r3, #0]
  401692:	e71a      	b.n	4014ca <pollingDigitAccessory+0x4b2>
  }else if ((idxAcc == ACC_I2C_EBP2) && (change_EBP2 == 0))
  401694:	4b8f      	ldr	r3, [pc, #572]	; (4018d4 <pollingDigitAccessory+0x8bc>)
  401696:	781b      	ldrb	r3, [r3, #0]
  401698:	2b00      	cmp	r3, #0
  40169a:	d1e4      	bne.n	401666 <pollingDigitAccessory+0x64e>
		if(WriteSlave(ADDR_EBP2, 0x0B, (byte)(100-info_EBPD))==1)
  40169c:	4b8b      	ldr	r3, [pc, #556]	; (4018cc <pollingDigitAccessory+0x8b4>)
  40169e:	781a      	ldrb	r2, [r3, #0]
  4016a0:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
  4016a4:	b2d2      	uxtb	r2, r2
  4016a6:	210b      	movs	r1, #11
  4016a8:	2040      	movs	r0, #64	; 0x40
  4016aa:	4b89      	ldr	r3, [pc, #548]	; (4018d0 <pollingDigitAccessory+0x8b8>)
  4016ac:	4798      	blx	r3
  4016ae:	2801      	cmp	r0, #1
  4016b0:	f47f af0b 	bne.w	4014ca <pollingDigitAccessory+0x4b2>
			   change_EBP2 = 1;  
  4016b4:	2201      	movs	r2, #1
  4016b6:	4b87      	ldr	r3, [pc, #540]	; (4018d4 <pollingDigitAccessory+0x8bc>)
  4016b8:	701a      	strb	r2, [r3, #0]
  4016ba:	e706      	b.n	4014ca <pollingDigitAccessory+0x4b2>
  else if ((idxAcc == ACC_I2C_SSR) && (change_SSR == 0))
  4016bc:	4b86      	ldr	r3, [pc, #536]	; (4018d8 <pollingDigitAccessory+0x8c0>)
  4016be:	781b      	ldrb	r3, [r3, #0]
  4016c0:	b14b      	cbz	r3, 4016d6 <pollingDigitAccessory+0x6be>
            risp = read_ext_Sensor(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  4016c2:	f8cd b000 	str.w	fp, [sp]
  4016c6:	464b      	mov	r3, r9
  4016c8:	4632      	mov	r2, r6
  4016ca:	2114      	movs	r1, #20
  4016cc:	4640      	mov	r0, r8
  4016ce:	f8df 8220 	ldr.w	r8, [pc, #544]	; 4018f0 <pollingDigitAccessory+0x8d8>
  4016d2:	47c0      	blx	r8
         break;
  4016d4:	e017      	b.n	401706 <pollingDigitAccessory+0x6ee>
      if(WriteSlave(ADDR_SSR, 0x0B, (byte)info_SSR)==1)
  4016d6:	4b81      	ldr	r3, [pc, #516]	; (4018dc <pollingDigitAccessory+0x8c4>)
  4016d8:	781a      	ldrb	r2, [r3, #0]
  4016da:	210b      	movs	r1, #11
  4016dc:	203e      	movs	r0, #62	; 0x3e
  4016de:	4b7c      	ldr	r3, [pc, #496]	; (4018d0 <pollingDigitAccessory+0x8b8>)
  4016e0:	4798      	blx	r3
  4016e2:	2801      	cmp	r0, #1
  4016e4:	f47f aef1 	bne.w	4014ca <pollingDigitAccessory+0x4b2>
        change_SSR = 1;
  4016e8:	2201      	movs	r2, #1
  4016ea:	4b7b      	ldr	r3, [pc, #492]	; (4018d8 <pollingDigitAccessory+0x8c0>)
  4016ec:	701a      	strb	r2, [r3, #0]
  4016ee:	e6ec      	b.n	4014ca <pollingDigitAccessory+0x4b2>
           risp = read_Access_clima(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event, msk_event_poll); 
  4016f0:	f8cd a004 	str.w	sl, [sp, #4]
  4016f4:	f8cd b000 	str.w	fp, [sp]
  4016f8:	464b      	mov	r3, r9
  4016fa:	4632      	mov	r2, r6
  4016fc:	4621      	mov	r1, r4
  4016fe:	4640      	mov	r0, r8
  401700:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 4018f4 <pollingDigitAccessory+0x8dc>
  401704:	47c0      	blx	r8
  if(risp) {
  401706:	2800      	cmp	r0, #0
  401708:	f43f aedf 	beq.w	4014ca <pollingDigitAccessory+0x4b2>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40170c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401710:	4b73      	ldr	r3, [pc, #460]	; (4018e0 <pollingDigitAccessory+0x8c8>)
  401712:	631a      	str	r2, [r3, #48]	; 0x30
      if (!AccPres_eepList)  {
  401714:	2d00      	cmp	r5, #0
  401716:	f040 8089 	bne.w	40182c <pollingDigitAccessory+0x814>
        InsertDigitAccessory(idxAcc); 
  40171a:	4620      	mov	r0, r4
  40171c:	4b71      	ldr	r3, [pc, #452]	; (4018e4 <pollingDigitAccessory+0x8cc>)
  40171e:	4798      	blx	r3
        sData.AccI2C[idxAcc].level_link = 10;
  401720:	4a71      	ldr	r2, [pc, #452]	; (4018e8 <pollingDigitAccessory+0x8d0>)
  401722:	00e1      	lsls	r1, r4, #3
  401724:	190b      	adds	r3, r1, r4
  401726:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40172a:	200a      	movs	r0, #10
  40172c:	74d8      	strb	r0, [r3, #19]
      sData.AccI2C[idxAcc].cnt_persist_link_ko = 0;
  40172e:	2000      	movs	r0, #0
  401730:	7598      	strb	r0, [r3, #22]
      sData.AccI2C[idxAcc].cnt_link_ok++; 
  401732:	7d1a      	ldrb	r2, [r3, #20]
  401734:	3201      	adds	r2, #1
  401736:	751a      	strb	r2, [r3, #20]
  401738:	e0a5      	b.n	401886 <pollingDigitAccessory+0x86e>
           risp = read_Access_Dxd(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event, msk_event_poll); 
  40173a:	f8cd a004 	str.w	sl, [sp, #4]
  40173e:	f8cd b000 	str.w	fp, [sp]
  401742:	464b      	mov	r3, r9
  401744:	4632      	mov	r2, r6
  401746:	210c      	movs	r1, #12
  401748:	4640      	mov	r0, r8
  40174a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 4018f8 <pollingDigitAccessory+0x8e0>
  40174e:	47c0      	blx	r8
         break;
  401750:	e7d9      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_Sensor_Air(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  401752:	f8cd b000 	str.w	fp, [sp]
  401756:	464b      	mov	r3, r9
  401758:	4632      	mov	r2, r6
  40175a:	4621      	mov	r1, r4
  40175c:	4640      	mov	r0, r8
  40175e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 4018fc <pollingDigitAccessory+0x8e4>
  401762:	47c0      	blx	r8
         break;
  401764:	e7cf      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_ext_Sensor(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  401766:	f8cd b000 	str.w	fp, [sp]
  40176a:	464b      	mov	r3, r9
  40176c:	4632      	mov	r2, r6
  40176e:	210d      	movs	r1, #13
  401770:	4640      	mov	r0, r8
  401772:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4018f0 <pollingDigitAccessory+0x8d8>
  401776:	47c0      	blx	r8
         break;
  401778:	e7c5      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_ext_Sensor(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  40177a:	f8cd b000 	str.w	fp, [sp]
  40177e:	464b      	mov	r3, r9
  401780:	4632      	mov	r2, r6
  401782:	210e      	movs	r1, #14
  401784:	4640      	mov	r0, r8
  401786:	f8df 8168 	ldr.w	r8, [pc, #360]	; 4018f0 <pollingDigitAccessory+0x8d8>
  40178a:	47c0      	blx	r8
         break;         
  40178c:	e7bb      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_ext_Sensor(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  40178e:	f8cd b000 	str.w	fp, [sp]
  401792:	464b      	mov	r3, r9
  401794:	4632      	mov	r2, r6
  401796:	210f      	movs	r1, #15
  401798:	4640      	mov	r0, r8
  40179a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 4018f0 <pollingDigitAccessory+0x8d8>
  40179e:	47c0      	blx	r8
         break;
  4017a0:	e7b1      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_ext_Sensor(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  4017a2:	f8cd b000 	str.w	fp, [sp]
  4017a6:	464b      	mov	r3, r9
  4017a8:	4632      	mov	r2, r6
  4017aa:	2110      	movs	r1, #16
  4017ac:	4640      	mov	r0, r8
  4017ae:	f8df 8140 	ldr.w	r8, [pc, #320]	; 4018f0 <pollingDigitAccessory+0x8d8>
  4017b2:	47c0      	blx	r8
         break;
  4017b4:	e7a7      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_ext_Sensor(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  4017b6:	f8cd b000 	str.w	fp, [sp]
  4017ba:	464b      	mov	r3, r9
  4017bc:	4632      	mov	r2, r6
  4017be:	2111      	movs	r1, #17
  4017c0:	4640      	mov	r0, r8
  4017c2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 4018f0 <pollingDigitAccessory+0x8d8>
  4017c6:	47c0      	blx	r8
         break;
  4017c8:	e79d      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_ext_Sensor(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);   
  4017ca:	f8cd b000 	str.w	fp, [sp]
  4017ce:	464b      	mov	r3, r9
  4017d0:	4632      	mov	r2, r6
  4017d2:	2112      	movs	r1, #18
  4017d4:	4640      	mov	r0, r8
  4017d6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4018f0 <pollingDigitAccessory+0x8d8>
  4017da:	47c0      	blx	r8
         break;         
  4017dc:	e793      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_Sensor_Pressure(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event); 
  4017de:	f8cd b000 	str.w	fp, [sp]
  4017e2:	464b      	mov	r3, r9
  4017e4:	4632      	mov	r2, r6
  4017e6:	2109      	movs	r1, #9
  4017e8:	4640      	mov	r0, r8
  4017ea:	f8df 8114 	ldr.w	r8, [pc, #276]	; 401900 <pollingDigitAccessory+0x8e8>
  4017ee:	47c0      	blx	r8
         break;
  4017f0:	e789      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_Sensor_Pressure(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);
  4017f2:	f8cd b000 	str.w	fp, [sp]
  4017f6:	464b      	mov	r3, r9
  4017f8:	4632      	mov	r2, r6
  4017fa:	210a      	movs	r1, #10
  4017fc:	4640      	mov	r0, r8
  4017fe:	f8df 8100 	ldr.w	r8, [pc, #256]	; 401900 <pollingDigitAccessory+0x8e8>
  401802:	47c0      	blx	r8
         break;
  401804:	e77f      	b.n	401706 <pollingDigitAccessory+0x6ee>
            risp = read_DSC(addrSlave, idxAcc, byte_event, bit_event, msk_clear_event);
  401806:	f8cd b000 	str.w	fp, [sp]
  40180a:	464b      	mov	r3, r9
  40180c:	4632      	mov	r2, r6
  40180e:	2116      	movs	r1, #22
  401810:	4640      	mov	r0, r8
  401812:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 401904 <pollingDigitAccessory+0x8ec>
  401816:	47c0      	blx	r8
         break;
  401818:	e775      	b.n	401706 <pollingDigitAccessory+0x6ee>
           sData.Events[byte_event] &= msk_clear_event; 
  40181a:	4b33      	ldr	r3, [pc, #204]	; (4018e8 <pollingDigitAccessory+0x8d0>)
  40181c:	4433      	add	r3, r6
  40181e:	f893 21f7 	ldrb.w	r2, [r3, #503]	; 0x1f7
  401822:	ea0b 0202 	and.w	r2, fp, r2
  401826:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
         break;
  40182a:	e64e      	b.n	4014ca <pollingDigitAccessory+0x4b2>
        RemoveAlarm(nAlmLinkKO); 
  40182c:	4638      	mov	r0, r7
  40182e:	4b2f      	ldr	r3, [pc, #188]	; (4018ec <pollingDigitAccessory+0x8d4>)
  401830:	4798      	blx	r3
      sData.AccI2C[idxAcc].cnt_persist_link_ko = 0;
  401832:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  401836:	4a2c      	ldr	r2, [pc, #176]	; (4018e8 <pollingDigitAccessory+0x8d0>)
  401838:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40183c:	2200      	movs	r2, #0
  40183e:	759a      	strb	r2, [r3, #22]
      sData.AccI2C[idxAcc].cnt_link_ok++; 
  401840:	7d1a      	ldrb	r2, [r3, #20]
  401842:	3201      	adds	r2, #1
  401844:	751a      	strb	r2, [r3, #20]
      temp = (sData.AccI2C[idxAcc].cnt_link_ok + sData.AccI2C[idxAcc].cnt_link_ko);
  401846:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
  40184a:	4b27      	ldr	r3, [pc, #156]	; (4018e8 <pollingDigitAccessory+0x8d0>)
  40184c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  401850:	7d53      	ldrb	r3, [r2, #21]
  401852:	7d12      	ldrb	r2, [r2, #20]
  401854:	441a      	add	r2, r3
      if(temp >= 4) 
  401856:	2a03      	cmp	r2, #3
  401858:	d90b      	bls.n	401872 <pollingDigitAccessory+0x85a>
          sData.AccI2C[idxAcc].level_link = ((temp  - sData.AccI2C[idxAcc].cnt_link_ko) * 10) / temp;            
  40185a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
  40185e:	4822      	ldr	r0, [pc, #136]	; (4018e8 <pollingDigitAccessory+0x8d0>)
  401860:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401864:	1ad3      	subs	r3, r2, r3
  401866:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40186a:	005b      	lsls	r3, r3, #1
  40186c:	fb93 f3f2 	sdiv	r3, r3, r2
  401870:	74cb      	strb	r3, [r1, #19]
      if(temp >= 10) {        
  401872:	2a09      	cmp	r2, #9
  401874:	d907      	bls.n	401886 <pollingDigitAccessory+0x86e>
         sData.AccI2C[idxAcc].cnt_link_ko = 0;
  401876:	4b1c      	ldr	r3, [pc, #112]	; (4018e8 <pollingDigitAccessory+0x8d0>)
  401878:	00e2      	lsls	r2, r4, #3
  40187a:	1911      	adds	r1, r2, r4
  40187c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  401880:	2000      	movs	r0, #0
  401882:	7548      	strb	r0, [r1, #21]
         sData.AccI2C[idxAcc].cnt_link_ok = 0;
  401884:	7508      	strb	r0, [r1, #20]
}  
  401886:	2001      	movs	r0, #1
  401888:	b003      	add	sp, #12
  40188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         sData.Events[byte_event] &= msk_clear_event; // se non è creato cancelliamo gli allarmi
  40188e:	4d16      	ldr	r5, [pc, #88]	; (4018e8 <pollingDigitAccessory+0x8d0>)
  401890:	442e      	add	r6, r5
  401892:	f896 31f7 	ldrb.w	r3, [r6, #503]	; 0x1f7
  401896:	ea0b 0b03 	and.w	fp, fp, r3
  40189a:	f886 b1f7 	strb.w	fp, [r6, #503]	; 0x1f7
         RemoveAlarm(nAlmLinkKO); 
  40189e:	4638      	mov	r0, r7
  4018a0:	4b12      	ldr	r3, [pc, #72]	; (4018ec <pollingDigitAccessory+0x8d4>)
  4018a2:	4798      	blx	r3
         sData.AccI2C[idxAcc].cnt_persist_link_ko = 0;
  4018a4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
  4018a8:	eb05 0544 	add.w	r5, r5, r4, lsl #1
  4018ac:	2300      	movs	r3, #0
  4018ae:	75ab      	strb	r3, [r5, #22]
  4018b0:	e7e9      	b.n	401886 <pollingDigitAccessory+0x86e>
         sData.AccI2C[idxAcc].cnt_persist_link_ko++;
  4018b2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
  4018b6:	490c      	ldr	r1, [pc, #48]	; (4018e8 <pollingDigitAccessory+0x8d0>)
  4018b8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4018bc:	7593      	strb	r3, [r2, #22]
      if(sData.AccI2C[idxAcc].cnt_persist_link_ko >= NUM_CONSECUTIVE_CALLS_MISSING)  
  4018be:	2b23      	cmp	r3, #35	; 0x23
  4018c0:	d9c1      	bls.n	401846 <pollingDigitAccessory+0x82e>
  4018c2:	e61a      	b.n	4014fa <pollingDigitAccessory+0x4e2>
}  
  4018c4:	2001      	movs	r0, #1
  4018c6:	4770      	bx	lr
  4018c8:	20000041 	.word	0x20000041
  4018cc:	20000047 	.word	0x20000047
  4018d0:	00403cdd 	.word	0x00403cdd
  4018d4:	20000040 	.word	0x20000040
  4018d8:	20000042 	.word	0x20000042
  4018dc:	20000e8b 	.word	0x20000e8b
  4018e0:	400e0e00 	.word	0x400e0e00
  4018e4:	00400395 	.word	0x00400395
  4018e8:	200013ac 	.word	0x200013ac
  4018ec:	004035ad 	.word	0x004035ad
  4018f0:	00400ee9 	.word	0x00400ee9
  4018f4:	00400541 	.word	0x00400541
  4018f8:	004006c5 	.word	0x004006c5
  4018fc:	0040096d 	.word	0x0040096d
  401900:	00400c51 	.word	0x00400c51
  401904:	00400895 	.word	0x00400895

00401908 <read_probeTemp>:
 //-----------------------------------------------------
 // Type NTC Thermistors :
 // B-Constant           :  3950
 // Resistance NTC @25 C :  10K
 //-----------------------------------------------------
 float read_probeTemp(unsigned int temp) {
  401908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 float Vread = 0;
	 
	 K=res*exp(-B/298.15);
	 
	 val =1023-temp;
	 Vread=3.3*(float)val/1023.0;
  40190a:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
  40190e:	3003      	adds	r0, #3
  401910:	4b23      	ldr	r3, [pc, #140]	; (4019a0 <read_probeTemp+0x98>)
  401912:	4798      	blx	r3
  401914:	4e23      	ldr	r6, [pc, #140]	; (4019a4 <read_probeTemp+0x9c>)
  401916:	47b0      	blx	r6
  401918:	a315      	add	r3, pc, #84	; (adr r3, 401970 <read_probeTemp+0x68>)
  40191a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40191e:	4c22      	ldr	r4, [pc, #136]	; (4019a8 <read_probeTemp+0xa0>)
  401920:	47a0      	blx	r4
  401922:	4d22      	ldr	r5, [pc, #136]	; (4019ac <read_probeTemp+0xa4>)
  401924:	a314      	add	r3, pc, #80	; (adr r3, 401978 <read_probeTemp+0x70>)
  401926:	e9d3 2300 	ldrd	r2, r3, [r3]
  40192a:	47a8      	blx	r5
  40192c:	4c20      	ldr	r4, [pc, #128]	; (4019b0 <read_probeTemp+0xa8>)
  40192e:	47a0      	blx	r4
	 tmp=(res*3.3)/Vread-res;
  401930:	47b0      	blx	r6
  401932:	4602      	mov	r2, r0
  401934:	460b      	mov	r3, r1
  401936:	a112      	add	r1, pc, #72	; (adr r1, 401980 <read_probeTemp+0x78>)
  401938:	e9d1 0100 	ldrd	r0, r1, [r1]
  40193c:	47a8      	blx	r5
  40193e:	4f1d      	ldr	r7, [pc, #116]	; (4019b4 <read_probeTemp+0xac>)
  401940:	a311      	add	r3, pc, #68	; (adr r3, 401988 <read_probeTemp+0x80>)
  401942:	e9d3 2300 	ldrd	r2, r3, [r3]
  401946:	47b8      	blx	r7
  401948:	47a0      	blx	r4

	 T=(B/log(tmp/K))-273.15;
  40194a:	491b      	ldr	r1, [pc, #108]	; (4019b8 <read_probeTemp+0xb0>)
  40194c:	4b1b      	ldr	r3, [pc, #108]	; (4019bc <read_probeTemp+0xb4>)
  40194e:	4798      	blx	r3
  401950:	47b0      	blx	r6
  401952:	4b1b      	ldr	r3, [pc, #108]	; (4019c0 <read_probeTemp+0xb8>)
  401954:	4798      	blx	r3
  401956:	4602      	mov	r2, r0
  401958:	460b      	mov	r3, r1
  40195a:	a10d      	add	r1, pc, #52	; (adr r1, 401990 <read_probeTemp+0x88>)
  40195c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401960:	47a8      	blx	r5
  401962:	a30d      	add	r3, pc, #52	; (adr r3, 401998 <read_probeTemp+0x90>)
  401964:	e9d3 2300 	ldrd	r2, r3, [r3]
  401968:	47b8      	blx	r7
  40196a:	47a0      	blx	r4
	 
	 return T;
 }
  40196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40196e:	bf00      	nop
  401970:	66666666 	.word	0x66666666
  401974:	400a6666 	.word	0x400a6666
  401978:	00000000 	.word	0x00000000
  40197c:	408ff800 	.word	0x408ff800
  401980:	00000000 	.word	0x00000000
  401984:	40e01d00 	.word	0x40e01d00
  401988:	00000000 	.word	0x00000000
  40198c:	40c38800 	.word	0x40c38800
  401990:	00000000 	.word	0x00000000
  401994:	40aedc00 	.word	0x40aedc00
  401998:	66666666 	.word	0x66666666
  40199c:	40711266 	.word	0x40711266
  4019a0:	0040d74d 	.word	0x0040d74d
  4019a4:	0040cea1 	.word	0x0040cea1
  4019a8:	0040cf49 	.word	0x0040cf49
  4019ac:	0040d19d 	.word	0x0040d19d
  4019b0:	0040d539 	.word	0x0040d539
  4019b4:	0040cbe1 	.word	0x0040cbe1
  4019b8:	3c90718d 	.word	0x3c90718d
  4019bc:	0040d95d 	.word	0x0040d95d
  4019c0:	0040c6e5 	.word	0x0040c6e5

004019c4 <read_analogInput>:
 {
  4019c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019c8:	b083      	sub	sp, #12
	 timerMills = millis();
  4019ca:	4b8d      	ldr	r3, [pc, #564]	; (401c00 <read_analogInput+0x23c>)
  4019cc:	4798      	blx	r3
  4019ce:	4604      	mov	r4, r0
	 if(sData.status_unit & (1 << POS_BIT_BYPASS_RUN))
  4019d0:	4b8c      	ldr	r3, [pc, #560]	; (401c04 <read_analogInput+0x240>)
  4019d2:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  4019d6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4019da:	d13b      	bne.n	401a54 <read_analogInput+0x90>
	 if (((timerMills -  preview_50_Mills) >= 50) || (preview_50_Mills > timerMills))
  4019dc:	4b8a      	ldr	r3, [pc, #552]	; (401c08 <read_analogInput+0x244>)
  4019de:	681b      	ldr	r3, [r3, #0]
  4019e0:	1ae2      	subs	r2, r4, r3
  4019e2:	2a31      	cmp	r2, #49	; 0x31
  4019e4:	d802      	bhi.n	4019ec <read_analogInput+0x28>
  4019e6:	429c      	cmp	r4, r3
  4019e8:	f080 8106 	bcs.w	401bf8 <read_analogInput+0x234>
		 preview_50_Mills = timerMills;
  4019ec:	4b86      	ldr	r3, [pc, #536]	; (401c08 <read_analogInput+0x244>)
  4019ee:	601c      	str	r4, [r3, #0]
		 wdt_restart(WATCH_DOG);
  4019f0:	4886      	ldr	r0, [pc, #536]	; (401c0c <read_analogInput+0x248>)
  4019f2:	4b87      	ldr	r3, [pc, #540]	; (401c10 <read_analogInput+0x24c>)
  4019f4:	4798      	blx	r3
		 numNTC = read_byte_eeprom(ADDR_EEP(numNTC));
  4019f6:	2040      	movs	r0, #64	; 0x40
  4019f8:	4b86      	ldr	r3, [pc, #536]	; (401c14 <read_analogInput+0x250>)
  4019fa:	4798      	blx	r3
  4019fc:	2804      	cmp	r0, #4
  4019fe:	bf28      	it	cs
  401a00:	2004      	movcs	r0, #4
  401a02:	fa5f fa80 	uxtb.w	sl, r0
		 Acc_Adc[I_PROBE_FRESH] += analogRead(i_TFresh);
  401a06:	4b84      	ldr	r3, [pc, #528]	; (401c18 <read_analogInput+0x254>)
  401a08:	7818      	ldrb	r0, [r3, #0]
  401a0a:	4e84      	ldr	r6, [pc, #528]	; (401c1c <read_analogInput+0x258>)
  401a0c:	47b0      	blx	r6
  401a0e:	4d84      	ldr	r5, [pc, #528]	; (401c20 <read_analogInput+0x25c>)
  401a10:	682b      	ldr	r3, [r5, #0]
  401a12:	4418      	add	r0, r3
  401a14:	6028      	str	r0, [r5, #0]
		 nSample_Adc[I_PROBE_FRESH]++;
  401a16:	4c83      	ldr	r4, [pc, #524]	; (401c24 <read_analogInput+0x260>)
  401a18:	6823      	ldr	r3, [r4, #0]
  401a1a:	3301      	adds	r3, #1
  401a1c:	6023      	str	r3, [r4, #0]
		 Acc_Adc[I_PROBE_RETURN] += analogRead(i_TReturn);
  401a1e:	4b82      	ldr	r3, [pc, #520]	; (401c28 <read_analogInput+0x264>)
  401a20:	7818      	ldrb	r0, [r3, #0]
  401a22:	47b0      	blx	r6
  401a24:	686b      	ldr	r3, [r5, #4]
  401a26:	4418      	add	r0, r3
  401a28:	6068      	str	r0, [r5, #4]
		 nSample_Adc[I_PROBE_RETURN]++;
  401a2a:	6863      	ldr	r3, [r4, #4]
  401a2c:	3301      	adds	r3, #1
  401a2e:	6063      	str	r3, [r4, #4]
		 if(numNTC > 2) {
  401a30:	f1ba 0f02 	cmp.w	sl, #2
  401a34:	d811      	bhi.n	401a5a <read_analogInput+0x96>
		 nSample_Adc[I_PROBE_SUPPLY] = 0;
  401a36:	2200      	movs	r2, #0
  401a38:	4b7a      	ldr	r3, [pc, #488]	; (401c24 <read_analogInput+0x260>)
  401a3a:	609a      	str	r2, [r3, #8]
		 if(numNTC > 3) {
  401a3c:	f1ba 0f03 	cmp.w	sl, #3
  401a40:	d815      	bhi.n	401a6e <read_analogInput+0xaa>
		 nSample_Adc[I_PROBE_EXHAUST] = 0;
  401a42:	2200      	movs	r2, #0
  401a44:	4b77      	ldr	r3, [pc, #476]	; (401c24 <read_analogInput+0x260>)
  401a46:	60da      	str	r2, [r3, #12]
  401a48:	4d76      	ldr	r5, [pc, #472]	; (401c24 <read_analogInput+0x260>)
  401a4a:	4e75      	ldr	r6, [pc, #468]	; (401c20 <read_analogInput+0x25c>)
 {
  401a4c:	f04f 0b58 	mov.w	fp, #88	; 0x58
  401a50:	2400      	movs	r4, #0
  401a52:	e047      	b.n	401ae4 <read_analogInput+0x120>
	 Ctrl_FunzionamentoBPD();
  401a54:	4b75      	ldr	r3, [pc, #468]	; (401c2c <read_analogInput+0x268>)
  401a56:	4798      	blx	r3
  401a58:	e7c0      	b.n	4019dc <read_analogInput+0x18>
			 Acc_Adc[I_PROBE_SUPPLY] += analogRead(i_TSupply);
  401a5a:	4b75      	ldr	r3, [pc, #468]	; (401c30 <read_analogInput+0x26c>)
  401a5c:	7818      	ldrb	r0, [r3, #0]
  401a5e:	47b0      	blx	r6
  401a60:	68ab      	ldr	r3, [r5, #8]
  401a62:	4418      	add	r0, r3
  401a64:	60a8      	str	r0, [r5, #8]
			 nSample_Adc[I_PROBE_SUPPLY]++;
  401a66:	68a3      	ldr	r3, [r4, #8]
  401a68:	3301      	adds	r3, #1
  401a6a:	60a3      	str	r3, [r4, #8]
  401a6c:	e7e6      	b.n	401a3c <read_analogInput+0x78>
			 Acc_Adc[I_PROBE_EXHAUST] += analogRead(i_TExaust);
  401a6e:	4b71      	ldr	r3, [pc, #452]	; (401c34 <read_analogInput+0x270>)
  401a70:	7818      	ldrb	r0, [r3, #0]
  401a72:	4b6a      	ldr	r3, [pc, #424]	; (401c1c <read_analogInput+0x258>)
  401a74:	4798      	blx	r3
  401a76:	4a6a      	ldr	r2, [pc, #424]	; (401c20 <read_analogInput+0x25c>)
  401a78:	68d3      	ldr	r3, [r2, #12]
  401a7a:	4418      	add	r0, r3
  401a7c:	60d0      	str	r0, [r2, #12]
			 nSample_Adc[I_PROBE_EXHAUST]++;
  401a7e:	4a69      	ldr	r2, [pc, #420]	; (401c24 <read_analogInput+0x260>)
  401a80:	68d3      	ldr	r3, [r2, #12]
  401a82:	3301      	adds	r3, #1
  401a84:	60d3      	str	r3, [r2, #12]
  401a86:	e7df      	b.n	401a48 <read_analogInput+0x84>
						 RemoveAlarm(ALM_PTFRESH_KO + i);
  401a88:	4658      	mov	r0, fp
  401a8a:	4b6b      	ldr	r3, [pc, #428]	; (401c38 <read_analogInput+0x274>)
  401a8c:	4798      	blx	r3
						 temp = read_probeTemp(average_values) * 100;
  401a8e:	4648      	mov	r0, r9
  401a90:	4b6a      	ldr	r3, [pc, #424]	; (401c3c <read_analogInput+0x278>)
  401a92:	4798      	blx	r3
  401a94:	496a      	ldr	r1, [pc, #424]	; (401c40 <read_analogInput+0x27c>)
  401a96:	4b6b      	ldr	r3, [pc, #428]	; (401c44 <read_analogInput+0x280>)
  401a98:	4798      	blx	r3
  401a9a:	9001      	str	r0, [sp, #4]
						 if(i == I_PROBE_RETURN) {
  401a9c:	2c01      	cmp	r4, #1
  401a9e:	d033      	beq.n	401b08 <read_analogInput+0x144>
							 sData.measure_Temp[i] = (int)(temp/10);
  401aa0:	4969      	ldr	r1, [pc, #420]	; (401c48 <read_analogInput+0x284>)
  401aa2:	9801      	ldr	r0, [sp, #4]
  401aa4:	4b69      	ldr	r3, [pc, #420]	; (401c4c <read_analogInput+0x288>)
  401aa6:	4798      	blx	r3
  401aa8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 401c6c <read_analogInput+0x2a8>
  401aac:	47c8      	blx	r9
  401aae:	4b55      	ldr	r3, [pc, #340]	; (401c04 <read_analogInput+0x240>)
  401ab0:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
  401ab4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  401ab8:	f8a3 0005 	strh.w	r0, [r3, #5]
							 Temp_modbus[i] = (int)temp;
  401abc:	9801      	ldr	r0, [sp, #4]
  401abe:	47c8      	blx	r9
  401ac0:	4b63      	ldr	r3, [pc, #396]	; (401c50 <read_analogInput+0x28c>)
  401ac2:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
					 nSample_Adc[i] >>= 2;
  401ac6:	683b      	ldr	r3, [r7, #0]
  401ac8:	109b      	asrs	r3, r3, #2
  401aca:	603b      	str	r3, [r7, #0]
					 Acc_Adc[i] >>= 2;
  401acc:	f8d8 3000 	ldr.w	r3, [r8]
  401ad0:	089b      	lsrs	r3, r3, #2
  401ad2:	f8c8 3000 	str.w	r3, [r8]
		 for(i=0; i <= I_PROBE_EXHAUST; i++)
  401ad6:	3401      	adds	r4, #1
  401ad8:	3504      	adds	r5, #4
  401ada:	3604      	adds	r6, #4
  401adc:	f10b 0b01 	add.w	fp, fp, #1
  401ae0:	2c04      	cmp	r4, #4
  401ae2:	d02c      	beq.n	401b3e <read_analogInput+0x17a>
			 if(i < numNTC) {
  401ae4:	45a2      	cmp	sl, r4
  401ae6:	dd23      	ble.n	401b30 <read_analogInput+0x16c>
  401ae8:	462f      	mov	r7, r5
				 if(nSample_Adc[i] >= NUM_SAMPLE_NTC) {
  401aea:	682b      	ldr	r3, [r5, #0]
  401aec:	2b4f      	cmp	r3, #79	; 0x4f
  401aee:	ddf2      	ble.n	401ad6 <read_analogInput+0x112>
  401af0:	46b0      	mov	r8, r6
					 average_values = Acc_Adc[i] / nSample_Adc[i];
  401af2:	6832      	ldr	r2, [r6, #0]
  401af4:	fbb2 f9f3 	udiv	r9, r2, r3
					 if(average_values > 9750) { // > 100.0°C
  401af8:	f242 6316 	movw	r3, #9750	; 0x2616
  401afc:	4599      	cmp	r9, r3
  401afe:	d9c3      	bls.n	401a88 <read_analogInput+0xc4>
						 InsertDelayAlarm(ALM_PTFRESH_KO + i);
  401b00:	4658      	mov	r0, fp
  401b02:	4b54      	ldr	r3, [pc, #336]	; (401c54 <read_analogInput+0x290>)
  401b04:	4798      	blx	r3
  401b06:	e7de      	b.n	401ac6 <read_analogInput+0x102>
							 if(!DigitAccessoryOperating(ACC_I2C_AWP))
  401b08:	2008      	movs	r0, #8
  401b0a:	4b53      	ldr	r3, [pc, #332]	; (401c58 <read_analogInput+0x294>)
  401b0c:	4798      	blx	r3
  401b0e:	2800      	cmp	r0, #0
  401b10:	d1d9      	bne.n	401ac6 <read_analogInput+0x102>
								 sData.measure_Temp[i] = (int)(temp/10);
  401b12:	494d      	ldr	r1, [pc, #308]	; (401c48 <read_analogInput+0x284>)
  401b14:	9801      	ldr	r0, [sp, #4]
  401b16:	4b4d      	ldr	r3, [pc, #308]	; (401c4c <read_analogInput+0x288>)
  401b18:	4798      	blx	r3
  401b1a:	f8df 9150 	ldr.w	r9, [pc, #336]	; 401c6c <read_analogInput+0x2a8>
  401b1e:	47c8      	blx	r9
  401b20:	4b38      	ldr	r3, [pc, #224]	; (401c04 <read_analogInput+0x240>)
  401b22:	f8a3 01cf 	strh.w	r0, [r3, #463]	; 0x1cf
								 Temp_modbus[i] = (int)temp;
  401b26:	9801      	ldr	r0, [sp, #4]
  401b28:	47c8      	blx	r9
  401b2a:	4b49      	ldr	r3, [pc, #292]	; (401c50 <read_analogInput+0x28c>)
  401b2c:	8058      	strh	r0, [r3, #2]
  401b2e:	e7ca      	b.n	401ac6 <read_analogInput+0x102>
				 nSample_Adc[i] = 0;
  401b30:	2300      	movs	r3, #0
  401b32:	602b      	str	r3, [r5, #0]
				 Acc_Adc[i]     = 0;
  401b34:	6033      	str	r3, [r6, #0]
				 RemoveAlarm(ALM_PTFRESH_KO + i);
  401b36:	4658      	mov	r0, fp
  401b38:	4b3f      	ldr	r3, [pc, #252]	; (401c38 <read_analogInput+0x274>)
  401b3a:	4798      	blx	r3
  401b3c:	e7cb      	b.n	401ad6 <read_analogInput+0x112>
		 Acc_Adc[pAnAssorb_KTS] += analogRead(pAnAssorb_KTS);
  401b3e:	4b47      	ldr	r3, [pc, #284]	; (401c5c <read_analogInput+0x298>)
  401b40:	681c      	ldr	r4, [r3, #0]
  401b42:	b2e0      	uxtb	r0, r4
  401b44:	4b35      	ldr	r3, [pc, #212]	; (401c1c <read_analogInput+0x258>)
  401b46:	4798      	blx	r3
  401b48:	4a35      	ldr	r2, [pc, #212]	; (401c20 <read_analogInput+0x25c>)
  401b4a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  401b4e:	4418      	add	r0, r3
  401b50:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
		 nSample_Adc[pAnAssorb_KTS]++;
  401b54:	4a33      	ldr	r2, [pc, #204]	; (401c24 <read_analogInput+0x260>)
  401b56:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  401b5a:	3301      	adds	r3, #1
  401b5c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		 if(nSample_Adc[pAnAssorb_KTS] >= NUM_SAMPLE_I_KTS) {
  401b60:	2b17      	cmp	r3, #23
  401b62:	dd11      	ble.n	401b88 <read_analogInput+0x1c4>
			 average_values = Acc_Adc[pAnAssorb_KTS] / nSample_Adc[pAnAssorb_KTS];
  401b64:	fbb0 f2f3 	udiv	r2, r0, r3
			 sData.measure_I_KTS = (average_values * 8) / 33;
  401b68:	00d2      	lsls	r2, r2, #3
  401b6a:	493d      	ldr	r1, [pc, #244]	; (401c60 <read_analogInput+0x29c>)
  401b6c:	fba1 1202 	umull	r1, r2, r1, r2
  401b70:	08d2      	lsrs	r2, r2, #3
  401b72:	4924      	ldr	r1, [pc, #144]	; (401c04 <read_analogInput+0x240>)
  401b74:	f8a1 21d9 	strh.w	r2, [r1, #473]	; 0x1d9
			 Acc_Adc[pAnAssorb_KTS] >>= 2;
  401b78:	0880      	lsrs	r0, r0, #2
  401b7a:	4a29      	ldr	r2, [pc, #164]	; (401c20 <read_analogInput+0x25c>)
  401b7c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
			 nSample_Adc[pAnAssorb_KTS] >>= 2;
  401b80:	109b      	asrs	r3, r3, #2
  401b82:	4a28      	ldr	r2, [pc, #160]	; (401c24 <read_analogInput+0x260>)
  401b84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 {
  401b88:	2400      	movs	r4, #0
			 Acc_Adc[pAnInp1 + i] += analogRead(pAnInp1 + i);
  401b8a:	4b36      	ldr	r3, [pc, #216]	; (401c64 <read_analogInput+0x2a0>)
  401b8c:	681e      	ldr	r6, [r3, #0]
  401b8e:	4f23      	ldr	r7, [pc, #140]	; (401c1c <read_analogInput+0x258>)
  401b90:	4d23      	ldr	r5, [pc, #140]	; (401c20 <read_analogInput+0x25c>)
  401b92:	e00d      	b.n	401bb0 <read_analogInput+0x1ec>
				 sData.measure_ADC_input[i] = average_values; // fondo scala 10,2V = 1024
  401b94:	4b1b      	ldr	r3, [pc, #108]	; (401c04 <read_analogInput+0x240>)
  401b96:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  401b9a:	f8a3 01d5 	strh.w	r0, [r3, #469]	; 0x1d5
				 nSample_Adc[pAnInp1 + i] = 0;
  401b9e:	2300      	movs	r3, #0
  401ba0:	4920      	ldr	r1, [pc, #128]	; (401c24 <read_analogInput+0x260>)
  401ba2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
				 Acc_Adc[pAnInp1 + i]     = 0;
  401ba6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		 for(i=0; i < 2; i++) {
  401baa:	3401      	adds	r4, #1
  401bac:	2c02      	cmp	r4, #2
  401bae:	d023      	beq.n	401bf8 <read_analogInput+0x234>
			 Acc_Adc[pAnInp1 + i] += analogRead(pAnInp1 + i);
  401bb0:	1930      	adds	r0, r6, r4
  401bb2:	b2c0      	uxtb	r0, r0
  401bb4:	47b8      	blx	r7
  401bb6:	1932      	adds	r2, r6, r4
  401bb8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  401bbc:	4418      	add	r0, r3
  401bbe:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
			 nSample_Adc[pAnInp1 + i]++;
  401bc2:	4918      	ldr	r1, [pc, #96]	; (401c24 <read_analogInput+0x260>)
  401bc4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
  401bc8:	3301      	adds	r3, #1
  401bca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
			 if(nSample_Adc[pAnInp1 + i] >= NUM_SAMPLE_INP) {
  401bce:	2b0f      	cmp	r3, #15
  401bd0:	ddeb      	ble.n	401baa <read_analogInput+0x1e6>
				 average_values = Acc_Adc[pAnInp1 + i]/  nSample_Adc[pAnInp1 + i];
  401bd2:	fbb0 f0f3 	udiv	r0, r0, r3
				 if(PowerMotors == POWER_SAVE)
  401bd6:	4b24      	ldr	r3, [pc, #144]	; (401c68 <read_analogInput+0x2a4>)
  401bd8:	781b      	ldrb	r3, [r3, #0]
  401bda:	2b00      	cmp	r3, #0
  401bdc:	d1da      	bne.n	401b94 <read_analogInput+0x1d0>
				 sData.measure_ADC_input[i] = (average_values * 5) / 3; // fondo scala 6,0V  = 1024
  401bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401be2:	f1a3 3355 	sub.w	r3, r3, #1431655765	; 0x55555555
  401be6:	fba3 3000 	umull	r3, r0, r3, r0
  401bea:	4b06      	ldr	r3, [pc, #24]	; (401c04 <read_analogInput+0x240>)
  401bec:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  401bf0:	0840      	lsrs	r0, r0, #1
  401bf2:	f8a3 01d5 	strh.w	r0, [r3, #469]	; 0x1d5
  401bf6:	e7d2      	b.n	401b9e <read_analogInput+0x1da>
 }
  401bf8:	b003      	add	sp, #12
  401bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bfe:	bf00      	nop
  401c00:	0040bfb5 	.word	0x0040bfb5
  401c04:	200013ac 	.word	0x200013ac
  401c08:	20000b4c 	.word	0x20000b4c
  401c0c:	400e1450 	.word	0x400e1450
  401c10:	00403a89 	.word	0x00403a89
  401c14:	0040a26d 	.word	0x0040a26d
  401c18:	20000e8a 	.word	0x20000e8a
  401c1c:	0040c5d9 	.word	0x0040c5d9
  401c20:	20000af4 	.word	0x20000af4
  401c24:	20000b20 	.word	0x20000b20
  401c28:	20000045 	.word	0x20000045
  401c2c:	0040b8b9 	.word	0x0040b8b9
  401c30:	20000046 	.word	0x20000046
  401c34:	20000044 	.word	0x20000044
  401c38:	004035ad 	.word	0x004035ad
  401c3c:	00401909 	.word	0x00401909
  401c40:	42c80000 	.word	0x42c80000
  401c44:	0040d7f5 	.word	0x0040d7f5
  401c48:	41200000 	.word	0x41200000
  401c4c:	0040d95d 	.word	0x0040d95d
  401c50:	200013a4 	.word	0x200013a4
  401c54:	00403575 	.word	0x00403575
  401c58:	0040012d 	.word	0x0040012d
  401c5c:	004138b4 	.word	0x004138b4
  401c60:	3e0f83e1 	.word	0x3e0f83e1
  401c64:	004138b8 	.word	0x004138b8
  401c68:	20000e38 	.word	0x20000e38
  401c6c:	0040db81 	.word	0x0040db81

00401c70 <intercepts_messages_serial_1>:

//---------------------------------------------------------------
//  intercepts messages from the serial 1 (only KTS)
//---------------------------------------------------------------
int intercepts_messages_serial_1()
{
  401c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c74:	b084      	sub	sp, #16
   signed short stemp; 
   unsigned int freq_100ms;
   byte numBeepBeep;
   int flag;
   
   wdt_restart(WATCH_DOG);
  401c76:	48a8      	ldr	r0, [pc, #672]	; (401f18 <intercepts_messages_serial_1+0x2a8>)
  401c78:	4ba8      	ldr	r3, [pc, #672]	; (401f1c <intercepts_messages_serial_1+0x2ac>)
  401c7a:	4798      	blx	r3
   
   val_ret = Read_Message_Ser1();
  401c7c:	4ba8      	ldr	r3, [pc, #672]	; (401f20 <intercepts_messages_serial_1+0x2b0>)
  401c7e:	4798      	blx	r3
  401c80:	4680      	mov	r8, r0
        
   if(val_ret > RUN_DOWNLOAD) 
  401c82:	2801      	cmp	r0, #1
  401c84:	f340 8367 	ble.w	402356 <intercepts_messages_serial_1+0x6e6>
   {
     
      if(!connect_KTS) {
  401c88:	4ba6      	ldr	r3, [pc, #664]	; (401f24 <intercepts_messages_serial_1+0x2b4>)
  401c8a:	781b      	ldrb	r3, [r3, #0]
  401c8c:	b1f3      	cbz	r3, 401ccc <intercepts_messages_serial_1+0x5c>
        connect_KTS = 1;
        RemoveAlarm(ALM_KTS_FAULT);  
      }  
      
      // Ã¨ stato ricevuto un messaggio sul bus del KTS azzeriamo il contatore del reset del 12V
      cnt_sec_no_link_KTS = 0;  
  401c8e:	2200      	movs	r2, #0
  401c90:	4ba5      	ldr	r3, [pc, #660]	; (401f28 <intercepts_messages_serial_1+0x2b8>)
  401c92:	601a      	str	r2, [r3, #0]
      
      // Messaggi Buoni
      switch (buff_ser1[IHM1_TYPE_COMAND])
  401c94:	4ba5      	ldr	r3, [pc, #660]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401c96:	78db      	ldrb	r3, [r3, #3]
  401c98:	3b44      	subs	r3, #68	; 0x44
  401c9a:	2b13      	cmp	r3, #19
  401c9c:	f200 835b 	bhi.w	402356 <intercepts_messages_serial_1+0x6e6>
  401ca0:	e8df f013 	tbh	[pc, r3, lsl #1]
  401ca4:	03590156 	.word	0x03590156
  401ca8:	03590359 	.word	0x03590359
  401cac:	03590359 	.word	0x03590359
  401cb0:	03590359 	.word	0x03590359
  401cb4:	03590359 	.word	0x03590359
  401cb8:	03590359 	.word	0x03590359
  401cbc:	035903a1 	.word	0x035903a1
  401cc0:	03590471 	.word	0x03590471
  401cc4:	0359001f 	.word	0x0359001f
  401cc8:	048e0359 	.word	0x048e0359
        ActiveBuzzer(2, 3); // 2 beep-beep con freq. 300m
  401ccc:	2103      	movs	r1, #3
  401cce:	2002      	movs	r0, #2
  401cd0:	4b97      	ldr	r3, [pc, #604]	; (401f30 <intercepts_messages_serial_1+0x2c0>)
  401cd2:	4798      	blx	r3
        connect_KTS = 1;
  401cd4:	2201      	movs	r2, #1
  401cd6:	4b93      	ldr	r3, [pc, #588]	; (401f24 <intercepts_messages_serial_1+0x2b4>)
  401cd8:	701a      	strb	r2, [r3, #0]
        RemoveAlarm(ALM_KTS_FAULT);  
  401cda:	2056      	movs	r0, #86	; 0x56
  401cdc:	4b95      	ldr	r3, [pc, #596]	; (401f34 <intercepts_messages_serial_1+0x2c4>)
  401cde:	4798      	blx	r3
  401ce0:	e7d5      	b.n	401c8e <intercepts_messages_serial_1+0x1e>
      {
         case  COMAND_TEST_UNIT:
             sData.timeout_test = 1860;   // al massimo stai 31 minuti
  401ce2:	4b95      	ldr	r3, [pc, #596]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401ce4:	2244      	movs	r2, #68	; 0x44
  401ce6:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
  401cea:	2207      	movs	r2, #7
  401cec:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
         
             switch(buff_ser1[IRQT_TYPE_TEST]) 
  401cf0:	4b8e      	ldr	r3, [pc, #568]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401cf2:	791b      	ldrb	r3, [r3, #4]
  401cf4:	3b30      	subs	r3, #48	; 0x30
  401cf6:	2b23      	cmp	r3, #35	; 0x23
  401cf8:	f200 80bd 	bhi.w	401e76 <intercepts_messages_serial_1+0x206>
  401cfc:	e8df f013 	tbh	[pc, r3, lsl #1]
  401d00:	006e003f 	.word	0x006e003f
  401d04:	00c500a9 	.word	0x00c500a9
  401d08:	010400e5 	.word	0x010400e5
  401d0c:	00bb00bb 	.word	0x00bb00bb
  401d10:	010400bb 	.word	0x010400bb
  401d14:	00bb00bb 	.word	0x00bb00bb
  401d18:	00bb00bb 	.word	0x00bb00bb
  401d1c:	00bb00bb 	.word	0x00bb00bb
  401d20:	00bb00bb 	.word	0x00bb00bb
  401d24:	00bb00bb 	.word	0x00bb00bb
  401d28:	003200bb 	.word	0x003200bb
  401d2c:	00bb00bb 	.word	0x00bb00bb
  401d30:	00bb00bb 	.word	0x00bb00bb
  401d34:	00bb00bb 	.word	0x00bb00bb
  401d38:	00bb00bb 	.word	0x00bb00bb
  401d3c:	00bb00bb 	.word	0x00bb00bb
  401d40:	00bb00bb 	.word	0x00bb00bb
  401d44:	002400bb 	.word	0x002400bb
             {               
               case START_TEST:
                 //  messaggio di inizio test: 's', 'm', 8, 'T', 'S' ,'t', 'a', CK_16
                 sData.status_unit |= (1 << POS_BIT_IN_TESTING);
  401d48:	4b7b      	ldr	r3, [pc, #492]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401d4a:	f8b3 21eb 	ldrh.w	r2, [r3, #491]	; 0x1eb
  401d4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  401d52:	f8a3 21eb 	strh.w	r2, [r3, #491]	; 0x1eb
                 sData.status_test  = MSK_TEST_ENABLE; 
  401d56:	2201      	movs	r2, #1
  401d58:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
  401d5c:	2200      	movs	r2, #0
  401d5e:	f883 21f3 	strb.w	r2, [r3, #499]	; 0x1f3
  401d62:	e08e      	b.n	401e82 <intercepts_messages_serial_1+0x212>
               break;               
               
               case END_TEST:                 
                 //  messaggio di   fine test: 's', 'm', 8, 'T', 'E' ,'n', 'd', CK_16
                 // inviamo il comando di chiusura test unitÃ 
                 sData.status_unit &= ~(1 << POS_BIT_IN_TESTING);
  401d64:	4b74      	ldr	r3, [pc, #464]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401d66:	f8b3 21eb 	ldrh.w	r2, [r3, #491]	; 0x1eb
  401d6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401d6e:	f8a3 21eb 	strh.w	r2, [r3, #491]	; 0x1eb
                 sData.status_test  = 0;                  
  401d72:	2200      	movs	r2, #0
  401d74:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
  401d78:	f883 21f3 	strb.w	r2, [r3, #499]	; 0x1f3
  401d7c:	e2eb      	b.n	402356 <intercepts_messages_serial_1+0x6e6>
               break;
                             
               case TEST_BYPASS:
                 sData.status_unit |= (1 << POS_BIT_IN_TESTING); 
  401d7e:	4a6e      	ldr	r2, [pc, #440]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401d80:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  401d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401d88:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
                 sData.status_test  |= (MSK_TEST_ENABLE | MSK_TEST_BYPASS); 
  401d8c:	f8b2 31f2 	ldrh.w	r3, [r2, #498]	; 0x1f2
  401d90:	f043 0103 	orr.w	r1, r3, #3
  401d94:	f8a2 11f2 	strh.w	r1, [r2, #498]	; 0x1f2
                 if(buff_ser1[IRQT_DATA_2_TEST] < 2)
  401d98:	4a64      	ldr	r2, [pc, #400]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401d9a:	7992      	ldrb	r2, [r2, #6]
  401d9c:	2a01      	cmp	r2, #1
  401d9e:	d90d      	bls.n	401dbc <intercepts_messages_serial_1+0x14c>
                   buff_ser1[IRQT_DATA_2_TEST] = 2; // vengono passati i secondi di attesa
                 
                 if(buff_ser1[IRQT_DATA_1_TEST] == 'o')       // Open
  401da0:	4a62      	ldr	r2, [pc, #392]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401da2:	7952      	ldrb	r2, [r2, #5]
  401da4:	2a6f      	cmp	r2, #111	; 0x6f
  401da6:	d00d      	beq.n	401dc4 <intercepts_messages_serial_1+0x154>
                   Active_Procedure_Bypass_OpCl(OPEN_BPD,  buff_ser1[IRQT_DATA_2_TEST]);
                 else if (buff_ser1[IRQT_DATA_1_TEST] == 'c') // Close 
  401da8:	2a63      	cmp	r2, #99	; 0x63
  401daa:	d011      	beq.n	401dd0 <intercepts_messages_serial_1+0x160>
                   Active_Procedure_Bypass_OpCl(CLOSE_BPD, buff_ser1[IRQT_DATA_2_TEST]); 
                 else
                   sData.status_test  &= ~MSK_TEST_BYPASS; // disabilita lo stato di test Bypass                    
  401dac:	f023 0302 	bic.w	r3, r3, #2
  401db0:	f043 0301 	orr.w	r3, r3, #1
  401db4:	4a60      	ldr	r2, [pc, #384]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401db6:	f8a2 31f2 	strh.w	r3, [r2, #498]	; 0x1f2
  401dba:	e05c      	b.n	401e76 <intercepts_messages_serial_1+0x206>
                   buff_ser1[IRQT_DATA_2_TEST] = 2; // vengono passati i secondi di attesa
  401dbc:	2102      	movs	r1, #2
  401dbe:	4a5b      	ldr	r2, [pc, #364]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401dc0:	7191      	strb	r1, [r2, #6]
  401dc2:	e7ed      	b.n	401da0 <intercepts_messages_serial_1+0x130>
                   Active_Procedure_Bypass_OpCl(OPEN_BPD,  buff_ser1[IRQT_DATA_2_TEST]);
  401dc4:	4b59      	ldr	r3, [pc, #356]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401dc6:	7999      	ldrb	r1, [r3, #6]
  401dc8:	2000      	movs	r0, #0
  401dca:	4b5c      	ldr	r3, [pc, #368]	; (401f3c <intercepts_messages_serial_1+0x2cc>)
  401dcc:	4798      	blx	r3
  401dce:	e052      	b.n	401e76 <intercepts_messages_serial_1+0x206>
                   Active_Procedure_Bypass_OpCl(CLOSE_BPD, buff_ser1[IRQT_DATA_2_TEST]); 
  401dd0:	4b56      	ldr	r3, [pc, #344]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401dd2:	7999      	ldrb	r1, [r3, #6]
  401dd4:	2001      	movs	r0, #1
  401dd6:	4b59      	ldr	r3, [pc, #356]	; (401f3c <intercepts_messages_serial_1+0x2cc>)
  401dd8:	4798      	blx	r3
  401dda:	e04c      	b.n	401e76 <intercepts_messages_serial_1+0x206>
               break;
               
               case TEST_OUTPUT: 
                 sData.status_unit |= (1 << POS_BIT_IN_TESTING); 
  401ddc:	4a56      	ldr	r2, [pc, #344]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401dde:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  401de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401de6:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
                 sData.status_test  |= (MSK_TEST_ENABLE | MSK_TEST_OUTPUT); 
  401dea:	f8b2 31f2 	ldrh.w	r3, [r2, #498]	; 0x1f2
  401dee:	f043 0105 	orr.w	r1, r3, #5
  401df2:	f8a2 11f2 	strh.w	r1, [r2, #498]	; 0x1f2
                 if(buff_ser1[IRQT_DATA_1_TEST] == 'A'){ // RelÃ¨ in attrazione 
  401df6:	4a4d      	ldr	r2, [pc, #308]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401df8:	7952      	ldrb	r2, [r2, #5]
  401dfa:	2a41      	cmp	r2, #65	; 0x41
  401dfc:	d009      	beq.n	401e12 <intercepts_messages_serial_1+0x1a2>
                    //digitalWrite(pOut1,   HIGH);
					ioport_set_pin_level(pOut1, IOPORT_PIN_LEVEL_HIGH);
                    //digitalWrite(pOut2,   HIGH);
					ioport_set_pin_level(pOut2, IOPORT_PIN_LEVEL_HIGH);
                    sData.StatusOutput |= 0x03;       
                 }else if (buff_ser1[IRQT_DATA_1_TEST] == 'S'){ // Spegni i RelÃ¨
  401dfe:	2a53      	cmp	r2, #83	; 0x53
  401e00:	d017      	beq.n	401e32 <intercepts_messages_serial_1+0x1c2>
					ioport_set_pin_level(pOut1, IOPORT_PIN_LEVEL_LOW);
                    //digitalWrite(pOut2,   LOW);
					ioport_set_pin_level(pOut2, IOPORT_PIN_LEVEL_LOW);
                    sData.StatusOutput &= ~0x03;  
                 }else
                    sData.status_test  &= ~MSK_TEST_OUTPUT; // disabilita lo stato di test OUTPUT  
  401e02:	f023 0304 	bic.w	r3, r3, #4
  401e06:	f043 0301 	orr.w	r3, r3, #1
  401e0a:	4a4b      	ldr	r2, [pc, #300]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401e0c:	f8a2 31f2 	strh.w	r3, [r2, #498]	; 0x1f2
  401e10:	e031      	b.n	401e76 <intercepts_messages_serial_1+0x206>
  401e12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401e16:	4b4a      	ldr	r3, [pc, #296]	; (401f40 <intercepts_messages_serial_1+0x2d0>)
  401e18:	631a      	str	r2, [r3, #48]	; 0x30
  401e1a:	2201      	movs	r2, #1
  401e1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401e20:	631a      	str	r2, [r3, #48]	; 0x30
                    sData.StatusOutput |= 0x03;       
  401e22:	4a45      	ldr	r2, [pc, #276]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401e24:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
  401e28:	f043 0303 	orr.w	r3, r3, #3
  401e2c:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
  401e30:	e021      	b.n	401e76 <intercepts_messages_serial_1+0x206>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401e32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401e36:	4b42      	ldr	r3, [pc, #264]	; (401f40 <intercepts_messages_serial_1+0x2d0>)
  401e38:	635a      	str	r2, [r3, #52]	; 0x34
  401e3a:	2201      	movs	r2, #1
  401e3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401e40:	635a      	str	r2, [r3, #52]	; 0x34
                    sData.StatusOutput &= ~0x03;  
  401e42:	4a3d      	ldr	r2, [pc, #244]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401e44:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
  401e48:	f023 0303 	bic.w	r3, r3, #3
  401e4c:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
  401e50:	e011      	b.n	401e76 <intercepts_messages_serial_1+0x206>
               break;
               
               case TEST_BUZZER:
                  
                  sData.status_unit |= (1 << POS_BIT_IN_TESTING);
  401e52:	4b39      	ldr	r3, [pc, #228]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401e54:	f8b3 21eb 	ldrh.w	r2, [r3, #491]	; 0x1eb
  401e58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  401e5c:	f8a3 21eb 	strh.w	r2, [r3, #491]	; 0x1eb
                  sData.status_test |= (MSK_TEST_ENABLE | MSK_TEST_BUZZER);
  401e60:	f8b3 21f2 	ldrh.w	r2, [r3, #498]	; 0x1f2
  401e64:	f042 0209 	orr.w	r2, r2, #9
  401e68:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
                  //   (8bit) numBeepBeep , (32bit) freq_100ms
                  numBeepBeep = buff_ser1[IRQT_DATA_1_TEST];
                  freq_100ms  = buff_ser1[IRQT_DATA_2_TEST];
  401e6c:	4b2f      	ldr	r3, [pc, #188]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
                  
                  ActiveBuzzer(numBeepBeep, freq_100ms);
  401e6e:	7999      	ldrb	r1, [r3, #6]
  401e70:	7958      	ldrb	r0, [r3, #5]
  401e72:	4b2f      	ldr	r3, [pc, #188]	; (401f30 <intercepts_messages_serial_1+0x2c0>)
  401e74:	4798      	blx	r3
               break;         
             
             }  
           
            // il messaggio di risposta Ã¨ identico a quello della richiesta 
            if(sData.status_test)
  401e76:	4b30      	ldr	r3, [pc, #192]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401e78:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  401e7c:	2b00      	cmp	r3, #0
  401e7e:	f000 826a 	beq.w	402356 <intercepts_messages_serial_1+0x6e6>
              Write_Message_Ser1(buff_ser1); 
  401e82:	482a      	ldr	r0, [pc, #168]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401e84:	4b2f      	ldr	r3, [pc, #188]	; (401f44 <intercepts_messages_serial_1+0x2d4>)
  401e86:	4798      	blx	r3
  401e88:	e265      	b.n	402356 <intercepts_messages_serial_1+0x6e6>
                  sData.status_unit |= (1 << POS_BIT_IN_TESTING);
  401e8a:	4a2b      	ldr	r2, [pc, #172]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401e8c:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  401e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401e94:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
                  if(buff_ser1[IRQT_DATA_1_TEST] == 'A'){        
  401e98:	4b24      	ldr	r3, [pc, #144]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401e9a:	795b      	ldrb	r3, [r3, #5]
  401e9c:	2b41      	cmp	r3, #65	; 0x41
  401e9e:	d00a      	beq.n	401eb6 <intercepts_messages_serial_1+0x246>
                    sData.status_test  &= ~MSK_TEST_IPEHD; // disabilita lo stato di test OUTPUT
  401ea0:	4a25      	ldr	r2, [pc, #148]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401ea2:	f8b2 31f2 	ldrh.w	r3, [r2, #498]	; 0x1f2
  401ea6:	f023 0310 	bic.w	r3, r3, #16
  401eaa:	f8a2 31f2 	strh.w	r3, [r2, #498]	; 0x1f2
                    TAG_DigitAccessoryOff(ACC_I2C_PREHEATER);                      
  401eae:	2002      	movs	r0, #2
  401eb0:	4b25      	ldr	r3, [pc, #148]	; (401f48 <intercepts_messages_serial_1+0x2d8>)
  401eb2:	4798      	blx	r3
  401eb4:	e7df      	b.n	401e76 <intercepts_messages_serial_1+0x206>
                    sData.status_test  |= (MSK_TEST_ENABLE | MSK_TEST_IPEHD);
  401eb6:	f8b2 31f2 	ldrh.w	r3, [r2, #498]	; 0x1f2
  401eba:	f043 0311 	orr.w	r3, r3, #17
  401ebe:	f8a2 31f2 	strh.w	r3, [r2, #498]	; 0x1f2
                    TAG_DigitAccessoryOn(ACC_I2C_PREHEATER);   
  401ec2:	2002      	movs	r0, #2
  401ec4:	4b21      	ldr	r3, [pc, #132]	; (401f4c <intercepts_messages_serial_1+0x2dc>)
  401ec6:	4798      	blx	r3
  401ec8:	e7d5      	b.n	401e76 <intercepts_messages_serial_1+0x206>
                  sData.status_unit |= (1 << POS_BIT_IN_TESTING);
  401eca:	4a1b      	ldr	r2, [pc, #108]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401ecc:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  401ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401ed4:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
                  if(buff_ser1[IRQT_DATA_1_TEST] == 'C') {         // CAMBIA stato Ai LEDS
  401ed8:	4b14      	ldr	r3, [pc, #80]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401eda:	795b      	ldrb	r3, [r3, #5]
  401edc:	2b43      	cmp	r3, #67	; 0x43
  401ede:	d007      	beq.n	401ef0 <intercepts_messages_serial_1+0x280>
                    sData.status_test  &= ~MSK_TEST_LEDS; // disabilita lo stato di test OUTPUT                                          
  401ee0:	4a15      	ldr	r2, [pc, #84]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401ee2:	f8b2 31f2 	ldrh.w	r3, [r2, #498]	; 0x1f2
  401ee6:	f023 0320 	bic.w	r3, r3, #32
  401eea:	f8a2 31f2 	strh.w	r3, [r2, #498]	; 0x1f2
  401eee:	e7c2      	b.n	401e76 <intercepts_messages_serial_1+0x206>
                    sData.status_test |= (MSK_TEST_ENABLE | MSK_TEST_LEDS);  
  401ef0:	4613      	mov	r3, r2
  401ef2:	f8b2 21f2 	ldrh.w	r2, [r2, #498]	; 0x1f2
  401ef6:	f042 0221 	orr.w	r2, r2, #33	; 0x21
  401efa:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
                    sData.data_test    = buff_ser1[IRQT_DATA_2_TEST];                  
  401efe:	4a0b      	ldr	r2, [pc, #44]	; (401f2c <intercepts_messages_serial_1+0x2bc>)
  401f00:	7992      	ldrb	r2, [r2, #6]
  401f02:	f883 21f6 	strb.w	r2, [r3, #502]	; 0x1f6
  401f06:	e7b6      	b.n	401e76 <intercepts_messages_serial_1+0x206>
                   sData.status_test |= MSK_TEST_ENABLE;
  401f08:	4a0b      	ldr	r2, [pc, #44]	; (401f38 <intercepts_messages_serial_1+0x2c8>)
  401f0a:	f8b2 31f2 	ldrh.w	r3, [r2, #498]	; 0x1f2
  401f0e:	f043 0301 	orr.w	r3, r3, #1
  401f12:	f8a2 31f2 	strh.w	r3, [r2, #498]	; 0x1f2
               break;         
  401f16:	e7ae      	b.n	401e76 <intercepts_messages_serial_1+0x206>
  401f18:	400e1450 	.word	0x400e1450
  401f1c:	00403a89 	.word	0x00403a89
  401f20:	004063b5 	.word	0x004063b5
  401f24:	20000e70 	.word	0x20000e70
  401f28:	20000e6c 	.word	0x20000e6c
  401f2c:	20001634 	.word	0x20001634
  401f30:	0040b725 	.word	0x0040b725
  401f34:	004035ad 	.word	0x004035ad
  401f38:	200013ac 	.word	0x200013ac
  401f3c:	0040b77d 	.word	0x0040b77d
  401f40:	400e0e00 	.word	0x400e0e00
  401f44:	00406381 	.word	0x00406381
  401f48:	004001d9 	.word	0x004001d9
  401f4c:	0040019d 	.word	0x0040019d
         break;
         
         case  COMAND_DATA_DEBUG:       
            buff_ser1[IHM1_POS_CRC_LO]   = IRSD_CRC_LO;
  401f50:	4bdd      	ldr	r3, [pc, #884]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  401f52:	2254      	movs	r2, #84	; 0x54
  401f54:	709a      	strb	r2, [r3, #2]
            buff_ser1[IHM1_TYPE_COMAND]  = COMAND_DATA_DEBUG;
  401f56:	2244      	movs	r2, #68	; 0x44
  401f58:	70da      	strb	r2, [r3, #3]
            // Debug Accessory CAP 
            buff_ser1[IRSD_LEV_LINK_CAP] = sData.AccI2C[ACC_I2C_PCAP].level_link;   // livello di comunicazione tra UnitÃ  e Accesorio CAP 0/10 d
  401f5a:	4adc      	ldr	r2, [pc, #880]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  401f5c:	f892 10b5 	ldrb.w	r1, [r2, #181]	; 0xb5
  401f60:	7119      	strb	r1, [r3, #4]
            buff_ser1[IRSD_MEASUR_PA_LO] = lowByte(sData.measure_pressure);
  401f62:	f9b2 11c3 	ldrsh.w	r1, [r2, #451]	; 0x1c3
  401f66:	7159      	strb	r1, [r3, #5]
            buff_ser1[IRSD_MEASUR_PA_HI] = highByte(sData.measure_pressure);           
  401f68:	1209      	asrs	r1, r1, #8
  401f6a:	7199      	strb	r1, [r3, #6]
            // Debug Motori: Vengono visionati lo status, le velocitÃ  e il pilotaggio 0-10V
            buff_ser1[IRSD_LEV_LINK_CTRL_FAN] = sData.level_link_CTRLFAN;                       // livello di comunicazione tra modulo rd2. e CTRL_FAN 0/10
  401f6c:	7851      	ldrb	r1, [r2, #1]
  401f6e:	71d9      	strb	r1, [r3, #7]
            buff_ser1[IRSD_STATUS_MOTORS_R]  =  sData.StatusMotorsR;                            // bit.. 7.none | 6.AlarmMR3 | 5.AlarmMR2 | 4.AlarmMR1 | 3.Err_V_Speed_R | 2.PowerMR3 | 1.PowerMR2 | 0.PowerMR1 
  401f70:	f892 11ef 	ldrb.w	r1, [r2, #495]	; 0x1ef
  401f74:	7219      	strb	r1, [r3, #8]
            buff_ser1[IRSD_STATUS_MOTORS_F]  =  sData.StatusMotorsF;                            // bit.. 7.none | 6.AlarmMF3 | 5.AlarmMF2 | 4.AlarmMF1 | 3.Err_V_Speed_F  | 2.PowerMF3 | 1.PowerMF2 | 0.PowerMF1 
  401f76:	f892 11f0 	ldrb.w	r1, [r2, #496]	; 0x1f0
  401f7a:	7259      	strb	r1, [r3, #9]
            buff_ser1[IRSD_FEEDBK_VOUT_R_LO] = lowByte(sData.feedbk_v_speed_motors_R);          //  valore di tensione letto in uscita del pilota ventole F: da 0.0V a 11.00V
  401f7c:	f9b2 11b7 	ldrsh.w	r1, [r2, #439]	; 0x1b7
  401f80:	7299      	strb	r1, [r3, #10]
            buff_ser1[IRSD_FEEDBK_VOUT_R_HI] = highByte(sData.feedbk_v_speed_motors_R);               
  401f82:	1209      	asrs	r1, r1, #8
  401f84:	72d9      	strb	r1, [r3, #11]
            buff_ser1[IRSD_FEEDBK_VOUT_F_LO] = lowByte(sData.feedbk_v_speed_motors_F);                
  401f86:	f9b2 11b9 	ldrsh.w	r1, [r2, #441]	; 0x1b9
  401f8a:	7319      	strb	r1, [r3, #12]
            buff_ser1[IRSD_FEEDBK_VOUT_F_HI] = highByte(sData.feedbk_v_speed_motors_F);          
  401f8c:	1209      	asrs	r1, r1, #8
  401f8e:	7359      	strb	r1, [r3, #13]
           
           
            buff_ser1[IRSD_RPM_MOTOR_R1_LO] = lowByte(sData.rpm_motors_R[0]);
  401f90:	f9b2 11db 	ldrsh.w	r1, [r2, #475]	; 0x1db
  401f94:	7399      	strb	r1, [r3, #14]
            buff_ser1[IRSD_RPM_MOTOR_R1_HI] = highByte(sData.rpm_motors_R[0]);             
  401f96:	1209      	asrs	r1, r1, #8
  401f98:	73d9      	strb	r1, [r3, #15]
            buff_ser1[IRSD_RPM_MOTOR_F1_LO] = lowByte(sData.rpm_motors_F[0]);
  401f9a:	f9b2 11e1 	ldrsh.w	r1, [r2, #481]	; 0x1e1
  401f9e:	7519      	strb	r1, [r3, #20]
            buff_ser1[IRSD_RPM_MOTOR_F1_HI] = highByte(sData.rpm_motors_F[0]);  
  401fa0:	1209      	asrs	r1, r1, #8
  401fa2:	7559      	strb	r1, [r3, #21]
            
            buff_ser1[IRSD_RPM_MOTOR_R2_LO] = lowByte(sData.rpm_motors_R[1]);
  401fa4:	f9b2 11dd 	ldrsh.w	r1, [r2, #477]	; 0x1dd
  401fa8:	7419      	strb	r1, [r3, #16]
            buff_ser1[IRSD_RPM_MOTOR_R2_HI] = highByte(sData.rpm_motors_R[1]);             
  401faa:	1209      	asrs	r1, r1, #8
  401fac:	7459      	strb	r1, [r3, #17]
            buff_ser1[IRSD_RPM_MOTOR_F2_LO] = lowByte(sData.rpm_motors_F[1]);
  401fae:	f9b2 11e3 	ldrsh.w	r1, [r2, #483]	; 0x1e3
  401fb2:	7599      	strb	r1, [r3, #22]
            buff_ser1[IRSD_RPM_MOTOR_F2_HI] = highByte(sData.rpm_motors_F[1]);  
  401fb4:	1209      	asrs	r1, r1, #8
  401fb6:	75d9      	strb	r1, [r3, #23]
            
            buff_ser1[IRSD_RPM_MOTOR_R3_LO] = lowByte(sData.rpm_motors_R[2]);
  401fb8:	f9b2 11df 	ldrsh.w	r1, [r2, #479]	; 0x1df
  401fbc:	7499      	strb	r1, [r3, #18]
            buff_ser1[IRSD_RPM_MOTOR_R3_HI] = highByte(sData.rpm_motors_R[2]);             
  401fbe:	1209      	asrs	r1, r1, #8
  401fc0:	74d9      	strb	r1, [r3, #19]
            buff_ser1[IRSD_RPM_MOTOR_F3_LO] = lowByte(sData.rpm_motors_F[2]);
  401fc2:	f9b2 11e5 	ldrsh.w	r1, [r2, #485]	; 0x1e5
  401fc6:	7619      	strb	r1, [r3, #24]
            buff_ser1[IRSD_RPM_MOTOR_F3_HI] = highByte(sData.rpm_motors_F[2]);             
  401fc8:	1209      	asrs	r1, r1, #8
  401fca:	7659      	strb	r1, [r3, #25]
            
                        
            // debug CAF
            buff_ser1[IRSD_MEASURE_AIRFLOW_LO] = lowByte(sData.measure_airflow);
  401fcc:	f9b2 11c5 	ldrsh.w	r1, [r2, #453]	; 0x1c5
  401fd0:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
            buff_ser1[IRSD_MEASURE_AIRFLOW_HI] = highByte(sData.measure_airflow);
  401fd4:	1209      	asrs	r1, r1, #8
  401fd6:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
            
            // debug Accessory clima
            buff_ser1[IRSD_LEV_LINK_PREHEATER] = sData.AccI2C[ACC_I2C_PREHEATER].level_link;   // 0/10 Level
  401fda:	f892 1037 	ldrb.w	r1, [r2, #55]	; 0x37
  401fde:	7699      	strb	r1, [r3, #26]
            buff_ser1[IRSD_LEV_LINK_HEATER]    = sData.AccI2C[ACC_I2C_HEATER].level_link;      // 0/10 Level
  401fe0:	7cd1      	ldrb	r1, [r2, #19]
  401fe2:	76d9      	strb	r1, [r3, #27]
            buff_ser1[IRSD_LEV_LINK_COOLER]    = sData.AccI2C[ACC_I2C_COOLER].level_link;      // 0/10 Level
  401fe4:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
  401fe8:	7719      	strb	r1, [r3, #28]
                                 bit.2: ON=1/OFF=0, 
                                 bit.1: AIR=1/WATER=0, 
                                 bit.0: CONNECT       
             * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */    
            sts = 0;               
            if(sData.AccI2C[ACC_I2C_HEATER].sts & STS_ACC_CONNECT)   sts |= 0x01;                    
  401fea:	79d3      	ldrb	r3, [r2, #7]
            sts = 0;               
  401fec:	f003 0401 	and.w	r4, r3, #1
            if(sData.AccI2C[ACC_I2C_HEATER].sts & STS_ACC_ELECT)     sts |= 0x02;                      
  401ff0:	f013 0f08 	tst.w	r3, #8
  401ff4:	bf18      	it	ne
  401ff6:	f044 0402 	orrne.w	r4, r4, #2
            if((sData.AccI2C[ACC_I2C_HEATER].sts & STS_ACC_ON) || (read_byte_eeprom(ADDR_EEP(Set_EHD_mod)) > 0) ) sts |= 0x04;   // nuovo SSR monitorato
  401ffa:	f013 0f04 	tst.w	r3, #4
  401ffe:	f000 81ae 	beq.w	40235e <intercepts_messages_serial_1+0x6ee>
  402002:	f044 0404 	orr.w	r4, r4, #4
            if(sData.AccI2C[ACC_I2C_HEATER].status_comand & CMD_ON)  sts |= 0x08;               
  402006:	4bb1      	ldr	r3, [pc, #708]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402008:	7ddb      	ldrb	r3, [r3, #23]
  40200a:	f013 0f01 	tst.w	r3, #1
  40200e:	bf18      	it	ne
  402010:	f044 0408 	orrne.w	r4, r4, #8
            if(sData.Events[0])                                      sts |= 0x10;
  402014:	4bad      	ldr	r3, [pc, #692]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402016:	f893 31f7 	ldrb.w	r3, [r3, #503]	; 0x1f7
  40201a:	b10b      	cbz	r3, 402020 <intercepts_messages_serial_1+0x3b0>
  40201c:	f044 0410 	orr.w	r4, r4, #16
            buff_ser1[IRSD_STATUS_HEATER]    = sts;        
  402020:	4ba9      	ldr	r3, [pc, #676]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  402022:	779c      	strb	r4, [r3, #30]
     
            sts = 0;               
            if(sData.AccI2C[ACC_I2C_COOLER].sts & STS_ACC_CONNECT)    sts |= 0x01;                                       
  402024:	4ba9      	ldr	r3, [pc, #676]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402026:	7e5a      	ldrb	r2, [r3, #25]
            sts = 0;               
  402028:	f002 0301 	and.w	r3, r2, #1
            if(sData.AccI2C[ACC_I2C_COOLER].sts & STS_ACC_ON)         sts |= 0x04;                 
  40202c:	f012 0f04 	tst.w	r2, #4
  402030:	bf18      	it	ne
  402032:	f043 0304 	orrne.w	r3, r3, #4
            if(sData.AccI2C[ACC_I2C_COOLER].status_comand & CMD_ON)   sts |= 0x08;
  402036:	4aa5      	ldr	r2, [pc, #660]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402038:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
  40203c:	f012 0f01 	tst.w	r2, #1
  402040:	bf18      	it	ne
  402042:	f043 0308 	orrne.w	r3, r3, #8
            if(sData.Events[1])                                       sts |= 0x10;
  402046:	4aa1      	ldr	r2, [pc, #644]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402048:	f892 21f8 	ldrb.w	r2, [r2, #504]	; 0x1f8
  40204c:	b10a      	cbz	r2, 402052 <intercepts_messages_serial_1+0x3e2>
  40204e:	f043 0310 	orr.w	r3, r3, #16
            buff_ser1[IRSD_STATUS_COOLER]    = sts;
  402052:	4a9d      	ldr	r2, [pc, #628]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  402054:	77d3      	strb	r3, [r2, #31]
          
            sts = 0;               
            if(sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_CONNECT)   sts |= 0x01;                    
  402056:	4b9d      	ldr	r3, [pc, #628]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402058:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
            sts = 0;               
  40205c:	f002 0301 	and.w	r3, r2, #1
            if(sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ELECT)     sts |= 0x02;                      
  402060:	f012 0f08 	tst.w	r2, #8
  402064:	bf18      	it	ne
  402066:	f043 0302 	orrne.w	r3, r3, #2
            if(sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ON)        sts |= 0x04;                 
  40206a:	f012 0f04 	tst.w	r2, #4
  40206e:	bf18      	it	ne
  402070:	f043 0304 	orrne.w	r3, r3, #4
            if(sData.AccI2C[ACC_I2C_PREHEATER].status_comand & CMD_ON)  sts |= 0x08;
  402074:	4a95      	ldr	r2, [pc, #596]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402076:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
  40207a:	f012 0f01 	tst.w	r2, #1
  40207e:	bf18      	it	ne
  402080:	f043 0308 	orrne.w	r3, r3, #8
            if(sData.Events[2])                                         sts |= 0x10;
  402084:	4a91      	ldr	r2, [pc, #580]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402086:	f892 21f9 	ldrb.w	r2, [r2, #505]	; 0x1f9
  40208a:	b10a      	cbz	r2, 402090 <intercepts_messages_serial_1+0x420>
  40208c:	f043 0310 	orr.w	r3, r3, #16
            buff_ser1[IRSD_STATUS_PREHEATER]  = sts;
  402090:	4a8d      	ldr	r2, [pc, #564]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  402092:	7753      	strb	r3, [r2, #29]
            
            sts = 0;               
            if(sData.AccI2C[ACC_I2C_DSC].sts & STS_ACC_CONNECT)              sts |= 0x01;                                       
  402094:	4b8d      	ldr	r3, [pc, #564]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402096:	f893 2193 	ldrb.w	r2, [r3, #403]	; 0x193
            sts = 0;               
  40209a:	f002 0301 	and.w	r3, r2, #1
            if(sData.AccI2C[ACC_I2C_DSC].sts & STS_ACC_OPERATIVE)            sts |= 0x02;
  40209e:	f012 0f02 	tst.w	r2, #2
  4020a2:	bf18      	it	ne
  4020a4:	f043 0302 	orrne.w	r3, r3, #2
            if(sData.AccI2C[ACC_I2C_DSC].sts & STS_ACC_ON)                   sts |= 0x04;
  4020a8:	f012 0f04 	tst.w	r2, #4
  4020ac:	bf18      	it	ne
  4020ae:	f043 0304 	orrne.w	r3, r3, #4
            if(sData.AccI2C[ACC_I2C_DSC].status_comand & CMD_ON)             sts |= 0x08;
  4020b2:	4a86      	ldr	r2, [pc, #536]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4020b4:	f892 21a3 	ldrb.w	r2, [r2, #419]	; 0x1a3
  4020b8:	f012 0f01 	tst.w	r2, #1
  4020bc:	bf18      	it	ne
  4020be:	f043 0308 	orrne.w	r3, r3, #8
            if(sData.Events[3])                                              sts |= 0x10;
  4020c2:	4a82      	ldr	r2, [pc, #520]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4020c4:	f892 21fa 	ldrb.w	r2, [r2, #506]	; 0x1fa
  4020c8:	b10a      	cbz	r2, 4020ce <intercepts_messages_serial_1+0x45e>
  4020ca:	f043 0310 	orr.w	r3, r3, #16
            buff_ser1[IRSD_STATUS_DSC]    = sts;
  4020ce:	4a7e      	ldr	r2, [pc, #504]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  4020d0:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
            
            buff_ser1[IRSD_MEASURE_TW_HEAT_LO] = lowByte(sData.AccI2C[ACC_I2C_HEATER].measure2);   // 2 byte:  Temperature water se  l'accessory Ã¨ HWD altrimenti dato inutile
  4020d4:	497d      	ldr	r1, [pc, #500]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4020d6:	f9b1 300b 	ldrsh.w	r3, [r1, #11]
  4020da:	f882 3020 	strb.w	r3, [r2, #32]
            buff_ser1[IRSD_MEASURE_TW_HEAT_HI] = highByte(sData.AccI2C[ACC_I2C_HEATER].measure2);
  4020de:	121b      	asrs	r3, r3, #8
  4020e0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
            // Se non Ã¨ configurata la sonda TempAir, passa il valore della TRet.
            if(sData.AccI2C[ACC_I2C_HEATER].info == 1){           
  4020e4:	7c8b      	ldrb	r3, [r1, #18]
  4020e6:	2b01      	cmp	r3, #1
  4020e8:	f000 8140 	beq.w	40236c <intercepts_messages_serial_1+0x6fc>
               buff_ser1[IRSD_MEASURE_TA_HEAT_LO] = lowByte(sData.AccI2C[ACC_I2C_HEATER].measure1);   // 2 byte:  Temperature air sia per HWD che EHD
               buff_ser1[IRSD_MEASURE_TA_HEAT_HI] = highByte(sData.AccI2C[ACC_I2C_HEATER].measure1);
            }else {
               buff_ser1[IRSD_MEASURE_TA_HEAT_LO] = lowByte(sData.measure_Temp[I_PROBE_RETURN]);
  4020ec:	4b77      	ldr	r3, [pc, #476]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4020ee:	f9b3 31cf 	ldrsh.w	r3, [r3, #463]	; 0x1cf
  4020f2:	4a75      	ldr	r2, [pc, #468]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  4020f4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
               buff_ser1[IRSD_MEASURE_TA_HEAT_HI] = highByte(sData.measure_Temp[I_PROBE_RETURN]);
  4020f8:	121b      	asrs	r3, r3, #8
  4020fa:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            }  
            buff_ser1[IRSD_MEASURE_TW_COOL_LO] = lowByte(sData.AccI2C[ACC_I2C_COOLER].measure2);   // 2 byte:  Temperature water accessoy
  4020fe:	4a73      	ldr	r2, [pc, #460]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402100:	f9b2 101d 	ldrsh.w	r1, [r2, #29]
  402104:	4b70      	ldr	r3, [pc, #448]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  402106:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
            buff_ser1[IRSD_MEASURE_TW_COOL_HI] = highByte(sData.AccI2C[ACC_I2C_COOLER].measure2);
  40210a:	1209      	asrs	r1, r1, #8
  40210c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
            
            buff_ser1[IRSD_MEASURE_TA_COOL_LO] = lowByte(sData.AccI2C[ACC_I2C_COOLER].measure1);   // 2 byte:  Temperature air CWD
  402110:	f9b2 101b 	ldrsh.w	r1, [r2, #27]
  402114:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
            buff_ser1[IRSD_MEASURE_TA_COOL_HI] = highByte(sData.AccI2C[ACC_I2C_COOLER].measure1);
  402118:	1209      	asrs	r1, r1, #8
  40211a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
           
            buff_ser1[IRSD_MEASURE_TW_PREHEAT_LO] = lowByte(sData.AccI2C[ACC_I2C_PREHEATER].measure2);   // 2 byte:  Temperature water se  l'accessory Ã¨ HWD altrimenti dato inutile
  40211e:	f9b2 102f 	ldrsh.w	r1, [r2, #47]	; 0x2f
  402122:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
            buff_ser1[IRSD_MEASURE_TW_PREHEAT_HI] = highByte(sData.AccI2C[ACC_I2C_PREHEATER].measure2);            
  402126:	1209      	asrs	r1, r1, #8
  402128:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
            buff_ser1[IRSD_MEASURE_TA_PREHEAT_LO] = lowByte(sData.AccI2C[ACC_I2C_PREHEATER].measure1);   // 2 byte:  Temperature air sia per HWD che EHD
  40212c:	f9b2 102d 	ldrsh.w	r1, [r2, #45]	; 0x2d
  402130:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
            buff_ser1[IRSD_MEASURE_TA_PREHEAT_HI] = highByte(sData.AccI2C[ACC_I2C_PREHEATER].measure1);
  402134:	1209      	asrs	r1, r1, #8
  402136:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
                          
            buff_ser1[IRSD_MEASURE_ABSOR_BYPASS_MIN]    = lowByte(sData.absorption_bypass_min);
  40213a:	f9b2 11e7 	ldrsh.w	r1, [r2, #487]	; 0x1e7
  40213e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
            buff_ser1[IRSD_MEASURE_ABSOR_BYPASS_MAX_LO] = lowByte(sData.absorption_bypass_max);
  402142:	f9b2 11e9 	ldrsh.w	r1, [r2, #489]	; 0x1e9
  402146:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
            buff_ser1[IRSD_MEASURE_ABSOR_BYPASS_MAX_HI] = highByte(sData.absorption_bypass_max);
  40214a:	1209      	asrs	r1, r1, #8
  40214c:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
            
            // Valore di comunicazione del sensore RH/CO2/VOC  
            if (sData.AccI2C[ACC_I2C_CO2_1].sts & STS_ACC_CONNECT) 
  402150:	f892 503d 	ldrb.w	r5, [r2, #61]	; 0x3d
  402154:	f015 0101 	ands.w	r1, r5, #1
  402158:	f000 8110 	beq.w	40237c <intercepts_messages_serial_1+0x70c>
                buff_ser1[IRSD_LEV_LINK_I_SENSOR_AMB]   =  sData.AccI2C[ACC_I2C_CO2_1].level_link;  
  40215c:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
  402160:	4b59      	ldr	r3, [pc, #356]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  402162:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
            else if (sData.AccI2C[ACC_I2C_RH_2].sts & STS_ACC_CONNECT)  
                buff_ser1[IRSD_LEV_LINK_I_SENSOR_AMB]   =  sData.AccI2C[ACC_I2C_RH_2].level_link;  
            else if (sData.AccI2C[ ACC_I2C_VOC].sts & STS_ACC_CONNECT)  
                buff_ser1[IRSD_LEV_LINK_I_SENSOR_AMB]   =  sData.AccI2C[ ACC_I2C_VOC].level_link;    
                
            buff_ser1[IRSD_LEV_LINK_MODBUS]  =  sData.level_link_ModBus;      // Valore di comunicazione del Modbus
  402166:	4b58      	ldr	r3, [pc, #352]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  402168:	4a58      	ldr	r2, [pc, #352]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  40216a:	7910      	ldrb	r0, [r2, #4]
  40216c:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
			
			//debug Caps Capr
			buff_ser1[IRSD_MEASUR_PA_CAPS_LO] = lowByte(Pressure_CAPS);
  402170:	4857      	ldr	r0, [pc, #348]	; (4022d0 <intercepts_messages_serial_1+0x660>)
  402172:	f9b0 0000 	ldrsh.w	r0, [r0]
  402176:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
			buff_ser1[IRSD_MEASUR_PA_CAPS_HI] = highByte(Pressure_CAPS);
  40217a:	1200      	asrs	r0, r0, #8
  40217c:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
			buff_ser1[IRSD_MEASUR_PA_CAPR_LO] = lowByte(Pressure_CAPR);
  402180:	4854      	ldr	r0, [pc, #336]	; (4022d4 <intercepts_messages_serial_1+0x664>)
  402182:	f9b0 0000 	ldrsh.w	r0, [r0]
  402186:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
			buff_ser1[IRSD_MEASUR_PA_CAPR_HI] = highByte(Pressure_CAPR);
  40218a:	1200      	asrs	r0, r0, #8
  40218c:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
			buff_ser1[IRSD_MEASUR_AF_CAPS_LO] = lowByte(Airflow_CAPS);
  402190:	4851      	ldr	r0, [pc, #324]	; (4022d8 <intercepts_messages_serial_1+0x668>)
  402192:	f9b0 0000 	ldrsh.w	r0, [r0]
  402196:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
			buff_ser1[IRSD_MEASUR_AF_CAPS_HI] = highByte(Airflow_CAPS);
  40219a:	1200      	asrs	r0, r0, #8
  40219c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			buff_ser1[IRSD_MEASUR_AF_CAPR_LO] = lowByte(Airflow_CAPR);
  4021a0:	484e      	ldr	r0, [pc, #312]	; (4022dc <intercepts_messages_serial_1+0x66c>)
  4021a2:	f9b0 0000 	ldrsh.w	r0, [r0]
  4021a6:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
			buff_ser1[IRSD_MEASUR_AF_CAPR_HI] = highByte(Airflow_CAPR);
  4021aa:	1200      	asrs	r0, r0, #8
  4021ac:	f883 003b 	strb.w	r0, [r3, #59]	; 0x3b
			buff_ser1[IRSD_LEV_LINK_CAPR] = sData.AccI2C[ACC_I2C_FLW2].level_link;       // 0/10 Level
  4021b0:	f892 0157 	ldrb.w	r0, [r2, #343]	; 0x157
  4021b4:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
			buff_ser1[IRSD_LEV_LINK_CAPS] = sData.AccI2C[ACC_I2C_FLW1].level_link;      // 0/10 Level
  4021b8:	f892 0145 	ldrb.w	r0, [r2, #325]	; 0x145
  4021bc:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
			
			sts = 0;
			if(sData.AccI2C[ACC_I2C_FLW1].sts & STS_ACC_CONNECT)    sts |= 0x01;
  4021c0:	f892 2139 	ldrb.w	r2, [r2, #313]	; 0x139
			sts = 0;
  4021c4:	f002 0301 	and.w	r3, r2, #1
			if(sData.AccI2C[ACC_I2C_FLW1].sts & STS_ACC_ON)         sts |= 0x04;
  4021c8:	f012 0f04 	tst.w	r2, #4
  4021cc:	bf18      	it	ne
  4021ce:	f043 0304 	orrne.w	r3, r3, #4
			if(sData.AccI2C[ACC_I2C_FLW1].status_comand & CMD_ON)   sts |= 0x08;
  4021d2:	4a3e      	ldr	r2, [pc, #248]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4021d4:	f892 2149 	ldrb.w	r2, [r2, #329]	; 0x149
  4021d8:	f012 0f01 	tst.w	r2, #1
  4021dc:	bf18      	it	ne
  4021de:	f043 0308 	orrne.w	r3, r3, #8
			if(sData.Events[12])                                    sts |= 0x10;
  4021e2:	4a3a      	ldr	r2, [pc, #232]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4021e4:	f892 0203 	ldrb.w	r0, [r2, #515]	; 0x203
  4021e8:	b108      	cbz	r0, 4021ee <intercepts_messages_serial_1+0x57e>
  4021ea:	f043 0310 	orr.w	r3, r3, #16
			buff_ser1[IRSD_STATUS_CAPS]    = sts;
  4021ee:	4a36      	ldr	r2, [pc, #216]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  4021f0:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
			
			sts = 0;
			if(sData.AccI2C[ACC_I2C_FLW2].sts & STS_ACC_CONNECT)    sts |= 0x01;
  4021f4:	4b35      	ldr	r3, [pc, #212]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4021f6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
			sts = 0;
  4021fa:	f003 0201 	and.w	r2, r3, #1
			if(sData.AccI2C[ACC_I2C_FLW2].sts & STS_ACC_ON)         sts |= 0x04;
  4021fe:	f013 0f04 	tst.w	r3, #4
  402202:	bf18      	it	ne
  402204:	f042 0204 	orrne.w	r2, r2, #4
			if(sData.AccI2C[ACC_I2C_FLW2].status_comand & CMD_ON)   sts |= 0x08;
  402208:	4b30      	ldr	r3, [pc, #192]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  40220a:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
  40220e:	f013 0f01 	tst.w	r3, #1
  402212:	bf18      	it	ne
  402214:	f042 0208 	orrne.w	r2, r2, #8
			if(sData.Events[12])                                    sts |= 0x10;
  402218:	b108      	cbz	r0, 40221e <intercepts_messages_serial_1+0x5ae>
  40221a:	f042 0210 	orr.w	r2, r2, #16
			buff_ser1[IRSD_STATUS_CAPR]    = sts;
  40221e:	4b2a      	ldr	r3, [pc, #168]	; (4022c8 <intercepts_messages_serial_1+0x658>)
  402220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			
			//debug AIR SENSOR 1 an 2
			buff_ser1[IRSD_MEASUR_CO2_1_LO] = lowByte(sData.AccI2C[ACC_I2C_CO2_1].measure1);
  402224:	4a29      	ldr	r2, [pc, #164]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  402226:	f9b2 003f 	ldrsh.w	r0, [r2, #63]	; 0x3f
  40222a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			buff_ser1[IRSD_MEASUR_CO2_1_HI] = highByte(sData.AccI2C[ACC_I2C_CO2_1].measure1);
  40222e:	1200      	asrs	r0, r0, #8
  402230:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
			buff_ser1[IRSD_MEASUR_VOC_1_LO] = lowByte(sData.AccI2C[ACC_I2C_VOC].measure1);
  402234:	f9b2 0087 	ldrsh.w	r0, [r2, #135]	; 0x87
  402238:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
			buff_ser1[IRSD_MEASUR_VOC_1_HI] = highByte(sData.AccI2C[ACC_I2C_VOC].measure1);
  40223c:	1200      	asrs	r0, r0, #8
  40223e:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			buff_ser1[IRSD_MEASUR_RH_1] = lowByte(sData.AccI2C[ACC_I2C_RH_1].measure1);
  402242:	f9b2 0063 	ldrsh.w	r0, [r2, #99]	; 0x63
  402246:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
			buff_ser1[IRSD_MEASUR_CO2_2_LO] = lowByte(sData.AccI2C[ACC_I2C_CO2_2].measure1);
  40224a:	f9b2 0051 	ldrsh.w	r0, [r2, #81]	; 0x51
  40224e:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
			buff_ser1[IRSD_MEASUR_CO2_2_HI] = highByte(sData.AccI2C[ACC_I2C_CO2_2].measure1);
  402252:	1200      	asrs	r0, r0, #8
  402254:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
			buff_ser1[IRSD_MEASUR_RH_2] = lowByte(sData.AccI2C[ACC_I2C_RH_2].measure1);
  402258:	f9b2 0075 	ldrsh.w	r0, [r2, #117]	; 0x75
  40225c:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
			buff_ser1[IRSD_FIRM_VER_CO2_1] = lowByte(sData.AccI2C[ACC_I2C_CO2_1].measure3);
  402260:	f9b2 0043 	ldrsh.w	r0, [r2, #67]	; 0x43
  402264:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
			buff_ser1[IRSD_FIRM_VER_CO2_2] = lowByte(sData.AccI2C[ACC_I2C_CO2_2].measure3);
  402268:	f9b2 0055 	ldrsh.w	r0, [r2, #85]	; 0x55
  40226c:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
			buff_ser1[IRSD_LEV_LINK_CO2_1] = sData.AccI2C[ACC_I2C_CO2_1].level_link;
  402270:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
  402274:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
			buff_ser1[IRSD_LEV_LINK_CO2_2] = sData.AccI2C[ACC_I2C_CO2_2].level_link;
  402278:	f892 005b 	ldrb.w	r0, [r2, #91]	; 0x5b
  40227c:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
			buff_ser1[IRSD_MEASUR_IAQ_1_LO] = (sData.AccI2C[ACC_I2C_CO2_1].measure2 >> 2) & 0XFF;
  402280:	f9b2 4041 	ldrsh.w	r4, [r2, #65]	; 0x41
  402284:	10a0      	asrs	r0, r4, #2
  402286:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
			buff_ser1[IRSD_MEASUR_IAQ_1_HI] = (sData.AccI2C[ACC_I2C_CO2_1].measure2 >> 10) & 0x3F;
  40228a:	f3c4 2085 	ubfx	r0, r4, #10, #6
  40228e:	f883 004d 	strb.w	r0, [r3, #77]	; 0x4d
			buff_ser1[IRSD_MEASUR_IAQ_2_LO] = (sData.AccI2C[ACC_I2C_CO2_2].measure2 >> 2) & 0XFF;
  402292:	f9b2 2053 	ldrsh.w	r2, [r2, #83]	; 0x53
  402296:	1090      	asrs	r0, r2, #2
  402298:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
			buff_ser1[IRSD_MEASUR_IAQ_2_HI] = (sData.AccI2C[ACC_I2C_CO2_2].measure2 >> 10) & 0x3F;
  40229c:	f3c2 2085 	ubfx	r0, r2, #10, #6
  4022a0:	f883 004f 	strb.w	r0, [r3, #79]	; 0x4f
			
			sts = 0;
  4022a4:	460b      	mov	r3, r1
			if(sData.AccI2C[ACC_I2C_CO2_1].sts & STS_ACC_CONNECT)    sts |= 0x01;
			if(sData.AccI2C[ACC_I2C_CO2_1].sts & STS_ACC_ON)         sts |= 0x04;
  4022a6:	f015 0f04 	tst.w	r5, #4
  4022aa:	bf18      	it	ne
  4022ac:	f041 0304 	orrne.w	r3, r1, #4
			if(sData.AccI2C[ACC_I2C_CO2_1].status_comand & CMD_ON)   sts |= 0x08;
  4022b0:	4906      	ldr	r1, [pc, #24]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4022b2:	f891 104d 	ldrb.w	r1, [r1, #77]	; 0x4d
  4022b6:	f011 0f01 	tst.w	r1, #1
  4022ba:	bf18      	it	ne
  4022bc:	f043 0308 	orrne.w	r3, r3, #8
			if(sData.Events[3])                                      sts |= 0x10;
  4022c0:	4902      	ldr	r1, [pc, #8]	; (4022cc <intercepts_messages_serial_1+0x65c>)
  4022c2:	f891 11fa 	ldrb.w	r1, [r1, #506]	; 0x1fa
  4022c6:	e00b      	b.n	4022e0 <intercepts_messages_serial_1+0x670>
  4022c8:	20001634 	.word	0x20001634
  4022cc:	200013ac 	.word	0x200013ac
  4022d0:	20000aec 	.word	0x20000aec
  4022d4:	20000aea 	.word	0x20000aea
  4022d8:	20000a16 	.word	0x20000a16
  4022dc:	20000a14 	.word	0x20000a14
  4022e0:	b109      	cbz	r1, 4022e6 <intercepts_messages_serial_1+0x676>
  4022e2:	f043 0310 	orr.w	r3, r3, #16
			buff_ser1[IRSD_STATUS_CO2_1]    = sts;
  4022e6:	48c6      	ldr	r0, [pc, #792]	; (402600 <intercepts_messages_serial_1+0x990>)
  4022e8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
			
			sts = 0;
			if(sData.AccI2C[ACC_I2C_CO2_2].sts & STS_ACC_CONNECT)    sts |= 0x01;
  4022ec:	4bc5      	ldr	r3, [pc, #788]	; (402604 <intercepts_messages_serial_1+0x994>)
  4022ee:	f893 004f 	ldrb.w	r0, [r3, #79]	; 0x4f
			sts = 0;
  4022f2:	f000 0301 	and.w	r3, r0, #1
			if(sData.AccI2C[ACC_I2C_CO2_2].sts & STS_ACC_ON)         sts |= 0x04;
  4022f6:	f010 0f04 	tst.w	r0, #4
  4022fa:	bf18      	it	ne
  4022fc:	f043 0304 	orrne.w	r3, r3, #4
			if(sData.AccI2C[ACC_I2C_CO2_2].status_comand & CMD_ON)   sts |= 0x08;
  402300:	48c0      	ldr	r0, [pc, #768]	; (402604 <intercepts_messages_serial_1+0x994>)
  402302:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
  402306:	f010 0f01 	tst.w	r0, #1
  40230a:	bf18      	it	ne
  40230c:	f043 0308 	orrne.w	r3, r3, #8
			if(sData.Events[3])                                      sts |= 0x10;
  402310:	b109      	cbz	r1, 402316 <intercepts_messages_serial_1+0x6a6>
  402312:	f043 0310 	orr.w	r3, r3, #16
			buff_ser1[IRSD_STATUS_CO2_2]    = sts;
  402316:	48ba      	ldr	r0, [pc, #744]	; (402600 <intercepts_messages_serial_1+0x990>)
  402318:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			
			buff_ser1[IRSD_ACCURACY_CO2_1] = (sData.AccI2C[ACC_I2C_CO2_1].measure2) & 0x3; // CO2 accuracy
			buff_ser1[IRSD_ACCURACY_CO2_1] |= ((sData.AccI2C[ACC_I2C_VOC].measure2) << 2) & 0xC; // VOC accuracy
  40231c:	4db9      	ldr	r5, [pc, #740]	; (402604 <intercepts_messages_serial_1+0x994>)
  40231e:	f9b5 3089 	ldrsh.w	r3, [r5, #137]	; 0x89
  402322:	009b      	lsls	r3, r3, #2
  402324:	f003 030c 	and.w	r3, r3, #12
			buff_ser1[IRSD_ACCURACY_CO2_1] |= ((sData.AccI2C[ACC_I2C_RH_1].measure2) << 4) & 0x30; // Humidity Accuracy
  402328:	f9b5 1065 	ldrsh.w	r1, [r5, #101]	; 0x65
  40232c:	0109      	lsls	r1, r1, #4
  40232e:	f001 0130 	and.w	r1, r1, #48	; 0x30
  402332:	430b      	orrs	r3, r1
			buff_ser1[IRSD_ACCURACY_CO2_1] = (sData.AccI2C[ACC_I2C_CO2_1].measure2) & 0x3; // CO2 accuracy
  402334:	f004 0403 	and.w	r4, r4, #3
			buff_ser1[IRSD_ACCURACY_CO2_1] |= ((sData.AccI2C[ACC_I2C_RH_1].measure2) << 4) & 0x30; // Humidity Accuracy
  402338:	4323      	orrs	r3, r4
  40233a:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
			
			buff_ser1[IRSD_ACCURACY_CO2_2] = (sData.AccI2C[ACC_I2C_CO2_2].measure2) & 0x3; // CO2 accuracy
			buff_ser1[IRSD_ACCURACY_CO2_2] |= ((sData.AccI2C[ACC_I2C_RH_2].measure2) << 4) & 0x30; // Humidity Accuracy
  40233e:	f9b5 3077 	ldrsh.w	r3, [r5, #119]	; 0x77
  402342:	011b      	lsls	r3, r3, #4
  402344:	f003 0330 	and.w	r3, r3, #48	; 0x30
			buff_ser1[IRSD_ACCURACY_CO2_2] = (sData.AccI2C[ACC_I2C_CO2_2].measure2) & 0x3; // CO2 accuracy
  402348:	f002 0203 	and.w	r2, r2, #3
			buff_ser1[IRSD_ACCURACY_CO2_2] |= ((sData.AccI2C[ACC_I2C_RH_2].measure2) << 4) & 0x30; // Humidity Accuracy
  40234c:	4313      	orrs	r3, r2
  40234e:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
			
            // invia il messaggio al KTS
            Write_Message_Ser1(buff_ser1);
  402352:	4bad      	ldr	r3, [pc, #692]	; (402608 <intercepts_messages_serial_1+0x998>)
  402354:	4798      	blx	r3
         break;
      }  
   }
   
   return val_ret;
}  
  402356:	4640      	mov	r0, r8
  402358:	b004      	add	sp, #16
  40235a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if((sData.AccI2C[ACC_I2C_HEATER].sts & STS_ACC_ON) || (read_byte_eeprom(ADDR_EEP(Set_EHD_mod)) > 0) ) sts |= 0x04;   // nuovo SSR monitorato
  40235e:	2096      	movs	r0, #150	; 0x96
  402360:	4baa      	ldr	r3, [pc, #680]	; (40260c <intercepts_messages_serial_1+0x99c>)
  402362:	4798      	blx	r3
  402364:	2800      	cmp	r0, #0
  402366:	f43f ae4e 	beq.w	402006 <intercepts_messages_serial_1+0x396>
  40236a:	e64a      	b.n	402002 <intercepts_messages_serial_1+0x392>
               buff_ser1[IRSD_MEASURE_TA_HEAT_LO] = lowByte(sData.AccI2C[ACC_I2C_HEATER].measure1);   // 2 byte:  Temperature air sia per HWD che EHD
  40236c:	f9b1 3009 	ldrsh.w	r3, [r1, #9]
  402370:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
               buff_ser1[IRSD_MEASURE_TA_HEAT_HI] = highByte(sData.AccI2C[ACC_I2C_HEATER].measure1);
  402374:	121b      	asrs	r3, r3, #8
  402376:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  40237a:	e6c0      	b.n	4020fe <intercepts_messages_serial_1+0x48e>
            else if (sData.AccI2C[ACC_I2C_CO2_2].sts & STS_ACC_CONNECT)  
  40237c:	4ba1      	ldr	r3, [pc, #644]	; (402604 <intercepts_messages_serial_1+0x994>)
  40237e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
  402382:	f013 0f01 	tst.w	r3, #1
  402386:	d006      	beq.n	402396 <intercepts_messages_serial_1+0x726>
                buff_ser1[IRSD_LEV_LINK_I_SENSOR_AMB]   =  sData.AccI2C[ACC_I2C_CO2_2].level_link;    
  402388:	4b9e      	ldr	r3, [pc, #632]	; (402604 <intercepts_messages_serial_1+0x994>)
  40238a:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
  40238e:	4b9c      	ldr	r3, [pc, #624]	; (402600 <intercepts_messages_serial_1+0x990>)
  402390:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  402394:	e6e7      	b.n	402166 <intercepts_messages_serial_1+0x4f6>
            else if (sData.AccI2C[ACC_I2C_RH_1].sts & STS_ACC_CONNECT)  
  402396:	4b9b      	ldr	r3, [pc, #620]	; (402604 <intercepts_messages_serial_1+0x994>)
  402398:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
  40239c:	f013 0f01 	tst.w	r3, #1
  4023a0:	d006      	beq.n	4023b0 <intercepts_messages_serial_1+0x740>
                buff_ser1[IRSD_LEV_LINK_I_SENSOR_AMB]   =  sData.AccI2C[ACC_I2C_RH_1].level_link;    
  4023a2:	4b98      	ldr	r3, [pc, #608]	; (402604 <intercepts_messages_serial_1+0x994>)
  4023a4:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
  4023a8:	4b95      	ldr	r3, [pc, #596]	; (402600 <intercepts_messages_serial_1+0x990>)
  4023aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  4023ae:	e6da      	b.n	402166 <intercepts_messages_serial_1+0x4f6>
            else if (sData.AccI2C[ACC_I2C_RH_2].sts & STS_ACC_CONNECT)  
  4023b0:	4b94      	ldr	r3, [pc, #592]	; (402604 <intercepts_messages_serial_1+0x994>)
  4023b2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
  4023b6:	f013 0f01 	tst.w	r3, #1
  4023ba:	d006      	beq.n	4023ca <intercepts_messages_serial_1+0x75a>
                buff_ser1[IRSD_LEV_LINK_I_SENSOR_AMB]   =  sData.AccI2C[ACC_I2C_RH_2].level_link;  
  4023bc:	4b91      	ldr	r3, [pc, #580]	; (402604 <intercepts_messages_serial_1+0x994>)
  4023be:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
  4023c2:	4b8f      	ldr	r3, [pc, #572]	; (402600 <intercepts_messages_serial_1+0x990>)
  4023c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  4023c8:	e6cd      	b.n	402166 <intercepts_messages_serial_1+0x4f6>
            else if (sData.AccI2C[ ACC_I2C_VOC].sts & STS_ACC_CONNECT)  
  4023ca:	4b8e      	ldr	r3, [pc, #568]	; (402604 <intercepts_messages_serial_1+0x994>)
  4023cc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
  4023d0:	f013 0f01 	tst.w	r3, #1
  4023d4:	f43f aec7 	beq.w	402166 <intercepts_messages_serial_1+0x4f6>
                buff_ser1[IRSD_LEV_LINK_I_SENSOR_AMB]   =  sData.AccI2C[ ACC_I2C_VOC].level_link;    
  4023d8:	4b8a      	ldr	r3, [pc, #552]	; (402604 <intercepts_messages_serial_1+0x994>)
  4023da:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
  4023de:	4b88      	ldr	r3, [pc, #544]	; (402600 <intercepts_messages_serial_1+0x990>)
  4023e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  4023e4:	e6bf      	b.n	402166 <intercepts_messages_serial_1+0x4f6>
             if((sClockWeek.minutes != buff_ser1[IRQP_DATA_MIN])     ||  
  4023e6:	4b86      	ldr	r3, [pc, #536]	; (402600 <intercepts_messages_serial_1+0x990>)
  4023e8:	7959      	ldrb	r1, [r3, #5]
  4023ea:	4b89      	ldr	r3, [pc, #548]	; (402610 <intercepts_messages_serial_1+0x9a0>)
  4023ec:	785b      	ldrb	r3, [r3, #1]
  4023ee:	428b      	cmp	r3, r1
  4023f0:	f000 80b2 	beq.w	402558 <intercepts_messages_serial_1+0x8e8>
                 sClockWeek.seconds = buff_ser1[IRQP_DATA_SEC];        
  4023f4:	4b86      	ldr	r3, [pc, #536]	; (402610 <intercepts_messages_serial_1+0x9a0>)
  4023f6:	4a82      	ldr	r2, [pc, #520]	; (402600 <intercepts_messages_serial_1+0x990>)
  4023f8:	7910      	ldrb	r0, [r2, #4]
  4023fa:	7018      	strb	r0, [r3, #0]
                 sClockWeek.minutes = buff_ser1[IRQP_DATA_MIN];      
  4023fc:	7059      	strb	r1, [r3, #1]
                 sClockWeek.hours   = buff_ser1[IRQP_DATA_HOURS];
  4023fe:	7991      	ldrb	r1, [r2, #6]
  402400:	7099      	strb	r1, [r3, #2]
                 sClockWeek.weekday = buff_ser1[IRQP_DATA_WEEKDAY];    // 0=Lunedi, 1= Martedi,....,6=Domenica
  402402:	79d1      	ldrb	r1, [r2, #7]
  402404:	70d9      	strb	r1, [r3, #3]
                 sClockWeek.Day = buff_ser1[IRQP_DATA_DAY];
  402406:	7a11      	ldrb	r1, [r2, #8]
  402408:	7119      	strb	r1, [r3, #4]
                 sClockWeek.Mounth = buff_ser1[IRQP_DATA_MOUNTH];
  40240a:	7a51      	ldrb	r1, [r2, #9]
  40240c:	7159      	strb	r1, [r3, #5]
                 sClockWeek.Year = buff_ser1[IRQP_DATA_YEAR];
  40240e:	7a91      	ldrb	r1, [r2, #10]
  402410:	7199      	strb	r1, [r3, #6]
                 sClockWeek.Century = buff_ser1[IRQP_DATA_CENTURY];
  402412:	7ad2      	ldrb	r2, [r2, #11]
  402414:	71da      	strb	r2, [r3, #7]
             buff_ser1[IHM1_POS_CRC_LO]        = IRSP_CRC_LO;
  402416:	4b7a      	ldr	r3, [pc, #488]	; (402600 <intercepts_messages_serial_1+0x990>)
  402418:	222c      	movs	r2, #44	; 0x2c
  40241a:	709a      	strb	r2, [r3, #2]
             buff_ser1[IHM1_TYPE_COMAND]       = COMAND_POLLING_BASE;   
  40241c:	2250      	movs	r2, #80	; 0x50
  40241e:	70da      	strb	r2, [r3, #3]
             buff_ser1[IRSP_MEASURE_TEMP_1_LO] = lowByte(sData.measure_Temp[I_PROBE_FRESH]);
  402420:	4a78      	ldr	r2, [pc, #480]	; (402604 <intercepts_messages_serial_1+0x994>)
  402422:	f9b2 21cd 	ldrsh.w	r2, [r2, #461]	; 0x1cd
  402426:	711a      	strb	r2, [r3, #4]
             buff_ser1[IRSP_MEASURE_TEMP_1_HI] = highByte(sData.measure_Temp[I_PROBE_FRESH]);
  402428:	1212      	asrs	r2, r2, #8
  40242a:	715a      	strb	r2, [r3, #5]
             if(DigitAccessoryOperating(ACC_I2C_AWP)) {
  40242c:	2008      	movs	r0, #8
  40242e:	4b79      	ldr	r3, [pc, #484]	; (402614 <intercepts_messages_serial_1+0x9a4>)
  402430:	4798      	blx	r3
  402432:	2800      	cmp	r0, #0
  402434:	f000 809f 	beq.w	402576 <intercepts_messages_serial_1+0x906>
                buff_ser1[IRSP_MEASURE_TEMP_2_LO] = lowByte(sData.AccI2C[ACC_I2C_AWP].measure2);
  402438:	4b72      	ldr	r3, [pc, #456]	; (402604 <intercepts_messages_serial_1+0x994>)
  40243a:	f9b3 309b 	ldrsh.w	r3, [r3, #155]	; 0x9b
  40243e:	4a70      	ldr	r2, [pc, #448]	; (402600 <intercepts_messages_serial_1+0x990>)
  402440:	7193      	strb	r3, [r2, #6]
                buff_ser1[IRSP_MEASURE_TEMP_2_HI] = highByte(sData.AccI2C[ACC_I2C_AWP].measure2); 
  402442:	121b      	asrs	r3, r3, #8
  402444:	71d3      	strb	r3, [r2, #7]
             buff_ser1[IRSP_MEASURE_TEMP_3_LO] = lowByte(sData.measure_Temp[I_PROBE_SUPPLY]);
  402446:	496f      	ldr	r1, [pc, #444]	; (402604 <intercepts_messages_serial_1+0x994>)
  402448:	f9b1 21d1 	ldrsh.w	r2, [r1, #465]	; 0x1d1
  40244c:	4b6c      	ldr	r3, [pc, #432]	; (402600 <intercepts_messages_serial_1+0x990>)
  40244e:	721a      	strb	r2, [r3, #8]
             buff_ser1[IRSP_MEASURE_TEMP_3_HI] = highByte(sData.measure_Temp[I_PROBE_SUPPLY]);
  402450:	1212      	asrs	r2, r2, #8
  402452:	725a      	strb	r2, [r3, #9]
             buff_ser1[IRSP_MEASURE_TEMP_4_LO] = lowByte(sData.measure_Temp[I_PROBE_EXHAUST]);
  402454:	f9b1 21d3 	ldrsh.w	r2, [r1, #467]	; 0x1d3
  402458:	729a      	strb	r2, [r3, #10]
             buff_ser1[IRSP_MEASURE_TEMP_4_HI] = highByte(sData.measure_Temp[I_PROBE_EXHAUST]);
  40245a:	1212      	asrs	r2, r2, #8
  40245c:	72da      	strb	r2, [r3, #11]
               val_16 = sData.measure_ADC_input[i] / 10;
  40245e:	f9b1 21d5 	ldrsh.w	r2, [r1, #469]	; 0x1d5
  402462:	486d      	ldr	r0, [pc, #436]	; (402618 <intercepts_messages_serial_1+0x9a8>)
  402464:	fb80 5402 	smull	r5, r4, r0, r2
  402468:	17d2      	asrs	r2, r2, #31
  40246a:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
  40246e:	b292      	uxth	r2, r2
               buff_ser1[IRSP_MEASURE_IN1 + i]  = (byte)val_16;
  402470:	2a64      	cmp	r2, #100	; 0x64
  402472:	bf28      	it	cs
  402474:	2264      	movcs	r2, #100	; 0x64
  402476:	731a      	strb	r2, [r3, #12]
               val_16 = sData.measure_ADC_input[i] / 10;
  402478:	f9b1 21d7 	ldrsh.w	r2, [r1, #471]	; 0x1d7
  40247c:	fb80 4002 	smull	r4, r0, r0, r2
  402480:	17d2      	asrs	r2, r2, #31
  402482:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
  402486:	b292      	uxth	r2, r2
               buff_ser1[IRSP_MEASURE_IN1 + i]  = (byte)val_16;
  402488:	2a64      	cmp	r2, #100	; 0x64
  40248a:	bf28      	it	cs
  40248c:	2264      	movcs	r2, #100	; 0x64
  40248e:	735a      	strb	r2, [r3, #13]
             buff_ser1[IRSP_INFO_PROBE_AD]       = sData.info_ProbesAD;               //  7.2CO2  6.P1CO2  5.----  4.P2RH  3.P1RH  2.----  1.P1VOC  0.----
  402490:	f891 21ae 	ldrb.w	r2, [r1, #430]	; 0x1ae
  402494:	739a      	strb	r2, [r3, #14]
             buff_ser1[IRSP_MEASURE_RH_SENS]     = sData.measure_RH_max;              // da 1% a 99%    
  402496:	f9b1 21bd 	ldrsh.w	r2, [r1, #445]	; 0x1bd
  40249a:	73da      	strb	r2, [r3, #15]
             buff_ser1[IRSP_MEASURE_CO2_SENS_LO] = lowByte(sData.measure_CO2_max);    // valori da 0 a 2000 PPM    
  40249c:	f9b1 21bb 	ldrsh.w	r2, [r1, #443]	; 0x1bb
  4024a0:	741a      	strb	r2, [r3, #16]
             buff_ser1[IRSP_MEASURE_CO2_SENS_HI] = highByte(sData.measure_CO2_max);                   
  4024a2:	1212      	asrs	r2, r2, #8
  4024a4:	745a      	strb	r2, [r3, #17]
             buff_ser1[IRSP_MEASURE_VOC_SENS_LO] = lowByte(sData.measure_VOC_max);    // da 0 a 10000 ug/mq
  4024a6:	f9b1 21bf 	ldrsh.w	r2, [r1, #447]	; 0x1bf
  4024aa:	749a      	strb	r2, [r3, #18]
             buff_ser1[IRSP_MEASURE_VOC_SENS_HI] = highByte(sData.measure_VOC_max);    
  4024ac:	1212      	asrs	r2, r2, #8
  4024ae:	74da      	strb	r2, [r3, #19]
             buff_ser1[IRSP_STATUS_UNIT_LO]      = lowByte(sData.status_unit);
  4024b0:	f8b1 21eb 	ldrh.w	r2, [r1, #491]	; 0x1eb
  4024b4:	751a      	strb	r2, [r3, #20]
             buff_ser1[IRSP_STATUS_UNIT_HI]      = highByte(sData.status_unit);                                        
  4024b6:	0a12      	lsrs	r2, r2, #8
  4024b8:	755a      	strb	r2, [r3, #21]
             buff_ser1[IRSP_STATUS_WEEKLY]       = sData.status_weekly;
  4024ba:	f891 21ed 	ldrb.w	r2, [r1, #493]	; 0x1ed
  4024be:	f803 2f16 	strb.w	r2, [r3, #22]!
  4024c2:	f501 72fb 	add.w	r2, r1, #502	; 0x1f6
  4024c6:	f201 2103 	addw	r1, r1, #515	; 0x203
                 buff_ser1[IRSP_EVENT_BYTE_00 + i] = sData.Events[i];
  4024ca:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4024ce:	f803 0f01 	strb.w	r0, [r3, #1]!
             for(i=0; i <13; i++) 
  4024d2:	428a      	cmp	r2, r1
  4024d4:	d1f9      	bne.n	4024ca <intercepts_messages_serial_1+0x85a>
             if(sData.AccI2C[ACC_I2C_DSC].sts & STS_ACC_CONNECT)              sts |= 0x01;                                       
  4024d6:	4b4b      	ldr	r3, [pc, #300]	; (402604 <intercepts_messages_serial_1+0x994>)
  4024d8:	f893 2193 	ldrb.w	r2, [r3, #403]	; 0x193
             sts = 0;               
  4024dc:	f002 0301 	and.w	r3, r2, #1
             if(sData.AccI2C[ACC_I2C_DSC].sts & STS_ACC_OPERATIVE)            sts |= 0x02;
  4024e0:	f012 0f02 	tst.w	r2, #2
  4024e4:	bf18      	it	ne
  4024e6:	f043 0302 	orrne.w	r3, r3, #2
             if(sData.AccI2C[ACC_I2C_DSC].sts & STS_ACC_ON)                   sts |= 0x04;
  4024ea:	f012 0f04 	tst.w	r2, #4
  4024ee:	bf18      	it	ne
  4024f0:	f043 0304 	orrne.w	r3, r3, #4
             if(sData.AccI2C[ACC_I2C_DSC].status_comand & CMD_ON)             sts |= 0x08;
  4024f4:	4a43      	ldr	r2, [pc, #268]	; (402604 <intercepts_messages_serial_1+0x994>)
  4024f6:	f892 21a3 	ldrb.w	r2, [r2, #419]	; 0x1a3
  4024fa:	f012 0f01 	tst.w	r2, #1
  4024fe:	bf18      	it	ne
  402500:	f043 0308 	orrne.w	r3, r3, #8
             if(sData.Events[3])                                              sts |= 0x10;
  402504:	4a3f      	ldr	r2, [pc, #252]	; (402604 <intercepts_messages_serial_1+0x994>)
  402506:	f892 21fa 	ldrb.w	r2, [r2, #506]	; 0x1fa
  40250a:	b10a      	cbz	r2, 402510 <intercepts_messages_serial_1+0x8a0>
  40250c:	f043 0310 	orr.w	r3, r3, #16
             buff_ser1[IRSP_NONE_0] = sts;                    
  402510:	4c3b      	ldr	r4, [pc, #236]	; (402600 <intercepts_messages_serial_1+0x990>)
  402512:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
             buff_ser1[IRSP_INCREASE_SPEED_RH_CO2] = sData.increase_speed_RH_CO2;  
  402516:	4e3b      	ldr	r6, [pc, #236]	; (402604 <intercepts_messages_serial_1+0x994>)
  402518:	f896 31b1 	ldrb.w	r3, [r6, #433]	; 0x1b1
  40251c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
             buff_ser1[IRSP_CNT_UPDATE_EEP_INFO]        = read_byte_eeprom(ADDR_EEP(cntUpdate_info));
  402520:	203a      	movs	r0, #58	; 0x3a
  402522:	4d3a      	ldr	r5, [pc, #232]	; (40260c <intercepts_messages_serial_1+0x99c>)
  402524:	47a8      	blx	r5
  402526:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
             buff_ser1[IRSP_CNT_UPDATE_EEP_SETTING_PAR] = read_byte_eeprom(ADDR_EEP(cntUpdate_SettingPar));
  40252a:	207e      	movs	r0, #126	; 0x7e
  40252c:	47a8      	blx	r5
  40252e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
             buff_ser1[IRSP_CNT_UPDATE_EEP_SETP_TEMP]   = read_byte_eeprom(ADDR_EEP(cntUpdate_SetTemp));
  402532:	2098      	movs	r0, #152	; 0x98
  402534:	47a8      	blx	r5
  402536:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
             buff_ser1[IRSP_CNT_UPDATE_EEP_WEEKLY]      = read_byte_eeprom(ADDR_EEP(cntUpdate_dayProg));  
  40253a:	20ed      	movs	r0, #237	; 0xed
  40253c:	47a8      	blx	r5
  40253e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
             buff_ser1[IRSP_MEASURE_AWP_SENS_LO]        = lowByte(sData.measure_AWP_max);    
  402542:	f9b6 31c1 	ldrsh.w	r3, [r6, #449]	; 0x1c1
  402546:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
             buff_ser1[IRSP_MEASURE_AWP_SENS_HI]        = highByte(sData.measure_AWP_max);      
  40254a:	121b      	asrs	r3, r3, #8
  40254c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
             Write_Message_Ser1(&buff_ser1[0]);
  402550:	4620      	mov	r0, r4
  402552:	4b2d      	ldr	r3, [pc, #180]	; (402608 <intercepts_messages_serial_1+0x998>)
  402554:	4798      	blx	r3
         break;
  402556:	e6fe      	b.n	402356 <intercepts_messages_serial_1+0x6e6>
                (sClockWeek.weekday != buff_ser1[IRQP_DATA_WEEKDAY]) || 
  402558:	4b2d      	ldr	r3, [pc, #180]	; (402610 <intercepts_messages_serial_1+0x9a0>)
             if((sClockWeek.minutes != buff_ser1[IRQP_DATA_MIN])     ||  
  40255a:	78da      	ldrb	r2, [r3, #3]
  40255c:	4b28      	ldr	r3, [pc, #160]	; (402600 <intercepts_messages_serial_1+0x990>)
  40255e:	79db      	ldrb	r3, [r3, #7]
  402560:	429a      	cmp	r2, r3
  402562:	f47f af47 	bne.w	4023f4 <intercepts_messages_serial_1+0x784>
                (sClockWeek.hours  != buff_ser1[IRQP_DATA_HOURS])) 
  402566:	4b2a      	ldr	r3, [pc, #168]	; (402610 <intercepts_messages_serial_1+0x9a0>)
                (sClockWeek.weekday != buff_ser1[IRQP_DATA_WEEKDAY]) || 
  402568:	789a      	ldrb	r2, [r3, #2]
  40256a:	4b25      	ldr	r3, [pc, #148]	; (402600 <intercepts_messages_serial_1+0x990>)
  40256c:	799b      	ldrb	r3, [r3, #6]
  40256e:	429a      	cmp	r2, r3
  402570:	f47f af40 	bne.w	4023f4 <intercepts_messages_serial_1+0x784>
  402574:	e74f      	b.n	402416 <intercepts_messages_serial_1+0x7a6>
                buff_ser1[IRSP_MEASURE_TEMP_2_LO] = lowByte(sData.measure_Temp[I_PROBE_RETURN]);
  402576:	4b23      	ldr	r3, [pc, #140]	; (402604 <intercepts_messages_serial_1+0x994>)
  402578:	f9b3 31cf 	ldrsh.w	r3, [r3, #463]	; 0x1cf
  40257c:	4a20      	ldr	r2, [pc, #128]	; (402600 <intercepts_messages_serial_1+0x990>)
  40257e:	7193      	strb	r3, [r2, #6]
                buff_ser1[IRSP_MEASURE_TEMP_2_HI] = highByte(sData.measure_Temp[I_PROBE_RETURN]);
  402580:	121b      	asrs	r3, r3, #8
  402582:	71d3      	strb	r3, [r2, #7]
  402584:	e75f      	b.n	402446 <intercepts_messages_serial_1+0x7d6>
             addr1 = buff_ser1[IRQR_ADDR_BYTE_START_EEP];            // Indirizzo INIZIALE di memoria delle eeprom  che si vuole leggere  
  402586:	4a1e      	ldr	r2, [pc, #120]	; (402600 <intercepts_messages_serial_1+0x990>)
  402588:	7913      	ldrb	r3, [r2, #4]
  40258a:	b29c      	uxth	r4, r3
             addr2 = addr1 + buff_ser1[IRQR_ADDR_NUM_BYTE_EEP] - 1;  // Ultimo Indirizzo di memoria delle eeprom  che si vuole leggere  
  40258c:	7956      	ldrb	r6, [r2, #5]
  40258e:	4426      	add	r6, r4
  402590:	3e01      	subs	r6, #1
  402592:	b2b6      	uxth	r6, r6
             buff_ser1[IHM1_POS_CRC_LO]  = IRSR_START_DATA_EEPROM + (addr2 - addr1) +1;
  402594:	f1c3 0307 	rsb	r3, r3, #7
  402598:	4433      	add	r3, r6
  40259a:	7093      	strb	r3, [r2, #2]
             buff_ser1[IHM1_TYPE_COMAND] = COMAND_READ_EEPROM;    
  40259c:	2352      	movs	r3, #82	; 0x52
  40259e:	70d3      	strb	r3, [r2, #3]
             for(i=0;  addr1 <= addr2; addr1++, i++) 
  4025a0:	42b4      	cmp	r4, r6
  4025a2:	d809      	bhi.n	4025b8 <intercepts_messages_serial_1+0x948>
  4025a4:	1d55      	adds	r5, r2, #5
                 buff_ser1[IRSR_START_DATA_EEPROM + i] = read_byte_eeprom(addr1);
  4025a6:	4f19      	ldr	r7, [pc, #100]	; (40260c <intercepts_messages_serial_1+0x99c>)
  4025a8:	4620      	mov	r0, r4
  4025aa:	47b8      	blx	r7
  4025ac:	f805 0f01 	strb.w	r0, [r5, #1]!
             for(i=0;  addr1 <= addr2; addr1++, i++) 
  4025b0:	3401      	adds	r4, #1
  4025b2:	b2a4      	uxth	r4, r4
  4025b4:	42a6      	cmp	r6, r4
  4025b6:	d2f7      	bcs.n	4025a8 <intercepts_messages_serial_1+0x938>
             Write_Message_Ser1(buff_ser1);           
  4025b8:	4811      	ldr	r0, [pc, #68]	; (402600 <intercepts_messages_serial_1+0x990>)
  4025ba:	4b13      	ldr	r3, [pc, #76]	; (402608 <intercepts_messages_serial_1+0x998>)
  4025bc:	4798      	blx	r3
         break;  
  4025be:	e6ca      	b.n	402356 <intercepts_messages_serial_1+0x6e6>
             addr1 = buff_ser1[IRQW_ADDR_BYTE_START_EEP];           // Indirizzo INIZIALE di memoria delle eeprom  che si vuole scrivere 
  4025c0:	4b0f      	ldr	r3, [pc, #60]	; (402600 <intercepts_messages_serial_1+0x990>)
  4025c2:	791d      	ldrb	r5, [r3, #4]
             addr2 = addr1 + buff_ser1[IRQW_ADDR_NUM_BYTE_EEP] -1;  // Ultimo Indirizzo di memoria delle eeprom che si vuole leggere
  4025c4:	795c      	ldrb	r4, [r3, #5]
  4025c6:	442c      	add	r4, r5
  4025c8:	3c01      	subs	r4, #1
  4025ca:	b2a4      	uxth	r4, r4
             addr_start[0] = 0; 
  4025cc:	2300      	movs	r3, #0
  4025ce:	f8ad 3008 	strh.w	r3, [sp, #8]
             addr_end[0]   = ADDR_EEP(size2_free[1]);     
  4025d2:	224c      	movs	r2, #76	; 0x4c
  4025d4:	f8ad 2000 	strh.w	r2, [sp]
             addr_start[1] = ADDR_EEP(Set_Power_ON);       
  4025d8:	f8ad 200a 	strh.w	r2, [sp, #10]
             addr_end[1]   = ADDR_EEP(cntUpdate_SettingPar);
  4025dc:	227e      	movs	r2, #126	; 0x7e
  4025de:	f8ad 2002 	strh.w	r2, [sp, #2]
             addr_start[2] = ADDR_EEP(Bypass_minTempExt);
  4025e2:	2285      	movs	r2, #133	; 0x85
  4025e4:	f8ad 200c 	strh.w	r2, [sp, #12]
             addr_end[2]   = ADDR_EEP(cntUpdate_SetTemp);
  4025e8:	2298      	movs	r2, #152	; 0x98
  4025ea:	f8ad 2004 	strh.w	r2, [sp, #4]
             addr_start[3] = addr_end[2] + 1;          
  4025ee:	2299      	movs	r2, #153	; 0x99
  4025f0:	f8ad 200e 	strh.w	r2, [sp, #14]
             addr_end[3]   = ADDR_EEP(cntUpdate_dayProg);
  4025f4:	22ed      	movs	r2, #237	; 0xed
  4025f6:	f8ad 2006 	strh.w	r2, [sp, #6]
                if((addr1 >= addr_start[i]) && (addr2 <= addr_end[i])) {
  4025fa:	a902      	add	r1, sp, #8
  4025fc:	e011      	b.n	402622 <intercepts_messages_serial_1+0x9b2>
  4025fe:	bf00      	nop
  402600:	20001634 	.word	0x20001634
  402604:	200013ac 	.word	0x200013ac
  402608:	00406381 	.word	0x00406381
  40260c:	0040a26d 	.word	0x0040a26d
  402610:	2000173c 	.word	0x2000173c
  402614:	0040012d 	.word	0x0040012d
  402618:	66666667 	.word	0x66666667
             for(i=0 ; i < 4; i++) {
  40261c:	3301      	adds	r3, #1
  40261e:	2b04      	cmp	r3, #4
  402620:	d015      	beq.n	40264e <intercepts_messages_serial_1+0x9de>
                if((addr1 >= addr_start[i]) && (addr2 <= addr_end[i])) {
  402622:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
  402626:	42aa      	cmp	r2, r5
  402628:	d8f8      	bhi.n	40261c <intercepts_messages_serial_1+0x9ac>
  40262a:	f83d 2013 	ldrh.w	r2, [sp, r3, lsl #1]
  40262e:	42a2      	cmp	r2, r4
  402630:	d3f4      	bcc.n	40261c <intercepts_messages_serial_1+0x9ac>
            wdt_restart(WATCH_DOG);
  402632:	4816      	ldr	r0, [pc, #88]	; (40268c <intercepts_messages_serial_1+0xa1c>)
  402634:	4b16      	ldr	r3, [pc, #88]	; (402690 <intercepts_messages_serial_1+0xa20>)
  402636:	4798      	blx	r3
               flag = update_data_eeprom(addr1, addr2, &buff_ser1[IRQW_START_DATA_EEPROM]);   
  402638:	4a16      	ldr	r2, [pc, #88]	; (402694 <intercepts_messages_serial_1+0xa24>)
  40263a:	4621      	mov	r1, r4
  40263c:	4628      	mov	r0, r5
  40263e:	4b16      	ldr	r3, [pc, #88]	; (402698 <intercepts_messages_serial_1+0xa28>)
  402640:	4798      	blx	r3
  402642:	f1b0 3fff 	cmp.w	r0, #4294967295
  402646:	bf0c      	ite	eq
  402648:	2532      	moveq	r5, #50	; 0x32
  40264a:	2530      	movne	r5, #48	; 0x30
  40264c:	e003      	b.n	402656 <intercepts_messages_serial_1+0x9e6>
            wdt_restart(WATCH_DOG);
  40264e:	480f      	ldr	r0, [pc, #60]	; (40268c <intercepts_messages_serial_1+0xa1c>)
  402650:	4b0f      	ldr	r3, [pc, #60]	; (402690 <intercepts_messages_serial_1+0xa20>)
  402652:	4798      	blx	r3
			 c='1';
  402654:	2531      	movs	r5, #49	; 0x31
			wdt_restart(WATCH_DOG);
  402656:	480d      	ldr	r0, [pc, #52]	; (40268c <intercepts_messages_serial_1+0xa1c>)
  402658:	4b0d      	ldr	r3, [pc, #52]	; (402690 <intercepts_messages_serial_1+0xa20>)
  40265a:	4798      	blx	r3
            buff_ser1[IHM1_POS_CRC_LO]                 = IRSW_CRC_LO;
  40265c:	4c0f      	ldr	r4, [pc, #60]	; (40269c <intercepts_messages_serial_1+0xa2c>)
  40265e:	230b      	movs	r3, #11
  402660:	70a3      	strb	r3, [r4, #2]
            buff_ser1[IHM1_TYPE_COMAND]                = COMAND_WRITE_EEPROM;  
  402662:	2357      	movs	r3, #87	; 0x57
  402664:	70e3      	strb	r3, [r4, #3]
            buff_ser1[IRSW_RESULT_W]                   = c;
  402666:	71a5      	strb	r5, [r4, #6]
            buff_ser1[IRSW_CNT_UPDATE_EEP_INFO]        = read_byte_eeprom(ADDR_EEP(cntUpdate_info));
  402668:	203a      	movs	r0, #58	; 0x3a
  40266a:	4d0d      	ldr	r5, [pc, #52]	; (4026a0 <intercepts_messages_serial_1+0xa30>)
  40266c:	47a8      	blx	r5
  40266e:	71e0      	strb	r0, [r4, #7]
            buff_ser1[IRSW_CNT_UPDATE_EEP_SETTING_PAR] = read_byte_eeprom(ADDR_EEP(cntUpdate_SettingPar));
  402670:	207e      	movs	r0, #126	; 0x7e
  402672:	47a8      	blx	r5
  402674:	7220      	strb	r0, [r4, #8]
            buff_ser1[IRSW_CNT_UPDATE_EEP_SETP_TEMP]   = read_byte_eeprom(ADDR_EEP(cntUpdate_SetTemp));
  402676:	2098      	movs	r0, #152	; 0x98
  402678:	47a8      	blx	r5
  40267a:	7260      	strb	r0, [r4, #9]
            buff_ser1[IRSW_CNT_UPDATE_EEP_WEEKLY]      = read_byte_eeprom(ADDR_EEP(cntUpdate_dayProg));  
  40267c:	20ed      	movs	r0, #237	; 0xed
  40267e:	47a8      	blx	r5
  402680:	72a0      	strb	r0, [r4, #10]
            Write_Message_Ser1(buff_ser1);    
  402682:	4620      	mov	r0, r4
  402684:	4b07      	ldr	r3, [pc, #28]	; (4026a4 <intercepts_messages_serial_1+0xa34>)
  402686:	4798      	blx	r3
   return val_ret;
  402688:	e665      	b.n	402356 <intercepts_messages_serial_1+0x6e6>
  40268a:	bf00      	nop
  40268c:	400e1450 	.word	0x400e1450
  402690:	00403a89 	.word	0x00403a89
  402694:	2000163a 	.word	0x2000163a
  402698:	0040abbd 	.word	0x0040abbd
  40269c:	20001634 	.word	0x20001634
  4026a0:	0040a26d 	.word	0x0040a26d
  4026a4:	00406381 	.word	0x00406381

004026a8 <update_EB_RemoteCTRL>:

//---------------------------------------------------------------
//  intercepts messages from the serial 2
//---------------------------------------------------------------
void update_EB_RemoteCTRL(byte val_new_status)
{
  4026a8:	b510      	push	{r4, lr}
  4026aa:	4604      	mov	r4, r0
    // Se c'Ã¨ un cambiamento registra in eeprom
    byte val;
    byte nbyte = (ACC_EEP_MBUS >> 3);
    // List AccessoyHW[1]:    DPS, PCAF,   PCAP, -----,  ----,  ----,   RFM,  MBUS  (LSB) 
    val   = read_byte_eeprom(ADDR_EEP(AccessoyHW[nbyte]));
  4026ac:	202b      	movs	r0, #43	; 0x2b
  4026ae:	4b0b      	ldr	r3, [pc, #44]	; (4026dc <update_EB_RemoteCTRL+0x34>)
  4026b0:	4798      	blx	r3
  
    if(val_new_status & 0x80) // modbus Fuction: Active
  4026b2:	f014 0f80 	tst.w	r4, #128	; 0x80
      val |= (1 << (ACC_EEP_MBUS & 0x07));
  4026b6:	bf1a      	itte	ne
  4026b8:	f040 0101 	orrne.w	r1, r0, #1
  4026bc:	b2c9      	uxtbne	r1, r1
    else 
      val &= ~(1 << (ACC_EEP_MBUS & 0x07));  
  4026be:	f000 01fe 	andeq.w	r1, r0, #254	; 0xfe
    
    if(val_new_status & 0x40) // RF Module: Install
  4026c2:	f014 0f40 	tst.w	r4, #64	; 0x40
      val |= (1 << (ACC_EEP_RFM & 0x07));
  4026c6:	bf14      	ite	ne
  4026c8:	f041 0102 	orrne.w	r1, r1, #2
    else 
      val &= ~(1 << (ACC_EEP_RFM & 0x07));  
  4026cc:	f001 01fd 	andeq.w	r1, r1, #253	; 0xfd
    
    write_byte_eeprom(ADDR_EEP(AccessoyHW[nbyte]),  val);
  4026d0:	202b      	movs	r0, #43	; 0x2b
  4026d2:	4b03      	ldr	r3, [pc, #12]	; (4026e0 <update_EB_RemoteCTRL+0x38>)
  4026d4:	4798      	blx	r3
    sData.Status_RemoteCTRL = val_new_status;  
  4026d6:	4b03      	ldr	r3, [pc, #12]	; (4026e4 <update_EB_RemoteCTRL+0x3c>)
  4026d8:	715c      	strb	r4, [r3, #5]
  4026da:	bd10      	pop	{r4, pc}
  4026dc:	0040a26d 	.word	0x0040a26d
  4026e0:	0040a1fd 	.word	0x0040a1fd
  4026e4:	200013ac 	.word	0x200013ac

004026e8 <intercepts_messages_serial_2>:
   return val_ret;
}

#else
int intercepts_messages_serial_2()
{
  4026e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4026ec:	b0a5      	sub	sp, #148	; 0x94
	byte addr_eep;
	unsigned short addr_start[4], addr_end[4], addr1, addr2, esitoWR;
	int flag;
	
	// 1: Andiamo ad analizzare se vi sono messaggi nel buffer
	val_ret = Read_Message_Ser2();
  4026ee:	4ba2      	ldr	r3, [pc, #648]	; (402978 <intercepts_messages_serial_2+0x290>)
  4026f0:	4798      	blx	r3
  4026f2:	4605      	mov	r5, r0
	
	
	if(val_ret > RUN_DOWNLOAD )  // if(val_ret > 0)
  4026f4:	2801      	cmp	r0, #1
  4026f6:	f340 81fc 	ble.w	402af2 <intercepts_messages_serial_2+0x40a>
	{
		
		switch (buff_ser2[IHM2_TYPE_COMAND])
  4026fa:	4ba0      	ldr	r3, [pc, #640]	; (40297c <intercepts_messages_serial_2+0x294>)
  4026fc:	791b      	ldrb	r3, [r3, #4]
  4026fe:	3b31      	subs	r3, #49	; 0x31
  402700:	2b26      	cmp	r3, #38	; 0x26
  402702:	f200 81f3 	bhi.w	402aec <intercepts_messages_serial_2+0x404>
  402706:	e8df f013 	tbh	[pc, r3, lsl #1]
  40270a:	0106      	.short	0x0106
  40270c:	01f101f1 	.word	0x01f101f1
  402710:	01f101f1 	.word	0x01f101f1
  402714:	01f101f1 	.word	0x01f101f1
  402718:	01f101f1 	.word	0x01f101f1
  40271c:	01f101f1 	.word	0x01f101f1
  402720:	01f101f1 	.word	0x01f101f1
  402724:	01f101f1 	.word	0x01f101f1
  402728:	01f101f1 	.word	0x01f101f1
  40272c:	01f101f1 	.word	0x01f101f1
  402730:	01f101f1 	.word	0x01f101f1
  402734:	01f10027 	.word	0x01f10027
  402738:	01f101f1 	.word	0x01f101f1
  40273c:	01f101f1 	.word	0x01f101f1
  402740:	01f101f1 	.word	0x01f101f1
  402744:	01f101f1 	.word	0x01f101f1
  402748:	01f101f1 	.word	0x01f101f1
  40274c:	01f10173 	.word	0x01f10173
  402750:	01f101f1 	.word	0x01f101f1
  402754:	01a501f1 	.word	0x01a501f1
		{
			case  COMAND_POLLING_CTRL_FAN:
			n = read_byte_eeprom(ADDR_EEP(numMotors));
  402758:	203b      	movs	r0, #59	; 0x3b
  40275a:	4b89      	ldr	r3, [pc, #548]	; (402980 <intercepts_messages_serial_2+0x298>)
  40275c:	4798      	blx	r3
  40275e:	4606      	mov	r6, r0
			if(n== 4)
  402760:	2804      	cmp	r0, #4
  402762:	f000 80b2 	beq.w	4028ca <intercepts_messages_serial_2+0x1e2>
			msk_motors = 0x33;
			else if(n==6)
			msk_motors = 0x77;
  402766:	2806      	cmp	r0, #6
  402768:	bf14      	ite	ne
  40276a:	2311      	movne	r3, #17
  40276c:	2377      	moveq	r3, #119	; 0x77
			
			// err_V_speed_#
			msk_motors |= 0x08;
  40276e:	f043 0308 	orr.w	r3, r3, #8
			
			// Status Motors R & F:  bit.. 7.none | 6.AlarmM3 | 5.AlarmM2 | 4.AlarmM1 | 3.Err_VSpeed | 2.PowerON_M3 | 1.PowerON_M2 | 0.PowerON_M1
			stsMotorsR_buff[0] = buff_ser2[IRS_CMD_F_STATUS_FAN_R] & msk_motors;
  402772:	4a82      	ldr	r2, [pc, #520]	; (40297c <intercepts_messages_serial_2+0x294>)
  402774:	7951      	ldrb	r1, [r2, #5]
  402776:	4019      	ands	r1, r3
  402778:	4882      	ldr	r0, [pc, #520]	; (402984 <intercepts_messages_serial_2+0x29c>)
  40277a:	7001      	strb	r1, [r0, #0]
			stsMotorsF_buff[0] = buff_ser2[IRS_CMD_F_STATUS_FAN_F] & msk_motors;
  40277c:	7991      	ldrb	r1, [r2, #6]
  40277e:	400b      	ands	r3, r1
  402780:	4981      	ldr	r1, [pc, #516]	; (402988 <intercepts_messages_serial_2+0x2a0>)
  402782:	700b      	strb	r3, [r1, #0]
			// ==========  MOTORI ZA SENZA RPM CHE SONO PERO' PROPORZIONALI AL VOLTAGGIO DI REGOLAZIONE
			
			
			// valore di tensioni lette in uscita che comandono le ventole R, F: da 0.00V a 11.00V il valore ÃÂ¨ moltiplicato x 100. es: 500 = 5.00
			sData.feedbk_v_speed_motors_R =  buff_ser2[IRS_CMD_F_FEEDBK_VOUT_R_LO];
			sData.feedbk_v_speed_motors_R |= (unsigned short)(buff_ser2[IRS_CMD_F_FEEDBK_VOUT_R_HI] << 8);
  402784:	7a13      	ldrb	r3, [r2, #8]
			sData.feedbk_v_speed_motors_R =  buff_ser2[IRS_CMD_F_FEEDBK_VOUT_R_LO];
  402786:	79d0      	ldrb	r0, [r2, #7]
			sData.feedbk_v_speed_motors_R |= (unsigned short)(buff_ser2[IRS_CMD_F_FEEDBK_VOUT_R_HI] << 8);
  402788:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40278c:	b200      	sxth	r0, r0
  40278e:	4b7f      	ldr	r3, [pc, #508]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  402790:	f8a3 01b7 	strh.w	r0, [r3, #439]	; 0x1b7
			
			
			sData.feedbk_v_speed_motors_F = buff_ser2[IRS_CMD_F_FEEDBK_VOUT_F_LO];
			sData.feedbk_v_speed_motors_F |= (unsigned short)(buff_ser2[IRS_CMD_F_FEEDBK_VOUT_F_HI] << 8);
  402794:	7a91      	ldrb	r1, [r2, #10]
			sData.feedbk_v_speed_motors_F = buff_ser2[IRS_CMD_F_FEEDBK_VOUT_F_LO];
  402796:	7a54      	ldrb	r4, [r2, #9]
			sData.feedbk_v_speed_motors_F |= (unsigned short)(buff_ser2[IRS_CMD_F_FEEDBK_VOUT_F_HI] << 8);
  402798:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
  40279c:	b224      	sxth	r4, r4
  40279e:	f8a3 41b9 	strh.w	r4, [r3, #441]	; 0x1b9
			
			// Lettura della 6 Speed Motors (rpm)
			sData.rpm_motors_R[0] = buff_ser2[IRS_CMD_F_RPM_FAN_R1_LO];
			sData.rpm_motors_R[0] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_R1_HI] << 8);
			
			if(sData.feedbk_v_speed_motors_R)
  4027a2:	2800      	cmp	r0, #0
  4027a4:	f000 8093 	beq.w	4028ce <intercepts_messages_serial_2+0x1e6>
			{
				sData.rpm_motors_R[0] = (unsigned int) ((float)(sData.feedbk_v_speed_motors_R*3.200));
  4027a8:	4b79      	ldr	r3, [pc, #484]	; (402990 <intercepts_messages_serial_2+0x2a8>)
  4027aa:	4798      	blx	r3
  4027ac:	a370      	add	r3, pc, #448	; (adr r3, 402970 <intercepts_messages_serial_2+0x288>)
  4027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027b2:	4f78      	ldr	r7, [pc, #480]	; (402994 <intercepts_messages_serial_2+0x2ac>)
  4027b4:	47b8      	blx	r7
  4027b6:	4b78      	ldr	r3, [pc, #480]	; (402998 <intercepts_messages_serial_2+0x2b0>)
  4027b8:	4798      	blx	r3
  4027ba:	4b78      	ldr	r3, [pc, #480]	; (40299c <intercepts_messages_serial_2+0x2b4>)
  4027bc:	4798      	blx	r3
  4027be:	4b73      	ldr	r3, [pc, #460]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  4027c0:	f8a3 01db 	strh.w	r0, [r3, #475]	; 0x1db
			
			
			sData.rpm_motors_F[0] = buff_ser2[IRS_CMD_F_RPM_FAN_F1_LO];
			sData.rpm_motors_F[0] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_F1_HI] << 8);
			
			if(sData.feedbk_v_speed_motors_F)
  4027c4:	2c00      	cmp	r4, #0
  4027c6:	f000 8089 	beq.w	4028dc <intercepts_messages_serial_2+0x1f4>
			{
				sData.rpm_motors_F[0] = (unsigned int) ((float)(sData.feedbk_v_speed_motors_F*3.200));
  4027ca:	4620      	mov	r0, r4
  4027cc:	4b70      	ldr	r3, [pc, #448]	; (402990 <intercepts_messages_serial_2+0x2a8>)
  4027ce:	4798      	blx	r3
  4027d0:	a367      	add	r3, pc, #412	; (adr r3, 402970 <intercepts_messages_serial_2+0x288>)
  4027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027d6:	4c6f      	ldr	r4, [pc, #444]	; (402994 <intercepts_messages_serial_2+0x2ac>)
  4027d8:	47a0      	blx	r4
  4027da:	4b6f      	ldr	r3, [pc, #444]	; (402998 <intercepts_messages_serial_2+0x2b0>)
  4027dc:	4798      	blx	r3
  4027de:	4b6f      	ldr	r3, [pc, #444]	; (40299c <intercepts_messages_serial_2+0x2b4>)
  4027e0:	4798      	blx	r3
  4027e2:	4b6a      	ldr	r3, [pc, #424]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  4027e4:	f8a3 01e1 	strh.w	r0, [r3, #481]	; 0x1e1
			}else
			sData.rpm_motors_F[0] = 0;
			
			sData.rpm_motors_R[1] = buff_ser2[IRS_CMD_F_RPM_FAN_R2_LO];
			sData.rpm_motors_R[1] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_R2_HI] << 8);
  4027e8:	4968      	ldr	r1, [pc, #416]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  4027ea:	4b64      	ldr	r3, [pc, #400]	; (40297c <intercepts_messages_serial_2+0x294>)
  4027ec:	7b98      	ldrb	r0, [r3, #14]
			sData.rpm_motors_R[1] = buff_ser2[IRS_CMD_F_RPM_FAN_R2_LO];
  4027ee:	7b5a      	ldrb	r2, [r3, #13]
			sData.rpm_motors_R[1] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_R2_HI] << 8);
  4027f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4027f4:	f8a1 21dd 	strh.w	r2, [r1, #477]	; 0x1dd
			
			sData.rpm_motors_F[1] = buff_ser2[IRS_CMD_F_RPM_FAN_F2_LO];
			sData.rpm_motors_F[1] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_F2_HI] << 8);
  4027f8:	7d18      	ldrb	r0, [r3, #20]
			sData.rpm_motors_F[1] = buff_ser2[IRS_CMD_F_RPM_FAN_F2_LO];
  4027fa:	7cda      	ldrb	r2, [r3, #19]
			sData.rpm_motors_F[1] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_F2_HI] << 8);
  4027fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  402800:	f8a1 21e3 	strh.w	r2, [r1, #483]	; 0x1e3
			
			sData.rpm_motors_R[2] =  buff_ser2[IRS_CMD_F_RPM_FAN_R3_LO];
			sData.rpm_motors_R[2] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_R3_HI] << 8);
  402804:	7c18      	ldrb	r0, [r3, #16]
			sData.rpm_motors_R[2] =  buff_ser2[IRS_CMD_F_RPM_FAN_R3_LO];
  402806:	7bda      	ldrb	r2, [r3, #15]
			sData.rpm_motors_R[2] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_R3_HI] << 8);
  402808:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  40280c:	f8a1 21df 	strh.w	r2, [r1, #479]	; 0x1df
			
			sData.rpm_motors_F[2] = buff_ser2[IRS_CMD_F_RPM_FAN_F3_LO];
			sData.rpm_motors_F[2] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_F3_HI] << 8);
  402810:	7d9a      	ldrb	r2, [r3, #22]
			sData.rpm_motors_F[2] = buff_ser2[IRS_CMD_F_RPM_FAN_F3_LO];
  402812:	7d5b      	ldrb	r3, [r3, #21]
			sData.rpm_motors_F[2] |= (unsigned short)(buff_ser2[IRS_CMD_F_RPM_FAN_F3_HI] << 8);
  402814:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402818:	f8a1 31e5 	strh.w	r3, [r1, #485]	; 0x1e5

			
			cnt_resp_poll_CTRL_FAN++;   // incrementa conatatore di risposte ok di polling
  40281c:	4a60      	ldr	r2, [pc, #384]	; (4029a0 <intercepts_messages_serial_2+0x2b8>)
  40281e:	6813      	ldr	r3, [r2, #0]
  402820:	3301      	adds	r3, #1
  402822:	6013      	str	r3, [r2, #0]

			RemoveAlarm(ALM_EB_CTRL_FAN);
  402824:	2050      	movs	r0, #80	; 0x50
  402826:	4b5f      	ldr	r3, [pc, #380]	; (4029a4 <intercepts_messages_serial_2+0x2bc>)
  402828:	4798      	blx	r3
			
			// il cambiamento di stato deve essere = per 2 pollate consecutive
			if(n==2)
  40282a:	2e02      	cmp	r6, #2
  40282c:	d05d      	beq.n	4028ea <intercepts_messages_serial_2+0x202>
			msk_motors = 0x01;
			else if(n==4)
			msk_motors = 0x03;
			else
			msk_motors = 0x07;
  40282e:	2e04      	cmp	r6, #4
  402830:	bf0c      	ite	eq
  402832:	2303      	moveq	r3, #3
  402834:	2307      	movne	r3, #7
			
			// occorre confermare il dato per 3 volte prima di segnalare errori o altro.
			if ((stsMotorsR_buff[0] == stsMotorsR_buff[1]) && (stsMotorsR_buff[0] == stsMotorsR_buff[2]))
  402836:	4953      	ldr	r1, [pc, #332]	; (402984 <intercepts_messages_serial_2+0x29c>)
  402838:	780a      	ldrb	r2, [r1, #0]
  40283a:	7849      	ldrb	r1, [r1, #1]
  40283c:	4291      	cmp	r1, r2
  40283e:	d056      	beq.n	4028ee <intercepts_messages_serial_2+0x206>
			sData.StatusMotorsR = stsMotorsR_buff[0] & 0xF7;         //(tolto err_V_speed_R --> 056 da problemi di impedenza)  06/06/2016
			else {
				i = (ALM_MR1_NO_PWR >> 3);
				sData.Events[i] = stsMotorsR_buff[0] & 0xF0;             // allarmi di no rotazione motore  (tolto err_V_speed_R --> 056 da problemi di impedenza)  06/06/2016
				sData.Events[i] |= (~stsMotorsR_buff[0] & msk_motors);   // allarmi no POWER_MOTORS
  402840:	ea23 0102 	bic.w	r1, r3, r2
				sData.Events[i] = stsMotorsR_buff[0] & 0xF0;             // allarmi di no rotazione motore  (tolto err_V_speed_R --> 056 da problemi di impedenza)  06/06/2016
  402844:	f022 020f 	bic.w	r2, r2, #15
				sData.Events[i] |= (~stsMotorsR_buff[0] & msk_motors);   // allarmi no POWER_MOTORS
  402848:	430a      	orrs	r2, r1
  40284a:	4950      	ldr	r1, [pc, #320]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  40284c:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
			}
			
			if ((stsMotorsF_buff[0] == stsMotorsF_buff[1]) && (stsMotorsF_buff[0] == stsMotorsF_buff[2]))
  402850:	494d      	ldr	r1, [pc, #308]	; (402988 <intercepts_messages_serial_2+0x2a0>)
  402852:	780a      	ldrb	r2, [r1, #0]
  402854:	7849      	ldrb	r1, [r1, #1]
  402856:	4291      	cmp	r1, r2
  402858:	d053      	beq.n	402902 <intercepts_messages_serial_2+0x21a>
			sData.StatusMotorsF = stsMotorsF_buff[0] & 0xF7;          //(tolto err_V_speed_F --> 056 da problemi di impedenza)  06/06/2016
			else  {
				i = (ALM_MF1_NO_PWR >> 3);
				sData.Events[i] = stsMotorsF_buff[0] & 0xF0;              // allarmi di no rotazione motore (tolto err_V_speed_F --> 056 da problemi di impedenza)  06/06/2016
				sData.Events[i] |= (~stsMotorsF_buff[0] & msk_motors);    // allarmi no POWER_MOTORS
  40285a:	ea23 0302 	bic.w	r3, r3, r2
				sData.Events[i] = stsMotorsF_buff[0] & 0xF0;              // allarmi di no rotazione motore (tolto err_V_speed_F --> 056 da problemi di impedenza)  06/06/2016
  40285e:	f022 020f 	bic.w	r2, r2, #15
				sData.Events[i] |= (~stsMotorsF_buff[0] & msk_motors);    // allarmi no POWER_MOTORS
  402862:	4313      	orrs	r3, r2
  402864:	4a49      	ldr	r2, [pc, #292]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  402866:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
			sData.StatusMotorsR &= 0xF0;
			#endif

			// Tolgo gli errori di rotazione visto che non leggo la tacho.
			
			sData.StatusMotorsF &= 0x0F;
  40286a:	4b48      	ldr	r3, [pc, #288]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  40286c:	f893 21f0 	ldrb.w	r2, [r3, #496]	; 0x1f0
  402870:	f002 020f 	and.w	r2, r2, #15
  402874:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
			sData.StatusMotorsR &= 0x0F;
  402878:	f893 21ef 	ldrb.w	r2, [r3, #495]	; 0x1ef
  40287c:	f002 020f 	and.w	r2, r2, #15
  402880:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			
			RemoveAlarm(ALM_MR1_NO_PULSE);
  402884:	2044      	movs	r0, #68	; 0x44
  402886:	4c47      	ldr	r4, [pc, #284]	; (4029a4 <intercepts_messages_serial_2+0x2bc>)
  402888:	47a0      	blx	r4
			RemoveAlarm(ALM_MF1_NO_PULSE);
  40288a:	204c      	movs	r0, #76	; 0x4c
  40288c:	47a0      	blx	r4
			
			
			enab_func = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  40288e:	202e      	movs	r0, #46	; 0x2e
  402890:	4b45      	ldr	r3, [pc, #276]	; (4029a8 <intercepts_messages_serial_2+0x2c0>)
  402892:	4798      	blx	r3
			if (enab_func & (1 << ENAB_MBF))
  402894:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  402898:	d00c      	beq.n	4028b4 <intercepts_messages_serial_2+0x1cc>
			{
				sData.StatusMotorsF &= 0xF0;
  40289a:	4b3c      	ldr	r3, [pc, #240]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  40289c:	f893 21f0 	ldrb.w	r2, [r3, #496]	; 0x1f0
  4028a0:	f022 020f 	bic.w	r2, r2, #15
  4028a4:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
				sData.StatusMotorsR &= 0xF0;
  4028a8:	f893 21ef 	ldrb.w	r2, [r3, #495]	; 0x1ef
  4028ac:	f022 020f 	bic.w	r2, r2, #15
  4028b0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			}
			
			stsMotorsR_buff[2] = stsMotorsR_buff[1];
  4028b4:	4b33      	ldr	r3, [pc, #204]	; (402984 <intercepts_messages_serial_2+0x29c>)
  4028b6:	785a      	ldrb	r2, [r3, #1]
  4028b8:	709a      	strb	r2, [r3, #2]
			stsMotorsR_buff[1] = stsMotorsR_buff[0];
  4028ba:	781a      	ldrb	r2, [r3, #0]
  4028bc:	705a      	strb	r2, [r3, #1]
			stsMotorsF_buff[2] = stsMotorsF_buff[1];
  4028be:	4b32      	ldr	r3, [pc, #200]	; (402988 <intercepts_messages_serial_2+0x2a0>)
  4028c0:	785a      	ldrb	r2, [r3, #1]
  4028c2:	709a      	strb	r2, [r3, #2]
			stsMotorsF_buff[1] = stsMotorsF_buff[0];
  4028c4:	781a      	ldrb	r2, [r3, #0]
  4028c6:	705a      	strb	r2, [r3, #1]
			break;
  4028c8:	e115      	b.n	402af6 <intercepts_messages_serial_2+0x40e>
			msk_motors = 0x33;
  4028ca:	2333      	movs	r3, #51	; 0x33
  4028cc:	e74f      	b.n	40276e <intercepts_messages_serial_2+0x86>
			sData.rpm_motors_R[0] = 0;
  4028ce:	4b2f      	ldr	r3, [pc, #188]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  4028d0:	2200      	movs	r2, #0
  4028d2:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
  4028d6:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  4028da:	e773      	b.n	4027c4 <intercepts_messages_serial_2+0xdc>
			sData.rpm_motors_F[0] = 0;
  4028dc:	4b2b      	ldr	r3, [pc, #172]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  4028de:	2200      	movs	r2, #0
  4028e0:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
  4028e4:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
  4028e8:	e77e      	b.n	4027e8 <intercepts_messages_serial_2+0x100>
			msk_motors = 0x01;
  4028ea:	2301      	movs	r3, #1
  4028ec:	e7a3      	b.n	402836 <intercepts_messages_serial_2+0x14e>
			if ((stsMotorsR_buff[0] == stsMotorsR_buff[1]) && (stsMotorsR_buff[0] == stsMotorsR_buff[2]))
  4028ee:	4925      	ldr	r1, [pc, #148]	; (402984 <intercepts_messages_serial_2+0x29c>)
  4028f0:	7889      	ldrb	r1, [r1, #2]
  4028f2:	4291      	cmp	r1, r2
  4028f4:	d1a4      	bne.n	402840 <intercepts_messages_serial_2+0x158>
			sData.StatusMotorsR = stsMotorsR_buff[0] & 0xF7;         //(tolto err_V_speed_R --> 056 da problemi di impedenza)  06/06/2016
  4028f6:	f022 0208 	bic.w	r2, r2, #8
  4028fa:	4924      	ldr	r1, [pc, #144]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  4028fc:	f881 21ef 	strb.w	r2, [r1, #495]	; 0x1ef
  402900:	e7a6      	b.n	402850 <intercepts_messages_serial_2+0x168>
			if ((stsMotorsF_buff[0] == stsMotorsF_buff[1]) && (stsMotorsF_buff[0] == stsMotorsF_buff[2]))
  402902:	4921      	ldr	r1, [pc, #132]	; (402988 <intercepts_messages_serial_2+0x2a0>)
  402904:	7889      	ldrb	r1, [r1, #2]
  402906:	4291      	cmp	r1, r2
  402908:	d1a7      	bne.n	40285a <intercepts_messages_serial_2+0x172>
			sData.StatusMotorsF = stsMotorsF_buff[0] & 0xF7;          //(tolto err_V_speed_F --> 056 da problemi di impedenza)  06/06/2016
  40290a:	f022 0208 	bic.w	r2, r2, #8
  40290e:	4b1f      	ldr	r3, [pc, #124]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  402910:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
  402914:	e7a9      	b.n	40286a <intercepts_messages_serial_2+0x182>
			
			
			case  COMAND_PACKET_1_DATA:
			//    b7. 1= Modbus Active, b6 = RFM Install, ... b1
			if(sData.Status_RemoteCTRL != buff_ser2[IPK1M_STATUS_REMOTE_CTRL])
  402916:	4b19      	ldr	r3, [pc, #100]	; (40297c <intercepts_messages_serial_2+0x294>)
  402918:	7958      	ldrb	r0, [r3, #5]
  40291a:	4b1c      	ldr	r3, [pc, #112]	; (40298c <intercepts_messages_serial_2+0x2a4>)
  40291c:	795b      	ldrb	r3, [r3, #5]
  40291e:	4283      	cmp	r3, r0
  402920:	d001      	beq.n	402926 <intercepts_messages_serial_2+0x23e>
			{
				update_EB_RemoteCTRL(buff_ser2[IPK1M_STATUS_REMOTE_CTRL]);
  402922:	4b22      	ldr	r3, [pc, #136]	; (4029ac <intercepts_messages_serial_2+0x2c4>)
  402924:	4798      	blx	r3
			}
			
			if(buff_ser2[IPK1M_SET_CLOCK] == 'S') {
  402926:	4b15      	ldr	r3, [pc, #84]	; (40297c <intercepts_messages_serial_2+0x294>)
  402928:	7a1b      	ldrb	r3, [r3, #8]
  40292a:	2b53      	cmp	r3, #83	; 0x53
  40292c:	d044      	beq.n	4029b8 <intercepts_messages_serial_2+0x2d0>
				sClockWeek.minutes = buff_ser2[IPK1M_CLOCK_MIN];
				sClockWeek.hours   = buff_ser2[IPK1M_CLOCK_SEC];
				sClockWeek.weekday = buff_ser2[IPK1M_CLOCK_DAYWEEK];
			}
			
			if(buff_ser2[IPK1M_CLEAN_FILTERS] == 'C') {
  40292e:	4b13      	ldr	r3, [pc, #76]	; (40297c <intercepts_messages_serial_2+0x294>)
  402930:	7b5b      	ldrb	r3, [r3, #13]
  402932:	2b43      	cmp	r3, #67	; 0x43
  402934:	d04b      	beq.n	4029ce <intercepts_messages_serial_2+0x2e6>
				RemoveAlarm(ALM_FILTER);
				for(i=0;  i < 4;  i++)
				write_byte_eeprom(ADDR_EEP(time_lastCloggedFilters[i]), read_byte_eeprom(ADDR_EEP(hour_runnig[i])));
			}
			
			if(read_byte_eeprom(ADDR_EEP(SW_Vers_ModBus[0])) != buff_ser2[IPK1M_VER_FW_1_CAR])
  402936:	201d      	movs	r0, #29
  402938:	4b11      	ldr	r3, [pc, #68]	; (402980 <intercepts_messages_serial_2+0x298>)
  40293a:	4798      	blx	r3
  40293c:	4b0f      	ldr	r3, [pc, #60]	; (40297c <intercepts_messages_serial_2+0x294>)
  40293e:	7999      	ldrb	r1, [r3, #6]
  402940:	4288      	cmp	r0, r1
  402942:	d002      	beq.n	40294a <intercepts_messages_serial_2+0x262>
			write_byte_eeprom(ADDR_EEP(SW_Vers_ModBus[0]),   buff_ser2[IPK1M_VER_FW_1_CAR]);
  402944:	201d      	movs	r0, #29
  402946:	4b1a      	ldr	r3, [pc, #104]	; (4029b0 <intercepts_messages_serial_2+0x2c8>)
  402948:	4798      	blx	r3
			
			if(read_byte_eeprom(ADDR_EEP(SW_Vers_ModBus[1])) != buff_ser2[IPK1M_VER_FW_2_CAR])
  40294a:	201e      	movs	r0, #30
  40294c:	4b0c      	ldr	r3, [pc, #48]	; (402980 <intercepts_messages_serial_2+0x298>)
  40294e:	4798      	blx	r3
  402950:	4b0a      	ldr	r3, [pc, #40]	; (40297c <intercepts_messages_serial_2+0x294>)
  402952:	79d9      	ldrb	r1, [r3, #7]
  402954:	4288      	cmp	r0, r1
  402956:	d002      	beq.n	40295e <intercepts_messages_serial_2+0x276>
			write_byte_eeprom(ADDR_EEP(SW_Vers_ModBus[1]),   buff_ser2[IPK1M_VER_FW_2_CAR]);
  402958:	201e      	movs	r0, #30
  40295a:	4b15      	ldr	r3, [pc, #84]	; (4029b0 <intercepts_messages_serial_2+0x2c8>)
  40295c:	4798      	blx	r3
			
			cnt_no_link_Modbus = 0;
  40295e:	2200      	movs	r2, #0
  402960:	4b14      	ldr	r3, [pc, #80]	; (4029b4 <intercepts_messages_serial_2+0x2cc>)
  402962:	701a      	strb	r2, [r3, #0]
			
			RemoveAlarm(ALM_EB_REM_CTRL);
  402964:	2051      	movs	r0, #81	; 0x51
  402966:	4b0f      	ldr	r3, [pc, #60]	; (4029a4 <intercepts_messages_serial_2+0x2bc>)
  402968:	4798      	blx	r3
			break;
  40296a:	e0c4      	b.n	402af6 <intercepts_messages_serial_2+0x40e>
  40296c:	f3af 8000 	nop.w
  402970:	9999999a 	.word	0x9999999a
  402974:	40099999 	.word	0x40099999
  402978:	00406519 	.word	0x00406519
  40297c:	200016bc 	.word	0x200016bc
  402980:	0040a26d 	.word	0x0040a26d
  402984:	20000b68 	.word	0x20000b68
  402988:	20000b64 	.word	0x20000b64
  40298c:	200013ac 	.word	0x200013ac
  402990:	0040ce7d 	.word	0x0040ce7d
  402994:	0040cf49 	.word	0x0040cf49
  402998:	0040d539 	.word	0x0040d539
  40299c:	0040dbcd 	.word	0x0040dbcd
  4029a0:	20000b58 	.word	0x20000b58
  4029a4:	004035ad 	.word	0x004035ad
  4029a8:	0040a279 	.word	0x0040a279
  4029ac:	004026a9 	.word	0x004026a9
  4029b0:	0040a1fd 	.word	0x0040a1fd
  4029b4:	20000b50 	.word	0x20000b50
				sClockWeek.seconds = buff_ser2[IPK1M_CLOCK_HOURS];
  4029b8:	4b52      	ldr	r3, [pc, #328]	; (402b04 <intercepts_messages_serial_2+0x41c>)
  4029ba:	4a53      	ldr	r2, [pc, #332]	; (402b08 <intercepts_messages_serial_2+0x420>)
  4029bc:	7a91      	ldrb	r1, [r2, #10]
  4029be:	7019      	strb	r1, [r3, #0]
				sClockWeek.minutes = buff_ser2[IPK1M_CLOCK_MIN];
  4029c0:	7ad1      	ldrb	r1, [r2, #11]
  4029c2:	7059      	strb	r1, [r3, #1]
				sClockWeek.hours   = buff_ser2[IPK1M_CLOCK_SEC];
  4029c4:	7b11      	ldrb	r1, [r2, #12]
  4029c6:	7099      	strb	r1, [r3, #2]
				sClockWeek.weekday = buff_ser2[IPK1M_CLOCK_DAYWEEK];
  4029c8:	7a52      	ldrb	r2, [r2, #9]
  4029ca:	70da      	strb	r2, [r3, #3]
  4029cc:	e7af      	b.n	40292e <intercepts_messages_serial_2+0x246>
				RemoveAlarm(ALM_FILTER);
  4029ce:	2055      	movs	r0, #85	; 0x55
  4029d0:	4b4e      	ldr	r3, [pc, #312]	; (402b0c <intercepts_messages_serial_2+0x424>)
  4029d2:	4798      	blx	r3
  4029d4:	2422      	movs	r4, #34	; 0x22
				write_byte_eeprom(ADDR_EEP(time_lastCloggedFilters[i]), read_byte_eeprom(ADDR_EEP(hour_runnig[i])));
  4029d6:	4f4e      	ldr	r7, [pc, #312]	; (402b10 <intercepts_messages_serial_2+0x428>)
  4029d8:	4e4e      	ldr	r6, [pc, #312]	; (402b14 <intercepts_messages_serial_2+0x42c>)
  4029da:	4620      	mov	r0, r4
  4029dc:	47b8      	blx	r7
  4029de:	1d23      	adds	r3, r4, #4
  4029e0:	4601      	mov	r1, r0
  4029e2:	b298      	uxth	r0, r3
  4029e4:	47b0      	blx	r6
  4029e6:	3401      	adds	r4, #1
  4029e8:	b2a4      	uxth	r4, r4
				for(i=0;  i < 4;  i++)
  4029ea:	2c26      	cmp	r4, #38	; 0x26
  4029ec:	d1f5      	bne.n	4029da <intercepts_messages_serial_2+0x2f2>
  4029ee:	e7a2      	b.n	402936 <intercepts_messages_serial_2+0x24e>
			
			
			case  COMAND_READ_EEPROM:
			// rispondiamo subito al modulo.
			if (buff_ser2[IRQ_RDE_NUM_BYTE] < 120) {
  4029f0:	4b45      	ldr	r3, [pc, #276]	; (402b08 <intercepts_messages_serial_2+0x420>)
  4029f2:	799b      	ldrb	r3, [r3, #6]
  4029f4:	2b77      	cmp	r3, #119	; 0x77
  4029f6:	d826      	bhi.n	402a46 <intercepts_messages_serial_2+0x35e>
				addr_eep = buff_ser2[IRQ_RDE_ADDR_EEP];               // Indirizzo INIZIALE di memoria delle eeprom  che si vuole leggere
  4029f8:	4a43      	ldr	r2, [pc, #268]	; (402b08 <intercepts_messages_serial_2+0x420>)
  4029fa:	7956      	ldrb	r6, [r2, #5]
				len = IRS_RDE_START_DATA_EEP + buff_ser2[IRQ_RDE_NUM_BYTE] + 2; // Conteggiamo anche i 2 Byte dei Cksum
  4029fc:	f103 0909 	add.w	r9, r3, #9
				//------- Costruiamo il messaggio di risposta ---------
				buff[IHM2_POS_CRC_LO]     = (len - 2);
  402a00:	f1a9 0202 	sub.w	r2, r9, #2
  402a04:	f88d 2012 	strb.w	r2, [sp, #18]
				buff[IHM2_ADDR_RECEIVER]  = ADDR_REM_CTRL;
  402a08:	2207      	movs	r2, #7
  402a0a:	f88d 2013 	strb.w	r2, [sp, #19]
				buff[IHM2_TYPE_COMAND]    = COMAND_READ_EEPROM;
  402a0e:	2252      	movs	r2, #82	; 0x52
  402a10:	f88d 2014 	strb.w	r2, [sp, #20]
				buff[IRS_RDE_ADDR_EEP]    = addr_eep;
  402a14:	f88d 6015 	strb.w	r6, [sp, #21]
				buff[IRS_RDE_NUM_BYTE]    = buff_ser2[IRQ_RDE_NUM_BYTE];
  402a18:	f88d 3016 	strb.w	r3, [sp, #22]
				
				for(i=0;  i < buff_ser2[IRQ_RDE_NUM_BYTE]; addr_eep++, i++)
  402a1c:	b17b      	cbz	r3, 402a3e <intercepts_messages_serial_2+0x356>
  402a1e:	2400      	movs	r4, #0
				buff[IRS_RDE_START_DATA_EEP + i] = read_byte_eeprom(addr_eep);
  402a20:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 402b10 <intercepts_messages_serial_2+0x428>
				for(i=0;  i < buff_ser2[IRQ_RDE_NUM_BYTE]; addr_eep++, i++)
  402a24:	4f38      	ldr	r7, [pc, #224]	; (402b08 <intercepts_messages_serial_2+0x420>)
				buff[IRS_RDE_START_DATA_EEP + i] = read_byte_eeprom(addr_eep);
  402a26:	1930      	adds	r0, r6, r4
  402a28:	b2c0      	uxtb	r0, r0
  402a2a:	47c0      	blx	r8
  402a2c:	ab24      	add	r3, sp, #144	; 0x90
  402a2e:	4423      	add	r3, r4
  402a30:	f803 0c79 	strb.w	r0, [r3, #-121]
				for(i=0;  i < buff_ser2[IRQ_RDE_NUM_BYTE]; addr_eep++, i++)
  402a34:	3401      	adds	r4, #1
  402a36:	b2e4      	uxtb	r4, r4
  402a38:	79bb      	ldrb	r3, [r7, #6]
  402a3a:	42a3      	cmp	r3, r4
  402a3c:	d8f3      	bhi.n	402a26 <intercepts_messages_serial_2+0x33e>
				
				Send_Message_Ser2(&buff[0], len);
  402a3e:	4649      	mov	r1, r9
  402a40:	a804      	add	r0, sp, #16
  402a42:	4b35      	ldr	r3, [pc, #212]	; (402b18 <intercepts_messages_serial_2+0x430>)
  402a44:	4798      	blx	r3
				
			}
			
			cnt_no_link_Modbus = 0;
  402a46:	2200      	movs	r2, #0
  402a48:	4b34      	ldr	r3, [pc, #208]	; (402b1c <intercepts_messages_serial_2+0x434>)
  402a4a:	701a      	strb	r2, [r3, #0]
			
			RemoveAlarm(ALM_EB_REM_CTRL);
  402a4c:	2051      	movs	r0, #81	; 0x51
  402a4e:	4b2f      	ldr	r3, [pc, #188]	; (402b0c <intercepts_messages_serial_2+0x424>)
  402a50:	4798      	blx	r3
			break;
  402a52:	e050      	b.n	402af6 <intercepts_messages_serial_2+0x40e>
			
			case  COMAND_WRITE_EEPROM:
			
			addr1 = buff_ser2[IRQ_WRE_ADDR_EEP];           // Indirizzo INIZIALE di memoria delle eeprom  che si vuole scrivere
  402a54:	4b2c      	ldr	r3, [pc, #176]	; (402b08 <intercepts_messages_serial_2+0x420>)
  402a56:	7958      	ldrb	r0, [r3, #5]
			addr2 = addr1 + buff_ser2[IRQ_WRE_NUM_BYTE];   // Ultimo Indirizzo di memoria dell'eeprom che si vuole leggere
  402a58:	7999      	ldrb	r1, [r3, #6]
  402a5a:	4401      	add	r1, r0
			
			// prima di scrivere andiamo a verificare che l'area di memoria non sia protetta da scrittura, i byte protetti sono pochi e sono:
			addr_start[0] = 0;
  402a5c:	2300      	movs	r3, #0
  402a5e:	f8ad 3008 	strh.w	r3, [sp, #8]
			addr_end[0]   = ADDR_EEP(size2_free[1]);
  402a62:	224c      	movs	r2, #76	; 0x4c
  402a64:	f8ad 2000 	strh.w	r2, [sp]
			
			addr_start[1] = ADDR_EEP(Set_Power_ON);
  402a68:	f8ad 200a 	strh.w	r2, [sp, #10]
			addr_end[1]   = ADDR_EEP(cntUpdate_SettingPar);
  402a6c:	227e      	movs	r2, #126	; 0x7e
  402a6e:	f8ad 2002 	strh.w	r2, [sp, #2]
			
			addr_start[2] = ADDR_EEP(Bypass_minTempExt);
  402a72:	2285      	movs	r2, #133	; 0x85
  402a74:	f8ad 200c 	strh.w	r2, [sp, #12]
			addr_end[2]   = ADDR_EEP(cntUpdate_SetTemp);
  402a78:	2298      	movs	r2, #152	; 0x98
  402a7a:	f8ad 2004 	strh.w	r2, [sp, #4]
			
			addr_start[3] = addr_end[2] + 1;
  402a7e:	2299      	movs	r2, #153	; 0x99
  402a80:	f8ad 200e 	strh.w	r2, [sp, #14]
			addr_end[3]   = ADDR_EEP(cntUpdate_dayProg);
  402a84:	22ed      	movs	r2, #237	; 0xed
  402a86:	f8ad 2006 	strh.w	r2, [sp, #6]

			for(i=0, esitoWR='1'; i < 4; i++) {
				if((addr1 >= addr_start[i]) && (addr2 <= addr_end[i])) {
  402a8a:	ac02      	add	r4, sp, #8
  402a8c:	e002      	b.n	402a94 <intercepts_messages_serial_2+0x3ac>
  402a8e:	3301      	adds	r3, #1
			for(i=0, esitoWR='1'; i < 4; i++) {
  402a90:	2b04      	cmp	r3, #4
  402a92:	d010      	beq.n	402ab6 <intercepts_messages_serial_2+0x3ce>
				if((addr1 >= addr_start[i]) && (addr2 <= addr_end[i])) {
  402a94:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
  402a98:	4282      	cmp	r2, r0
  402a9a:	d8f8      	bhi.n	402a8e <intercepts_messages_serial_2+0x3a6>
  402a9c:	f83d 2013 	ldrh.w	r2, [sp, r3, lsl #1]
  402aa0:	428a      	cmp	r2, r1
  402aa2:	d3f4      	bcc.n	402a8e <intercepts_messages_serial_2+0x3a6>
				}
			}
			
			if(esitoWR == '0') {
				// Scriviamo in eeprom, ma solo dopo aver verificato che i valori inseriti non sono fuori limiti.
				flag = update_data_eeprom(addr1, addr2, &buff_ser2[IRQ_WRE_START_DATA_EEP]);
  402aa4:	4a1e      	ldr	r2, [pc, #120]	; (402b20 <intercepts_messages_serial_2+0x438>)
  402aa6:	4b1f      	ldr	r3, [pc, #124]	; (402b24 <intercepts_messages_serial_2+0x43c>)
  402aa8:	4798      	blx	r3
				
				if(flag == -1)
				esitoWR= '2';
  402aaa:	f1b0 3fff 	cmp.w	r0, #4294967295
  402aae:	bf14      	ite	ne
  402ab0:	2130      	movne	r1, #48	; 0x30
  402ab2:	2132      	moveq	r1, #50	; 0x32
  402ab4:	e000      	b.n	402ab8 <intercepts_messages_serial_2+0x3d0>
			for(i=0, esitoWR='1'; i < 4; i++) {
  402ab6:	2131      	movs	r1, #49	; 0x31
			}

			//------- Costruiamo il messaggio di risposta ---------
			buff[IHM2_POS_CRC_LO]     = IRS_WRE_CKS_LO;
  402ab8:	2308      	movs	r3, #8
  402aba:	f88d 3012 	strb.w	r3, [sp, #18]
			buff[IHM2_ADDR_RECEIVER]  = ADDR_REM_CTRL;
  402abe:	2307      	movs	r3, #7
  402ac0:	f88d 3013 	strb.w	r3, [sp, #19]
			buff[IHM2_TYPE_COMAND]    = COMAND_WRITE_EEPROM;
  402ac4:	2357      	movs	r3, #87	; 0x57
  402ac6:	f88d 3014 	strb.w	r3, [sp, #20]

			buff[IRS_WRE_ADDR_EEP]    = buff_ser2[IRQ_WRE_ADDR_EEP];
  402aca:	4b0f      	ldr	r3, [pc, #60]	; (402b08 <intercepts_messages_serial_2+0x420>)
  402acc:	795a      	ldrb	r2, [r3, #5]
  402ace:	f88d 2015 	strb.w	r2, [sp, #21]
			buff[IRS_WRE_NUM_BYTE]    = buff_ser2[IRQ_WRE_NUM_BYTE];
  402ad2:	799b      	ldrb	r3, [r3, #6]
  402ad4:	f88d 3016 	strb.w	r3, [sp, #22]
			// '0': scrittura OK
			// '1': errore zona eeprom non valida
			// '2': errore dati non validi
			// '3': dispositivo occupato.
			buff[IRS_WRE_ESITO] = esitoWR;
  402ad8:	f88d 1017 	strb.w	r1, [sp, #23]
			
			len = IRS_WRE_CKS_LO + 2;
			
			// invia il messaggio di rispota al modbus
			Send_Message_Ser2(&buff[0], len);
  402adc:	210a      	movs	r1, #10
  402ade:	a804      	add	r0, sp, #16
  402ae0:	4b0d      	ldr	r3, [pc, #52]	; (402b18 <intercepts_messages_serial_2+0x430>)
  402ae2:	4798      	blx	r3
			upgrade_eep_for_Modbus = 1;
  402ae4:	2201      	movs	r2, #1
  402ae6:	4b10      	ldr	r3, [pc, #64]	; (402b28 <intercepts_messages_serial_2+0x440>)
  402ae8:	701a      	strb	r2, [r3, #0]
			break;
  402aea:	e004      	b.n	402af6 <intercepts_messages_serial_2+0x40e>
			
			default:
			free_serial_2();
  402aec:	4b0f      	ldr	r3, [pc, #60]	; (402b2c <intercepts_messages_serial_2+0x444>)
  402aee:	4798      	blx	r3
			break;
  402af0:	e001      	b.n	402af6 <intercepts_messages_serial_2+0x40e>
		}
		
		}else if (val_ret < 0) {
  402af2:	2800      	cmp	r0, #0
  402af4:	db03      	blt.n	402afe <intercepts_messages_serial_2+0x416>
		free_serial_2();
	}


	return val_ret;
}
  402af6:	4628      	mov	r0, r5
  402af8:	b025      	add	sp, #148	; 0x94
  402afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		free_serial_2();
  402afe:	4b0b      	ldr	r3, [pc, #44]	; (402b2c <intercepts_messages_serial_2+0x444>)
  402b00:	4798      	blx	r3
	return val_ret;
  402b02:	e7f8      	b.n	402af6 <intercepts_messages_serial_2+0x40e>
  402b04:	2000173c 	.word	0x2000173c
  402b08:	200016bc 	.word	0x200016bc
  402b0c:	004035ad 	.word	0x004035ad
  402b10:	0040a26d 	.word	0x0040a26d
  402b14:	0040a1fd 	.word	0x0040a1fd
  402b18:	00406495 	.word	0x00406495
  402b1c:	20000b50 	.word	0x20000b50
  402b20:	200016c3 	.word	0x200016c3
  402b24:	0040abbd 	.word	0x0040abbd
  402b28:	20000b6b 	.word	0x20000b6b
  402b2c:	00406475 	.word	0x00406475

00402b30 <processes_messages>:
//  determinare la fine di un messaggio ( se la lunghezza del 
//  messaggio non cambia dopo 5 mills allora vuol dire che Ã¨ 
//  terminato).
//----------------------------------------------------------------
void processes_messages()
{
  402b30:	b510      	push	{r4, lr}
  unsigned long int timerMills;
  
  timerMills = millis(); 
  402b32:	4b0a      	ldr	r3, [pc, #40]	; (402b5c <processes_messages+0x2c>)
  402b34:	4798      	blx	r3
  402b36:	4604      	mov	r4, r0
  
  if (((timerMills -  preview_3_Mills) >= 3) 
  402b38:	4b09      	ldr	r3, [pc, #36]	; (402b60 <processes_messages+0x30>)
  402b3a:	681b      	ldr	r3, [r3, #0]
  402b3c:	1ac2      	subs	r2, r0, r3
  402b3e:	2a02      	cmp	r2, #2
  402b40:	d801      	bhi.n	402b46 <processes_messages+0x16>
    || (preview_3_Mills > timerMills))          // situazione di overflow.
  402b42:	4298      	cmp	r0, r3
  402b44:	d203      	bcs.n	402b4e <processes_messages+0x1e>
  {
    
    if (preview_3_Mills < timerMills) {
  402b46:	429c      	cmp	r4, r3
  402b48:	d802      	bhi.n	402b50 <processes_messages+0x20>
       //          Seriale 2
       // * * * * * * * * * * * * * * * * * * * 
       intercepts_messages_serial_2();
     }
     
     preview_3_Mills = timerMills;
  402b4a:	4b05      	ldr	r3, [pc, #20]	; (402b60 <processes_messages+0x30>)
  402b4c:	601c      	str	r4, [r3, #0]
  402b4e:	bd10      	pop	{r4, pc}
       intercepts_messages_serial_1();
  402b50:	4b04      	ldr	r3, [pc, #16]	; (402b64 <processes_messages+0x34>)
  402b52:	4798      	blx	r3
       intercepts_messages_serial_2();
  402b54:	4b04      	ldr	r3, [pc, #16]	; (402b68 <processes_messages+0x38>)
  402b56:	4798      	blx	r3
  402b58:	e7f7      	b.n	402b4a <processes_messages+0x1a>
  402b5a:	bf00      	nop
  402b5c:	0040bfb5 	.word	0x0040bfb5
  402b60:	20000b60 	.word	0x20000b60
  402b64:	00401c71 	.word	0x00401c71
  402b68:	004026e9 	.word	0x004026e9

00402b6c <polling_CTRL_FAN>:

//-------------------------------------------------------
// Invio comando di polling verso la scheda CTRL_FAN
//-------------------------------------------------------
void polling_CTRL_FAN(void)
{
  402b6c:	b530      	push	{r4, r5, lr}
  402b6e:	b089      	sub	sp, #36	; 0x24
    byte msk_pwr, msk_alm, msk_alm_motors, numMotors, b, sts_leds;

    // Andiamo a comporre lo stato dei 4 Leds della scheda CTRL_FAN: 
    sts_leds = 0; 
    
    if(sData.status_test & MSK_TEST_LEDS) {
  402b70:	4b6c      	ldr	r3, [pc, #432]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402b72:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  402b76:	f013 0f20 	tst.w	r3, #32
  402b7a:	d04f      	beq.n	402c1c <polling_CTRL_FAN+0xb0>
      // (11=none, 10=ON FIXED, 01=Toggle, 00=OFF) 
      sts_leds = sData.data_test;  
  402b7c:	4b69      	ldr	r3, [pc, #420]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402b7e:	f893 41f6 	ldrb.w	r4, [r3, #502]	; 0x1f6
        }      
        cnt_status_motors = 0; 
      }  
    }
    
    sData.status_Leds_ctrlFan     = sts_leds;
  402b82:	4b68      	ldr	r3, [pc, #416]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402b84:	f883 41ee 	strb.w	r4, [r3, #494]	; 0x1ee
    
    // secondo Protocol_Ser2, completiamo il buffer prima di inviare
    buff[IHM2_START_MSG_0]        = PROTO_START_MSG_0;            // byte_0: 's'
  402b88:	2273      	movs	r2, #115	; 0x73
  402b8a:	f88d 2000 	strb.w	r2, [sp]
    buff[IHM2_START_MSG_1]        = PROTO_START_MSG_1;            // byte_0: 'm'
  402b8e:	226d      	movs	r2, #109	; 0x6d
  402b90:	f88d 2001 	strb.w	r2, [sp, #1]
    buff[IHM2_POS_CRC_LO]         = IRQ_CMD_F_CRC_LO;             // byte_2: posizione cksum_16 (byte LO) che Ã¨ anche il penultimo byte
  402b94:	220c      	movs	r2, #12
  402b96:	f88d 2002 	strb.w	r2, [sp, #2]
    buff[IHM2_ADDR_RECEIVER]      = ADDR_CTRL_FAN;                // byte_3: Indirizzo del destinatorio del messaggio
  402b9a:	2204      	movs	r2, #4
  402b9c:	f88d 2003 	strb.w	r2, [sp, #3]
    buff[IHM2_TYPE_COMAND]        = COMAND_POLLING_CTRL_FAN;      // byte_4: Tipo di comando/richiesta
  402ba0:	2246      	movs	r2, #70	; 0x46
  402ba2:	f88d 2004 	strb.w	r2, [sp, #4]
    buff[IRQ_CMD_F_SPEED_FANS_R]  = sData.speed_motors_R;         // byte_5: valori SPEED_FANS_R da 0 -> 255 
  402ba6:	f893 21af 	ldrb.w	r2, [r3, #431]	; 0x1af
  402baa:	f88d 2005 	strb.w	r2, [sp, #5]
    buff[IRQ_CMD_F_SPEED_FANS_F]  = sData.speed_motors_F;         // byte_6: valori SPEED_FANS_F da 0 -> 255
  402bae:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
  402bb2:	f88d 3006 	strb.w	r3, [sp, #6]
    buff[IRQ_CMD_F_STATUS_LEDS]   = sData.status_Leds_ctrlFan;    // byte_7:
  402bb6:	f88d 4007 	strb.w	r4, [sp, #7]
    buff[IRQ_CMD_F_NPULSE_XROUND] = read_byte_eeprom(ADDR_EEP(numPulseMotors));   // byte_8: numero di pulse per giro. ( 2, 3, 4)
  402bba:	203c      	movs	r0, #60	; 0x3c
  402bbc:	4c5a      	ldr	r4, [pc, #360]	; (402d28 <polling_CTRL_FAN+0x1bc>)
  402bbe:	47a0      	blx	r4
  402bc0:	f88d 0008 	strb.w	r0, [sp, #8]
    buff[IRQ_CMD_F_NUM_MOTORS]    = read_byte_eeprom(ADDR_EEP(numMotors));        // byte_9: numero di motori da gestire
  402bc4:	203b      	movs	r0, #59	; 0x3b
  402bc6:	47a0      	blx	r4
  402bc8:	f88d 0009 	strb.w	r0, [sp, #9]
    buff[IRQ_CMD_F_BYTE_1_DONE]   = 0x00;                         // done
  402bcc:	2300      	movs	r3, #0
  402bce:	f88d 300a 	strb.w	r3, [sp, #10]
    buff[IRQ_CMD_F_BYTE_2_DONE]   = 0x00;                         // done 
  402bd2:	f88d 300b 	strb.w	r3, [sp, #11]
    
    len = IRQ_CMD_F_CRC_LO + 2;
    
    //------ calcola il livello di comunicazione tra le due scheda 10/10 -----
    cnt_req_poll_CTRL_FAN++; // incrementa contatore di richiesta Polling
  402bd6:	4955      	ldr	r1, [pc, #340]	; (402d2c <polling_CTRL_FAN+0x1c0>)
  402bd8:	6808      	ldr	r0, [r1, #0]
  402bda:	1c42      	adds	r2, r0, #1
  402bdc:	600a      	str	r2, [r1, #0]
     
    if ((cnt_req_poll_CTRL_FAN % 4) == 0) {
  402bde:	f012 0f03 	tst.w	r2, #3
  402be2:	d115      	bne.n	402c10 <polling_CTRL_FAN+0xa4>
       sData.level_link_CTRLFAN = (cnt_resp_poll_CTRL_FAN * 10) / (cnt_req_poll_CTRL_FAN -1);
  402be4:	4b52      	ldr	r3, [pc, #328]	; (402d30 <polling_CTRL_FAN+0x1c4>)
  402be6:	6819      	ldr	r1, [r3, #0]
  402be8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402bec:	005b      	lsls	r3, r3, #1
  402bee:	fb93 f3f0 	sdiv	r3, r3, r0
  402bf2:	484c      	ldr	r0, [pc, #304]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402bf4:	7043      	strb	r3, [r0, #1]

       if (cnt_req_poll_CTRL_FAN >= 24) 
  402bf6:	2a17      	cmp	r2, #23
  402bf8:	dd0a      	ble.n	402c10 <polling_CTRL_FAN+0xa4>
       {      
          if (cnt_resp_poll_CTRL_FAN == 0) 
  402bfa:	2900      	cmp	r1, #0
  402bfc:	f000 808d 	beq.w	402d1a <polling_CTRL_FAN+0x1ae>
               InsertAlarm(ALM_EB_CTRL_FAN);  
               
          cnt_resp_poll_CTRL_FAN >>= 1; 
  402c00:	4a4b      	ldr	r2, [pc, #300]	; (402d30 <polling_CTRL_FAN+0x1c4>)
  402c02:	6813      	ldr	r3, [r2, #0]
  402c04:	105b      	asrs	r3, r3, #1
  402c06:	6013      	str	r3, [r2, #0]
          cnt_req_poll_CTRL_FAN  >>= 1;
  402c08:	4a48      	ldr	r2, [pc, #288]	; (402d2c <polling_CTRL_FAN+0x1c0>)
  402c0a:	6813      	ldr	r3, [r2, #0]
  402c0c:	105b      	asrs	r3, r3, #1
  402c0e:	6013      	str	r3, [r2, #0]
       }
    }     
          
    // inviamo il comando
    Send_Message_Ser2(&buff[0], len);     
  402c10:	210e      	movs	r1, #14
  402c12:	4668      	mov	r0, sp
  402c14:	4b47      	ldr	r3, [pc, #284]	; (402d34 <polling_CTRL_FAN+0x1c8>)
  402c16:	4798      	blx	r3

}  
  402c18:	b009      	add	sp, #36	; 0x24
  402c1a:	bd30      	pop	{r4, r5, pc}
      if(PowerMotors == POWER_SAVE) 
  402c1c:	4b46      	ldr	r3, [pc, #280]	; (402d38 <polling_CTRL_FAN+0x1cc>)
  402c1e:	781b      	ldrb	r3, [r3, #0]
        msk_alm_motors &= 0xF0; // maschera gli allarmi di NO POWER    
  402c20:	2b00      	cmp	r3, #0
  402c22:	bf14      	ite	ne
  402c24:	25f7      	movne	r5, #247	; 0xf7
  402c26:	2500      	moveq	r5, #0
           if (sData.Events[b] & msk_alm)
  402c28:	4a3e      	ldr	r2, [pc, #248]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402c2a:	f892 3201 	ldrb.w	r3, [r2, #513]	; 0x201
  402c2e:	f003 00df 	and.w	r0, r3, #223	; 0xdf
  402c32:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
  402c36:	2301      	movs	r3, #1
    sts_leds = 0; 
  402c38:	2400      	movs	r4, #0
  402c3a:	e004      	b.n	402c46 <polling_CTRL_FAN+0xda>
              sts_leds |= (1 << 3);  // Led ROSSO ON
  402c3c:	2800      	cmp	r0, #0
  402c3e:	bf18      	it	ne
  402c40:	2408      	movne	r4, #8
  402c42:	3301      	adds	r3, #1
  402c44:	3201      	adds	r2, #1
         if(i==b) {      
  402c46:	2b0b      	cmp	r3, #11
  402c48:	d0f8      	beq.n	402c3c <polling_CTRL_FAN+0xd0>
         }else if((i == 8) || (i == 9)) {
  402c4a:	f1a3 0109 	sub.w	r1, r3, #9
  402c4e:	2901      	cmp	r1, #1
  402c50:	d935      	bls.n	402cbe <polling_CTRL_FAN+0x152>
            if(sData.Events[i])
  402c52:	7811      	ldrb	r1, [r2, #0]
              sts_leds |= (1 << 3);  // Led ROSSO ON
  402c54:	2900      	cmp	r1, #0
  402c56:	bf18      	it	ne
  402c58:	2408      	movne	r4, #8
      for(i=0; i < 13; i++) 
  402c5a:	2b0c      	cmp	r3, #12
  402c5c:	ddf1      	ble.n	402c42 <polling_CTRL_FAN+0xd6>
      if(CkAlarm(ALM_FILTER))           
  402c5e:	2055      	movs	r0, #85	; 0x55
  402c60:	4b36      	ldr	r3, [pc, #216]	; (402d3c <polling_CTRL_FAN+0x1d0>)
  402c62:	4798      	blx	r3
  402c64:	b110      	cbz	r0, 402c6c <polling_CTRL_FAN+0x100>
        sts_leds |= 0x02; // LED GIALLO FIXED.                 
  402c66:	f044 0402 	orr.w	r4, r4, #2
  402c6a:	b2e4      	uxtb	r4, r4
      if (sData.status_weekly & MSK_BIT_WEEKLY_ENAB)
  402c6c:	4b2d      	ldr	r3, [pc, #180]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402c6e:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
  402c72:	f013 0f01 	tst.w	r3, #1
        sts_leds |= (1 << 7); // FIXED
  402c76:	bf1c      	itt	ne
  402c78:	f064 047f 	ornne	r4, r4, #127	; 0x7f
  402c7c:	b2e4      	uxtbne	r4, r4
      numMotors = read_byte_eeprom(ADDR_EEP(numMotors));
  402c7e:	203b      	movs	r0, #59	; 0x3b
  402c80:	4b29      	ldr	r3, [pc, #164]	; (402d28 <polling_CTRL_FAN+0x1bc>)
  402c82:	4798      	blx	r3
      if(numMotors == 2) {
  402c84:	2802      	cmp	r0, #2
  402c86:	d01f      	beq.n	402cc8 <polling_CTRL_FAN+0x15c>
         msk_alm = 0x70;      
  402c88:	2804      	cmp	r0, #4
  402c8a:	bf0b      	itete	eq
  402c8c:	2330      	moveq	r3, #48	; 0x30
  402c8e:	2370      	movne	r3, #112	; 0x70
  402c90:	2103      	moveq	r1, #3
  402c92:	2107      	movne	r1, #7
      if(PowerMotors == POWER_ON)
  402c94:	4a28      	ldr	r2, [pc, #160]	; (402d38 <polling_CTRL_FAN+0x1cc>)
  402c96:	7812      	ldrb	r2, [r2, #0]
  402c98:	2a4f      	cmp	r2, #79	; 0x4f
  402c9a:	d018      	beq.n	402cce <polling_CTRL_FAN+0x162>
        if ((sData.StatusMotorsF & msk_alm) || (sData.StatusMotorsR & msk_alm)) { 
  402c9c:	4a21      	ldr	r2, [pc, #132]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402c9e:	f892 21f0 	ldrb.w	r2, [r2, #496]	; 0x1f0
  402ca2:	4213      	tst	r3, r2
  402ca4:	d104      	bne.n	402cb0 <polling_CTRL_FAN+0x144>
  402ca6:	4a1f      	ldr	r2, [pc, #124]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402ca8:	f892 21ef 	ldrb.w	r2, [r2, #495]	; 0x1ef
  402cac:	4213      	tst	r3, r2
  402cae:	d002      	beq.n	402cb6 <polling_CTRL_FAN+0x14a>
           sts_leds |= (1 << 4); // toggle
  402cb0:	f044 0410 	orr.w	r4, r4, #16
  402cb4:	b2e4      	uxtb	r4, r4
        cnt_status_motors = 0; 
  402cb6:	2200      	movs	r2, #0
  402cb8:	4b21      	ldr	r3, [pc, #132]	; (402d40 <polling_CTRL_FAN+0x1d4>)
  402cba:	701a      	strb	r2, [r3, #0]
  402cbc:	e761      	b.n	402b82 <polling_CTRL_FAN+0x16>
            if (sData.Events[i] & msk_alm_motors)
  402cbe:	7811      	ldrb	r1, [r2, #0]
              sts_leds |= (1 << 3);  // Led ROSSO ON
  402cc0:	420d      	tst	r5, r1
  402cc2:	bf18      	it	ne
  402cc4:	2408      	movne	r4, #8
  402cc6:	e7c8      	b.n	402c5a <polling_CTRL_FAN+0xee>
         msk_alm = 0x10;
  402cc8:	2310      	movs	r3, #16
         msk_pwr = 0x01;
  402cca:	2101      	movs	r1, #1
  402ccc:	e7e2      	b.n	402c94 <polling_CTRL_FAN+0x128>
        if(cnt_status_motors++ > 4) { 
  402cce:	4a1c      	ldr	r2, [pc, #112]	; (402d40 <polling_CTRL_FAN+0x1d4>)
  402cd0:	7812      	ldrb	r2, [r2, #0]
  402cd2:	2a04      	cmp	r2, #4
  402cd4:	d91a      	bls.n	402d0c <polling_CTRL_FAN+0x1a0>
          cnt_status_motors = 5;   
  402cd6:	2005      	movs	r0, #5
  402cd8:	4a19      	ldr	r2, [pc, #100]	; (402d40 <polling_CTRL_FAN+0x1d4>)
  402cda:	7010      	strb	r0, [r2, #0]
          if (((sData.StatusMotorsF & msk_pwr) != msk_pwr) || ((sData.StatusMotorsR & msk_pwr) != msk_pwr)) {        
  402cdc:	4a11      	ldr	r2, [pc, #68]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402cde:	f892 21f0 	ldrb.w	r2, [r2, #496]	; 0x1f0
  402ce2:	ea31 0002 	bics.w	r0, r1, r2
  402ce6:	d003      	beq.n	402cf0 <polling_CTRL_FAN+0x184>
              sts_leds |= (1 << 4); // toggle   
  402ce8:	f044 0410 	orr.w	r4, r4, #16
  402cec:	b2e4      	uxtb	r4, r4
  402cee:	e748      	b.n	402b82 <polling_CTRL_FAN+0x16>
          if (((sData.StatusMotorsF & msk_pwr) != msk_pwr) || ((sData.StatusMotorsR & msk_pwr) != msk_pwr)) {        
  402cf0:	480c      	ldr	r0, [pc, #48]	; (402d24 <polling_CTRL_FAN+0x1b8>)
  402cf2:	f890 01ef 	ldrb.w	r0, [r0, #495]	; 0x1ef
  402cf6:	4381      	bics	r1, r0
  402cf8:	d1f6      	bne.n	402ce8 <polling_CTRL_FAN+0x17c>
          }else if ((sData.StatusMotorsF & msk_alm) || (sData.StatusMotorsR & msk_alm)) { 
  402cfa:	4302      	orrs	r2, r0
  402cfc:	4213      	tst	r3, r2
             sts_leds |= (1 << 4); // toggle
  402cfe:	bf14      	ite	ne
  402d00:	f044 0410 	orrne.w	r4, r4, #16
             sts_leds |= (1 << 5);  // FIXED 
  402d04:	f044 0420 	orreq.w	r4, r4, #32
  402d08:	b2e4      	uxtb	r4, r4
  402d0a:	e73a      	b.n	402b82 <polling_CTRL_FAN+0x16>
        if(cnt_status_motors++ > 4) { 
  402d0c:	3201      	adds	r2, #1
  402d0e:	4b0c      	ldr	r3, [pc, #48]	; (402d40 <polling_CTRL_FAN+0x1d4>)
  402d10:	701a      	strb	r2, [r3, #0]
           sts_leds |= (1 << 5);  // FIXED 
  402d12:	f044 0420 	orr.w	r4, r4, #32
  402d16:	b2e4      	uxtb	r4, r4
  402d18:	e733      	b.n	402b82 <polling_CTRL_FAN+0x16>
               InsertAlarm(ALM_EB_CTRL_FAN);  
  402d1a:	2050      	movs	r0, #80	; 0x50
  402d1c:	4b09      	ldr	r3, [pc, #36]	; (402d44 <polling_CTRL_FAN+0x1d8>)
  402d1e:	4798      	blx	r3
  402d20:	e76e      	b.n	402c00 <polling_CTRL_FAN+0x94>
  402d22:	bf00      	nop
  402d24:	200013ac 	.word	0x200013ac
  402d28:	0040a26d 	.word	0x0040a26d
  402d2c:	20000b54 	.word	0x20000b54
  402d30:	20000b58 	.word	0x20000b58
  402d34:	00406495 	.word	0x00406495
  402d38:	20000e38 	.word	0x20000e38
  402d3c:	00403535 	.word	0x00403535
  402d40:	20000b5c 	.word	0x20000b5c
  402d44:	00403555 	.word	0x00403555

00402d48 <polling_ModBus>:
    unsigned short size_unit, Caf_Max;
    short  stemp_16 =0;
    int len;
    
    
    if(upgrade_eep_for_Modbus) {
  402d48:	4b71      	ldr	r3, [pc, #452]	; (402f10 <polling_ModBus+0x1c8>)
  402d4a:	781b      	ldrb	r3, [r3, #0]
  402d4c:	2b00      	cmp	r3, #0
  402d4e:	f040 80da 	bne.w	402f06 <polling_ModBus+0x1be>
{
  402d52:	b570      	push	{r4, r5, r6, lr}
  402d54:	b09a      	sub	sp, #104	; 0x68
      upgrade_eep_for_Modbus = 0;
      return;
    }  
    
    // Testata del Messaggio           
    buff[IHM2_ADDR_RECEIVER]     = ADDR_REM_CTRL;               // byte_3: Indirizzo del destinatorio del messaggio ModBUS, RFM
  402d56:	2207      	movs	r2, #7
  402d58:	f88d 2003 	strb.w	r2, [sp, #3]
     
    if ((index_packet_data & 0x01)==0) {
  402d5c:	4a6d      	ldr	r2, [pc, #436]	; (402f14 <polling_ModBus+0x1cc>)
  402d5e:	7812      	ldrb	r2, [r2, #0]
  402d60:	f012 0f01 	tst.w	r2, #1
  402d64:	f040 80e4 	bne.w	402f30 <polling_ModBus+0x1e8>
        /**********************
         * Pachetto dati 1
         **********************/        
        buff[IHM2_POS_CRC_LO]    = IPK1U_CKS_LO;                 // posizione cksum_16 (byte LO) che Ã¨ anche il penultimo byte
  402d68:	2238      	movs	r2, #56	; 0x38
  402d6a:	f88d 2002 	strb.w	r2, [sp, #2]
        buff[IHM2_TYPE_COMAND]   = COMAND_PACKET_1_DATA;          // byte_4: Tipo di comando/richiesta
  402d6e:	2231      	movs	r2, #49	; 0x31
  402d70:	f88d 2004 	strb.w	r2, [sp, #4]
    
        buff[IPK1U_STATUS_UNIT_LO]  = lowByte(sData.status_unit);   
  402d74:	4968      	ldr	r1, [pc, #416]	; (402f18 <polling_ModBus+0x1d0>)
  402d76:	f8b1 21eb 	ldrh.w	r2, [r1, #491]	; 0x1eb
  402d7a:	f88d 2005 	strb.w	r2, [sp, #5]
        buff[IPK1U_STATUS_UNIT_HI]  = highByte(sData.status_unit);   
  402d7e:	0a12      	lsrs	r2, r2, #8
  402d80:	f88d 2006 	strb.w	r2, [sp, #6]
        
        /*                            0x80          0x40           0x20              0x10            0x08            0x04            0x02            0x01
          BYTE_ALARM_LO:  (MSB)  CAF Acces.KO, CAP Acces.KO, Temper.Sensors KO, VOC Sensors KO,  RH Sensors KO, CO2 Sensors KO,  Motor Fresh KO,  Motor Return KO   */
        b = 0;
        byte_alarm = (ALM_MR1_NO_PWR >> 3);
        if(sData.Events[byte_alarm])           b  = 0x01;    // tutti gli allarmi motorsR
  402d84:	f891 21ff 	ldrb.w	r2, [r1, #511]	; 0x1ff
        b = 0;
  402d88:	3200      	adds	r2, #0
  402d8a:	bf18      	it	ne
  402d8c:	2201      	movne	r2, #1
                        
        byte_alarm = (ALM_MF1_NO_PWR >> 3);
        if(sData.Events[byte_alarm])           b |= 0x02;  // tutti gli allarmi motorsF           
  402d8e:	f891 1200 	ldrb.w	r1, [r1, #512]	; 0x200
  402d92:	b109      	cbz	r1, 402d98 <polling_ModBus+0x50>
  402d94:	f042 0202 	orr.w	r2, r2, #2
//        //   Events[06]:  SENSORS_PRESSURE: 7.DPP_LinkEr, 6.DPP_KO     , 5.- - - - - , 4.PCAF_LinkEr, 3.PCAF_KO     , 2.- - - - - , 1.PCAP_LinkE, 0.PCAP_KO    
//        byte_alarm = ALM_PCAP_KO >> 3;     
//        if(sData.Events[byte_alarm] & 0x03)    b |= 0x40;                    
//        if(sData.Events[byte_alarm] & 0x18)    b |= 0x80;
//                               
         buff[IPK1U_BYTE_ALARM_LO]  = b;     
  402d98:	f88d 2007 	strb.w	r2, [sp, #7]
//------ END ------    
        
             
        //   Events[10] : 7.- - - - - , 6.KTS_FAULT  , 5.----, 4.EepFault   , 3.----    , 2.BattFault , 1.EB_RemCtrl, 0.EB_CtrlFan_KO 
        byte_alarm = ALM_EB_CTRL_FAN >> 3; 
        if(sData.Events[byte_alarm] & 0x57)   b |= 0x20;  // Electr.Board KO
  402d9c:	4a5e      	ldr	r2, [pc, #376]	; (402f18 <polling_ModBus+0x1d0>)
  402d9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
  402da2:	f002 0257 	and.w	r2, r2, #87	; 0x57
  402da6:	2a00      	cmp	r2, #0
  402da8:	bf18      	it	ne
  402daa:	2320      	movne	r3, #32
                    
        buff[IPK1U_BYTE_ALARM_HI]      = b;              
  402dac:	f88d 3008 	strb.w	r3, [sp, #8]
        buff[IPK1U_STATUS_OUTPUT]      = (sData.StatusOutput & 0x03);    // bits: ..., [1]STS_OUT2, [0]STS_OUT1
  402db0:	4c59      	ldr	r4, [pc, #356]	; (402f18 <polling_ModBus+0x1d0>)
  402db2:	f894 31f1 	ldrb.w	r3, [r4, #497]	; 0x1f1
  402db6:	f003 0303 	and.w	r3, r3, #3
  402dba:	f88d 3009 	strb.w	r3, [sp, #9]
        buff[IPK1U_STATUS_FILTER]      = CkAlarm(ALM_FILTER);
  402dbe:	2055      	movs	r0, #85	; 0x55
  402dc0:	4b56      	ldr	r3, [pc, #344]	; (402f1c <polling_ModBus+0x1d4>)
  402dc2:	4798      	blx	r3
  402dc4:	f88d 000a 	strb.w	r0, [sp, #10]
        
        buff[IPK1U_MEASURE_V_INPUT_1]  = (sData.measure_ADC_input[0] /10);     // Misura input 1 da 0V a 10.0V (=100)
  402dc8:	f9b4 21d5 	ldrsh.w	r2, [r4, #469]	; 0x1d5
  402dcc:	4954      	ldr	r1, [pc, #336]	; (402f20 <polling_ModBus+0x1d8>)
  402dce:	fb81 0302 	smull	r0, r3, r1, r2
  402dd2:	17d2      	asrs	r2, r2, #31
  402dd4:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
  402dd8:	f88d 200b 	strb.w	r2, [sp, #11]
        buff[IPK1U_MEASURE_V_INPUT_2]  = (sData.measure_ADC_input[1] /10);
  402ddc:	f9b4 31d7 	ldrsh.w	r3, [r4, #471]	; 0x1d7
  402de0:	fb81 2103 	smull	r2, r1, r1, r3
  402de4:	17db      	asrs	r3, r3, #31
  402de6:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  402dea:	f88d 300c 	strb.w	r3, [sp, #12]
        buff[IPK1U_NUM_MOTORS]         = read_byte_eeprom(ADDR_EEP(numMotors)); 
  402dee:	203b      	movs	r0, #59	; 0x3b
  402df0:	4b4c      	ldr	r3, [pc, #304]	; (402f24 <polling_ModBus+0x1dc>)
  402df2:	4798      	blx	r3
  402df4:	f88d 000d 	strb.w	r0, [sp, #13]
        buff[IPK1U_FEEDBK_VR_LO]       = (byte)(sData.feedbk_v_speed_motors_R & 0x0FF);         // Byte 2: FeedBack tensione, Comando gruppo Return
  402df8:	f9b4 31b7 	ldrsh.w	r3, [r4, #439]	; 0x1b7
  402dfc:	f88d 300e 	strb.w	r3, [sp, #14]
        buff[IPK1U_FEEDBK_VR_HI]       = (byte)(sData.feedbk_v_speed_motors_R >> 8);
  402e00:	121b      	asrs	r3, r3, #8
  402e02:	f88d 300f 	strb.w	r3, [sp, #15]
        buff[IPK1U_FEEDBK_VF_LO]       = (byte)(sData.feedbk_v_speed_motors_F & 0x0FF);         // Byte 2: FeedBack tensione, Comando gruppo Fresh
  402e06:	f9b4 31b9 	ldrsh.w	r3, [r4, #441]	; 0x1b9
  402e0a:	f88d 3010 	strb.w	r3, [sp, #16]
        buff[IPK1U_FEEDBK_VF_HI]       = (byte)(sData.feedbk_v_speed_motors_F >> 8); 
  402e0e:	121a      	asrs	r2, r3, #8
  402e10:	ab1a      	add	r3, sp, #104	; 0x68
  402e12:	f803 2d57 	strb.w	r2, [r3, #-87]!
  402e16:	f10d 0125 	add.w	r1, sp, #37	; 0x25
       

        for(i=IPK1U_RPM_FAN_R1_LO; i <=IPK1U_RPM_FAN_F5_HI; i++)
            buff[i] = 0;
  402e1a:	2200      	movs	r2, #0
  402e1c:	f803 2f01 	strb.w	r2, [r3, #1]!
        for(i=IPK1U_RPM_FAN_R1_LO; i <=IPK1U_RPM_FAN_F5_HI; i++)
  402e20:	428b      	cmp	r3, r1
  402e22:	d1fb      	bne.n	402e1c <polling_ModBus+0xd4>
      
        buff[IPK1U_RPM_FAN_R1_LO]  = (byte)(sData.rpm_motors_R[0] & 0x0FF);      
  402e24:	4a3c      	ldr	r2, [pc, #240]	; (402f18 <polling_ModBus+0x1d0>)
  402e26:	f9b2 31db 	ldrsh.w	r3, [r2, #475]	; 0x1db
  402e2a:	f88d 3012 	strb.w	r3, [sp, #18]
        buff[IPK1U_RPM_FAN_R1_HI]  = (byte)(sData.rpm_motors_R[0] >> 8); 
  402e2e:	121b      	asrs	r3, r3, #8
  402e30:	f88d 3013 	strb.w	r3, [sp, #19]
        buff[IPK1U_RPM_FAN_F1_LO]  = (byte)(sData.rpm_motors_F[0] & 0x0FF);  
  402e34:	f9b2 31e1 	ldrsh.w	r3, [r2, #481]	; 0x1e1
  402e38:	f88d 3014 	strb.w	r3, [sp, #20]
        buff[IPK1U_RPM_FAN_F1_HI]  = (byte)(sData.rpm_motors_F[0] >> 8); 
  402e3c:	121b      	asrs	r3, r3, #8
  402e3e:	f88d 3015 	strb.w	r3, [sp, #21]
        
        if(buff[IPK1U_NUM_MOTORS] > 2) {
  402e42:	f89d 300d 	ldrb.w	r3, [sp, #13]
  402e46:	2b02      	cmp	r3, #2
  402e48:	d91e      	bls.n	402e88 <polling_ModBus+0x140>
           buff[IPK1U_RPM_FAN_R2_LO]  = (unsigned char)(sData.rpm_motors_R[1] & 0x0FF);        
  402e4a:	4611      	mov	r1, r2
  402e4c:	f9b2 21dd 	ldrsh.w	r2, [r2, #477]	; 0x1dd
  402e50:	f88d 2016 	strb.w	r2, [sp, #22]
           buff[IPK1U_RPM_FAN_R2_HI]  = (unsigned char)(sData.rpm_motors_R[1] >> 8); 
  402e54:	1212      	asrs	r2, r2, #8
  402e56:	f88d 2017 	strb.w	r2, [sp, #23]
           buff[IPK1U_RPM_FAN_F2_LO]  = (unsigned char)(sData.rpm_motors_F[1] & 0x0FF);    
  402e5a:	f9b1 21e3 	ldrsh.w	r2, [r1, #483]	; 0x1e3
  402e5e:	f88d 2018 	strb.w	r2, [sp, #24]
           buff[IPK1U_RPM_FAN_F2_HI]  = (unsigned char)(sData.rpm_motors_F[1] >> 8); 
  402e62:	1212      	asrs	r2, r2, #8
  402e64:	f88d 2019 	strb.w	r2, [sp, #25]
           
           if(buff[IPK1U_NUM_MOTORS] > 4) {
  402e68:	2b04      	cmp	r3, #4
  402e6a:	d90d      	bls.n	402e88 <polling_ModBus+0x140>
              buff[IPK1U_RPM_FAN_R3_LO]  = (unsigned char)(sData.rpm_motors_R[2] & 0x0FF);      
  402e6c:	f9b1 31df 	ldrsh.w	r3, [r1, #479]	; 0x1df
  402e70:	f88d 301a 	strb.w	r3, [sp, #26]
              buff[IPK1U_RPM_FAN_R3_HI]  = (unsigned char)(sData.rpm_motors_R[2] >> 8);  
  402e74:	121b      	asrs	r3, r3, #8
  402e76:	f88d 301b 	strb.w	r3, [sp, #27]
              buff[IPK1U_RPM_FAN_F3_LO]  = (unsigned char)(sData.rpm_motors_F[2] & 0x0FF);  
  402e7a:	f9b1 31e5 	ldrsh.w	r3, [r1, #485]	; 0x1e5
  402e7e:	f88d 301c 	strb.w	r3, [sp, #28]
              buff[IPK1U_RPM_FAN_F3_HI]  = (unsigned char)(sData.rpm_motors_F[2] >> 8);  
  402e82:	121b      	asrs	r3, r3, #8
  402e84:	f88d 301d 	strb.w	r3, [sp, #29]
           }          
        }  
    
        buff[IPK1U_CNT_UPDATE_INFO]     = read_byte_eeprom(ADDR_EEP(cntUpdate_info));
  402e88:	203a      	movs	r0, #58	; 0x3a
  402e8a:	4c26      	ldr	r4, [pc, #152]	; (402f24 <polling_ModBus+0x1dc>)
  402e8c:	47a0      	blx	r4
  402e8e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
        buff[IPK1U_CNT_UPDATE_SET_PAR]  = read_byte_eeprom(ADDR_EEP(cntUpdate_SettingPar));   
  402e92:	207e      	movs	r0, #126	; 0x7e
  402e94:	47a0      	blx	r4
  402e96:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
        buff[IPK1U_CNT_UPDATE_SET_TEMP] = read_byte_eeprom(ADDR_EEP(cntUpdate_SetTemp));
  402e9a:	2098      	movs	r0, #152	; 0x98
  402e9c:	47a0      	blx	r4
  402e9e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
        buff[IPK1U_CNT_UPDATE_WEEKLY]   = read_byte_eeprom(ADDR_EEP(cntUpdate_dayProg));
  402ea2:	20ed      	movs	r0, #237	; 0xed
  402ea4:	47a0      	blx	r4
  402ea6:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
        
        //  aggiunta con la RF (10/04/15)
        buff[IPK1U_STATUS_MOTORS_R]  = sData.StatusMotorsR;
  402eaa:	481b      	ldr	r0, [pc, #108]	; (402f18 <polling_ModBus+0x1d0>)
  402eac:	f890 31ef 	ldrb.w	r3, [r0, #495]	; 0x1ef
  402eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        buff[IPK1U_STATUS_MOTORS_F]  = sData.StatusMotorsF;
  402eb4:	f890 31f0 	ldrb.w	r3, [r0, #496]	; 0x1f0
  402eb8:	aa1a      	add	r2, sp, #104	; 0x68
  402eba:	f802 3d3d 	strb.w	r3, [r2, #-61]!
  402ebe:	f500 73fb 	add.w	r3, r0, #502	; 0x1f6
  402ec2:	f200 2002 	addw	r0, r0, #514	; 0x202
        
        for(int a=0; a <= 11; a++)
           buff[IPK1U_EVENT_BYTE_0 + a] = sData.Events[a];
  402ec6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402eca:	f802 1f01 	strb.w	r1, [r2, #1]!
        for(int a=0; a <= 11; a++)
  402ece:	4283      	cmp	r3, r0
  402ed0:	d1f9      	bne.n	402ec6 <polling_ModBus+0x17e>

        
        len = IPK1U_CKS_LO + 2;
  402ed2:	243a      	movs	r4, #58	; 0x3a
        }
              
        len =IPK2U_CKS_LO + 2;
    }   
  
    index_packet_data++;
  402ed4:	4a0f      	ldr	r2, [pc, #60]	; (402f14 <polling_ModBus+0x1cc>)
  402ed6:	7813      	ldrb	r3, [r2, #0]
  402ed8:	3301      	adds	r3, #1
  402eda:	7013      	strb	r3, [r2, #0]

   
    sData.level_link_ModBus = (22 - cnt_no_link_Modbus) / 2; 
  402edc:	4b12      	ldr	r3, [pc, #72]	; (402f28 <polling_ModBus+0x1e0>)
  402ede:	781a      	ldrb	r2, [r3, #0]
  402ee0:	f1c2 0316 	rsb	r3, r2, #22
  402ee4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  402ee8:	105b      	asrs	r3, r3, #1
  402eea:	490b      	ldr	r1, [pc, #44]	; (402f18 <polling_ModBus+0x1d0>)
  402eec:	710b      	strb	r3, [r1, #4]
    
    if(cnt_no_link_Modbus < 22)
  402eee:	2a15      	cmp	r2, #21
  402ef0:	f200 8295 	bhi.w	40341e <polling_ModBus+0x6d6>
      cnt_no_link_Modbus++;
  402ef4:	3201      	adds	r2, #1
  402ef6:	4b0c      	ldr	r3, [pc, #48]	; (402f28 <polling_ModBus+0x1e0>)
  402ef8:	701a      	strb	r2, [r3, #0]
    else
      InsertAlarm(ALM_EB_REM_CTRL);  
          
    // inviamo il comando
    Send_Message_Ser2(&buff[0], len);     
  402efa:	4621      	mov	r1, r4
  402efc:	4668      	mov	r0, sp
  402efe:	4b0b      	ldr	r3, [pc, #44]	; (402f2c <polling_ModBus+0x1e4>)
  402f00:	4798      	blx	r3
}  
  402f02:	b01a      	add	sp, #104	; 0x68
  402f04:	bd70      	pop	{r4, r5, r6, pc}
      upgrade_eep_for_Modbus = 0;
  402f06:	2200      	movs	r2, #0
  402f08:	4b01      	ldr	r3, [pc, #4]	; (402f10 <polling_ModBus+0x1c8>)
  402f0a:	701a      	strb	r2, [r3, #0]
  402f0c:	4770      	bx	lr
  402f0e:	bf00      	nop
  402f10:	20000b6b 	.word	0x20000b6b
  402f14:	20000b5d 	.word	0x20000b5d
  402f18:	200013ac 	.word	0x200013ac
  402f1c:	00403535 	.word	0x00403535
  402f20:	66666667 	.word	0x66666667
  402f24:	0040a26d 	.word	0x0040a26d
  402f28:	20000b50 	.word	0x20000b50
  402f2c:	00406495 	.word	0x00406495
        buff[IHM2_POS_CRC_LO]     = IPK2U_CKS_LO;             // posizione cksum_16 (byte LO) che Ã¨ anche il penultimo byte
  402f30:	2367      	movs	r3, #103	; 0x67
  402f32:	f88d 3002 	strb.w	r3, [sp, #2]
        buff[IHM2_TYPE_COMAND]    = COMAND_PACKET_2_DATA;     // byte_4: Tipo di comando/richiesta
  402f36:	2332      	movs	r3, #50	; 0x32
  402f38:	f88d 3004 	strb.w	r3, [sp, #4]
        buff[IPK2U_CLOCK_DAYWEEK]   = sClockWeek.weekday;
  402f3c:	4bd7      	ldr	r3, [pc, #860]	; (40329c <polling_ModBus+0x554>)
  402f3e:	78da      	ldrb	r2, [r3, #3]
  402f40:	f88d 2005 	strb.w	r2, [sp, #5]
        buff[IPK2U_CLOCK_HOURS]     = sClockWeek.hours;
  402f44:	789a      	ldrb	r2, [r3, #2]
  402f46:	f88d 2006 	strb.w	r2, [sp, #6]
        buff[IPK2U_CLOCK_MIN]       = sClockWeek.minutes;
  402f4a:	785a      	ldrb	r2, [r3, #1]
  402f4c:	f88d 2007 	strb.w	r2, [sp, #7]
        buff[IPK2U_CLOCK_SEC]       = sClockWeek.seconds;
  402f50:	781b      	ldrb	r3, [r3, #0]
  402f52:	f88d 3008 	strb.w	r3, [sp, #8]
        buff[IPK2U_HOURS_RUN_BYT0]  = (byte)(countHoursFunz & 0x0FF);              
  402f56:	4bd2      	ldr	r3, [pc, #840]	; (4032a0 <polling_ModBus+0x558>)
  402f58:	681b      	ldr	r3, [r3, #0]
  402f5a:	f88d 3009 	strb.w	r3, [sp, #9]
        buff[IPK2U_HOURS_RUN_BYT1]  = (byte)((countHoursFunz >> 8) & 0x0FF);       
  402f5e:	0a1a      	lsrs	r2, r3, #8
  402f60:	f88d 200a 	strb.w	r2, [sp, #10]
        buff[IPK2U_HOURS_RUN_BYT2]  = (byte)((countHoursFunz >> 16) & 0x0FF);    
  402f64:	0c1a      	lsrs	r2, r3, #16
  402f66:	f88d 200b 	strb.w	r2, [sp, #11]
        buff[IPK2U_HOURS_RUN_BYT3]  = (byte)((countHoursFunz >> 24) & 0x0FF);        
  402f6a:	0e1b      	lsrs	r3, r3, #24
  402f6c:	f88d 300c 	strb.w	r3, [sp, #12]
        buff[IPK2U_NUM_NTC]         = read_byte_eeprom(ADDR_EEP(numNTC)) & 0x07;
  402f70:	2040      	movs	r0, #64	; 0x40
  402f72:	4ccc      	ldr	r4, [pc, #816]	; (4032a4 <polling_ModBus+0x55c>)
  402f74:	47a0      	blx	r4
  402f76:	f000 0007 	and.w	r0, r0, #7
  402f7a:	f88d 000d 	strb.w	r0, [sp, #13]
        buff[IPK2U_SET_MBF_FAN_F]   = read_byte_eeprom(ADDR_EEP(Set_MBF_fresh));   // Controllo motore Fresh se siamo in MBF
  402f7e:	207b      	movs	r0, #123	; 0x7b
  402f80:	47a0      	blx	r4
  402f82:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
        buff[IPK2U_SET_MBF_FAN_R]   = read_byte_eeprom(ADDR_EEP(Set_MBF_return));  // Controllo motore Return se siamo in MBF
  402f86:	207c      	movs	r0, #124	; 0x7c
  402f88:	47a0      	blx	r4
  402f8a:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
        buff[IPK2U_SET_EHD_MOD]   = read_byte_eeprom(ADDR_EEP(Set_EHD_mod));   // Controllo motore Fresh se siamo in MBF
  402f8e:	2096      	movs	r0, #150	; 0x96
  402f90:	47a0      	blx	r4
  402f92:	f88d 0065 	strb.w	r0, [sp, #101]	; 0x65
        buff[IPK2U_SET_BPD_MOD]   = read_byte_eeprom(ADDR_EEP(Set_BPD_mod));  // Controllo motore Return se siamo in MBF
  402f96:	2097      	movs	r0, #151	; 0x97
  402f98:	47a0      	blx	r4
  402f9a:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
        buff[IPK2U_INFO_PROBE_AD]   = sData.info_ProbesAD;          //  7.2CO2  6.P1CO2  5.----  4.P2RH  3.P1RH  2.----  1.P1VOC  0.----
  402f9e:	4bc2      	ldr	r3, [pc, #776]	; (4032a8 <polling_ModBus+0x560>)
  402fa0:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
  402fa4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        buff[IPK2U_MEASURE_TF_LO]   =  (byte)(Temp_modbus[I_PROBE_FRESH] & 0x0FF);     
  402fa8:	4bc0      	ldr	r3, [pc, #768]	; (4032ac <polling_ModBus+0x564>)
  402faa:	f9b3 3000 	ldrsh.w	r3, [r3]
  402fae:	f88d 300e 	strb.w	r3, [sp, #14]
        buff[IPK2U_MEASURE_TF_HI]   =  (byte)(Temp_modbus[I_PROBE_FRESH] >> 8);
  402fb2:	121b      	asrs	r3, r3, #8
  402fb4:	f88d 300f 	strb.w	r3, [sp, #15]
        if(DigitAccessoryOperating(ACC_I2C_AWP)) {
  402fb8:	2008      	movs	r0, #8
  402fba:	4bbd      	ldr	r3, [pc, #756]	; (4032b0 <polling_ModBus+0x568>)
  402fbc:	4798      	blx	r3
  402fbe:	2800      	cmp	r0, #0
  402fc0:	f000 81ba 	beq.w	403338 <polling_ModBus+0x5f0>
            buff[IPK2U_MEASURE_TR_LO]  = (byte)(sData.AccI2C[ACC_I2C_AWP].measure1 & 0x0FF);
  402fc4:	4bb8      	ldr	r3, [pc, #736]	; (4032a8 <polling_ModBus+0x560>)
  402fc6:	f9b3 3099 	ldrsh.w	r3, [r3, #153]	; 0x99
  402fca:	f88d 3010 	strb.w	r3, [sp, #16]
            buff[IPK2U_MEASURE_TR_HI]  = (byte)(sData.AccI2C[ACC_I2C_AWP].measure1 >> 8); 
  402fce:	121b      	asrs	r3, r3, #8
  402fd0:	f88d 3011 	strb.w	r3, [sp, #17]
        if(Tcheck==0)
  402fd4:	4bb7      	ldr	r3, [pc, #732]	; (4032b4 <polling_ModBus+0x56c>)
  402fd6:	781b      	ldrb	r3, [r3, #0]
  402fd8:	b973      	cbnz	r3, 402ff8 <polling_ModBus+0x2b0>
        buff[IPK2U_MEASURE_TS_LO]  = (byte)(Temp_modbus[I_PROBE_SUPPLY] & 0x0FF);         //  Byte 2 -> Temp. Supply
  402fda:	4ab4      	ldr	r2, [pc, #720]	; (4032ac <polling_ModBus+0x564>)
  402fdc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  402fe0:	f88d 3012 	strb.w	r3, [sp, #18]
        buff[IPK2U_MEASURE_TS_HI]  = (byte)(Temp_modbus[I_PROBE_SUPPLY] >> 8);
  402fe4:	121b      	asrs	r3, r3, #8
  402fe6:	f88d 3013 	strb.w	r3, [sp, #19]
        buff[IPK2U_MEASURE_TE_LO]  = (byte)(Temp_modbus[I_PROBE_EXHAUST] & 0x0FF);         
  402fea:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  402fee:	f88d 3014 	strb.w	r3, [sp, #20]
        buff[IPK2U_MEASURE_TE_HI]  = (byte)(Temp_modbus[I_PROBE_EXHAUST] >> 8);  
  402ff2:	121b      	asrs	r3, r3, #8
  402ff4:	f88d 3015 	strb.w	r3, [sp, #21]
        if(DigitAccessoryOn(ACC_I2C_HEATER))                     b |= 0x01;
  402ff8:	2000      	movs	r0, #0
  402ffa:	4daf      	ldr	r5, [pc, #700]	; (4032b8 <polling_ModBus+0x570>)
  402ffc:	47a8      	blx	r5
        b=0;
  402ffe:	1c04      	adds	r4, r0, #0
  403000:	bf18      	it	ne
  403002:	2401      	movne	r4, #1
        if(DigitAccessoryOn(ACC_I2C_COOLER))                     b |= 0x02;
  403004:	2001      	movs	r0, #1
  403006:	47a8      	blx	r5
  403008:	b108      	cbz	r0, 40300e <polling_ModBus+0x2c6>
  40300a:	f044 0402 	orr.w	r4, r4, #2
        if(DigitAccessoryOn(ACC_I2C_PREHEATER))                  b |= 0x04;
  40300e:	2002      	movs	r0, #2
  403010:	4ba9      	ldr	r3, [pc, #676]	; (4032b8 <polling_ModBus+0x570>)
  403012:	4798      	blx	r3
  403014:	b108      	cbz	r0, 40301a <polling_ModBus+0x2d2>
  403016:	f044 0404 	orr.w	r4, r4, #4
        if(sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ELECT)  b |= 0x08; // bit=1 Elettrico
  40301a:	4ba3      	ldr	r3, [pc, #652]	; (4032a8 <polling_ModBus+0x560>)
  40301c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
  403020:	f013 0f08 	tst.w	r3, #8
  403024:	bf18      	it	ne
  403026:	f044 0408 	orrne.w	r4, r4, #8
        if(sData.AccI2C[ACC_I2C_HEATER].comand & CMD_ON)         b |= 0x10;
  40302a:	4b9f      	ldr	r3, [pc, #636]	; (4032a8 <polling_ModBus+0x560>)
  40302c:	799b      	ldrb	r3, [r3, #6]
  40302e:	f013 0f01 	tst.w	r3, #1
  403032:	bf18      	it	ne
  403034:	f044 0410 	orrne.w	r4, r4, #16
        if(sData.AccI2C[ACC_I2C_COOLER].comand & CMD_ON)         b |= 0x20;
  403038:	4b9b      	ldr	r3, [pc, #620]	; (4032a8 <polling_ModBus+0x560>)
  40303a:	7e1b      	ldrb	r3, [r3, #24]
  40303c:	f013 0f01 	tst.w	r3, #1
  403040:	bf18      	it	ne
  403042:	f044 0420 	orrne.w	r4, r4, #32
        if(sData.AccI2C[ACC_I2C_PREHEATER].comand & CMD_ON)      b |= 0x40;
  403046:	4b98      	ldr	r3, [pc, #608]	; (4032a8 <polling_ModBus+0x560>)
  403048:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  40304c:	f013 0f01 	tst.w	r3, #1
  403050:	bf18      	it	ne
  403052:	f044 0440 	orrne.w	r4, r4, #64	; 0x40
        if(sData.AccI2C[ACC_I2C_HEATER].sts & STS_ACC_ELECT)     b |= 0x80; // bit=1 Elettrico
  403056:	4b94      	ldr	r3, [pc, #592]	; (4032a8 <polling_ModBus+0x560>)
  403058:	79db      	ldrb	r3, [r3, #7]
  40305a:	f013 0f08 	tst.w	r3, #8
  40305e:	bf18      	it	ne
  403060:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
        buff[IPK2U_STATUS_ACCESS_CLIMA] = b;   
  403064:	f88d 4016 	strb.w	r4, [sp, #22]
        buff[IPK2U_MEASURE_ACC_TA_HEATER_LO]  = (byte)(sData.AccI2C[ACC_I2C_HEATER].measure1 & 0x0FF);  // 2 byte:  Temperature air sia per HWD che EHD
  403068:	4b8f      	ldr	r3, [pc, #572]	; (4032a8 <polling_ModBus+0x560>)
  40306a:	f9b3 2009 	ldrsh.w	r2, [r3, #9]
  40306e:	f88d 2017 	strb.w	r2, [sp, #23]
        buff[IPK2U_MEASURE_ACC_TA_HEATER_HI]  = (byte)(sData.AccI2C[ACC_I2C_HEATER].measure1 >> 8);
  403072:	1212      	asrs	r2, r2, #8
  403074:	f88d 2018 	strb.w	r2, [sp, #24]
        buff[IPK2U_MEASURE_ACC_TW_HEATER_LO]  = (byte)(sData.AccI2C[ACC_I2C_HEATER].measure2 & 0x0FF);   // 2 byte:  Temperature acqua se HWD oppure lettura pressione se EHD
  403078:	f9b3 200b 	ldrsh.w	r2, [r3, #11]
  40307c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        buff[IPK2U_MEASURE_ACC_TW_HEATER_HI]  = (byte)(sData.AccI2C[ACC_I2C_HEATER].measure2 >> 8);
  403080:	1212      	asrs	r2, r2, #8
  403082:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        buff[IPK2U_MEASURE_ACC_TA_COOLER_LO]  = (byte)(sData.AccI2C[ACC_I2C_COOLER].measure1 & 0x0FF);  // 2 byte:  Temperature air CWD
  403086:	f9b3 201b 	ldrsh.w	r2, [r3, #27]
  40308a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
        buff[IPK2U_MEASURE_ACC_TA_COOLER_HI]  = (byte)(sData.AccI2C[ACC_I2C_COOLER].measure1 >> 8);
  40308e:	1212      	asrs	r2, r2, #8
  403090:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        buff[IPK2U_MEASURE_ACC_TW_COOLER_LO]  = (byte)(sData.AccI2C[ACC_I2C_COOLER].measure2 & 0x0FF);  // 2 byte:  Temperature water accessoy
  403094:	f9b3 201d 	ldrsh.w	r2, [r3, #29]
  403098:	f88d 2019 	strb.w	r2, [sp, #25]
        buff[IPK2U_MEASURE_ACC_TW_COOLER_HI]  = (byte)(sData.AccI2C[ACC_I2C_COOLER].measure2 >> 8);
  40309c:	1212      	asrs	r2, r2, #8
  40309e:	f88d 201a 	strb.w	r2, [sp, #26]
        buff[IPK2U_MEASURE_ACC_TA_PREHEATER_LO]  = (byte)(sData.AccI2C[ACC_I2C_PREHEATER].measure1 & 0x0FF);  // 2 byte:  Temperature air PHWD che PEHD
  4030a2:	f9b3 202d 	ldrsh.w	r2, [r3, #45]	; 0x2d
  4030a6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
        buff[IPK2U_MEASURE_ACC_TA_PREHEATER_HI]  = (byte)(sData.AccI2C[ACC_I2C_PREHEATER].measure1 >> 8);
  4030aa:	1212      	asrs	r2, r2, #8
  4030ac:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
        buff[IPK2U_MEASURE_ACC_TW_PREHEATER_LO]  = (byte)(sData.AccI2C[ACC_I2C_PREHEATER].measure2 & 0x0FF);  // 2 byte:  Temperature acqua se PHWD oppure lettura pressione se PEHD
  4030b0:	f9b3 302f 	ldrsh.w	r3, [r3, #47]	; 0x2f
  4030b4:	f88d 301b 	strb.w	r3, [sp, #27]
        buff[IPK2U_MEASURE_ACC_TW_PREHEATER_HI]  = (byte)(sData.AccI2C[ACC_I2C_PREHEATER].measure2 >> 8);
  4030b8:	121b      	asrs	r3, r3, #8
  4030ba:	f88d 301c 	strb.w	r3, [sp, #28]
        if(Tcheck ==0)
  4030be:	4b7d      	ldr	r3, [pc, #500]	; (4032b4 <polling_ModBus+0x56c>)
  4030c0:	7819      	ldrb	r1, [r3, #0]
  4030c2:	2900      	cmp	r1, #0
  4030c4:	f040 81af 	bne.w	403426 <polling_ModBus+0x6de>
        buff[IPK2U_EXT1_M1_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure1 & 0x0FF);  // 2 byte:  EXT1 Temperature
  4030c8:	4b77      	ldr	r3, [pc, #476]	; (4032a8 <polling_ModBus+0x560>)
  4030ca:	f9b3 20f3 	ldrsh.w	r2, [r3, #243]	; 0xf3
  4030ce:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
        buff[IPK2U_EXT1_M1_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure1 >> 8);
  4030d2:	1212      	asrs	r2, r2, #8
  4030d4:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
        buff[IPK2U_EXT1_M2_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure2 & 0x0FF);  // 2 byte:  EXT1 RH
  4030d8:	f9b3 20f5 	ldrsh.w	r2, [r3, #245]	; 0xf5
  4030dc:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
        buff[IPK2U_EXT1_M2_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure2 >> 8);
  4030e0:	1212      	asrs	r2, r2, #8
  4030e2:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
        buff[IPK2U_EXT1_M3_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure3 & 0x0FF);  // 2 byte:  EXT1 CO2
  4030e6:	f9b3 20f7 	ldrsh.w	r2, [r3, #247]	; 0xf7
  4030ea:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
        buff[IPK2U_EXT1_M3_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure3 >> 8);
  4030ee:	1212      	asrs	r2, r2, #8
  4030f0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
        buff[IPK2U_EXT1_M4_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure4 & 0x0FF);  // 2 byte:  EXT1 VOC
  4030f4:	f9b3 20f9 	ldrsh.w	r2, [r3, #249]	; 0xf9
  4030f8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
        buff[IPK2U_EXT1_M4_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure4 >> 8);
  4030fc:	1212      	asrs	r2, r2, #8
  4030fe:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
        buff[IPK2U_EXT2_M1_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT2].measure1 & 0x0FF);  // 2 byte:  EXT2 Temperature
  403102:	f9b3 2105 	ldrsh.w	r2, [r3, #261]	; 0x105
  403106:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
        buff[IPK2U_EXT2_M1_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT2].measure1 >> 8);
  40310a:	1212      	asrs	r2, r2, #8
  40310c:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
        buff[IPK2U_EXT2_M2_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT2].measure2 & 0x0FF);  // 2 byte:  EXT2 RH
  403110:	f9b3 3107 	ldrsh.w	r3, [r3, #263]	; 0x107
  403114:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
        buff[IPK2U_EXT2_M2_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT2].measure2 >> 8);
  403118:	121b      	asrs	r3, r3, #8
  40311a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
        buff[IPK2U_EXT2_M3_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT2].measure3 & 0x0FF);  // 2 byte:  EXT2 CO2
  40311e:	4b62      	ldr	r3, [pc, #392]	; (4032a8 <polling_ModBus+0x560>)
  403120:	f9b3 2109 	ldrsh.w	r2, [r3, #265]	; 0x109
  403124:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
        buff[IPK2U_EXT2_M3_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT2].measure3 >> 8);
  403128:	1212      	asrs	r2, r2, #8
  40312a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
        buff[IPK2U_EXT2_M4_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT2].measure4 & 0x0FF);  // 2 byte:  EXT2 VOC
  40312e:	f9b3 210b 	ldrsh.w	r2, [r3, #267]	; 0x10b
  403132:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
        buff[IPK2U_EXT2_M4_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT2].measure4 >> 8);
  403136:	1212      	asrs	r2, r2, #8
  403138:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
        buff[IPK2U_EXT3_M1_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT3].measure1 & 0x0FF);  // 2 byte:  EXT3 Temperature
  40313c:	f9b3 2117 	ldrsh.w	r2, [r3, #279]	; 0x117
  403140:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
        buff[IPK2U_EXT3_M1_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT3].measure1 >> 8);
  403144:	1212      	asrs	r2, r2, #8
  403146:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
        buff[IPK2U_EXT3_M2_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT3].measure2 & 0x0FF);  // 2 byte:  EXT3 RH
  40314a:	f9b3 2119 	ldrsh.w	r2, [r3, #281]	; 0x119
  40314e:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
        buff[IPK2U_EXT3_M2_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT3].measure2 >> 8);
  403152:	1212      	asrs	r2, r2, #8
  403154:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        buff[IPK2U_EXT3_M3_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT3].measure3 & 0x0FF);  // 2 byte:  EXT3 CO2
  403158:	f9b3 211b 	ldrsh.w	r2, [r3, #283]	; 0x11b
  40315c:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        buff[IPK2U_EXT3_M3_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT3].measure3 >> 8);
  403160:	1212      	asrs	r2, r2, #8
  403162:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
        buff[IPK2U_EXT3_M4_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT3].measure4 & 0x0FF);  // 2 byte:  EXT3 VOC
  403166:	f9b3 311d 	ldrsh.w	r3, [r3, #285]	; 0x11d
  40316a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
        buff[IPK2U_EXT3_M4_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT3].measure4 >> 8);
  40316e:	121b      	asrs	r3, r3, #8
  403170:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        if(Tcheck==0)
  403174:	b971      	cbnz	r1, 403194 <polling_ModBus+0x44c>
        buff[IPK2U_EXT4_M1_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT4].measure1 & 0x0FF);  // 2 byte:  EXT4 Temperature
  403176:	4a4c      	ldr	r2, [pc, #304]	; (4032a8 <polling_ModBus+0x560>)
  403178:	f9b2 3129 	ldrsh.w	r3, [r2, #297]	; 0x129
  40317c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        buff[IPK2U_EXT4_M1_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT4].measure1 >> 8);
  403180:	121b      	asrs	r3, r3, #8
  403182:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        buff[IPK2U_EXT4_M2_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT4].measure2 & 0x0FF);  // 2 byte:  EXT4 RH
  403186:	f9b2 312b 	ldrsh.w	r3, [r2, #299]	; 0x12b
  40318a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        buff[IPK2U_EXT4_M2_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT4].measure2 >> 8);
  40318e:	121b      	asrs	r3, r3, #8
  403190:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
        buff[IPK2U_EXT4_M3_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT4].measure3 & 0x0FF);  // 2 byte:  EXT4 CO2
  403194:	4a44      	ldr	r2, [pc, #272]	; (4032a8 <polling_ModBus+0x560>)
  403196:	f9b2 312d 	ldrsh.w	r3, [r2, #301]	; 0x12d
  40319a:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
        buff[IPK2U_EXT4_M3_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT4].measure3 >> 8);
  40319e:	121b      	asrs	r3, r3, #8
  4031a0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        buff[IPK2U_EXT4_M4_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT4].measure4 & 0x0FF);  // 2 byte:  EXT4 VOC
  4031a4:	f9b2 312f 	ldrsh.w	r3, [r2, #303]	; 0x12f
  4031a8:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
        buff[IPK2U_EXT4_M4_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT4].measure4 >> 8);
  4031ac:	121b      	asrs	r3, r3, #8
  4031ae:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
        buff[IPK2U_PFAN_1_LO]  = (byte)(flow_motor_1 & 0x0FF);  // 2 byte:  P FAN 1
  4031b2:	4b42      	ldr	r3, [pc, #264]	; (4032bc <polling_ModBus+0x574>)
  4031b4:	f9b3 3000 	ldrsh.w	r3, [r3]
  4031b8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
        buff[IPK2U_PFAN_1_HI]  = (byte)(flow_motor_1 >> 8);   
  4031bc:	121b      	asrs	r3, r3, #8
  4031be:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        buff[IPK2U_PFAN_2_LO]  = (byte)(flow_motor_2 & 0x0FF);  // 2 byte:  P FAN 2
  4031c2:	4b3f      	ldr	r3, [pc, #252]	; (4032c0 <polling_ModBus+0x578>)
  4031c4:	f9b3 3000 	ldrsh.w	r3, [r3]
  4031c8:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
        buff[IPK2U_PFAN_2_HI]  = (byte)(flow_motor_2 >> 8);
  4031cc:	121b      	asrs	r3, r3, #8
  4031ce:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
        if(Tcheck==0)
  4031d2:	b9a1      	cbnz	r1, 4031fe <polling_ModBus+0x4b6>
        buff[IPK2U_TEMP_1_LO]  = (byte)(sData.AccI2C[ACC_I2C_SSR].measure1 & 0x0FF);  // 2 byte:  TEMP T1 test value = 14 Â°C
  4031d4:	f9b2 3171 	ldrsh.w	r3, [r2, #369]	; 0x171
  4031d8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
        buff[IPK2U_TEMP_1_HI]  = (byte)(sData.AccI2C[ACC_I2C_SSR].measure1 >> 8);
  4031dc:	121b      	asrs	r3, r3, #8
  4031de:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        buff[IPK2U_TEMP_2_LO]  = (byte)(sData.AccI2C[ACC_I2C_SSR].measure2 & 0x0FF);  // 2 byte:  TEMP T2 test value = 15 Â°C
  4031e2:	f9b2 3173 	ldrsh.w	r3, [r2, #371]	; 0x173
  4031e6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
        buff[IPK2U_TEMP_2_HI]  = (byte)(sData.AccI2C[ACC_I2C_SSR].measure2 >> 8);
  4031ea:	121b      	asrs	r3, r3, #8
  4031ec:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
	buff[IPK2U_TEMP_3_LO]  = (byte)(sData.AccI2C[ACC_I2C_SSR].measure3 & 0x0FF);  // 2 byte:  TEMP T3 test value = 16.57 Â°C
  4031f0:	f9b2 3175 	ldrsh.w	r3, [r2, #373]	; 0x175
  4031f4:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
        buff[IPK2U_TEMP_3_HI]  = (byte)(sData.AccI2C[ACC_I2C_SSR].measure3 >> 8);
  4031f8:	121b      	asrs	r3, r3, #8
  4031fa:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        buff[IPK2U_MEASURE_CO2_LO]       =  (byte)(sData.measure_CO2_max & 0x0FF);
  4031fe:	4b2a      	ldr	r3, [pc, #168]	; (4032a8 <polling_ModBus+0x560>)
  403200:	f9b3 21bb 	ldrsh.w	r2, [r3, #443]	; 0x1bb
  403204:	f88d 201d 	strb.w	r2, [sp, #29]
        buff[IPK2U_MEASURE_CO2_HI]       =  (byte)(sData.measure_CO2_max >> 8);
  403208:	1212      	asrs	r2, r2, #8
  40320a:	f88d 201e 	strb.w	r2, [sp, #30]
        buff[IPK2U_MEASURE_RH]           =  (byte)(sData.measure_RH_max);         // 1 solo Byte da 0 a 100%
  40320e:	f9b3 21bd 	ldrsh.w	r2, [r3, #445]	; 0x1bd
  403212:	f88d 201f 	strb.w	r2, [sp, #31]
        buff[IPK2U_MEASURE_VOC]          =  (byte)(sData.measure_VOC_max);        // 1 solo byte da 0 a 100PPM
  403216:	f9b3 21bf 	ldrsh.w	r2, [r3, #447]	; 0x1bf
  40321a:	f88d 2020 	strb.w	r2, [sp, #32]
        buff[IPK2U_MEASURE_PRESSURE_LO]  =  (byte)(sData.measure_pressure & 0x0FF); 
  40321e:	f9b3 21c3 	ldrsh.w	r2, [r3, #451]	; 0x1c3
  403222:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
        buff[IPK2U_MEASURE_PRESSURE_HI]  =  (byte)(sData.measure_pressure >> 8);
  403226:	1212      	asrs	r2, r2, #8
  403228:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
        buff[IPK2U_MEASURE_AIRFLOW_LO]   =  (byte)(sData.measure_airflow & 0x0FF);
  40322c:	f9b3 21c5 	ldrsh.w	r2, [r3, #453]	; 0x1c5
  403230:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
        buff[IPK2U_MEASURE_AIRFLOW_HI]   =  (byte)(sData.measure_airflow >> 8);
  403234:	1212      	asrs	r2, r2, #8
  403236:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        buff[IPK2U_MEASURE_ACC_DSP_LO]   =  (byte)(sData.AccI2C[ACC_I2C_DPP].measure1 & 0x0FF);
  40323a:	f9b3 20cf 	ldrsh.w	r2, [r3, #207]	; 0xcf
  40323e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
        buff[IPK2U_MEASURE_ACC_DSP_HI]   =  (byte)(sData.AccI2C[ACC_I2C_DPP].measure1 >> 8);
  403242:	1212      	asrs	r2, r2, #8
  403244:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
        buff[IPK2U_LEVEL_LINK_HEATER]    =  sData.AccI2C[ACC_I2C_HEATER].level_link;  
  403248:	7cda      	ldrb	r2, [r3, #19]
  40324a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
        buff[IPK2U_LEVEL_LINK_COOLER]    =  sData.AccI2C[ACC_I2C_COOLER].level_link;  
  40324e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
  403252:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        buff[IPK2U_LEVEL_LINK_PREHEATER] =  sData.AccI2C[ACC_I2C_PREHEATER].level_link;
  403256:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
  40325a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        if(DigitAccessoryOperating(ACC_I2C_PCAF)) // la contemporaneitÃ  dei 2 accessori Ã¨ impossibile.
  40325e:	200a      	movs	r0, #10
  403260:	4b13      	ldr	r3, [pc, #76]	; (4032b0 <polling_ModBus+0x568>)
  403262:	4798      	blx	r3
  403264:	2800      	cmp	r0, #0
  403266:	d070      	beq.n	40334a <polling_ModBus+0x602>
          buff[IPK2U_LEVEL_LINK_CAP_CAF] =  sData.AccI2C[ACC_I2C_PCAF].level_link; 
  403268:	4b0f      	ldr	r3, [pc, #60]	; (4032a8 <polling_ModBus+0x560>)
  40326a:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
  40326e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        buff[IPK2U_LEVEL_LINK_CTRL_FAN]  =  sData.level_link_CTRLFAN;    
  403272:	4b0d      	ldr	r3, [pc, #52]	; (4032a8 <polling_ModBus+0x560>)
  403274:	785b      	ldrb	r3, [r3, #1]
  403276:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        b = (read_byte_eeprom(ADDR_EEP(SerialString[4])) - '0');
  40327a:	200f      	movs	r0, #15
  40327c:	4b09      	ldr	r3, [pc, #36]	; (4032a4 <polling_ModBus+0x55c>)
  40327e:	4798      	blx	r3
  403280:	3830      	subs	r0, #48	; 0x30
  403282:	b2c0      	uxtb	r0, r0
        if(b <=2)
  403284:	2802      	cmp	r0, #2
  403286:	d866      	bhi.n	403356 <polling_ModBus+0x60e>
          size_unit = b * 10000; 
  403288:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
  40328c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  403290:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403294:	0104      	lsls	r4, r0, #4
  403296:	b2a4      	uxth	r4, r4
  403298:	e014      	b.n	4032c4 <polling_ModBus+0x57c>
  40329a:	bf00      	nop
  40329c:	2000173c 	.word	0x2000173c
  4032a0:	20000e7c 	.word	0x20000e7c
  4032a4:	0040a26d 	.word	0x0040a26d
  4032a8:	200013ac 	.word	0x200013ac
  4032ac:	200013a4 	.word	0x200013a4
  4032b0:	0040012d 	.word	0x0040012d
  4032b4:	20000e56 	.word	0x20000e56
  4032b8:	00400151 	.word	0x00400151
  4032bc:	20000e86 	.word	0x20000e86
  4032c0:	20000e88 	.word	0x20000e88
        b = (read_byte_eeprom(ADDR_EEP(SerialString[5])) - '0'); 
  4032c4:	2010      	movs	r0, #16
  4032c6:	4e60      	ldr	r6, [pc, #384]	; (403448 <polling_ModBus+0x700>)
  4032c8:	47b0      	blx	r6
  4032ca:	4605      	mov	r5, r0
        b = (read_byte_eeprom(ADDR_EEP(SerialString[6])) - '0'); 
  4032cc:	2011      	movs	r0, #17
  4032ce:	47b0      	blx	r6
        b = (read_byte_eeprom(ADDR_EEP(SerialString[5])) - '0'); 
  4032d0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
          size_unit += (b * 1000);  
  4032d4:	b2db      	uxtb	r3, r3
  4032d6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
  4032da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        b = (read_byte_eeprom(ADDR_EEP(SerialString[6])) - '0'); 
  4032de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
          size_unit += (b * 100);    
  4032e2:	b2db      	uxtb	r3, r3
  4032e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4032e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4032ec:	009b      	lsls	r3, r3, #2
  4032ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4032f2:	441c      	add	r4, r3
  4032f4:	b2a4      	uxth	r4, r4
        Caf_Max = GetMaxAirFlow();
  4032f6:	4b55      	ldr	r3, [pc, #340]	; (40344c <polling_ModBus+0x704>)
  4032f8:	4798      	blx	r3
        buff[IPK2U_SET_MAX_VAL_CAF]      = (Caf_Max/100);
  4032fa:	4b55      	ldr	r3, [pc, #340]	; (403450 <polling_ModBus+0x708>)
  4032fc:	fba3 2300 	umull	r2, r3, r3, r0
  403300:	095b      	lsrs	r3, r3, #5
  403302:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        if(size_unit <= 200)
  403306:	2cc8      	cmp	r4, #200	; 0xc8
  403308:	d827      	bhi.n	40335a <polling_ModBus+0x612>
          buff[IPK2U_MAX_SETP_CAP]  = 25; 
  40330a:	2319      	movs	r3, #25
  40330c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        buff[IPK2U_SET_MAX_SETP_CAF_LO] = (byte)(Caf_Max & 0x0FF);    // Nuovo valore intero es: 450mq/h -> 450
  403310:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
        buff[IPK2U_SET_MAX_SETP_CAF_HI] = (byte)(Caf_Max >> 8);  
  403314:	0a00      	lsrs	r0, r0, #8
  403316:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
        buff[IPK2U_INCREASE_SPEED_RH_CO2] = sData.increase_speed_RH_CO2; // valore da 0% a 100% di incremento della velocitÃ  rispetto al set-poin a causa: RH alta, o CO2 alta, o VOCs alta.
  40331a:	4b4e      	ldr	r3, [pc, #312]	; (403454 <polling_ModBus+0x70c>)
  40331c:	f893 21b1 	ldrb.w	r2, [r3, #433]	; 0x1b1
  403320:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
        buff[IPK2U_STATUS_WEEKLY]         = sData.status_weekly; 
  403324:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
  403328:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        if(Tcheck ==1)
  40332c:	4b4a      	ldr	r3, [pc, #296]	; (403458 <polling_ModBus+0x710>)
  40332e:	781b      	ldrb	r3, [r3, #0]
  403330:	2b01      	cmp	r3, #1
  403332:	d01a      	beq.n	40336a <polling_ModBus+0x622>
        len =IPK2U_CKS_LO + 2;
  403334:	2469      	movs	r4, #105	; 0x69
  403336:	e5cd      	b.n	402ed4 <polling_ModBus+0x18c>
            buff[IPK2U_MEASURE_TR_LO]  = (byte)(Temp_modbus[I_PROBE_RETURN] & 0x0FF);
  403338:	4b48      	ldr	r3, [pc, #288]	; (40345c <polling_ModBus+0x714>)
  40333a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40333e:	f88d 3010 	strb.w	r3, [sp, #16]
            buff[IPK2U_MEASURE_TR_HI]  = (byte)(Temp_modbus[I_PROBE_RETURN] >> 8);
  403342:	121b      	asrs	r3, r3, #8
  403344:	f88d 3011 	strb.w	r3, [sp, #17]
  403348:	e644      	b.n	402fd4 <polling_ModBus+0x28c>
          buff[IPK2U_LEVEL_LINK_CAP_CAF] =  sData.AccI2C[ACC_I2C_PCAP].level_link;    
  40334a:	4b42      	ldr	r3, [pc, #264]	; (403454 <polling_ModBus+0x70c>)
  40334c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
  403350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  403354:	e78d      	b.n	403272 <polling_ModBus+0x52a>
        size_unit = 0;
  403356:	2400      	movs	r4, #0
  403358:	e7b4      	b.n	4032c4 <polling_ModBus+0x57c>
        else if (size_unit <= 1200) 
  40335a:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
          buff[IPK2U_MAX_SETP_CAP]  = 35;
  40335e:	bf94      	ite	ls
  403360:	2323      	movls	r3, #35	; 0x23
          buff[IPK2U_MAX_SETP_CAP]  = 45;   
  403362:	232d      	movhi	r3, #45	; 0x2d
  403364:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  403368:	e7d2      	b.n	403310 <polling_ModBus+0x5c8>
        buff[IPK2U_EXT2_M1_LO]  = (byte)(S2_T & 0x0FF);
  40336a:	4b3d      	ldr	r3, [pc, #244]	; (403460 <polling_ModBus+0x718>)
  40336c:	f9b3 3000 	ldrsh.w	r3, [r3]
  403370:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
        buff[IPK2U_EXT2_M1_HI]  = (byte)(S2_T >> 8);
  403374:	121b      	asrs	r3, r3, #8
  403376:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        buff[IPK2U_EXT2_M2_LO]  = (byte)(S2_RH & 0x0FF);
  40337a:	4b3a      	ldr	r3, [pc, #232]	; (403464 <polling_ModBus+0x71c>)
  40337c:	f9b3 3000 	ldrsh.w	r3, [r3]
  403380:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
        buff[IPK2U_EXT2_M2_HI]  = (byte)(S2_RH >> 8);                
  403384:	121b      	asrs	r3, r3, #8
  403386:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
        buff[IPK2U_TEMP_1_LO]  = (byte)(T1 & 0x0FF);
  40338a:	4b37      	ldr	r3, [pc, #220]	; (403468 <polling_ModBus+0x720>)
  40338c:	f9b3 3000 	ldrsh.w	r3, [r3]
  403390:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
        buff[IPK2U_TEMP_1_HI]  = (byte)(T1 >> 8);
  403394:	121b      	asrs	r3, r3, #8
  403396:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        buff[IPK2U_TEMP_2_LO]  = (byte)(T2 & 0x0FF);
  40339a:	4b34      	ldr	r3, [pc, #208]	; (40346c <polling_ModBus+0x724>)
  40339c:	f9b3 3000 	ldrsh.w	r3, [r3]
  4033a0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
        buff[IPK2U_TEMP_2_HI]  = (byte)(T2 >> 8);
  4033a4:	121b      	asrs	r3, r3, #8
  4033a6:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
	buff[IPK2U_TEMP_3_LO]  = (byte)(T3 & 0x0FF);
  4033aa:	4b31      	ldr	r3, [pc, #196]	; (403470 <polling_ModBus+0x728>)
  4033ac:	f9b3 3000 	ldrsh.w	r3, [r3]
  4033b0:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
        buff[IPK2U_TEMP_3_HI]  = (byte)(T3 >> 8);
  4033b4:	121b      	asrs	r3, r3, #8
  4033b6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        buff[IPK2U_MEASURE_TS_LO]  = (byte)(T5 & 0x0FF);
  4033ba:	4b2e      	ldr	r3, [pc, #184]	; (403474 <polling_ModBus+0x72c>)
  4033bc:	f9b3 3000 	ldrsh.w	r3, [r3]
  4033c0:	f88d 3012 	strb.w	r3, [sp, #18]
        buff[IPK2U_MEASURE_TS_HI]  = (byte)(T5 >> 8);
  4033c4:	121b      	asrs	r3, r3, #8
  4033c6:	f88d 3013 	strb.w	r3, [sp, #19]
        buff[IPK2U_MEASURE_TE_LO]  = (byte)(T4 & 0x0FF);
  4033ca:	4b2b      	ldr	r3, [pc, #172]	; (403478 <polling_ModBus+0x730>)
  4033cc:	f9b3 3000 	ldrsh.w	r3, [r3]
  4033d0:	f88d 3014 	strb.w	r3, [sp, #20]
        buff[IPK2U_MEASURE_TE_HI]  = (byte)(T4 >> 8); 
  4033d4:	121b      	asrs	r3, r3, #8
  4033d6:	f88d 3015 	strb.w	r3, [sp, #21]
        buff[IPK2U_EXT1_M1_LO]  = (byte)(S1_T & 0x0FF);
  4033da:	4b28      	ldr	r3, [pc, #160]	; (40347c <polling_ModBus+0x734>)
  4033dc:	f9b3 3000 	ldrsh.w	r3, [r3]
  4033e0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        buff[IPK2U_EXT1_M1_HI]  = (byte)(S1_T >> 8);
  4033e4:	121b      	asrs	r3, r3, #8
  4033e6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        buff[IPK2U_EXT1_M2_LO]  = (byte)(S1_RH & 0x0FF);
  4033ea:	4b25      	ldr	r3, [pc, #148]	; (403480 <polling_ModBus+0x738>)
  4033ec:	f9b3 3000 	ldrsh.w	r3, [r3]
  4033f0:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
        buff[IPK2U_EXT1_M2_HI]  = (byte)(S1_RH >> 8);
  4033f4:	121b      	asrs	r3, r3, #8
  4033f6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
        buff[IPK2U_EXT4_M1_LO]  = (byte)(S4_T & 0x0FF);
  4033fa:	4b22      	ldr	r3, [pc, #136]	; (403484 <polling_ModBus+0x73c>)
  4033fc:	f9b3 3000 	ldrsh.w	r3, [r3]
  403400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        buff[IPK2U_EXT4_M1_HI]  = (byte)(S4_T >> 8);
  403404:	121b      	asrs	r3, r3, #8
  403406:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        buff[IPK2U_EXT4_M2_LO]  = (byte)(S4_RH & 0x0FF);
  40340a:	4b1f      	ldr	r3, [pc, #124]	; (403488 <polling_ModBus+0x740>)
  40340c:	f9b3 3000 	ldrsh.w	r3, [r3]
  403410:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        buff[IPK2U_EXT4_M2_HI]  = (byte)(S4_RH >> 8);
  403414:	121b      	asrs	r3, r3, #8
  403416:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
        len =IPK2U_CKS_LO + 2;
  40341a:	2469      	movs	r4, #105	; 0x69
  40341c:	e55a      	b.n	402ed4 <polling_ModBus+0x18c>
      InsertAlarm(ALM_EB_REM_CTRL);  
  40341e:	2051      	movs	r0, #81	; 0x51
  403420:	4b1a      	ldr	r3, [pc, #104]	; (40348c <polling_ModBus+0x744>)
  403422:	4798      	blx	r3
  403424:	e569      	b.n	402efa <polling_ModBus+0x1b2>
        buff[IPK2U_EXT1_M3_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure3 & 0x0FF);  // 2 byte:  EXT1 CO2
  403426:	4a0b      	ldr	r2, [pc, #44]	; (403454 <polling_ModBus+0x70c>)
  403428:	f9b2 30f7 	ldrsh.w	r3, [r2, #247]	; 0xf7
  40342c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
        buff[IPK2U_EXT1_M3_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure3 >> 8);
  403430:	121b      	asrs	r3, r3, #8
  403432:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        buff[IPK2U_EXT1_M4_LO]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure4 & 0x0FF);  // 2 byte:  EXT1 VOC
  403436:	f9b2 30f9 	ldrsh.w	r3, [r2, #249]	; 0xf9
  40343a:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
        buff[IPK2U_EXT1_M4_HI]  = (byte)(sData.AccI2C[ACC_I2C_EXT1].measure4 >> 8);
  40343e:	121b      	asrs	r3, r3, #8
  403440:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
  403444:	e66b      	b.n	40311e <polling_ModBus+0x3d6>
  403446:	bf00      	nop
  403448:	0040a26d 	.word	0x0040a26d
  40344c:	00404911 	.word	0x00404911
  403450:	51eb851f 	.word	0x51eb851f
  403454:	200013ac 	.word	0x200013ac
  403458:	20000e56 	.word	0x20000e56
  40345c:	200013a4 	.word	0x200013a4
  403460:	20000e40 	.word	0x20000e40
  403464:	20000e3e 	.word	0x20000e3e
  403468:	20000e4c 	.word	0x20000e4c
  40346c:	20000e4e 	.word	0x20000e4e
  403470:	20000e50 	.word	0x20000e50
  403474:	20000e54 	.word	0x20000e54
  403478:	20000e52 	.word	0x20000e52
  40347c:	20000e3c 	.word	0x20000e3c
  403480:	20000e3a 	.word	0x20000e3a
  403484:	20000e44 	.word	0x20000e44
  403488:	20000e42 	.word	0x20000e42
  40348c:	00403555 	.word	0x00403555

00403490 <polling_serial_2>:
//  la presenza dal bit D8.
//-----------------------------------------------------------------------------------
byte index_poll_ser2 =0;

int polling_serial_2(void)
{
  403490:	b508      	push	{r3, lr}

wdt_restart(WATCH_DOG);       
  403492:	4813      	ldr	r0, [pc, #76]	; (4034e0 <polling_serial_2+0x50>)
  403494:	4b13      	ldr	r3, [pc, #76]	; (4034e4 <polling_serial_2+0x54>)
  403496:	4798      	blx	r3
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  403498:	4b13      	ldr	r3, [pc, #76]	; (4034e8 <polling_serial_2+0x58>)
  40349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  //ClearWDT();  // teniamo vivo il WacthDog
#endif   

  LED5_BLINK;
  
  if(/*digitalRead(pInsertEB_ModBus)*/ ioport_get_pin_level(pInsertEB_ModBus) )
  40349c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  4034a0:	d00d      	beq.n	4034be <polling_serial_2+0x2e>
     index_poll_ser2++; // se viene rilevata la scheda, allora pollala
  4034a2:	4a12      	ldr	r2, [pc, #72]	; (4034ec <polling_serial_2+0x5c>)
  4034a4:	7813      	ldrb	r3, [r2, #0]
  4034a6:	3301      	adds	r3, #1
  4034a8:	7013      	strb	r3, [r2, #0]
     RemoveAlarm(ALM_EB_REM_CTRL);  
     if(sData.Status_RemoteCTRL)
       update_EB_RemoteCTRL(0);
  }   
   
  if(index_poll_ser2 & 0x01) 
  4034aa:	4b10      	ldr	r3, [pc, #64]	; (4034ec <polling_serial_2+0x5c>)
  4034ac:	781b      	ldrb	r3, [r3, #0]
  4034ae:	f013 0f01 	tst.w	r3, #1
     polling_ModBus();   
  4034b2:	bf14      	ite	ne
  4034b4:	4b0e      	ldrne	r3, [pc, #56]	; (4034f0 <polling_serial_2+0x60>)
  else 
     polling_CTRL_FAN(); // la scheda FANS ogni 1,2 sec   
  4034b6:	4b0f      	ldreq	r3, [pc, #60]	; (4034f4 <polling_serial_2+0x64>)
  4034b8:	4798      	blx	r3
        
    
  
  return 1; // rimaniamo nello scheduler
}
  4034ba:	2001      	movs	r0, #1
  4034bc:	bd08      	pop	{r3, pc}
     index_poll_ser2 = 0; 
  4034be:	2300      	movs	r3, #0
  4034c0:	4a0a      	ldr	r2, [pc, #40]	; (4034ec <polling_serial_2+0x5c>)
  4034c2:	7013      	strb	r3, [r2, #0]
     cnt_no_link_Modbus = 0;                      
  4034c4:	4a0c      	ldr	r2, [pc, #48]	; (4034f8 <polling_serial_2+0x68>)
  4034c6:	7013      	strb	r3, [r2, #0]
     RemoveAlarm(ALM_EB_REM_CTRL);  
  4034c8:	2051      	movs	r0, #81	; 0x51
  4034ca:	4b0c      	ldr	r3, [pc, #48]	; (4034fc <polling_serial_2+0x6c>)
  4034cc:	4798      	blx	r3
     if(sData.Status_RemoteCTRL)
  4034ce:	4b0c      	ldr	r3, [pc, #48]	; (403500 <polling_serial_2+0x70>)
  4034d0:	795b      	ldrb	r3, [r3, #5]
  4034d2:	2b00      	cmp	r3, #0
  4034d4:	d0e9      	beq.n	4034aa <polling_serial_2+0x1a>
       update_EB_RemoteCTRL(0);
  4034d6:	2000      	movs	r0, #0
  4034d8:	4b0a      	ldr	r3, [pc, #40]	; (403504 <polling_serial_2+0x74>)
  4034da:	4798      	blx	r3
  4034dc:	e7e5      	b.n	4034aa <polling_serial_2+0x1a>
  4034de:	bf00      	nop
  4034e0:	400e1450 	.word	0x400e1450
  4034e4:	00403a89 	.word	0x00403a89
  4034e8:	400e0e00 	.word	0x400e0e00
  4034ec:	20000b5e 	.word	0x20000b5e
  4034f0:	00402d49 	.word	0x00402d49
  4034f4:	00402b6d 	.word	0x00402b6d
  4034f8:	20000b50 	.word	0x20000b50
  4034fc:	004035ad 	.word	0x004035ad
  403500:	200013ac 	.word	0x200013ac
  403504:	004026a9 	.word	0x004026a9

00403508 <InitAlarm>:
extern SDATA  sData;

//----------------------------------------------------
// Inizializza gli allarmi
//----------------------------------------------------
void InitAlarm(void) {
  403508:	4b08      	ldr	r3, [pc, #32]	; (40352c <InitAlarm+0x24>)
  40350a:	f103 010d 	add.w	r1, r3, #13
	int i;
	
	for(i=0; i < 13; i++)
	sData.Events[i] = 0;
  40350e:	2200      	movs	r2, #0
  403510:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(i=0; i < 13; i++)
  403514:	428b      	cmp	r3, r1
  403516:	d1fb      	bne.n	403510 <InitAlarm+0x8>
  403518:	4b05      	ldr	r3, [pc, #20]	; (403530 <InitAlarm+0x28>)
  40351a:	f103 0170 	add.w	r1, r3, #112	; 0x70
	
	for(i=0; i < TOT_ALARMS; i++)
	persist_alarm[i] = 0;
  40351e:	2200      	movs	r2, #0
  403520:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(i=0; i < TOT_ALARMS; i++)
  403524:	428b      	cmp	r3, r1
  403526:	d1fb      	bne.n	403520 <InitAlarm+0x18>
}
  403528:	4770      	bx	lr
  40352a:	bf00      	nop
  40352c:	200015a2 	.word	0x200015a2
  403530:	20000eff 	.word	0x20000eff

00403534 <CkAlarm>:
	Byte ie, sh;
	
	ie = (nalm >> 3);
	sh = nalm & 0x07;
	
	if(sData.Events[ie] & (1 <<sh))
  403534:	f3c0 02c7 	ubfx	r2, r0, #3, #8
  403538:	4b05      	ldr	r3, [pc, #20]	; (403550 <CkAlarm+0x1c>)
  40353a:	4413      	add	r3, r2
  40353c:	f893 31f7 	ldrb.w	r3, [r3, #503]	; 0x1f7
  403540:	f000 0007 	and.w	r0, r0, #7
  403544:	fa43 f000 	asr.w	r0, r3, r0
	return true;
	
	return false;
}
  403548:	f000 0001 	and.w	r0, r0, #1
  40354c:	4770      	bx	lr
  40354e:	bf00      	nop
  403550:	200013ac 	.word	0x200013ac

00403554 <InsertAlarm>:

//----------------------------------------------------
// Inserisce l'allarme nell'array Events
//----------------------------------------------------
void InsertAlarm(int nalm)
{
  403554:	f3c0 02c7 	ubfx	r2, r0, #3, #8
	
	ie = (nalm >> 3);
	sh = nalm & 0x07;
	msk |= (1 << sh);
	
	sData.Events[ie] |= msk;
  403558:	4b05      	ldr	r3, [pc, #20]	; (403570 <InsertAlarm+0x1c>)
  40355a:	4413      	add	r3, r2
	msk |= (1 << sh);
  40355c:	f000 0207 	and.w	r2, r0, #7
  403560:	2001      	movs	r0, #1
  403562:	4090      	lsls	r0, r2
	sData.Events[ie] |= msk;
  403564:	f893 21f7 	ldrb.w	r2, [r3, #503]	; 0x1f7
  403568:	4310      	orrs	r0, r2
  40356a:	f883 01f7 	strb.w	r0, [r3, #503]	; 0x1f7
  40356e:	4770      	bx	lr
  403570:	200013ac 	.word	0x200013ac

00403574 <InsertDelayAlarm>:
	
	ie = (nalm >> 3);
	sh = nalm & 0x07;
	msk |= (1 << sh);
	
	if(persist_alarm[nalm] <= MAX_PERSIST)
  403574:	4b0b      	ldr	r3, [pc, #44]	; (4035a4 <InsertDelayAlarm+0x30>)
  403576:	5c1b      	ldrb	r3, [r3, r0]
  403578:	2b08      	cmp	r3, #8
  40357a:	d90e      	bls.n	40359a <InsertDelayAlarm+0x26>
  40357c:	f3c0 03c7 	ubfx	r3, r0, #3, #8
	persist_alarm[nalm]++;
	else
	sData.Events[ie] |= msk;
  403580:	4a09      	ldr	r2, [pc, #36]	; (4035a8 <InsertDelayAlarm+0x34>)
  403582:	441a      	add	r2, r3
	msk |= (1 << sh);
  403584:	f000 0007 	and.w	r0, r0, #7
  403588:	2301      	movs	r3, #1
  40358a:	fa03 f000 	lsl.w	r0, r3, r0
	sData.Events[ie] |= msk;
  40358e:	f892 31f7 	ldrb.w	r3, [r2, #503]	; 0x1f7
  403592:	4318      	orrs	r0, r3
  403594:	f882 01f7 	strb.w	r0, [r2, #503]	; 0x1f7
  403598:	4770      	bx	lr
	persist_alarm[nalm]++;
  40359a:	3301      	adds	r3, #1
  40359c:	4a01      	ldr	r2, [pc, #4]	; (4035a4 <InsertDelayAlarm+0x30>)
  40359e:	5413      	strb	r3, [r2, r0]
  4035a0:	4770      	bx	lr
  4035a2:	bf00      	nop
  4035a4:	20000f00 	.word	0x20000f00
  4035a8:	200013ac 	.word	0x200013ac

004035ac <RemoveAlarm>:

//----------------------------------------------------
// rimuove l'allarme dall'array Events
//----------------------------------------------------
void RemoveAlarm(int nalm)
{
  4035ac:	b410      	push	{r4}
  4035ae:	f3c0 01c7 	ubfx	r1, r0, #3, #8
	Byte ie, sh;
	
	ie = (nalm >> 3);
	sh = nalm & 0x07;
	
	if(sData.Events[ie] & (1 << sh)) {
  4035b2:	4b0c      	ldr	r3, [pc, #48]	; (4035e4 <RemoveAlarm+0x38>)
  4035b4:	440b      	add	r3, r1
  4035b6:	f893 31f7 	ldrb.w	r3, [r3, #503]	; 0x1f7
  4035ba:	f000 0207 	and.w	r2, r0, #7
  4035be:	fa43 f402 	asr.w	r4, r3, r2
  4035c2:	f014 0f01 	tst.w	r4, #1
  4035c6:	d008      	beq.n	4035da <RemoveAlarm+0x2e>
		sData.Events[ie] &= ~(1 << sh);
  4035c8:	4c06      	ldr	r4, [pc, #24]	; (4035e4 <RemoveAlarm+0x38>)
  4035ca:	4421      	add	r1, r4
  4035cc:	2401      	movs	r4, #1
  4035ce:	fa04 f202 	lsl.w	r2, r4, r2
  4035d2:	ea23 0302 	bic.w	r3, r3, r2
  4035d6:	f881 31f7 	strb.w	r3, [r1, #503]	; 0x1f7
	}
	
	persist_alarm[nalm] = 0;
  4035da:	2200      	movs	r2, #0
  4035dc:	4b02      	ldr	r3, [pc, #8]	; (4035e8 <RemoveAlarm+0x3c>)
  4035de:	541a      	strb	r2, [r3, r0]
}
  4035e0:	bc10      	pop	{r4}
  4035e2:	4770      	bx	lr
  4035e4:	200013ac 	.word	0x200013ac
  4035e8:	20000f00 	.word	0x20000f00

004035ec <adc_get_config_defaults>:
	Assert(cfg);

#if SAMG55
	cfg->resolution = ADC_12_BITS;
#else
	cfg->resolution = ADC_10_BITS;
  4035ec:	2300      	movs	r3, #0
  4035ee:	6003      	str	r3, [r0, #0]
#endif
	cfg->mck = sysclk_get_cpu_hz();
  4035f0:	4a06      	ldr	r2, [pc, #24]	; (40360c <adc_get_config_defaults+0x20>)
  4035f2:	6042      	str	r2, [r0, #4]
	cfg->adc_clock = 6000000UL;
  4035f4:	4a06      	ldr	r2, [pc, #24]	; (403610 <adc_get_config_defaults+0x24>)
  4035f6:	6082      	str	r2, [r0, #8]
	cfg->startup_time = ADC_STARTUP_TIME_4;
  4035f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4035fc:	60c2      	str	r2, [r0, #12]
	cfg->tracktim = 2;
  4035fe:	2202      	movs	r2, #2
  403600:	7402      	strb	r2, [r0, #16]
	cfg->transfer = 2;
  403602:	7442      	strb	r2, [r0, #17]
	cfg->useq = false;
  403604:	7483      	strb	r3, [r0, #18]
	cfg->tag = false;
  403606:	74c3      	strb	r3, [r0, #19]
	cfg->aste = false;
  403608:	7503      	strb	r3, [r0, #20]
  40360a:	4770      	bx	lr
  40360c:	05f5e100 	.word	0x05f5e100
  403610:	005b8d80 	.word	0x005b8d80

00403614 <adc_set_resolution>:
		const enum adc_resolution res)
{
#if SAMG55
	adc->ADC_EMR |= res;
#else
	if (res == ADC_11_BITS || res == ADC_12_BITS) {
  403614:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  403618:	d00a      	beq.n	403630 <adc_set_resolution+0x1c>
  40361a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
  40361e:	d007      	beq.n	403630 <adc_set_resolution+0x1c>
		adc->ADC_MR &= ~ADC_MR_LOWRES;
		adc->ADC_EMR |= res;
	} else {
		adc->ADC_MR |= res;
  403620:	6843      	ldr	r3, [r0, #4]
  403622:	4319      	orrs	r1, r3
  403624:	6041      	str	r1, [r0, #4]
		adc->ADC_EMR &= ~ADC_EMR_OSR_Msk;
  403626:	6c03      	ldr	r3, [r0, #64]	; 0x40
  403628:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  40362c:	6403      	str	r3, [r0, #64]	; 0x40
  40362e:	4770      	bx	lr
		adc->ADC_MR &= ~ADC_MR_LOWRES;
  403630:	6843      	ldr	r3, [r0, #4]
  403632:	f023 0310 	bic.w	r3, r3, #16
  403636:	6043      	str	r3, [r0, #4]
		adc->ADC_EMR |= res;
  403638:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40363a:	4319      	orrs	r1, r3
  40363c:	6401      	str	r1, [r0, #64]	; 0x40
  40363e:	4770      	bx	lr

00403640 <adc_init>:
{
  403640:	b538      	push	{r3, r4, r5, lr}
 *
 * \return The interrupt status value.
 */
static inline uint32_t adc_get_interrupt_status(Adc *const adc)
{
	return adc->ADC_ISR;
  403642:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((adc_get_interrupt_status(adc) & ADC_ISR_DRDY) == ADC_ISR_DRDY) {
  403644:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  403648:	d001      	beq.n	40364e <adc_init+0xe>
		return STATUS_ERR_BUSY;
  40364a:	2019      	movs	r0, #25
}
  40364c:	bd38      	pop	{r3, r4, r5, pc}
	adc->ADC_CR = ADC_CR_SWRST;
  40364e:	2201      	movs	r2, #1
  403650:	6002      	str	r2, [r0, #0]
	reg =  (config->useq ? ADC_MR_USEQ_REG_ORDER : 0) |
  403652:	7c8a      	ldrb	r2, [r1, #18]
  403654:	2a00      	cmp	r2, #0
  403656:	bf18      	it	ne
  403658:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
			ADC_MR_TRACKTIM(config->tracktim) |
  40365c:	7c0a      	ldrb	r2, [r1, #16]
  40365e:	0612      	lsls	r2, r2, #24
  403660:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
			ADC_MR_TRANSFER(config->transfer) |
  403664:	7c4c      	ldrb	r4, [r1, #17]
  403666:	0724      	lsls	r4, r4, #28
  403668:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg =  (config->useq ? ADC_MR_USEQ_REG_ORDER : 0) |
  40366c:	4322      	orrs	r2, r4
  40366e:	68cc      	ldr	r4, [r1, #12]
  403670:	4322      	orrs	r2, r4
			ADC_MR_PRESCAL(config->mck /
  403672:	688c      	ldr	r4, [r1, #8]
  403674:	0065      	lsls	r5, r4, #1
  403676:	684c      	ldr	r4, [r1, #4]
  403678:	fbb4 f4f5 	udiv	r4, r4, r5
  40367c:	3c01      	subs	r4, #1
  40367e:	0224      	lsls	r4, r4, #8
  403680:	b2a4      	uxth	r4, r4
	reg =  (config->useq ? ADC_MR_USEQ_REG_ORDER : 0) |
  403682:	4322      	orrs	r2, r4
  403684:	4313      	orrs	r3, r2
	adc->ADC_MR = reg;
  403686:	6043      	str	r3, [r0, #4]
	adc->ADC_EMR = (config->tag ? ADC_EMR_TAG : 0) |
  403688:	7ccb      	ldrb	r3, [r1, #19]
  40368a:	2b00      	cmp	r3, #0
  40368c:	bf14      	ite	ne
  40368e:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  403692:	2300      	moveq	r3, #0
			(config->aste ? ADC_EMR_ASTE_SINGLE_TRIG_AVERAGE : 0);
  403694:	7d0a      	ldrb	r2, [r1, #20]
  403696:	2a00      	cmp	r2, #0
  403698:	bf14      	ite	ne
  40369a:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
  40369e:	2200      	moveq	r2, #0
	adc->ADC_EMR = (config->tag ? ADC_EMR_TAG : 0) |
  4036a0:	4313      	orrs	r3, r2
  4036a2:	6403      	str	r3, [r0, #64]	; 0x40
	adc_set_resolution(adc, config->resolution);
  4036a4:	6809      	ldr	r1, [r1, #0]
  4036a6:	4b06      	ldr	r3, [pc, #24]	; (4036c0 <adc_init+0x80>)
  4036a8:	4798      	blx	r3
  4036aa:	4b06      	ldr	r3, [pc, #24]	; (4036c4 <adc_init+0x84>)
  4036ac:	f103 0160 	add.w	r1, r3, #96	; 0x60
		adc_callback_pointer[i] = 0;
  4036b0:	2200      	movs	r2, #0
  4036b2:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < ADC_NUM_OF_INTERRUPT_SOURCE; i++) {
  4036b6:	428b      	cmp	r3, r1
  4036b8:	d1fb      	bne.n	4036b2 <adc_init+0x72>
	return STATUS_OK;
  4036ba:	2000      	movs	r0, #0
  4036bc:	bd38      	pop	{r3, r4, r5, pc}
  4036be:	bf00      	nop
  4036c0:	00403615 	.word	0x00403615
  4036c4:	20000f74 	.word	0x20000f74

004036c8 <ADC_Handler>:

/**
 * \brief Interrupt handler for ADC.
 */
void ADC_Handler(void)
{
  4036c8:	b570      	push	{r4, r5, r6, lr}
  4036ca:	b082      	sub	sp, #8
  4036cc:	4b0b      	ldr	r3, [pc, #44]	; (4036fc <ADC_Handler+0x34>)
  4036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	status = adc_get_interrupt_status(adc);
  4036d0:	9301      	str	r3, [sp, #4]
  4036d2:	4e0b      	ldr	r6, [pc, #44]	; (403700 <ADC_Handler+0x38>)
  4036d4:	1f34      	subs	r4, r6, #4
  4036d6:	4d0b      	ldr	r5, [pc, #44]	; (403704 <ADC_Handler+0x3c>)
  4036d8:	365c      	adds	r6, #92	; 0x5c
  4036da:	e002      	b.n	4036e2 <ADC_Handler+0x1a>
  4036dc:	3504      	adds	r5, #4
	for (cnt = 0; cnt < ADC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4036de:	42b4      	cmp	r4, r6
  4036e0:	d009      	beq.n	4036f6 <ADC_Handler+0x2e>
		if (status & adc_interrupt_mask[cnt]) {
  4036e2:	9a01      	ldr	r2, [sp, #4]
  4036e4:	f854 3f04 	ldr.w	r3, [r4, #4]!
  4036e8:	421a      	tst	r2, r3
  4036ea:	d0f7      	beq.n	4036dc <ADC_Handler+0x14>
	if (adc_callback_pointer[source]) {
  4036ec:	682b      	ldr	r3, [r5, #0]
  4036ee:	2b00      	cmp	r3, #0
  4036f0:	d0f4      	beq.n	4036dc <ADC_Handler+0x14>
		adc_callback_pointer[source]();
  4036f2:	4798      	blx	r3
  4036f4:	e7f2      	b.n	4036dc <ADC_Handler+0x14>
	adc_process_callback(ADC);
}
  4036f6:	b002      	add	sp, #8
  4036f8:	bd70      	pop	{r4, r5, r6, pc}
  4036fa:	bf00      	nop
  4036fc:	40038000 	.word	0x40038000
  403700:	00411c18 	.word	0x00411c18
  403704:	20000f78 	.word	0x20000f78

00403708 <adc_enable>:
/**
 * \brief Enable ADC Module.
 *
 */
void adc_enable(void)
{
  403708:	b500      	push	{lr}
  40370a:	b083      	sub	sp, #12
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(ID_ADC);
  40370c:	201d      	movs	r0, #29
  40370e:	4b11      	ldr	r3, [pc, #68]	; (403754 <adc_enable+0x4c>)
  403710:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  403712:	4b11      	ldr	r3, [pc, #68]	; (403758 <adc_enable+0x50>)
  403714:	789b      	ldrb	r3, [r3, #2]
  403716:	2bff      	cmp	r3, #255	; 0xff
  403718:	d01a      	beq.n	403750 <adc_enable+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40371a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40371e:	fab3 f383 	clz	r3, r3
  403722:	095b      	lsrs	r3, r3, #5
  403724:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403726:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  403728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40372c:	2200      	movs	r2, #0
  40372e:	4b0b      	ldr	r3, [pc, #44]	; (40375c <adc_enable+0x54>)
  403730:	701a      	strb	r2, [r3, #0]
	return flags;
  403732:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  403734:	4a08      	ldr	r2, [pc, #32]	; (403758 <adc_enable+0x50>)
  403736:	7893      	ldrb	r3, [r2, #2]
  403738:	3301      	adds	r3, #1
  40373a:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40373c:	b129      	cbz	r1, 40374a <adc_enable+0x42>
		cpu_irq_enable();
  40373e:	2201      	movs	r2, #1
  403740:	4b06      	ldr	r3, [pc, #24]	; (40375c <adc_enable+0x54>)
  403742:	701a      	strb	r2, [r3, #0]
  403744:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403748:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEP_MODE_ADC);
}
  40374a:	b003      	add	sp, #12
  40374c:	f85d fb04 	ldr.w	pc, [sp], #4
  403750:	e7fe      	b.n	403750 <adc_enable+0x48>
  403752:	bf00      	nop
  403754:	00409185 	.word	0x00409185
  403758:	20000f70 	.word	0x20000f70
  40375c:	20000031 	.word	0x20000031

00403760 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  403760:	460b      	mov	r3, r1
  403762:	b119      	cbz	r1, 40376c <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  403764:	6809      	ldr	r1, [r1, #0]
  403766:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  403768:	685b      	ldr	r3, [r3, #4]
  40376a:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  40376c:	b11a      	cbz	r2, 403776 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  40376e:	6813      	ldr	r3, [r2, #0]
  403770:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  403772:	6853      	ldr	r3, [r2, #4]
  403774:	6143      	str	r3, [r0, #20]
  403776:	4770      	bx	lr

00403778 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  403778:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  40377c:	05c9      	lsls	r1, r1, #23
  40377e:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  403780:	6201      	str	r1, [r0, #32]
  403782:	4770      	bx	lr

00403784 <pdc_read_rx_counter>:
		Pdc *p_pdc)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  403784:	6840      	ldr	r0, [r0, #4]
}
  403786:	4770      	bx	lr

00403788 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  403788:	4b2a      	ldr	r3, [pc, #168]	; (403834 <twi_set_speed+0xac>)
  40378a:	4299      	cmp	r1, r3
  40378c:	d849      	bhi.n	403822 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40378e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  403792:	4299      	cmp	r1, r3
  403794:	d92b      	bls.n	4037ee <twi_set_speed+0x66>
{
  403796:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403798:	4c27      	ldr	r4, [pc, #156]	; (403838 <twi_set_speed+0xb0>)
  40379a:	fba4 3402 	umull	r3, r4, r4, r2
  40379e:	0ba4      	lsrs	r4, r4, #14
  4037a0:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4037a2:	4b26      	ldr	r3, [pc, #152]	; (40383c <twi_set_speed+0xb4>)
  4037a4:	440b      	add	r3, r1
  4037a6:	009b      	lsls	r3, r3, #2
  4037a8:	fbb2 f2f3 	udiv	r2, r2, r3
  4037ac:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4037ae:	2cff      	cmp	r4, #255	; 0xff
  4037b0:	d939      	bls.n	403826 <twi_set_speed+0x9e>
  4037b2:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4037b4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4037b6:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4037b8:	2cff      	cmp	r4, #255	; 0xff
  4037ba:	d90d      	bls.n	4037d8 <twi_set_speed+0x50>
  4037bc:	2907      	cmp	r1, #7
  4037be:	d1f9      	bne.n	4037b4 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4037c0:	0213      	lsls	r3, r2, #8
  4037c2:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4037c4:	0409      	lsls	r1, r1, #16
  4037c6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4037ca:	430b      	orrs	r3, r1
  4037cc:	b2e4      	uxtb	r4, r4
  4037ce:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  4037d0:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4037d2:	2000      	movs	r0, #0
}
  4037d4:	bc10      	pop	{r4}
  4037d6:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4037d8:	2aff      	cmp	r2, #255	; 0xff
  4037da:	d9f1      	bls.n	4037c0 <twi_set_speed+0x38>
  4037dc:	2906      	cmp	r1, #6
  4037de:	d8ef      	bhi.n	4037c0 <twi_set_speed+0x38>
			ckdiv++;
  4037e0:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  4037e2:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4037e4:	2aff      	cmp	r2, #255	; 0xff
  4037e6:	d9eb      	bls.n	4037c0 <twi_set_speed+0x38>
  4037e8:	2906      	cmp	r1, #6
  4037ea:	d9f9      	bls.n	4037e0 <twi_set_speed+0x58>
  4037ec:	e7e8      	b.n	4037c0 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4037ee:	0049      	lsls	r1, r1, #1
  4037f0:	fbb2 f2f1 	udiv	r2, r2, r1
  4037f4:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4037f6:	2aff      	cmp	r2, #255	; 0xff
  4037f8:	d911      	bls.n	40381e <twi_set_speed+0x96>
  4037fa:	2300      	movs	r3, #0
			ckdiv++;
  4037fc:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  4037fe:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403800:	2aff      	cmp	r2, #255	; 0xff
  403802:	d901      	bls.n	403808 <twi_set_speed+0x80>
  403804:	2b07      	cmp	r3, #7
  403806:	d1f9      	bne.n	4037fc <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  403808:	0211      	lsls	r1, r2, #8
  40380a:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  40380c:	041b      	lsls	r3, r3, #16
  40380e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  403812:	430b      	orrs	r3, r1
  403814:	b2d2      	uxtb	r2, r2
  403816:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  403818:	6102      	str	r2, [r0, #16]
	return PASS;
  40381a:	2000      	movs	r0, #0
  40381c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40381e:	2300      	movs	r3, #0
  403820:	e7f2      	b.n	403808 <twi_set_speed+0x80>
		return FAIL;
  403822:	2001      	movs	r0, #1
  403824:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403826:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  403828:	bf88      	it	hi
  40382a:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40382c:	d8d8      	bhi.n	4037e0 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
  40382e:	2100      	movs	r1, #0
  403830:	e7c6      	b.n	4037c0 <twi_set_speed+0x38>
  403832:	bf00      	nop
  403834:	00061a80 	.word	0x00061a80
  403838:	057619f1 	.word	0x057619f1
  40383c:	3ffd1200 	.word	0x3ffd1200

00403840 <twi_master_init>:
{
  403840:	b538      	push	{r3, r4, r5, lr}
  403842:	4604      	mov	r4, r0
  403844:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  403846:	f04f 33ff 	mov.w	r3, #4294967295
  40384a:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  40384c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40384e:	2380      	movs	r3, #128	; 0x80
  403850:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  403852:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  403854:	2308      	movs	r3, #8
  403856:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  403858:	2320      	movs	r3, #32
  40385a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  40385c:	2304      	movs	r3, #4
  40385e:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  403860:	680a      	ldr	r2, [r1, #0]
  403862:	6849      	ldr	r1, [r1, #4]
  403864:	4b05      	ldr	r3, [pc, #20]	; (40387c <twi_master_init+0x3c>)
  403866:	4798      	blx	r3
  403868:	2801      	cmp	r0, #1
  40386a:	bf14      	ite	ne
  40386c:	2000      	movne	r0, #0
  40386e:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  403870:	7a6b      	ldrb	r3, [r5, #9]
  403872:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  403874:	bf04      	itt	eq
  403876:	2340      	moveq	r3, #64	; 0x40
  403878:	6023      	streq	r3, [r4, #0]
}
  40387a:	bd38      	pop	{r3, r4, r5, pc}
  40387c:	00403789 	.word	0x00403789

00403880 <twi_mk_addr>:
	if (len == 0)
  403880:	460a      	mov	r2, r1
  403882:	b159      	cbz	r1, 40389c <twi_mk_addr+0x1c>
	val = addr[0];
  403884:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  403886:	2901      	cmp	r1, #1
		val |= addr[1];
  403888:	bfc4      	itt	gt
  40388a:	7841      	ldrbgt	r1, [r0, #1]
  40388c:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  403890:	2a02      	cmp	r2, #2
  403892:	dd04      	ble.n	40389e <twi_mk_addr+0x1e>
		val |= addr[2];
  403894:	7882      	ldrb	r2, [r0, #2]
  403896:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  40389a:	e000      	b.n	40389e <twi_mk_addr+0x1e>
		return 0;
  40389c:	2300      	movs	r3, #0
}
  40389e:	4618      	mov	r0, r3
  4038a0:	4770      	bx	lr
	...

004038a4 <twi_master_read>:
{
  4038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
  4038a6:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
  4038a8:	2c00      	cmp	r4, #0
  4038aa:	d05d      	beq.n	403968 <twi_master_read+0xc4>
  4038ac:	460b      	mov	r3, r1
  4038ae:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
  4038b0:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  4038b2:	2000      	movs	r0, #0
  4038b4:	6068      	str	r0, [r5, #4]
	((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4038b6:	684a      	ldr	r2, [r1, #4]
  4038b8:	0212      	lsls	r2, r2, #8
  4038ba:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4038be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4038c2:	7c09      	ldrb	r1, [r1, #16]
  4038c4:	0409      	lsls	r1, r1, #16
  4038c6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
  4038ca:	430a      	orrs	r2, r1
  4038cc:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
  4038ce:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4038d0:	6859      	ldr	r1, [r3, #4]
  4038d2:	4618      	mov	r0, r3
  4038d4:	4b29      	ldr	r3, [pc, #164]	; (40397c <twi_master_read+0xd8>)
  4038d6:	4798      	blx	r3
  4038d8:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
  4038da:	2c01      	cmp	r4, #1
  4038dc:	d00f      	beq.n	4038fe <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
  4038de:	2301      	movs	r3, #1
  4038e0:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  4038e2:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
  4038e4:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4038e6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4038ea:	d144      	bne.n	403976 <twi_master_read+0xd2>
  4038ec:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
  4038f0:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
  4038f4:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
  4038f8:	f04f 0c02 	mov.w	ip, #2
  4038fc:	e019      	b.n	403932 <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4038fe:	2303      	movs	r3, #3
  403900:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  403902:	2001      	movs	r0, #1
  403904:	e7ee      	b.n	4038e4 <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
  403906:	460a      	mov	r2, r1
  403908:	4670      	mov	r0, lr
  40390a:	e00c      	b.n	403926 <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
  40390c:	b908      	cbnz	r0, 403912 <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
  40390e:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
  403912:	f013 0f02 	tst.w	r3, #2
  403916:	d0f6      	beq.n	403906 <twi_master_read+0x62>
  403918:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
  40391a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40391c:	7033      	strb	r3, [r6, #0]
		cnt--;
  40391e:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
  403920:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
  403922:	463a      	mov	r2, r7
	while (cnt > 0) {
  403924:	b164      	cbz	r4, 403940 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
  403926:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  403928:	f413 7f80 	tst.w	r3, #256	; 0x100
  40392c:	d11f      	bne.n	40396e <twi_master_read+0xca>
		if (!timeout--) {
  40392e:	1e51      	subs	r1, r2, #1
  403930:	b1fa      	cbz	r2, 403972 <twi_master_read+0xce>
		if (cnt == 1  && !stop_sent) {
  403932:	2c01      	cmp	r4, #1
  403934:	d0ea      	beq.n	40390c <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
  403936:	f013 0f02 	tst.w	r3, #2
  40393a:	d1ee      	bne.n	40391a <twi_master_read+0x76>
  40393c:	460a      	mov	r2, r1
  40393e:	e7f1      	b.n	403924 <twi_master_read+0x80>
	twi_counter = 0;
  403940:	2200      	movs	r2, #0
  403942:	4b0f      	ldr	r3, [pc, #60]	; (403980 <twi_master_read+0xdc>)
  403944:	601a      	str	r2, [r3, #0]
		if ( twi_counter >= 500 )
  403946:	461a      	mov	r2, r3
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  403948:	6a2b      	ldr	r3, [r5, #32]
  40394a:	f013 0f01 	tst.w	r3, #1
  40394e:	d103      	bne.n	403958 <twi_master_read+0xb4>
		if ( twi_counter >= 500 )
  403950:	6813      	ldr	r3, [r2, #0]
  403952:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403956:	d3f7      	bcc.n	403948 <twi_master_read+0xa4>
	p_twi->TWI_SR;
  403958:	6a2b      	ldr	r3, [r5, #32]
	if ( twi_counter >= 500 ) // 100 ms timeout //
  40395a:	4b09      	ldr	r3, [pc, #36]	; (403980 <twi_master_read+0xdc>)
  40395c:	681b      	ldr	r3, [r3, #0]
		return TWI_ERROR_TIMEOUT;
  40395e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403962:	bf28      	it	cs
  403964:	2409      	movcs	r4, #9
  403966:	e000      	b.n	40396a <twi_master_read+0xc6>
		return TWI_INVALID_ARGUMENT;
  403968:	2401      	movs	r4, #1
}
  40396a:	4620      	mov	r0, r4
  40396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
  40396e:	2405      	movs	r4, #5
  403970:	e7fb      	b.n	40396a <twi_master_read+0xc6>
			return TWI_ERROR_TIMEOUT;
  403972:	2409      	movs	r4, #9
  403974:	e7f9      	b.n	40396a <twi_master_read+0xc6>
			return TWI_RECEIVE_NACK;
  403976:	2405      	movs	r4, #5
  403978:	e7f7      	b.n	40396a <twi_master_read+0xc6>
  40397a:	bf00      	nop
  40397c:	00403881 	.word	0x00403881
  403980:	20000ea8 	.word	0x20000ea8

00403984 <twi_master_write>:
{
  403984:	b570      	push	{r4, r5, r6, lr}
	uint32_t cnt = p_packet->length;
  403986:	68cd      	ldr	r5, [r1, #12]
	if (cnt == 0) {
  403988:	2d00      	cmp	r5, #0
  40398a:	d04d      	beq.n	403a28 <twi_master_write+0xa4>
  40398c:	460b      	mov	r3, r1
  40398e:	4604      	mov	r4, r0
	uint8_t *buffer = p_packet->buffer;
  403990:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  403992:	2000      	movs	r0, #0
  403994:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  403996:	7c0a      	ldrb	r2, [r1, #16]
  403998:	0412      	lsls	r2, r2, #16
  40399a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
	((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  40399e:	6849      	ldr	r1, [r1, #4]
  4039a0:	0209      	lsls	r1, r1, #8
  4039a2:	f401 7140 	and.w	r1, r1, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4039a6:	430a      	orrs	r2, r1
  4039a8:	6062      	str	r2, [r4, #4]
	p_twi->TWI_IADR = 0;
  4039aa:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4039ac:	6859      	ldr	r1, [r3, #4]
  4039ae:	4618      	mov	r0, r3
  4039b0:	4b21      	ldr	r3, [pc, #132]	; (403a38 <twi_master_write+0xb4>)
  4039b2:	4798      	blx	r3
  4039b4:	60e0      	str	r0, [r4, #12]
		status = p_twi->TWI_SR;
  4039b6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4039b8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4039bc:	d006      	beq.n	4039cc <twi_master_write+0x48>
			return TWI_RECEIVE_NACK;
  4039be:	2505      	movs	r5, #5
  4039c0:	e033      	b.n	403a2a <twi_master_write+0xa6>
	while (cnt > 0) {
  4039c2:	b15d      	cbz	r5, 4039dc <twi_master_write+0x58>
		status = p_twi->TWI_SR;
  4039c4:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4039c6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4039ca:	d130      	bne.n	403a2e <twi_master_write+0xaa>
		if (!(status & TWI_SR_TXRDY)) {
  4039cc:	f013 0f04 	tst.w	r3, #4
  4039d0:	d0f7      	beq.n	4039c2 <twi_master_write+0x3e>
		p_twi->TWI_THR = *buffer++;
  4039d2:	7833      	ldrb	r3, [r6, #0]
  4039d4:	6363      	str	r3, [r4, #52]	; 0x34
		cnt--;
  4039d6:	3d01      	subs	r5, #1
		p_twi->TWI_THR = *buffer++;
  4039d8:	3601      	adds	r6, #1
  4039da:	e7f2      	b.n	4039c2 <twi_master_write+0x3e>
	twi_counter = 0;
  4039dc:	2200      	movs	r2, #0
  4039de:	4b17      	ldr	r3, [pc, #92]	; (403a3c <twi_master_write+0xb8>)
  4039e0:	601a      	str	r2, [r3, #0]
		if ( twi_counter >= 500 )
  4039e2:	461a      	mov	r2, r3
		status = p_twi->TWI_SR;
  4039e4:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4039e6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4039ea:	d122      	bne.n	403a32 <twi_master_write+0xae>
		if (status & TWI_SR_TXRDY) {
  4039ec:	f013 0f04 	tst.w	r3, #4
  4039f0:	d105      	bne.n	4039fe <twi_master_write+0x7a>
		if ( twi_counter >= 500 )
  4039f2:	6813      	ldr	r3, [r2, #0]
  4039f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4039f8:	d3f4      	bcc.n	4039e4 <twi_master_write+0x60>
		return TWI_ERROR_TIMEOUT;
  4039fa:	2509      	movs	r5, #9
  4039fc:	e015      	b.n	403a2a <twi_master_write+0xa6>
	p_twi->TWI_CR = TWI_CR_STOP;
  4039fe:	2302      	movs	r3, #2
  403a00:	6023      	str	r3, [r4, #0]
	twi_counter = 0;
  403a02:	2200      	movs	r2, #0
  403a04:	4b0d      	ldr	r3, [pc, #52]	; (403a3c <twi_master_write+0xb8>)
  403a06:	601a      	str	r2, [r3, #0]
		if ( twi_counter >= 500 )
  403a08:	461a      	mov	r2, r3
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  403a0a:	6a23      	ldr	r3, [r4, #32]
  403a0c:	f013 0f01 	tst.w	r3, #1
  403a10:	d103      	bne.n	403a1a <twi_master_write+0x96>
		if ( twi_counter >= 500 )
  403a12:	6813      	ldr	r3, [r2, #0]
  403a14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403a18:	d3f7      	bcc.n	403a0a <twi_master_write+0x86>
	if ( twi_counter >= 500 ) // 100 ms timeout
  403a1a:	4b08      	ldr	r3, [pc, #32]	; (403a3c <twi_master_write+0xb8>)
  403a1c:	681b      	ldr	r3, [r3, #0]
		return TWI_ERROR_TIMEOUT;
  403a1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403a22:	bf28      	it	cs
  403a24:	2509      	movcs	r5, #9
  403a26:	e000      	b.n	403a2a <twi_master_write+0xa6>
		return TWI_INVALID_ARGUMENT;
  403a28:	2501      	movs	r5, #1
}
  403a2a:	4628      	mov	r0, r5
  403a2c:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
  403a2e:	2505      	movs	r5, #5
  403a30:	e7fb      	b.n	403a2a <twi_master_write+0xa6>
			return TWI_RECEIVE_NACK;
  403a32:	2505      	movs	r5, #5
  403a34:	e7f9      	b.n	403a2a <twi_master_write+0xa6>
  403a36:	bf00      	nop
  403a38:	00403881 	.word	0x00403881
  403a3c:	20000ea8 	.word	0x20000ea8

00403a40 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403a40:	6943      	ldr	r3, [r0, #20]
  403a42:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  403a46:	bf1d      	ittte	ne
  403a48:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  403a4c:	61c1      	strne	r1, [r0, #28]
	return 0;
  403a4e:	2000      	movne	r0, #0
		return 1;
  403a50:	2001      	moveq	r0, #1
}
  403a52:	4770      	bx	lr

00403a54 <wdt_get_timeout_value>:
 */
uint32_t wdt_get_timeout_value(uint32_t ul_us, uint32_t ul_sclk)
{
	uint32_t max, min;

	min = WDT_SLCK_DIV * 1000000 / ul_sclk;
  403a54:	4b09      	ldr	r3, [pc, #36]	; (403a7c <wdt_get_timeout_value+0x28>)
  403a56:	fbb3 f1f1 	udiv	r1, r3, r1
	max = min * WDT_MAX_VALUE;

	if ((ul_us < min) || (ul_us > max)) {
  403a5a:	4281      	cmp	r1, r0
  403a5c:	d902      	bls.n	403a64 <wdt_get_timeout_value+0x10>
		return WDT_INVALID_ARGUMENT;
  403a5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  403a62:	4770      	bx	lr
	max = min * WDT_MAX_VALUE;
  403a64:	ebc1 3301 	rsb	r3, r1, r1, lsl #12
	if ((ul_us < min) || (ul_us > max)) {
  403a68:	4283      	cmp	r3, r0
  403a6a:	d202      	bcs.n	403a72 <wdt_get_timeout_value+0x1e>
		return WDT_INVALID_ARGUMENT;
  403a6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}

	return WDT_MR_WDV(ul_us / min);
}
  403a70:	4770      	bx	lr
	return WDT_MR_WDV(ul_us / min);
  403a72:	fbb0 f0f1 	udiv	r0, r0, r1
  403a76:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403a7a:	4770      	bx	lr
  403a7c:	07a12000 	.word	0x07a12000

00403a80 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  403a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403a84:	6043      	str	r3, [r0, #4]
  403a86:	4770      	bx	lr

00403a88 <wdt_restart>:
/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
	if (p_wdt == WDT) {
  403a88:	4b02      	ldr	r3, [pc, #8]	; (403a94 <wdt_restart+0xc>)
  403a8a:	4298      	cmp	r0, r3
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
  403a8c:	bf04      	itt	eq
  403a8e:	4a02      	ldreq	r2, [pc, #8]	; (403a98 <wdt_restart+0x10>)
  403a90:	601a      	streq	r2, [r3, #0]
  403a92:	4770      	bx	lr
  403a94:	400e1450 	.word	0x400e1450
  403a98:	a5000001 	.word	0xa5000001

00403a9c <wdt_get_us_timeout_period>:
 *
 * \return The timeout period in microseconds.
 */
uint32_t wdt_get_us_timeout_period(Wdt *p_wdt, uint32_t ul_sclk)
{
	return WDT_MR_WDV(p_wdt->WDT_MR) * WDT_SLCK_DIV / ul_sclk * 1000000;
  403a9c:	6840      	ldr	r0, [r0, #4]
  403a9e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403aa2:	01c0      	lsls	r0, r0, #7
  403aa4:	fbb0 f1f1 	udiv	r1, r0, r1
}
  403aa8:	4801      	ldr	r0, [pc, #4]	; (403ab0 <wdt_get_us_timeout_period+0x14>)
  403aaa:	fb00 f001 	mul.w	r0, r0, r1
  403aae:	4770      	bx	lr
  403ab0:	000f4240 	.word	0x000f4240

00403ab4 <_set_SDA>:
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403ab4:	4b02      	ldr	r3, [pc, #8]	; (403ac0 <_set_SDA+0xc>)
  403ab6:	2201      	movs	r2, #1
  403ab8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403aba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  403abe:	4770      	bx	lr
  403ac0:	400e0e00 	.word	0x400e0e00

00403ac4 <_set_SCL>:
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403ac4:	4b02      	ldr	r3, [pc, #8]	; (403ad0 <_set_SCL+0xc>)
  403ac6:	2202      	movs	r2, #2
  403ac8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403aca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  403ace:	4770      	bx	lr
  403ad0:	400e0e00 	.word	0x400e0e00

00403ad4 <I2C_freeBus>:

//------------------------------------------------------------------
//
//------------------------------------------------------------------
void I2C_freeBus(void)
{
  403ad4:	b508      	push	{r3, lr}
  _set_SCL();
  403ad6:	4b02      	ldr	r3, [pc, #8]	; (403ae0 <I2C_freeBus+0xc>)
  403ad8:	4798      	blx	r3
  _set_SDA();
  403ada:	4b02      	ldr	r3, [pc, #8]	; (403ae4 <I2C_freeBus+0x10>)
  403adc:	4798      	blx	r3
  403ade:	bd08      	pop	{r3, pc}
  403ae0:	00403ac5 	.word	0x00403ac5
  403ae4:	00403ab5 	.word	0x00403ab5

00403ae8 <_clear_SDA>:
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403ae8:	4b03      	ldr	r3, [pc, #12]	; (403af8 <_clear_SDA+0x10>)
  403aea:	2201      	movs	r2, #1
  403aec:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403aee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403af2:	635a      	str	r2, [r3, #52]	; 0x34
  403af4:	4770      	bx	lr
  403af6:	bf00      	nop
  403af8:	400e0e00 	.word	0x400e0e00

00403afc <_clear_SCL>:
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403afc:	4b03      	ldr	r3, [pc, #12]	; (403b0c <_clear_SCL+0x10>)
  403afe:	2202      	movs	r2, #2
  403b00:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403b02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403b06:	635a      	str	r2, [r3, #52]	; 0x34
  403b08:	4770      	bx	lr
  403b0a:	bf00      	nop
  403b0c:	400e0e00 	.word	0x400e0e00

00403b10 <_read_SDA>:
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403b10:	4b03      	ldr	r3, [pc, #12]	; (403b20 <_read_SDA+0x10>)
  403b12:	2201      	movs	r2, #1
  403b14:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403b16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  403b1a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
{
  //pinMode(_pinSDA,INPUT);  // SDA
  //return digitalRead(_pinSDA);
  ioport_set_pin_dir(SDA, IOPORT_DIR_INPUT);
  return ( ioport_get_pin_level(SDA));
}
  403b1c:	4010      	ands	r0, r2
  403b1e:	4770      	bx	lr
  403b20:	400e0e00 	.word	0x400e0e00

00403b24 <I2C_sendStart>:

//--------------------------------------------------------------
//  Invia il comando di start sul bus.
//--------------------------------------------------------------
void I2C_sendStart(void) 
{
  403b24:	b510      	push	{r4, lr}
  _set_SDA();
  403b26:	4b07      	ldr	r3, [pc, #28]	; (403b44 <I2C_sendStart+0x20>)
  403b28:	4798      	blx	r3
  _set_SCL();
  403b2a:	4b07      	ldr	r3, [pc, #28]	; (403b48 <I2C_sendStart+0x24>)
  403b2c:	4798      	blx	r3

  delay_us (DELAY_1_CLOCK); 
  403b2e:	f240 5095 	movw	r0, #1429	; 0x595
  403b32:	4c06      	ldr	r4, [pc, #24]	; (403b4c <I2C_sendStart+0x28>)
  403b34:	47a0      	blx	r4
  _clear_SDA();
  403b36:	4b06      	ldr	r3, [pc, #24]	; (403b50 <I2C_sendStart+0x2c>)
  403b38:	4798      	blx	r3
  delay_us(DELAY_1_CLOCK); 
  403b3a:	f240 5095 	movw	r0, #1429	; 0x595
  403b3e:	47a0      	blx	r4
  403b40:	bd10      	pop	{r4, pc}
  403b42:	bf00      	nop
  403b44:	00403ab5 	.word	0x00403ab5
  403b48:	00403ac5 	.word	0x00403ac5
  403b4c:	20000001 	.word	0x20000001
  403b50:	00403ae9 	.word	0x00403ae9

00403b54 <I2C_sendStop>:
}

//--------------------------------------------------------------
void I2C_sendStop(void) 
{  
  403b54:	b510      	push	{r4, lr}
  _clear_SCL();
  403b56:	4b09      	ldr	r3, [pc, #36]	; (403b7c <I2C_sendStop+0x28>)
  403b58:	4798      	blx	r3
  _clear_SDA();
  403b5a:	4b09      	ldr	r3, [pc, #36]	; (403b80 <I2C_sendStop+0x2c>)
  403b5c:	4798      	blx	r3
  delay_us (DELAY_1_CLOCK);
  403b5e:	f240 5095 	movw	r0, #1429	; 0x595
  403b62:	4c08      	ldr	r4, [pc, #32]	; (403b84 <I2C_sendStop+0x30>)
  403b64:	47a0      	blx	r4
  _set_SCL();
  403b66:	4b08      	ldr	r3, [pc, #32]	; (403b88 <I2C_sendStop+0x34>)
  403b68:	4798      	blx	r3
  delay_us (DELAY_1_CLOCK);
  403b6a:	f240 5095 	movw	r0, #1429	; 0x595
  403b6e:	47a0      	blx	r4
  _set_SDA();
  403b70:	4b06      	ldr	r3, [pc, #24]	; (403b8c <I2C_sendStop+0x38>)
  403b72:	4798      	blx	r3
  delay_us (DELAY_1_CLOCK);
  403b74:	f240 5095 	movw	r0, #1429	; 0x595
  403b78:	47a0      	blx	r4
  403b7a:	bd10      	pop	{r4, pc}
  403b7c:	00403afd 	.word	0x00403afd
  403b80:	00403ae9 	.word	0x00403ae9
  403b84:	20000001 	.word	0x20000001
  403b88:	00403ac5 	.word	0x00403ac5
  403b8c:	00403ab5 	.word	0x00403ab5

00403b90 <I2C_sendAck>:
//   SCL __|  |
//       _      
//   SDA  |___|
//------------------------------------------------------------------
void I2C_sendAck(void) 
{ 
  403b90:	b538      	push	{r3, r4, r5, lr}
  _clear_SCL();
  403b92:	4d0a      	ldr	r5, [pc, #40]	; (403bbc <I2C_sendAck+0x2c>)
  403b94:	47a8      	blx	r5
  delay_us (DELAY_1_CLOCK>>1); 
  403b96:	f240 20cb 	movw	r0, #715	; 0x2cb
  403b9a:	4c09      	ldr	r4, [pc, #36]	; (403bc0 <I2C_sendAck+0x30>)
  403b9c:	47a0      	blx	r4
  _clear_SDA();
  403b9e:	4b09      	ldr	r3, [pc, #36]	; (403bc4 <I2C_sendAck+0x34>)
  403ba0:	4798      	blx	r3
  delay_us (DELAY_1_CLOCK>>1); 
  403ba2:	f240 20cb 	movw	r0, #715	; 0x2cb
  403ba6:	47a0      	blx	r4
  _set_SCL();
  403ba8:	4b07      	ldr	r3, [pc, #28]	; (403bc8 <I2C_sendAck+0x38>)
  403baa:	4798      	blx	r3
  delay_us (DELAY_1_CLOCK);
  403bac:	f240 5095 	movw	r0, #1429	; 0x595
  403bb0:	47a0      	blx	r4
  _clear_SCL();
  403bb2:	47a8      	blx	r5
  _set_SDA();
  403bb4:	4b05      	ldr	r3, [pc, #20]	; (403bcc <I2C_sendAck+0x3c>)
  403bb6:	4798      	blx	r3
  403bb8:	bd38      	pop	{r3, r4, r5, pc}
  403bba:	bf00      	nop
  403bbc:	00403afd 	.word	0x00403afd
  403bc0:	20000001 	.word	0x20000001
  403bc4:	00403ae9 	.word	0x00403ae9
  403bc8:	00403ac5 	.word	0x00403ac5
  403bcc:	00403ab5 	.word	0x00403ab5

00403bd0 <I2C_sendNak>:
}

/*-------------------------------------------------------------------------*/
void I2C_sendNak(void) // send NOT-acknowledge
{ 
  403bd0:	b570      	push	{r4, r5, r6, lr}
  _clear_SCL();
  403bd2:	4e09      	ldr	r6, [pc, #36]	; (403bf8 <I2C_sendNak+0x28>)
  403bd4:	47b0      	blx	r6
  delay_us (DELAY_1_CLOCK>>1);
  403bd6:	f240 20cb 	movw	r0, #715	; 0x2cb
  403bda:	4c08      	ldr	r4, [pc, #32]	; (403bfc <I2C_sendNak+0x2c>)
  403bdc:	47a0      	blx	r4
  _set_SDA();
  403bde:	4d08      	ldr	r5, [pc, #32]	; (403c00 <I2C_sendNak+0x30>)
  403be0:	47a8      	blx	r5
  delay_us (DELAY_1_CLOCK>>1); 
  403be2:	f240 20cb 	movw	r0, #715	; 0x2cb
  403be6:	47a0      	blx	r4
  _set_SCL();
  403be8:	4b06      	ldr	r3, [pc, #24]	; (403c04 <I2C_sendNak+0x34>)
  403bea:	4798      	blx	r3
  delay_us (DELAY_1_CLOCK);
  403bec:	f240 5095 	movw	r0, #1429	; 0x595
  403bf0:	47a0      	blx	r4
  _clear_SCL();
  403bf2:	47b0      	blx	r6
  _set_SDA();
  403bf4:	47a8      	blx	r5
  403bf6:	bd70      	pop	{r4, r5, r6, pc}
  403bf8:	00403afd 	.word	0x00403afd
  403bfc:	20000001 	.word	0x20000001
  403c00:	00403ab5 	.word	0x00403ab5
  403c04:	00403ac5 	.word	0x00403ac5

00403c08 <I2C_checkAck>:

//------------------------------------------------------------------
//
//------------------------------------------------------------------
int I2C_checkAck(void)
{
  403c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int time_wait = (DELAY_1_CLOCK >> 3);
  Byte input = 0;
  
  _clear_SCL();
  403c0a:	4e19      	ldr	r6, [pc, #100]	; (403c70 <I2C_checkAck+0x68>)
  403c0c:	47b0      	blx	r6
  delay_us (DELAY_1_CLOCK);
  403c0e:	f240 5095 	movw	r0, #1429	; 0x595
  403c12:	4d18      	ldr	r5, [pc, #96]	; (403c74 <I2C_checkAck+0x6c>)
  403c14:	47a8      	blx	r5
  _set_SCL();
  403c16:	4b18      	ldr	r3, [pc, #96]	; (403c78 <I2C_checkAck+0x70>)
  403c18:	4798      	blx	r3
  
  input = 0;
  delay_us (time_wait);  //+1/8
  403c1a:	20b3      	movs	r0, #179	; 0xb3
  403c1c:	47a8      	blx	r5
  input = _read_SDA();
  403c1e:	4f17      	ldr	r7, [pc, #92]	; (403c7c <I2C_checkAck+0x74>)
  403c20:	47b8      	blx	r7
  403c22:	4604      	mov	r4, r0
  delay_us (time_wait);  //+1/8
  403c24:	20b3      	movs	r0, #179	; 0xb3
  403c26:	47a8      	blx	r5
  input += _read_SDA();
  403c28:	47b8      	blx	r7
  403c2a:	4404      	add	r4, r0
  403c2c:	b2e4      	uxtb	r4, r4
  delay_us (time_wait);  //+1/8
  403c2e:	20b3      	movs	r0, #179	; 0xb3
  403c30:	47a8      	blx	r5
  input += _read_SDA();
  403c32:	47b8      	blx	r7
  403c34:	4404      	add	r4, r0
  403c36:	b2e4      	uxtb	r4, r4
  delay_us (time_wait);  //+1/8
  403c38:	20b3      	movs	r0, #179	; 0xb3
  403c3a:	47a8      	blx	r5
  input += _read_SDA();
  403c3c:	47b8      	blx	r7
  403c3e:	4404      	add	r4, r0
  403c40:	b2e4      	uxtb	r4, r4
  delay_us (time_wait);  //+1/8
  403c42:	20b3      	movs	r0, #179	; 0xb3
  403c44:	47a8      	blx	r5
  input += _read_SDA();
  403c46:	47b8      	blx	r7
  403c48:	4404      	add	r4, r0
  403c4a:	b2e4      	uxtb	r4, r4
  delay_us (time_wait);  //+1/8
  403c4c:	20b3      	movs	r0, #179	; 0xb3
  403c4e:	47a8      	blx	r5
  input += _read_SDA();
  403c50:	47b8      	blx	r7
  403c52:	4404      	add	r4, r0
  403c54:	b2e4      	uxtb	r4, r4
  delay_us (time_wait);  //+1/8
  403c56:	20b3      	movs	r0, #179	; 0xb3
  403c58:	47a8      	blx	r5
  input += _read_SDA();  
  403c5a:	47b8      	blx	r7
  403c5c:	4404      	add	r4, r0
  403c5e:	b2e4      	uxtb	r4, r4
  delay_us (time_wait);  //+1/8
  403c60:	20b3      	movs	r0, #179	; 0xb3
  403c62:	47a8      	blx	r5
  _clear_SCL();
  403c64:	47b0      	blx	r6
   
  if(input >= 4)
    return NAK;
  else
    return ACK;
}
  403c66:	2c03      	cmp	r4, #3
  403c68:	bf94      	ite	ls
  403c6a:	2000      	movls	r0, #0
  403c6c:	2001      	movhi	r0, #1
  403c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c70:	00403afd 	.word	0x00403afd
  403c74:	20000001 	.word	0x20000001
  403c78:	00403ac5 	.word	0x00403ac5
  403c7c:	00403b11 	.word	0x00403b11

00403c80 <I2C_sendData>:
// SCL(bit) __|7 |__|6 |__|5 |__|4 |__|3 |__|2 |__|1 |__|0 |
//            
//
//--------------------------------------------------------------------
void I2C_sendData(Byte value) 
{
  403c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403c84:	4681      	mov	r9, r0
  403c86:	2408      	movs	r4, #8
  Byte i;
  Byte maske = 0x80;
  403c88:	2680      	movs	r6, #128	; 0x80
  for (i=8;i>0;i--)
  { 
    _clear_SCL();
  403c8a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 403cd8 <I2C_sendData+0x58>
    delay_us (DELAY_1_CLOCK >>1);
  403c8e:	f240 27cb 	movw	r7, #715	; 0x2cb
  403c92:	4d0d      	ldr	r5, [pc, #52]	; (403cc8 <I2C_sendData+0x48>)
    _clear_SCL();
  403c94:	47c0      	blx	r8
    delay_us (DELAY_1_CLOCK >>1);
  403c96:	4638      	mov	r0, r7
  403c98:	47a8      	blx	r5
    // a metà del clock basso cambio il valore dell' SDA, in modo che lo slave 
    // ha tutto il tempo per leggere il valore del bit corretto.
    if ((value & maske) != 0)
  403c9a:	ea19 0f06 	tst.w	r9, r6
    {
      _set_SDA();
  403c9e:	bf14      	ite	ne
  403ca0:	4b0a      	ldrne	r3, [pc, #40]	; (403ccc <I2C_sendData+0x4c>)
    }
    else
    {
      _clear_SDA();
  403ca2:	4b0b      	ldreq	r3, [pc, #44]	; (403cd0 <I2C_sendData+0x50>)
  403ca4:	4798      	blx	r3
    }
    delay_us (DELAY_1_CLOCK >>1);
  403ca6:	4638      	mov	r0, r7
  403ca8:	47a8      	blx	r5
    _set_SCL();
  403caa:	4b0a      	ldr	r3, [pc, #40]	; (403cd4 <I2C_sendData+0x54>)
  403cac:	4798      	blx	r3
    maske >>= 1;
  403cae:	0876      	lsrs	r6, r6, #1
    delay_us (DELAY_1_CLOCK);
  403cb0:	f240 5095 	movw	r0, #1429	; 0x595
  403cb4:	47a8      	blx	r5
    _clear_SCL();
  403cb6:	47c0      	blx	r8
  403cb8:	1e63      	subs	r3, r4, #1
  for (i=8;i>0;i--)
  403cba:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403cbe:	d1e9      	bne.n	403c94 <I2C_sendData+0x14>
  }
  _set_SDA();
  403cc0:	4b02      	ldr	r3, [pc, #8]	; (403ccc <I2C_sendData+0x4c>)
  403cc2:	4798      	blx	r3
  403cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403cc8:	20000001 	.word	0x20000001
  403ccc:	00403ab5 	.word	0x00403ab5
  403cd0:	00403ae9 	.word	0x00403ae9
  403cd4:	00403ac5 	.word	0x00403ac5
  403cd8:	00403afd 	.word	0x00403afd

00403cdc <WriteSlave>:
{    
  403cdc:	b570      	push	{r4, r5, r6, lr}
  403cde:	460e      	mov	r6, r1
  403ce0:	4615      	mov	r5, r2
	addressByte = (addressSlave << 1);
  403ce2:	0040      	lsls	r0, r0, #1
  403ce4:	b2c4      	uxtb	r4, r0
	I2C_freeBus();  
  403ce6:	4b1e      	ldr	r3, [pc, #120]	; (403d60 <WriteSlave+0x84>)
  403ce8:	4798      	blx	r3
	I2C_sendStart();
  403cea:	4b1e      	ldr	r3, [pc, #120]	; (403d64 <WriteSlave+0x88>)
  403cec:	4798      	blx	r3
	I2C_sendData(addressByte); 
  403cee:	4620      	mov	r0, r4
  403cf0:	4b1d      	ldr	r3, [pc, #116]	; (403d68 <WriteSlave+0x8c>)
  403cf2:	4798      	blx	r3
	if(I2C_checkAck() != ACK) {
  403cf4:	4b1d      	ldr	r3, [pc, #116]	; (403d6c <WriteSlave+0x90>)
  403cf6:	4798      	blx	r3
  403cf8:	b9e8      	cbnz	r0, 403d36 <WriteSlave+0x5a>
	I2C_sendData(addrData); 
  403cfa:	4630      	mov	r0, r6
  403cfc:	4b1a      	ldr	r3, [pc, #104]	; (403d68 <WriteSlave+0x8c>)
  403cfe:	4798      	blx	r3
	if(I2C_checkAck() != ACK) {
  403d00:	4b1a      	ldr	r3, [pc, #104]	; (403d6c <WriteSlave+0x90>)
  403d02:	4798      	blx	r3
  403d04:	b9e0      	cbnz	r0, 403d40 <WriteSlave+0x64>
	I2C_sendData(Data); 
  403d06:	4628      	mov	r0, r5
  403d08:	4b17      	ldr	r3, [pc, #92]	; (403d68 <WriteSlave+0x8c>)
  403d0a:	4798      	blx	r3
	if(I2C_checkAck() != ACK) {
  403d0c:	4b17      	ldr	r3, [pc, #92]	; (403d6c <WriteSlave+0x90>)
  403d0e:	4798      	blx	r3
  403d10:	b9d8      	cbnz	r0, 403d4a <WriteSlave+0x6e>
	checksum = ~((addressByte + addrData + Data) % 256);
  403d12:	19a0      	adds	r0, r4, r6
  403d14:	4428      	add	r0, r5
  403d16:	4243      	negs	r3, r0
  403d18:	b2c0      	uxtb	r0, r0
  403d1a:	b2db      	uxtb	r3, r3
  403d1c:	bf58      	it	pl
  403d1e:	4258      	negpl	r0, r3
  403d20:	43c0      	mvns	r0, r0
	I2C_sendData(checksum); 
  403d22:	b2c0      	uxtb	r0, r0
  403d24:	4b10      	ldr	r3, [pc, #64]	; (403d68 <WriteSlave+0x8c>)
  403d26:	4798      	blx	r3
	if(I2C_checkAck() != ACK) {
  403d28:	4b10      	ldr	r3, [pc, #64]	; (403d6c <WriteSlave+0x90>)
  403d2a:	4798      	blx	r3
  403d2c:	b990      	cbnz	r0, 403d54 <WriteSlave+0x78>
	I2C_sendStop(); 
  403d2e:	4b10      	ldr	r3, [pc, #64]	; (403d70 <WriteSlave+0x94>)
  403d30:	4798      	blx	r3
    return 1;  // Tutto OK.
  403d32:	2001      	movs	r0, #1
}    
  403d34:	bd70      	pop	{r4, r5, r6, pc}
	    I2C_sendStop(); 
  403d36:	4b0e      	ldr	r3, [pc, #56]	; (403d70 <WriteSlave+0x94>)
  403d38:	4798      	blx	r3
		return _ERROR_READ_ACK;
  403d3a:	f06f 0004 	mvn.w	r0, #4
  403d3e:	bd70      	pop	{r4, r5, r6, pc}
		I2C_sendStop();  
  403d40:	4b0b      	ldr	r3, [pc, #44]	; (403d70 <WriteSlave+0x94>)
  403d42:	4798      	blx	r3
		return _ERROR_READ_ACK;//_ERROR_READ_ACK; 
  403d44:	f06f 0004 	mvn.w	r0, #4
  403d48:	bd70      	pop	{r4, r5, r6, pc}
	    I2C_sendStop();  
  403d4a:	4b09      	ldr	r3, [pc, #36]	; (403d70 <WriteSlave+0x94>)
  403d4c:	4798      	blx	r3
		return _ERROR_READ_ACK;
  403d4e:	f06f 0004 	mvn.w	r0, #4
  403d52:	bd70      	pop	{r4, r5, r6, pc}
		I2C_sendStop();  
  403d54:	4b06      	ldr	r3, [pc, #24]	; (403d70 <WriteSlave+0x94>)
  403d56:	4798      	blx	r3
		return _ERROR_CKSUM; 
  403d58:	f06f 0002 	mvn.w	r0, #2
  403d5c:	bd70      	pop	{r4, r5, r6, pc}
  403d5e:	bf00      	nop
  403d60:	00403ad5 	.word	0x00403ad5
  403d64:	00403b25 	.word	0x00403b25
  403d68:	00403c81 	.word	0x00403c81
  403d6c:	00403c09 	.word	0x00403c09
  403d70:	00403b55 	.word	0x00403b55

00403d74 <I2C_readData>:
//--------------------------------------------------------------------
// leggo 1 Byte dal canale I2C,  Essendo Master genero il segnale di 
// clock.
//--------------------------------------------------------------------
Byte I2C_readData(void) // read Byte from E2 Interface
{
  403d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d78:	2708      	movs	r7, #8
  int time_wait = (DELAY_1_CLOCK >> 3);
  Byte read_data;
  Byte data_in = 0x00;
  Byte maske = 0x80;
  
  for (maske=0x80;maske>0;maske >>=1)
  403d7a:	f04f 0880 	mov.w	r8, #128	; 0x80
  Byte data_in = 0x00;
  403d7e:	f04f 0a00 	mov.w	sl, #0
  { 	
    _clear_SCL();
  403d82:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403e08 <I2C_readData+0x94>
    delay_us (DELAY_1_CLOCK);
  403d86:	4d1d      	ldr	r5, [pc, #116]	; (403dfc <I2C_readData+0x88>)
    _set_SCL();
	
	// dopo 1/8 del bit di clock inizio a leggere
	delay_us (time_wait);  // 1/8
  403d88:	f04f 0bb3 	mov.w	fp, #179	; 0xb3
    _clear_SCL();
  403d8c:	47c8      	blx	r9
    delay_us (DELAY_1_CLOCK);
  403d8e:	f240 5095 	movw	r0, #1429	; 0x595
  403d92:	47a8      	blx	r5
    _set_SCL();
  403d94:	4b1a      	ldr	r3, [pc, #104]	; (403e00 <I2C_readData+0x8c>)
  403d96:	4798      	blx	r3
	delay_us (time_wait);  // 1/8
  403d98:	4658      	mov	r0, fp
  403d9a:	47a8      	blx	r5
	read_data = _read_SDA();
  403d9c:	4e19      	ldr	r6, [pc, #100]	; (403e04 <I2C_readData+0x90>)
  403d9e:	47b0      	blx	r6
  403da0:	4604      	mov	r4, r0

	// 2/8 del bit_clock	
	delay_us (time_wait);  
  403da2:	4658      	mov	r0, fp
  403da4:	47a8      	blx	r5
    read_data += _read_SDA();
  403da6:	47b0      	blx	r6
  403da8:	4404      	add	r4, r0
  403daa:	b2e4      	uxtb	r4, r4

    // 3/8 del bit_clock	
    delay_us (time_wait);  
  403dac:	4658      	mov	r0, fp
  403dae:	47a8      	blx	r5
    read_data += _read_SDA();
  403db0:	47b0      	blx	r6
  403db2:	4404      	add	r4, r0
  403db4:	b2e4      	uxtb	r4, r4
	
    // 4/8 del bit_clock	
    delay_us (time_wait);  
  403db6:	4658      	mov	r0, fp
  403db8:	47a8      	blx	r5
    read_data += _read_SDA();	
  403dba:	47b0      	blx	r6
  403dbc:	4404      	add	r4, r0
  403dbe:	b2e4      	uxtb	r4, r4
		
	// 5/8 del bit_clock		
	delay_us (time_wait);  
  403dc0:	4658      	mov	r0, fp
  403dc2:	47a8      	blx	r5
	read_data += _read_SDA();
  403dc4:	47b0      	blx	r6
  403dc6:	4404      	add	r4, r0
  403dc8:	b2e4      	uxtb	r4, r4
		
	// 6/8 del bit_clock		
	delay_us (time_wait);  
  403dca:	4658      	mov	r0, fp
  403dcc:	47a8      	blx	r5
	read_data += _read_SDA();	
  403dce:	47b0      	blx	r6
  403dd0:	4404      	add	r4, r0
  403dd2:	b2e4      	uxtb	r4, r4

	// 7/8 del bit_clock	
    delay_us (time_wait);
  403dd4:	4658      	mov	r0, fp
  403dd6:	47a8      	blx	r5
	read_data += _read_SDA();
  403dd8:	47b0      	blx	r6
  403dda:	4404      	add	r4, r0
  403ddc:	b2e4      	uxtb	r4, r4
	
	// 8/8 del bit_clock	
    delay_us (time_wait);
  403dde:	4658      	mov	r0, fp
  403de0:	47a8      	blx	r5

	if (read_data >= 5)
  403de2:	2c04      	cmp	r4, #4
    {
      data_in |= maske;
  403de4:	bf88      	it	hi
  403de6:	ea4a 0a08 	orrhi.w	sl, sl, r8
    }
	
    _clear_SCL();
  403dea:	47c8      	blx	r9
  for (maske=0x80;maske>0;maske >>=1)
  403dec:	ea4f 0858 	mov.w	r8, r8, lsr #1
  403df0:	3f01      	subs	r7, #1
  403df2:	d1cb      	bne.n	403d8c <I2C_readData+0x18>
  }
  
  return data_in;
}
  403df4:	4650      	mov	r0, sl
  403df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dfa:	bf00      	nop
  403dfc:	20000001 	.word	0x20000001
  403e00:	00403ac5 	.word	0x00403ac5
  403e04:	00403b11 	.word	0x00403b11
  403e08:	00403afd 	.word	0x00403afd

00403e0c <ReadSlave>:
{    
  403e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e10:	460d      	mov	r5, r1
  403e12:	4617      	mov	r7, r2
  403e14:	461e      	mov	r6, r3
	addressByte = (addressSlave << 1) + 1;
  403e16:	0040      	lsls	r0, r0, #1
  403e18:	3001      	adds	r0, #1
  403e1a:	b2c4      	uxtb	r4, r0
	I2C_sendStart();
  403e1c:	4b3b      	ldr	r3, [pc, #236]	; (403f0c <ReadSlave+0x100>)
  403e1e:	4798      	blx	r3
	I2C_sendData(addressByte); 
  403e20:	4620      	mov	r0, r4
  403e22:	4b3b      	ldr	r3, [pc, #236]	; (403f10 <ReadSlave+0x104>)
  403e24:	4798      	blx	r3
	if(I2C_checkAck()!= ACK) {
  403e26:	4b3b      	ldr	r3, [pc, #236]	; (403f14 <ReadSlave+0x108>)
  403e28:	4798      	blx	r3
  403e2a:	2800      	cmp	r0, #0
  403e2c:	d147      	bne.n	403ebe <ReadSlave+0xb2>
	I2C_sendData(addrData); 
  403e2e:	4628      	mov	r0, r5
  403e30:	4b37      	ldr	r3, [pc, #220]	; (403f10 <ReadSlave+0x104>)
  403e32:	4798      	blx	r3
	if(I2C_checkAck()!= ACK) {
  403e34:	4b37      	ldr	r3, [pc, #220]	; (403f14 <ReadSlave+0x108>)
  403e36:	4798      	blx	r3
  403e38:	2800      	cmp	r0, #0
  403e3a:	d146      	bne.n	403eca <ReadSlave+0xbe>
	I2C_sendData(nByte); 
  403e3c:	4630      	mov	r0, r6
  403e3e:	4b34      	ldr	r3, [pc, #208]	; (403f10 <ReadSlave+0x104>)
  403e40:	4798      	blx	r3
	if(I2C_checkAck()!= ACK) {
  403e42:	4b34      	ldr	r3, [pc, #208]	; (403f14 <ReadSlave+0x108>)
  403e44:	4798      	blx	r3
  403e46:	2800      	cmp	r0, #0
  403e48:	d145      	bne.n	403ed6 <ReadSlave+0xca>
	checksum = ~((addressByte + addrData + nByte) % 256);
  403e4a:	1960      	adds	r0, r4, r5
  403e4c:	4430      	add	r0, r6
  403e4e:	4243      	negs	r3, r0
  403e50:	b2c0      	uxtb	r0, r0
  403e52:	b2db      	uxtb	r3, r3
  403e54:	bf58      	it	pl
  403e56:	4258      	negpl	r0, r3
  403e58:	43c0      	mvns	r0, r0
	I2C_sendData(checksum); 
  403e5a:	b2c0      	uxtb	r0, r0
  403e5c:	4b2c      	ldr	r3, [pc, #176]	; (403f10 <ReadSlave+0x104>)
  403e5e:	4798      	blx	r3
	if(I2C_checkAck()!= ACK) {
  403e60:	4b2c      	ldr	r3, [pc, #176]	; (403f14 <ReadSlave+0x108>)
  403e62:	4798      	blx	r3
  403e64:	2800      	cmp	r0, #0
  403e66:	d13c      	bne.n	403ee2 <ReadSlave+0xd6>
	delay_us (DELAY_1_CLOCK); 
  403e68:	f240 5095 	movw	r0, #1429	; 0x595
  403e6c:	4b2a      	ldr	r3, [pc, #168]	; (403f18 <ReadSlave+0x10c>)
  403e6e:	4798      	blx	r3
	I2C_sendStart();
  403e70:	4b26      	ldr	r3, [pc, #152]	; (403f0c <ReadSlave+0x100>)
  403e72:	4798      	blx	r3
	I2C_sendData(i); 
  403e74:	4620      	mov	r0, r4
  403e76:	4b26      	ldr	r3, [pc, #152]	; (403f10 <ReadSlave+0x104>)
  403e78:	4798      	blx	r3
	if(I2C_checkAck()!= ACK)
  403e7a:	4b26      	ldr	r3, [pc, #152]	; (403f14 <ReadSlave+0x108>)
  403e7c:	4798      	blx	r3
  403e7e:	2800      	cmp	r0, #0
  403e80:	d135      	bne.n	403eee <ReadSlave+0xe2>
	for(i=0; i < nByte; i++) {  
  403e82:	b18e      	cbz	r6, 403ea8 <ReadSlave+0x9c>
  403e84:	1e7d      	subs	r5, r7, #1
  403e86:	3e01      	subs	r6, #1
  403e88:	fa57 f686 	uxtab	r6, r7, r6
		pDataRD[i] = I2C_readData();
  403e8c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 403f20 <ReadSlave+0x114>
		I2C_sendAck(); 
  403e90:	4f22      	ldr	r7, [pc, #136]	; (403f1c <ReadSlave+0x110>)
		pDataRD[i] = I2C_readData();
  403e92:	47c0      	blx	r8
  403e94:	f805 0f01 	strb.w	r0, [r5, #1]!
		temp += pDataRD[i];
  403e98:	4420      	add	r0, r4
  403e9a:	b2c4      	uxtb	r4, r0
		I2C_sendAck(); 
  403e9c:	47b8      	blx	r7
	for(i=0; i < nByte; i++) {  
  403e9e:	42ae      	cmp	r6, r5
  403ea0:	d1f7      	bne.n	403e92 <ReadSlave+0x86>
		checksum_calc = ~temp;
  403ea2:	43e0      	mvns	r0, r4
  403ea4:	fa5f f880 	uxtb.w	r8, r0
	checksum = I2C_readData();
  403ea8:	4b1d      	ldr	r3, [pc, #116]	; (403f20 <ReadSlave+0x114>)
  403eaa:	4798      	blx	r3
	if(checksum != checksum_calc) { 
  403eac:	4540      	cmp	r0, r8
  403eae:	d124      	bne.n	403efa <ReadSlave+0xee>
		I2C_sendAck(); // OK: send NOT-acknowledge
  403eb0:	4b1a      	ldr	r3, [pc, #104]	; (403f1c <ReadSlave+0x110>)
  403eb2:	4798      	blx	r3
	I2C_sendStop(); 
  403eb4:	4b1b      	ldr	r3, [pc, #108]	; (403f24 <ReadSlave+0x118>)
  403eb6:	4798      	blx	r3
	return 1; // tutto OK. 
  403eb8:	2001      	movs	r0, #1
}
  403eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		I2C_sendStop(); 
  403ebe:	4b19      	ldr	r3, [pc, #100]	; (403f24 <ReadSlave+0x118>)
  403ec0:	4798      	blx	r3
		return _ERROR_READ_ACK;
  403ec2:	f06f 0004 	mvn.w	r0, #4
  403ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		I2C_sendStop(); 
  403eca:	4b16      	ldr	r3, [pc, #88]	; (403f24 <ReadSlave+0x118>)
  403ecc:	4798      	blx	r3
		return _ERROR_READ_ACK;
  403ece:	f06f 0004 	mvn.w	r0, #4
  403ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		I2C_sendStop();  
  403ed6:	4b13      	ldr	r3, [pc, #76]	; (403f24 <ReadSlave+0x118>)
  403ed8:	4798      	blx	r3
		return _ERROR_READ_ACK; 
  403eda:	f06f 0004 	mvn.w	r0, #4
  403ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		I2C_sendStop();  
  403ee2:	4b10      	ldr	r3, [pc, #64]	; (403f24 <ReadSlave+0x118>)
  403ee4:	4798      	blx	r3
		return -11; //_ERROR_CKSUM; 
  403ee6:	f06f 000a 	mvn.w	r0, #10
  403eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		I2C_sendStop(); 
  403eee:	4b0d      	ldr	r3, [pc, #52]	; (403f24 <ReadSlave+0x118>)
  403ef0:	4798      	blx	r3
		return _ERROR_READ_ACK;  
  403ef2:	f06f 0004 	mvn.w	r0, #4
  403ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		I2C_sendNak(); // errore Cksum : send acknowledge 
  403efa:	4b0b      	ldr	r3, [pc, #44]	; (403f28 <ReadSlave+0x11c>)
  403efc:	4798      	blx	r3
		I2C_sendStop(); 
  403efe:	4b09      	ldr	r3, [pc, #36]	; (403f24 <ReadSlave+0x118>)
  403f00:	4798      	blx	r3
		return _ERROR_CKSUM;
  403f02:	f06f 0002 	mvn.w	r0, #2
  403f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f0a:	bf00      	nop
  403f0c:	00403b25 	.word	0x00403b25
  403f10:	00403c81 	.word	0x00403c81
  403f14:	00403c09 	.word	0x00403c09
  403f18:	20000001 	.word	0x20000001
  403f1c:	00403b91 	.word	0x00403b91
  403f20:	00403d75 	.word	0x00403d75
  403f24:	00403b55 	.word	0x00403b55
  403f28:	00403bd1 	.word	0x00403bd1

00403f2c <coeff_sbil>:
{
  
  int dt;
  float value_ret = 1.0;  // % di sbilanciamento tra FanR & FanF < 1 FanF diminusce
  
  dt = Tr-Tf;
  403f2c:	1a09      	subs	r1, r1, r0
  
  if (Tf <= -50 && Tf >-100)       // per temperatura in ingresso compresa tra -5.0 C & -10.0 C
  403f2e:	b283      	uxth	r3, r0
  403f30:	f103 0263 	add.w	r2, r3, #99	; 0x63
  403f34:	b292      	uxth	r2, r2
  403f36:	2a31      	cmp	r2, #49	; 0x31
  403f38:	d812      	bhi.n	403f60 <coeff_sbil+0x34>
  {
      if (dt > 250)   // differenza di temp. > di 25.0
  403f3a:	29fa      	cmp	r1, #250	; 0xfa
        value_ret = 0.93;   // i motori F vanno al 93% rispetto quelli R 100%  
  403f3c:	bfcc      	ite	gt
  403f3e:	4824      	ldrgt	r0, [pc, #144]	; (403fd0 <coeff_sbil+0xa4>)
  float value_ret = 1.0;  // % di sbilanciamento tra FanR & FanF < 1 FanF diminusce
  403f40:	f04f 507e 	movle.w	r0, #1065353216	; 0x3f800000
      if (dt <= 250 && dt > 225) 
  403f44:	f1a1 03e2 	sub.w	r3, r1, #226	; 0xe2
  403f48:	2b18      	cmp	r3, #24
        value_ret = 0.85;
  403f4a:	bf98      	it	ls
  403f4c:	4821      	ldrls	r0, [pc, #132]	; (403fd4 <coeff_sbil+0xa8>)
      if (dt <= 225 && dt > 200) 
  403f4e:	f1a1 03c9 	sub.w	r3, r1, #201	; 0xc9
  403f52:	2b18      	cmp	r3, #24
        value_ret = 0.66;   
  403f54:	bf98      	it	ls
  403f56:	4820      	ldrls	r0, [pc, #128]	; (403fd8 <coeff_sbil+0xac>)
      if (dt <= 200) 
  403f58:	29c8      	cmp	r1, #200	; 0xc8
  403f5a:	dc37      	bgt.n	403fcc <coeff_sbil+0xa0>
        value_ret = 0.59;
  403f5c:	481f      	ldr	r0, [pc, #124]	; (403fdc <coeff_sbil+0xb0>)
  403f5e:	4770      	bx	lr
  }
  else if (Tf <= -100 && Tf>-150) // per temperatura in ingresso compresa tra -10.0 C & -15.0 C
  403f60:	3395      	adds	r3, #149	; 0x95
  403f62:	b29b      	uxth	r3, r3
  403f64:	2b31      	cmp	r3, #49	; 0x31
  403f66:	d816      	bhi.n	403f96 <coeff_sbil+0x6a>
  {
      if (dt > 300) 
  403f68:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
        value_ret = 0.88;    
  403f6c:	bfcc      	ite	gt
  403f6e:	481c      	ldrgt	r0, [pc, #112]	; (403fe0 <coeff_sbil+0xb4>)
  float value_ret = 1.0;  // % di sbilanciamento tra FanR & FanF < 1 FanF diminusce
  403f70:	f04f 507e 	movle.w	r0, #1065353216	; 0x3f800000
      if (dt <= 300 && dt>250) 
  403f74:	f1a1 03fb 	sub.w	r3, r1, #251	; 0xfb
  403f78:	2b31      	cmp	r3, #49	; 0x31
        value_ret = 0.75;
  403f7a:	bf98      	it	ls
  403f7c:	f04f 507d 	movls.w	r0, #1061158912	; 0x3f400000
      if (dt <= 250 && dt>200) 
  403f80:	f1a1 03c9 	sub.w	r3, r1, #201	; 0xc9
  403f84:	2b31      	cmp	r3, #49	; 0x31
        value_ret = 0.5;   
  403f86:	bf98      	it	ls
  403f88:	f04f 507c 	movls.w	r0, #1056964608	; 0x3f000000
      if (dt <= 200) 
  403f8c:	29c8      	cmp	r1, #200	; 0xc8
  403f8e:	dc1d      	bgt.n	403fcc <coeff_sbil+0xa0>
        value_ret = 0.25;
  403f90:	f04f 507a 	mov.w	r0, #1048576000	; 0x3e800000
  403f94:	4770      	bx	lr
  }
  else if (Tf <= -150)            // per temperatura in ingresso minore di -15.0 C
  403f96:	f110 0f95 	cmn.w	r0, #149	; 0x95
  403f9a:	da15      	bge.n	403fc8 <coeff_sbil+0x9c>
  {
      if (dt > 350) 
  403f9c:	f5b1 7faf 	cmp.w	r1, #350	; 0x15e
        value_ret = 0.75;    
  403fa0:	bfcc      	ite	gt
  403fa2:	f04f 507d 	movgt.w	r0, #1061158912	; 0x3f400000
  float value_ret = 1.0;  // % di sbilanciamento tra FanR & FanF < 1 FanF diminusce
  403fa6:	f04f 507e 	movle.w	r0, #1065353216	; 0x3f800000
      if (dt <= 350 && dt>325) 
  403faa:	f5a1 73a3 	sub.w	r3, r1, #326	; 0x146
  403fae:	2b18      	cmp	r3, #24
        value_ret = 0.55;
  403fb0:	bf98      	it	ls
  403fb2:	480c      	ldrls	r0, [pc, #48]	; (403fe4 <coeff_sbil+0xb8>)
      if (dt <= 325 && dt>300) 
  403fb4:	f2a1 132d 	subw	r3, r1, #301	; 0x12d
  403fb8:	2b18      	cmp	r3, #24
        value_ret = 0.44;   
  403fba:	bf98      	it	ls
  403fbc:	480a      	ldrls	r0, [pc, #40]	; (403fe8 <coeff_sbil+0xbc>)
      if (dt <= 300) 
  403fbe:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
  403fc2:	dc03      	bgt.n	403fcc <coeff_sbil+0xa0>
        value_ret = 0.33;
  403fc4:	4809      	ldr	r0, [pc, #36]	; (403fec <coeff_sbil+0xc0>)
  403fc6:	4770      	bx	lr
  float value_ret = 1.0;  // % di sbilanciamento tra FanR & FanF < 1 FanF diminusce
  403fc8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    }
    
  return value_ret; 
}
  403fcc:	4770      	bx	lr
  403fce:	bf00      	nop
  403fd0:	3f6e147b 	.word	0x3f6e147b
  403fd4:	3f59999a 	.word	0x3f59999a
  403fd8:	3f28f5c3 	.word	0x3f28f5c3
  403fdc:	3f170a3d 	.word	0x3f170a3d
  403fe0:	3f6147ae 	.word	0x3f6147ae
  403fe4:	3f0ccccd 	.word	0x3f0ccccd
  403fe8:	3ee147ae 	.word	0x3ee147ae
  403fec:	3ea8f5c3 	.word	0x3ea8f5c3

00403ff0 <deFrostFunc>:

//--------------------------------------------------------------------
// Funzione defrost (sbrinatore)
//--------------------------------------------------------------------
void deFrostFunc()
{
  403ff0:	b538      	push	{r3, r4, r5, lr}
   Byte nNtc = 2;

  
   nNtc = read_byte_eeprom(ADDR_EEP(numNTC));
  403ff2:	2040      	movs	r0, #64	; 0x40
  403ff4:	4c96      	ldr	r4, [pc, #600]	; (404250 <deFrostFunc+0x260>)
  403ff6:	47a0      	blx	r4
  403ff8:	4605      	mov	r5, r0
   
   if(read_byte_eeprom(ADDR_EEP(SerialString[7])) == '6')
  403ffa:	2012      	movs	r0, #18
  403ffc:	47a0      	blx	r4
  403ffe:	2836      	cmp	r0, #54	; 0x36
  404000:	f000 817b 	beq.w	4042fa <deFrostFunc+0x30a>
		return;
   
   
   if (AccessoryPresent_EepList(ACC_EEP_DXD) && sData.RegDXD.defrost_on)
  404004:	2007      	movs	r0, #7
  404006:	4b93      	ldr	r3, [pc, #588]	; (404254 <deFrostFunc+0x264>)
  404008:	4798      	blx	r3
  40400a:	b348      	cbz	r0, 404060 <deFrostFunc+0x70>
  40400c:	4b92      	ldr	r3, [pc, #584]	; (404258 <deFrostFunc+0x268>)
  40400e:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
  404012:	b32b      	cbz	r3, 404060 <deFrostFunc+0x70>
   {
#ifdef VIEW_MOTORSPEED_DBG  //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg           
       Serial_println1(" <<< Defrost by DXD >>>");  
#endif  //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg 
       // facciamo uno sbilanciamento, il motore di supply si riduce del 60%                 
       temp_speed_motorsF =(int)(0.4 * ((float)temp_speed_motorsR));
  404014:	4b91      	ldr	r3, [pc, #580]	; (40425c <deFrostFunc+0x26c>)
  404016:	781c      	ldrb	r4, [r3, #0]
  404018:	4620      	mov	r0, r4
  40401a:	4b91      	ldr	r3, [pc, #580]	; (404260 <deFrostFunc+0x270>)
  40401c:	4798      	blx	r3
  40401e:	4b91      	ldr	r3, [pc, #580]	; (404264 <deFrostFunc+0x274>)
  404020:	4798      	blx	r3
  404022:	a389      	add	r3, pc, #548	; (adr r3, 404248 <deFrostFunc+0x258>)
  404024:	e9d3 2300 	ldrd	r2, r3, [r3]
  404028:	4d8f      	ldr	r5, [pc, #572]	; (404268 <deFrostFunc+0x278>)
  40402a:	47a8      	blx	r5
  40402c:	4b8f      	ldr	r3, [pc, #572]	; (40426c <deFrostFunc+0x27c>)
  40402e:	4798      	blx	r3
  404030:	b2c0      	uxtb	r0, r0
  404032:	4b8f      	ldr	r3, [pc, #572]	; (404270 <deFrostFunc+0x280>)
  404034:	7018      	strb	r0, [r3, #0]
       
       if (temp_speed_motorsF < 51) {
  404036:	2832      	cmp	r0, #50	; 0x32
  404038:	d806      	bhi.n	404048 <deFrostFunc+0x58>
         temp_speed_motorsR += (51 - temp_speed_motorsF);
  40403a:	3433      	adds	r4, #51	; 0x33
  40403c:	1a20      	subs	r0, r4, r0
  40403e:	4b87      	ldr	r3, [pc, #540]	; (40425c <deFrostFunc+0x26c>)
  404040:	7018      	strb	r0, [r3, #0]
         temp_speed_motorsF = 51; 
  404042:	2233      	movs	r2, #51	; 0x33
  404044:	4b8a      	ldr	r3, [pc, #552]	; (404270 <deFrostFunc+0x280>)
  404046:	701a      	strb	r2, [r3, #0]
       }   
       
       sData.status_unit |= (1 << POS_BIT_DEFROST_OPERATING); 
  404048:	4a83      	ldr	r2, [pc, #524]	; (404258 <deFrostFunc+0x268>)
  40404a:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40404e:	f043 0302 	orr.w	r3, r3, #2
  404052:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
       count_sec_defrost = (SOGLIA_CICLO_DEFROST + 1);
  404056:	f240 42b1 	movw	r2, #1201	; 0x4b1
  40405a:	4b86      	ldr	r3, [pc, #536]	; (404274 <deFrostFunc+0x284>)
  40405c:	601a      	str	r2, [r3, #0]
       
       return;
  40405e:	bd38      	pop	{r3, r4, r5, pc}
   }  
   
   
   
   if ((sData.status_unit & (1 << POS_BIT_DEFROST_OPERATING)) && !(sData.status_test & MSK_TEST_ENABLE)) 
  404060:	4b7d      	ldr	r3, [pc, #500]	; (404258 <deFrostFunc+0x268>)
  404062:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  404066:	f013 0f02 	tst.w	r3, #2
  40406a:	f000 8123 	beq.w	4042b4 <deFrostFunc+0x2c4>
  40406e:	4a7a      	ldr	r2, [pc, #488]	; (404258 <deFrostFunc+0x268>)
  404070:	f8b2 21f2 	ldrh.w	r2, [r2, #498]	; 0x1f2
  404074:	f012 0f01 	tst.w	r2, #1
  404078:	f040 811c 	bne.w	4042b4 <deFrostFunc+0x2c4>
       Serial_print1("DeFrost ON: ");           
       Serial_print(count_sec_defrost, DEC);
#endif  //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg     
    
          
       if(count_sec_defrost > SOGLIA_CICLO_DEFROST) // 20 min. max
  40407c:	4a7d      	ldr	r2, [pc, #500]	; (404274 <deFrostFunc+0x284>)
  40407e:	6812      	ldr	r2, [r2, #0]
  404080:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
  404084:	dc12      	bgt.n	4040ac <deFrostFunc+0xbc>
         sData.status_unit &= ~(1 << POS_BIT_DEFROST_OPERATING); 
       else {
           // Calcola lo sbilanciamento e, verifica le condizioni per disattivare il defrost 
           switch(nNtc) {
  404086:	2d04      	cmp	r5, #4
  404088:	f040 8088 	bne.w	40419c <deFrostFunc+0x1ac>
               case 4:
                  if(CkAlarm(ALM_PTEXA_KO) || CkAlarm(ALM_MR1_NO_PWR) || CkAlarm(ALM_MF1_NO_PWR) || CkAlarm(ALM_MR1_NO_PULSE) || CkAlarm(ALM_MF1_NO_PULSE)) 
  40408c:	205b      	movs	r0, #91	; 0x5b
  40408e:	4b7a      	ldr	r3, [pc, #488]	; (404278 <deFrostFunc+0x288>)
  404090:	4798      	blx	r3
  404092:	b188      	cbz	r0, 4040b8 <deFrostFunc+0xc8>
				  {
                    sData.status_unit &= ~(1 << POS_BIT_DEFROST_OPERATING); 
  404094:	4a70      	ldr	r2, [pc, #448]	; (404258 <deFrostFunc+0x268>)
  404096:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40409a:	f023 0302 	bic.w	r3, r3, #2
  40409e:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4040a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4040a6:	4b75      	ldr	r3, [pc, #468]	; (40427c <deFrostFunc+0x28c>)
  4040a8:	635a      	str	r2, [r3, #52]	; 0x34
  4040aa:	bd38      	pop	{r3, r4, r5, pc}
         sData.status_unit &= ~(1 << POS_BIT_DEFROST_OPERATING); 
  4040ac:	f023 0302 	bic.w	r3, r3, #2
  4040b0:	4a69      	ldr	r2, [pc, #420]	; (404258 <deFrostFunc+0x268>)
  4040b2:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  4040b6:	bd38      	pop	{r3, r4, r5, pc}
                  if(CkAlarm(ALM_PTEXA_KO) || CkAlarm(ALM_MR1_NO_PWR) || CkAlarm(ALM_MF1_NO_PWR) || CkAlarm(ALM_MR1_NO_PULSE) || CkAlarm(ALM_MF1_NO_PULSE)) 
  4040b8:	2040      	movs	r0, #64	; 0x40
  4040ba:	4b6f      	ldr	r3, [pc, #444]	; (404278 <deFrostFunc+0x288>)
  4040bc:	4798      	blx	r3
  4040be:	2800      	cmp	r0, #0
  4040c0:	d1e8      	bne.n	404094 <deFrostFunc+0xa4>
  4040c2:	2048      	movs	r0, #72	; 0x48
  4040c4:	4b6c      	ldr	r3, [pc, #432]	; (404278 <deFrostFunc+0x288>)
  4040c6:	4798      	blx	r3
  4040c8:	2800      	cmp	r0, #0
  4040ca:	d1e3      	bne.n	404094 <deFrostFunc+0xa4>
  4040cc:	2044      	movs	r0, #68	; 0x44
  4040ce:	4b6a      	ldr	r3, [pc, #424]	; (404278 <deFrostFunc+0x288>)
  4040d0:	4798      	blx	r3
  4040d2:	2800      	cmp	r0, #0
  4040d4:	d1de      	bne.n	404094 <deFrostFunc+0xa4>
  4040d6:	204c      	movs	r0, #76	; 0x4c
  4040d8:	4b67      	ldr	r3, [pc, #412]	; (404278 <deFrostFunc+0x288>)
  4040da:	4798      	blx	r3
  4040dc:	2800      	cmp	r0, #0
  4040de:	d1d9      	bne.n	404094 <deFrostFunc+0xa4>
					//digitalWrite(pIPEHD, LOW);
					ioport_set_pin_level(pIPEHD, IOPORT_PIN_LEVEL_LOW);
                    return;
                  }  
                  
                  if(sData.measure_Temp[I_PROBE_EXHAUST] >= 50) {
  4040e0:	4b5d      	ldr	r3, [pc, #372]	; (404258 <deFrostFunc+0x268>)
  4040e2:	f9b3 31d3 	ldrsh.w	r3, [r3, #467]	; 0x1d3
  4040e6:	2b31      	cmp	r3, #49	; 0x31
  4040e8:	dd0e      	ble.n	404108 <deFrostFunc+0x118>
                     sData.status_unit &= ~(1 << POS_BIT_DEFROST_OPERATING);
  4040ea:	4a5b      	ldr	r2, [pc, #364]	; (404258 <deFrostFunc+0x268>)
  4040ec:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4040f0:	f023 0302 	bic.w	r3, r3, #2
  4040f4:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
                     persist_temp_defrost_on = 0;
  4040f8:	2200      	movs	r2, #0
  4040fa:	4b61      	ldr	r3, [pc, #388]	; (404280 <deFrostFunc+0x290>)
  4040fc:	601a      	str	r2, [r3, #0]
  4040fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  404102:	4b5e      	ldr	r3, [pc, #376]	; (40427c <deFrostFunc+0x28c>)
  404104:	635a      	str	r2, [r3, #52]	; 0x34
  404106:	e06a      	b.n	4041de <deFrostFunc+0x1ee>
					 //digitalWrite(pIPEHD, LOW);
					 ioport_set_pin_level(pIPEHD, IOPORT_PIN_LEVEL_LOW);
                  }else {
                     // ogni minuto verifico lo sbilanciamento dei motori in funzione della temp. di EXUST 
                     if((count_sec_defrost % 50) == 0)  { // 50 * 1,2 = 60 sec.
  404108:	4b5a      	ldr	r3, [pc, #360]	; (404274 <deFrostFunc+0x284>)
  40410a:	6819      	ldr	r1, [r3, #0]
  40410c:	2232      	movs	r2, #50	; 0x32
  40410e:	fb91 f3f2 	sdiv	r3, r1, r2
  404112:	fb02 1313 	mls	r3, r2, r3, r1
  404116:	2b00      	cmp	r3, #0
  404118:	d161      	bne.n	4041de <deFrostFunc+0x1ee>
                       if(DigitAccessoryOn(ACC_I2C_PREHEATER)) {
  40411a:	2002      	movs	r0, #2
  40411c:	4b59      	ldr	r3, [pc, #356]	; (404284 <deFrostFunc+0x294>)
  40411e:	4798      	blx	r3
  404120:	b118      	cbz	r0, 40412a <deFrostFunc+0x13a>
                          unbalance_deFrost = 0.85;   
  404122:	4a59      	ldr	r2, [pc, #356]	; (404288 <deFrostFunc+0x298>)
  404124:	4b59      	ldr	r3, [pc, #356]	; (40428c <deFrostFunc+0x29c>)
  404126:	601a      	str	r2, [r3, #0]
  404128:	e065      	b.n	4041f6 <deFrostFunc+0x206>
                       }else if (sData.measure_Temp[I_PROBE_EXHAUST] <= -60) 
  40412a:	4b4b      	ldr	r3, [pc, #300]	; (404258 <deFrostFunc+0x268>)
  40412c:	f9b3 31d3 	ldrsh.w	r3, [r3, #467]	; 0x1d3
  404130:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
  404134:	da07      	bge.n	404146 <deFrostFunc+0x156>
						{
                          unbalance_deFrost = 0.35;   // Motor F al 35% rispetto al Motor R
  404136:	4a56      	ldr	r2, [pc, #344]	; (404290 <deFrostFunc+0x2a0>)
  404138:	4b54      	ldr	r3, [pc, #336]	; (40428c <deFrostFunc+0x29c>)
  40413a:	601a      	str	r2, [r3, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40413c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  404140:	4b4e      	ldr	r3, [pc, #312]	; (40427c <deFrostFunc+0x28c>)
  404142:	631a      	str	r2, [r3, #48]	; 0x30
  404144:	e057      	b.n	4041f6 <deFrostFunc+0x206>
						  //digitalWrite(pIPEHD, HIGH);
						  ioport_set_pin_level(pIPEHD, IOPORT_PIN_LEVEL_HIGH);
						}
                       else if (sData.measure_Temp[I_PROBE_EXHAUST] < -40) 
  404146:	f113 0f28 	cmn.w	r3, #40	; 0x28
  40414a:	da07      	bge.n	40415c <deFrostFunc+0x16c>
					   {
                          unbalance_deFrost = 0.45;   // Motor F al 45% rispetto al Motor R
  40414c:	4a51      	ldr	r2, [pc, #324]	; (404294 <deFrostFunc+0x2a4>)
  40414e:	4b4f      	ldr	r3, [pc, #316]	; (40428c <deFrostFunc+0x29c>)
  404150:	601a      	str	r2, [r3, #0]
  404152:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  404156:	4b49      	ldr	r3, [pc, #292]	; (40427c <deFrostFunc+0x28c>)
  404158:	631a      	str	r2, [r3, #48]	; 0x30
  40415a:	e04c      	b.n	4041f6 <deFrostFunc+0x206>
						  //digitalWrite(pIPEHD, HIGH);
						  ioport_set_pin_level(pIPEHD, IOPORT_PIN_LEVEL_HIGH);
					   }
                       else if(sData.measure_Temp[I_PROBE_EXHAUST] < -20)
  40415c:	f113 0f14 	cmn.w	r3, #20
  404160:	da07      	bge.n	404172 <deFrostFunc+0x182>
					   {
                          unbalance_deFrost = 0.60;   // Motor F al 60% rispetto al Motor R
  404162:	4a4d      	ldr	r2, [pc, #308]	; (404298 <deFrostFunc+0x2a8>)
  404164:	4b49      	ldr	r3, [pc, #292]	; (40428c <deFrostFunc+0x29c>)
  404166:	601a      	str	r2, [r3, #0]
  404168:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40416c:	4b43      	ldr	r3, [pc, #268]	; (40427c <deFrostFunc+0x28c>)
  40416e:	631a      	str	r2, [r3, #48]	; 0x30
  404170:	e041      	b.n	4041f6 <deFrostFunc+0x206>
						  //digitalWrite(pIPEHD, HIGH);
						  ioport_set_pin_level(pIPEHD, IOPORT_PIN_LEVEL_HIGH);
					   }
                       else if (sData.measure_Temp[I_PROBE_EXHAUST] <  0)
  404172:	2b00      	cmp	r3, #0
  404174:	da08      	bge.n	404188 <deFrostFunc+0x198>
					   {
                          unbalance_deFrost = 0.75;   // Motor F al 75% rispetto al Motor R
  404176:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
  40417a:	4b44      	ldr	r3, [pc, #272]	; (40428c <deFrostFunc+0x29c>)
  40417c:	601a      	str	r2, [r3, #0]
  40417e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  404182:	4b3e      	ldr	r3, [pc, #248]	; (40427c <deFrostFunc+0x28c>)
  404184:	631a      	str	r2, [r3, #48]	; 0x30
  404186:	e036      	b.n	4041f6 <deFrostFunc+0x206>
						  //digitalWrite(pIPEHD, HIGH);
						  ioport_set_pin_level(pIPEHD, IOPORT_PIN_LEVEL_HIGH);
					   }
                       else if (sData.measure_Temp[I_PROBE_EXHAUST] < 30) 
  404188:	2b1d      	cmp	r3, #29
  40418a:	dc28      	bgt.n	4041de <deFrostFunc+0x1ee>
					   {
                          unbalance_deFrost = 0.90;   // Motor F al 85% rispetto al Motor R
  40418c:	4a43      	ldr	r2, [pc, #268]	; (40429c <deFrostFunc+0x2ac>)
  40418e:	4b3f      	ldr	r3, [pc, #252]	; (40428c <deFrostFunc+0x29c>)
  404190:	601a      	str	r2, [r3, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404192:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  404196:	4b39      	ldr	r3, [pc, #228]	; (40427c <deFrostFunc+0x28c>)
  404198:	635a      	str	r2, [r3, #52]	; 0x34
  40419a:	e02c      	b.n	4041f6 <deFrostFunc+0x206>
               break;
               
               case 3:
                 // TODO: deFrost con 3 sonde               
               default:
                  if(CkAlarm(ALM_PTRET_KO) || CkAlarm(ALM_PTFRESH_KO) || (sData.measure_Temp[I_PROBE_FRESH] >= -4)) {
  40419c:	2059      	movs	r0, #89	; 0x59
  40419e:	4b36      	ldr	r3, [pc, #216]	; (404278 <deFrostFunc+0x288>)
  4041a0:	4798      	blx	r3
  4041a2:	b150      	cbz	r0, 4041ba <deFrostFunc+0x1ca>
                    sData.status_unit &= ~(1 << POS_BIT_DEFROST_OPERATING); 
  4041a4:	4a2c      	ldr	r2, [pc, #176]	; (404258 <deFrostFunc+0x268>)
  4041a6:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4041aa:	f023 0302 	bic.w	r3, r3, #2
  4041ae:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
                    persist_temp_defrost_on = 0;
  4041b2:	2200      	movs	r2, #0
  4041b4:	4b32      	ldr	r3, [pc, #200]	; (404280 <deFrostFunc+0x290>)
  4041b6:	601a      	str	r2, [r3, #0]
                    return;
  4041b8:	bd38      	pop	{r3, r4, r5, pc}
                  if(CkAlarm(ALM_PTRET_KO) || CkAlarm(ALM_PTFRESH_KO) || (sData.measure_Temp[I_PROBE_FRESH] >= -4)) {
  4041ba:	2058      	movs	r0, #88	; 0x58
  4041bc:	4b2e      	ldr	r3, [pc, #184]	; (404278 <deFrostFunc+0x288>)
  4041be:	4798      	blx	r3
  4041c0:	2800      	cmp	r0, #0
  4041c2:	d1ef      	bne.n	4041a4 <deFrostFunc+0x1b4>
  4041c4:	4b24      	ldr	r3, [pc, #144]	; (404258 <deFrostFunc+0x268>)
  4041c6:	f9b3 01cd 	ldrsh.w	r0, [r3, #461]	; 0x1cd
  4041ca:	f110 0f04 	cmn.w	r0, #4
  4041ce:	dae9      	bge.n	4041a4 <deFrostFunc+0x1b4>
                  }  
                  
                  unbalance_deFrost = coeff_sbil(sData.measure_Temp[I_PROBE_FRESH], sData.measure_Temp[I_PROBE_RETURN]);        
  4041d0:	4b21      	ldr	r3, [pc, #132]	; (404258 <deFrostFunc+0x268>)
  4041d2:	f9b3 11cf 	ldrsh.w	r1, [r3, #463]	; 0x1cf
  4041d6:	4b32      	ldr	r3, [pc, #200]	; (4042a0 <deFrostFunc+0x2b0>)
  4041d8:	4798      	blx	r3
  4041da:	4b2c      	ldr	r3, [pc, #176]	; (40428c <deFrostFunc+0x29c>)
  4041dc:	6018      	str	r0, [r3, #0]
                  Serial_print((float)sData.measure_Temp[I_PROBE_RETURN]/10, 1);
#endif  //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg                    
               break;     
           }
           
           if(unbalance_deFrost < 0.25)
  4041de:	4b2b      	ldr	r3, [pc, #172]	; (40428c <deFrostFunc+0x29c>)
  4041e0:	681c      	ldr	r4, [r3, #0]
  4041e2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
  4041e6:	4620      	mov	r0, r4
  4041e8:	4b2e      	ldr	r3, [pc, #184]	; (4042a4 <deFrostFunc+0x2b4>)
  4041ea:	4798      	blx	r3
  4041ec:	b300      	cbz	r0, 404230 <deFrostFunc+0x240>
             unbalance_deFrost = 0.25;  
  4041ee:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
  4041f2:	4b26      	ldr	r3, [pc, #152]	; (40428c <deFrostFunc+0x29c>)
  4041f4:	601a      	str	r2, [r3, #0]
           else if (unbalance_deFrost > 1.0)  
             unbalance_deFrost = 1.0;
                        
           temp_speed_motorsF =(int)(unbalance_deFrost * ((float)temp_speed_motorsR));
  4041f6:	4b19      	ldr	r3, [pc, #100]	; (40425c <deFrostFunc+0x26c>)
  4041f8:	781c      	ldrb	r4, [r3, #0]
  4041fa:	4620      	mov	r0, r4
  4041fc:	4b18      	ldr	r3, [pc, #96]	; (404260 <deFrostFunc+0x270>)
  4041fe:	4798      	blx	r3
  404200:	4b22      	ldr	r3, [pc, #136]	; (40428c <deFrostFunc+0x29c>)
  404202:	6819      	ldr	r1, [r3, #0]
  404204:	4b28      	ldr	r3, [pc, #160]	; (4042a8 <deFrostFunc+0x2b8>)
  404206:	4798      	blx	r3
  404208:	4b28      	ldr	r3, [pc, #160]	; (4042ac <deFrostFunc+0x2bc>)
  40420a:	4798      	blx	r3
  40420c:	b2c0      	uxtb	r0, r0
  40420e:	4b18      	ldr	r3, [pc, #96]	; (404270 <deFrostFunc+0x280>)
  404210:	7018      	strb	r0, [r3, #0]
           
           if (temp_speed_motorsF < 51) {
  404212:	2832      	cmp	r0, #50	; 0x32
  404214:	d807      	bhi.n	404226 <deFrostFunc+0x236>
             temp_speed_motorsR += (51 - temp_speed_motorsF);
  404216:	f104 0333 	add.w	r3, r4, #51	; 0x33
  40421a:	1a1b      	subs	r3, r3, r0
  40421c:	4a0f      	ldr	r2, [pc, #60]	; (40425c <deFrostFunc+0x26c>)
  40421e:	7013      	strb	r3, [r2, #0]
             temp_speed_motorsF = 51; 
  404220:	2233      	movs	r2, #51	; 0x33
  404222:	4b13      	ldr	r3, [pc, #76]	; (404270 <deFrostFunc+0x280>)
  404224:	701a      	strb	r2, [r3, #0]
           }   
     
           count_sec_defrost++;       
  404226:	4a13      	ldr	r2, [pc, #76]	; (404274 <deFrostFunc+0x284>)
  404228:	6813      	ldr	r3, [r2, #0]
  40422a:	3301      	adds	r3, #1
  40422c:	6013      	str	r3, [r2, #0]
  40422e:	bd38      	pop	{r3, r4, r5, pc}
           else if (unbalance_deFrost > 1.0)  
  404230:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404234:	4620      	mov	r0, r4
  404236:	4b1e      	ldr	r3, [pc, #120]	; (4042b0 <deFrostFunc+0x2c0>)
  404238:	4798      	blx	r3
  40423a:	2800      	cmp	r0, #0
  40423c:	d0db      	beq.n	4041f6 <deFrostFunc+0x206>
             unbalance_deFrost = 1.0;
  40423e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  404242:	4b12      	ldr	r3, [pc, #72]	; (40428c <deFrostFunc+0x29c>)
  404244:	601a      	str	r2, [r3, #0]
  404246:	e7d6      	b.n	4041f6 <deFrostFunc+0x206>
  404248:	9999999a 	.word	0x9999999a
  40424c:	3fd99999 	.word	0x3fd99999
  404250:	0040a26d 	.word	0x0040a26d
  404254:	00400175 	.word	0x00400175
  404258:	200013ac 	.word	0x200013ac
  40425c:	20000b99 	.word	0x20000b99
  404260:	0040d745 	.word	0x0040d745
  404264:	0040cea1 	.word	0x0040cea1
  404268:	0040cf49 	.word	0x0040cf49
  40426c:	0040d4a9 	.word	0x0040d4a9
  404270:	20000b98 	.word	0x20000b98
  404274:	20000b80 	.word	0x20000b80
  404278:	00403535 	.word	0x00403535
  40427c:	400e0e00 	.word	0x400e0e00
  404280:	20000b8c 	.word	0x20000b8c
  404284:	00400151 	.word	0x00400151
  404288:	3f59999a 	.word	0x3f59999a
  40428c:	2000002c 	.word	0x2000002c
  404290:	3eb33333 	.word	0x3eb33333
  404294:	3ee66666 	.word	0x3ee66666
  404298:	3f19999a 	.word	0x3f19999a
  40429c:	3f666666 	.word	0x3f666666
  4042a0:	00403f2d 	.word	0x00403f2d
  4042a4:	0040db31 	.word	0x0040db31
  4042a8:	0040d7f5 	.word	0x0040d7f5
  4042ac:	0040db81 	.word	0x0040db81
  4042b0:	0040db6d 	.word	0x0040db6d
       Serial_print1(" Sbil: ");           
       Serial_println(unbalance_deFrost,  2);
#endif  //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg                                         
    
   }else {   
        if(count_sec_defrost) {
  4042b4:	4a1d      	ldr	r2, [pc, #116]	; (40432c <deFrostFunc+0x33c>)
  4042b6:	6812      	ldr	r2, [r2, #0]
  4042b8:	b9a2      	cbnz	r2, 4042e4 <deFrostFunc+0x2f4>
           Serial_print1("DeFrost OFF: ");           
           Serial_print(count_sec_defrost, DEC);
#endif  //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg       
        }else {
           // Verifica le condizioni per attivare il defrost, in base alle sonde presenti 
           switch(nNtc) {
  4042ba:	2d04      	cmp	r5, #4
  4042bc:	d11e      	bne.n	4042fc <deFrostFunc+0x30c>
             case 4:
                if(sData.measure_Temp[I_PROBE_EXHAUST] <= 30) {
  4042be:	4a1c      	ldr	r2, [pc, #112]	; (404330 <deFrostFunc+0x340>)
  4042c0:	f9b2 21d3 	ldrsh.w	r2, [r2, #467]	; 0x1d3
  4042c4:	2a1e      	cmp	r2, #30
  4042c6:	dc11      	bgt.n	4042ec <deFrostFunc+0x2fc>
                  if(persist_temp_defrost_on++ > 3) {
  4042c8:	491a      	ldr	r1, [pc, #104]	; (404334 <deFrostFunc+0x344>)
  4042ca:	680a      	ldr	r2, [r1, #0]
  4042cc:	1c50      	adds	r0, r2, #1
  4042ce:	6008      	str	r0, [r1, #0]
  4042d0:	2a03      	cmp	r2, #3
  4042d2:	dd0e      	ble.n	4042f2 <deFrostFunc+0x302>
                     sData.status_unit |= (1 << POS_BIT_DEFROST_OPERATING); 
  4042d4:	f043 0302 	orr.w	r3, r3, #2
  4042d8:	4a15      	ldr	r2, [pc, #84]	; (404330 <deFrostFunc+0x340>)
  4042da:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
                     persist_temp_defrost_on = 4;
  4042de:	2204      	movs	r2, #4
  4042e0:	600a      	str	r2, [r1, #0]
  4042e2:	e006      	b.n	4042f2 <deFrostFunc+0x302>
           count_sec_defrost--; // finche' il contatore non va a 0 l'unita' lavora normalmente
  4042e4:	3a01      	subs	r2, #1
  4042e6:	4b11      	ldr	r3, [pc, #68]	; (40432c <deFrostFunc+0x33c>)
  4042e8:	601a      	str	r2, [r3, #0]
  4042ea:	bd38      	pop	{r3, r4, r5, pc}
                  }  
                }else
                  persist_temp_defrost_on = 0;  
  4042ec:	2200      	movs	r2, #0
  4042ee:	4b11      	ldr	r3, [pc, #68]	; (404334 <deFrostFunc+0x344>)
  4042f0:	601a      	str	r2, [r3, #0]
                }else
                  persist_temp_defrost_on = 0;                
             break;     
           }         
           
           unbalance_deFrost = 1.0;     
  4042f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  4042f6:	4b10      	ldr	r3, [pc, #64]	; (404338 <deFrostFunc+0x348>)
  4042f8:	601a      	str	r2, [r3, #0]
  4042fa:	bd38      	pop	{r3, r4, r5, pc}
                if(sData.measure_Temp[I_PROBE_FRESH] <= SOGLIA_TF_DEFROST) {
  4042fc:	4a0c      	ldr	r2, [pc, #48]	; (404330 <deFrostFunc+0x340>)
  4042fe:	f9b2 21cd 	ldrsh.w	r2, [r2, #461]	; 0x1cd
  404302:	f112 0f31 	cmn.w	r2, #49	; 0x31
  404306:	da0d      	bge.n	404324 <deFrostFunc+0x334>
                  if(persist_temp_defrost_on++ > 3) { 
  404308:	490a      	ldr	r1, [pc, #40]	; (404334 <deFrostFunc+0x344>)
  40430a:	680a      	ldr	r2, [r1, #0]
  40430c:	1c50      	adds	r0, r2, #1
  40430e:	6008      	str	r0, [r1, #0]
  404310:	2a03      	cmp	r2, #3
  404312:	ddee      	ble.n	4042f2 <deFrostFunc+0x302>
                      sData.status_unit |= (1 << POS_BIT_DEFROST_OPERATING);
  404314:	f043 0302 	orr.w	r3, r3, #2
  404318:	4a05      	ldr	r2, [pc, #20]	; (404330 <deFrostFunc+0x340>)
  40431a:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
                      persist_temp_defrost_on = 4;
  40431e:	2204      	movs	r2, #4
  404320:	600a      	str	r2, [r1, #0]
  404322:	e7e6      	b.n	4042f2 <deFrostFunc+0x302>
                  persist_temp_defrost_on = 0;                
  404324:	2200      	movs	r2, #0
  404326:	4b03      	ldr	r3, [pc, #12]	; (404334 <deFrostFunc+0x344>)
  404328:	601a      	str	r2, [r3, #0]
  40432a:	e7e2      	b.n	4042f2 <deFrostFunc+0x302>
  40432c:	20000b80 	.word	0x20000b80
  404330:	200013ac 	.word	0x200013ac
  404334:	20000b8c 	.word	0x20000b8c
  404338:	2000002c 	.word	0x2000002c
  40433c:	00000000 	.word	0x00000000

00404340 <calcDepot>:
//
//  il depotenziamento varia da 100% a 40%.
//
//--------------------------------------------------------------------
float calcDepot()
{                                 
  404340:	b538      	push	{r3, r4, r5, lr}
  float ret_coef = 1.0, depot; 
  
  depot = (float)read_byte_eeprom(ADDR_EEP(depotMotors));
  404342:	203f      	movs	r0, #63	; 0x3f
  404344:	4b0c      	ldr	r3, [pc, #48]	; (404378 <calcDepot+0x38>)
  404346:	4798      	blx	r3
  404348:	4b0c      	ldr	r3, [pc, #48]	; (40437c <calcDepot+0x3c>)
  40434a:	4798      	blx	r3
  
  ret_coef = depot / 100;
  40434c:	490c      	ldr	r1, [pc, #48]	; (404380 <calcDepot+0x40>)
  40434e:	4b0d      	ldr	r3, [pc, #52]	; (404384 <calcDepot+0x44>)
  404350:	4798      	blx	r3
  404352:	4604      	mov	r4, r0
  
  if(ret_coef < 0.4)
  404354:	4b0c      	ldr	r3, [pc, #48]	; (404388 <calcDepot+0x48>)
  404356:	4798      	blx	r3
  404358:	a305      	add	r3, pc, #20	; (adr r3, 404370 <calcDepot+0x30>)
  40435a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40435e:	4d0b      	ldr	r5, [pc, #44]	; (40438c <calcDepot+0x4c>)
  404360:	47a8      	blx	r5
  404362:	b100      	cbz	r0, 404366 <calcDepot+0x26>
     ret_coef = 0.4; // sotto il 40% non andiamo
  404364:	4c0a      	ldr	r4, [pc, #40]	; (404390 <calcDepot+0x50>)
   
  return ret_coef;   
}
  404366:	4620      	mov	r0, r4
  404368:	bd38      	pop	{r3, r4, r5, pc}
  40436a:	bf00      	nop
  40436c:	f3af 8000 	nop.w
  404370:	9999999a 	.word	0x9999999a
  404374:	3fd99999 	.word	0x3fd99999
  404378:	0040a26d 	.word	0x0040a26d
  40437c:	0040d745 	.word	0x0040d745
  404380:	42c80000 	.word	0x42c80000
  404384:	0040d95d 	.word	0x0040d95d
  404388:	0040cea1 	.word	0x0040cea1
  40438c:	0040d42d 	.word	0x0040d42d
  404390:	3ecccccd 	.word	0x3ecccccd

00404394 <ctrl_comand_inputs>:
//      0x11 = Input Config as (UNIT_ON/OFF | Allarme incendio) & Unit Stop 
//      0x10 = Input Config as UNIT_ON/OFF & Unit RUN   
//      0x00 = Input NO Config 
//------------------------------------------------------------------------------
byte ctrl_comand_inputs ()
{
  404394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404398:	b082      	sub	sp, #8
	// 11= 12V-> Unit STOP + messaggio: 'ALARM Incendio Ventilazione ferma'
	// 12= 12V-> Ventilazione MAX + messaggio:'ALARM Incendio Ventilazione al massimo'
	// 13= 12V-> Vent. Estrazione al Massimo, Immisione spenta + messaggio: 'ALARM Incendio Solo estrazione aria'
	// 14= 12V-> Vent. Immisione al Massimo, Estrazione spenta + messaggio: 'ALARM Incendio Solo estrazione aria'
	
	val_inp[0] = read_byte_eeprom(ADDR_EEP(Set_Input[0]));
  40439a:	204e      	movs	r0, #78	; 0x4e
  40439c:	4cb4      	ldr	r4, [pc, #720]	; (404670 <ctrl_comand_inputs+0x2dc>)
  40439e:	47a0      	blx	r4
  4043a0:	4605      	mov	r5, r0
  4043a2:	f88d 0004 	strb.w	r0, [sp, #4]
	val_inp[1] = read_byte_eeprom(ADDR_EEP(Set_Input[1]));
  4043a6:	204f      	movs	r0, #79	; 0x4f
  4043a8:	47a0      	blx	r4
  4043aa:	4606      	mov	r6, r0
  4043ac:	f88d 0005 	strb.w	r0, [sp, #5]
	m_reset    = read_byte_eeprom(ADDR_EEP(manual_reset));
  4043b0:	2079      	movs	r0, #121	; 0x79
  4043b2:	47a0      	blx	r4
  4043b4:	4607      	mov	r7, r0
	

	if((val_inp[0]==INP_12V_UNIT_STOP) || (val_inp[0]==INP_0V_UNIT_STOP) ||
  4043b6:	1e6b      	subs	r3, r5, #1
  4043b8:	b2db      	uxtb	r3, r3
  4043ba:	2b01      	cmp	r3, #1
  4043bc:	f240 81ba 	bls.w	404734 <ctrl_comand_inputs+0x3a0>
	(val_inp[1]==INP_12V_UNIT_STOP) || (val_inp[1]==INP_0V_UNIT_STOP))
  4043c0:	1e73      	subs	r3, r6, #1
  4043c2:	b2db      	uxtb	r3, r3
  4043c4:	2b01      	cmp	r3, #1
  4043c6:	f240 81cf 	bls.w	404768 <ctrl_comand_inputs+0x3d4>
	action_input = 0x10;
	else if  ((val_inp[0]==INP_REG_AIR_FLOW) || (val_inp[1]==INP_REG_AIR_FLOW))
  4043ca:	2d03      	cmp	r5, #3
  4043cc:	f000 81ce 	beq.w	40476c <ctrl_comand_inputs+0x3d8>
  4043d0:	2e03      	cmp	r6, #3
  4043d2:	f000 81cb 	beq.w	40476c <ctrl_comand_inputs+0x3d8>
	action_input = 0x80;
	else
	action_input = 0x00;
  4043d6:	2600      	movs	r6, #0
  4043d8:	e1ad      	b.n	404736 <ctrl_comand_inputs+0x3a2>
	else
	sData.status_unit  &= ~(word)(1<< POS_BIT_CMD_FAN_INPUT);
	
	
	for(int i=0; i < 2; i++) {
		if (val_inp[i] == INP_0V_UNIT_STOP) {
  4043da:	2400      	movs	r4, #0
			if (((PowerMotors == POWER_SAVE) && (sData.measure_ADC_input[i] < 750))  ||
  4043dc:	4ba5      	ldr	r3, [pc, #660]	; (404674 <ctrl_comand_inputs+0x2e0>)
  4043de:	781b      	ldrb	r3, [r3, #0]
  4043e0:	b973      	cbnz	r3, 404400 <ctrl_comand_inputs+0x6c>
  4043e2:	34e8      	adds	r4, #232	; 0xe8
  4043e4:	4ba4      	ldr	r3, [pc, #656]	; (404678 <ctrl_comand_inputs+0x2e4>)
  4043e6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  4043ea:	f9b3 2005 	ldrsh.w	r2, [r3, #5]
  4043ee:	f240 23ed 	movw	r3, #749	; 0x2ed
  4043f2:	429a      	cmp	r2, r3
  4043f4:	dc06      	bgt.n	404404 <ctrl_comand_inputs+0x70>
			}
			
		}
	}
	
	if (val_inp[0] == INP_0V_UNIT_STOP) {
  4043f6:	2d01      	cmp	r5, #1
  4043f8:	f040 81c1 	bne.w	40477e <ctrl_comand_inputs+0x3ea>
  4043fc:	2611      	movs	r6, #17
  4043fe:	e003      	b.n	404408 <ctrl_comand_inputs+0x74>
			if (((PowerMotors == POWER_SAVE) && (sData.measure_ADC_input[i] < 750))  ||
  404400:	2b4f      	cmp	r3, #79	; 0x4f
  404402:	d024      	beq.n	40444e <ctrl_comand_inputs+0xba>
	if (val_inp[0] == INP_0V_UNIT_STOP) {
  404404:	2d01      	cmp	r5, #1
  404406:	d13b      	bne.n	404480 <ctrl_comand_inputs+0xec>
		
		if ((pir_counter >= 15000) && !pir_counter_flag)
  404408:	4b9c      	ldr	r3, [pc, #624]	; (40467c <ctrl_comand_inputs+0x2e8>)
  40440a:	681a      	ldr	r2, [r3, #0]
  40440c:	f643 2397 	movw	r3, #14999	; 0x3a97
  404410:	429a      	cmp	r2, r3
  404412:	d905      	bls.n	404420 <ctrl_comand_inputs+0x8c>
  404414:	4b9a      	ldr	r3, [pc, #616]	; (404680 <ctrl_comand_inputs+0x2ec>)
  404416:	781b      	ldrb	r3, [r3, #0]
  404418:	b913      	cbnz	r3, 404420 <ctrl_comand_inputs+0x8c>
		{
			pir_counter_flag = true;
  40441a:	2201      	movs	r2, #1
  40441c:	4b98      	ldr	r3, [pc, #608]	; (404680 <ctrl_comand_inputs+0x2ec>)
  40441e:	701a      	strb	r2, [r3, #0]
		}

		PwrOff = read_byte_eeprom(ADDR_EEP(Set_Power_ON)); // 1 = power_on, 0 = standby
  404420:	204c      	movs	r0, #76	; 0x4c
  404422:	4b93      	ldr	r3, [pc, #588]	; (404670 <ctrl_comand_inputs+0x2dc>)
  404424:	4798      	blx	r3

		if (PwrOff == 1)
  404426:	2801      	cmp	r0, #1
  404428:	f000 80fc 	beq.w	404624 <ctrl_comand_inputs+0x290>
			Power_On_Already_Activated = false;
		}
		else
		{
			// WEEKLY attivo: salta PIR se in RUN, altrimenti esegui PIR
			if (sData.status_weekly & 0x01)
  40442c:	4b92      	ldr	r3, [pc, #584]	; (404678 <ctrl_comand_inputs+0x2e4>)
  40442e:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
  404432:	f013 0f01 	tst.w	r3, #1
  404436:	f000 814c 	beq.w	4046d2 <ctrl_comand_inputs+0x33e>
			{
				if (PowerMotors == POWER_ON)
  40443a:	4b8e      	ldr	r3, [pc, #568]	; (404674 <ctrl_comand_inputs+0x2e0>)
  40443c:	781b      	ldrb	r3, [r3, #0]
  40443e:	2b4f      	cmp	r3, #79	; 0x4f
  404440:	f000 8107 	beq.w	404652 <ctrl_comand_inputs+0x2be>
					Power_On_Already_Activated = false;
				}
				else
				{
					// L'unità è in STANDBY ? esegui PIR check
					if ((PowerMotors == POWER_SAVE) && (sData.measure_ADC_input[0] > 150))
  404444:	2b00      	cmp	r3, #0
  404446:	f000 810c 	beq.w	404662 <ctrl_comand_inputs+0x2ce>
  40444a:	2611      	movs	r6, #17
  40444c:	e01c      	b.n	404488 <ctrl_comand_inputs+0xf4>
			((PowerMotors == POWER_ON)   && (sData.measure_ADC_input[i] < 200)))
  40444e:	34e8      	adds	r4, #232	; 0xe8
  404450:	4b89      	ldr	r3, [pc, #548]	; (404678 <ctrl_comand_inputs+0x2e4>)
  404452:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  404456:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  40445a:	2bc7      	cmp	r3, #199	; 0xc7
  40445c:	ddcb      	ble.n	4043f6 <ctrl_comand_inputs+0x62>
  40445e:	e7d1      	b.n	404404 <ctrl_comand_inputs+0x70>
			}else if (val_inp[i] == INP_12V_UNIT_STOP) {
  404460:	2400      	movs	r4, #0
			if (((PowerMotors == POWER_SAVE) && (sData.measure_ADC_input[i] >= 200)) ||
  404462:	4b84      	ldr	r3, [pc, #528]	; (404674 <ctrl_comand_inputs+0x2e0>)
  404464:	781b      	ldrb	r3, [r3, #0]
  404466:	b94b      	cbnz	r3, 40447c <ctrl_comand_inputs+0xe8>
  404468:	34e8      	adds	r4, #232	; 0xe8
  40446a:	4b83      	ldr	r3, [pc, #524]	; (404678 <ctrl_comand_inputs+0x2e4>)
  40446c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  404470:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  404474:	2bc7      	cmp	r3, #199	; 0xc7
  404476:	dd03      	ble.n	404480 <ctrl_comand_inputs+0xec>
			action_input = 0x11;
  404478:	2611      	movs	r6, #17
  40447a:	e005      	b.n	404488 <ctrl_comand_inputs+0xf4>
			if (((PowerMotors == POWER_SAVE) && (sData.measure_ADC_input[i] >= 200)) ||
  40447c:	2b4f      	cmp	r3, #79	; 0x4f
  40447e:	d011      	beq.n	4044a4 <ctrl_comand_inputs+0x110>
				}
			}
		}
	}
	
	if(action_input & 0x01)
  404480:	f016 0f01 	tst.w	r6, #1
  404484:	f000 80dd 	beq.w	404642 <ctrl_comand_inputs+0x2ae>
	sData.status_unit  &= ~(word)(1 << POS_BIT_UNIT_RUN); // OFF
  404488:	4a7b      	ldr	r2, [pc, #492]	; (404678 <ctrl_comand_inputs+0x2e4>)
  40448a:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40448e:	f023 0301 	bic.w	r3, r3, #1
  404492:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
	else
	sData.status_unit |= (word)(1 << POS_BIT_UNIT_RUN);  // ON
	
	// Funzione fire disabilitata, togliamo gli allarmi
	if(action_input < 0x81)
  404496:	2e80      	cmp	r6, #128	; 0x80
  404498:	f240 8142 	bls.w	404720 <ctrl_comand_inputs+0x38c>
		RemoveAlarm(ALM_SMOKE_ONLY_EXT);
		RemoveAlarm(ALM_SMOKE_ONLY_SUP);
	}
	
	return action_input;
}
  40449c:	4630      	mov	r0, r6
  40449e:	b002      	add	sp, #8
  4044a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			((PowerMotors == POWER_ON)   && (sData.measure_ADC_input[i] >= 750)))
  4044a4:	34e8      	adds	r4, #232	; 0xe8
  4044a6:	4b74      	ldr	r3, [pc, #464]	; (404678 <ctrl_comand_inputs+0x2e4>)
  4044a8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  4044ac:	f9b3 2005 	ldrsh.w	r2, [r3, #5]
  4044b0:	f240 23ed 	movw	r3, #749	; 0x2ed
  4044b4:	429a      	cmp	r2, r3
  4044b6:	dde3      	ble.n	404480 <ctrl_comand_inputs+0xec>
			action_input = 0x11;
  4044b8:	2611      	movs	r6, #17
  4044ba:	e7e5      	b.n	404488 <ctrl_comand_inputs+0xf4>
			}else if (val_inp[i] == INP_REG_AIR_FLOW) {
  4044bc:	2400      	movs	r4, #0
			Analogic_speedMotors = ((sData.measure_ADC_input[i] + 3) >> 2); // V_input_max = 10.0V
  4044be:	34e8      	adds	r4, #232	; 0xe8
  4044c0:	4b6d      	ldr	r3, [pc, #436]	; (404678 <ctrl_comand_inputs+0x2e4>)
  4044c2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
  4044c6:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
  4044ca:	3303      	adds	r3, #3
  4044cc:	109b      	asrs	r3, r3, #2
			if(Analogic_speedMotors >= 52) {
  4044ce:	2b33      	cmp	r3, #51	; 0x33
  4044d0:	f340 8157 	ble.w	404782 <ctrl_comand_inputs+0x3ee>
				temp_speed_motorsR = Analogic_speedMotors;
  4044d4:	2bff      	cmp	r3, #255	; 0xff
  4044d6:	bfa8      	it	ge
  4044d8:	23ff      	movge	r3, #255	; 0xff
  4044da:	b2db      	uxtb	r3, r3
  4044dc:	4a69      	ldr	r2, [pc, #420]	; (404684 <ctrl_comand_inputs+0x2f0>)
  4044de:	7013      	strb	r3, [r2, #0]
				temp_speed_motorsF = Analogic_speedMotors;
  4044e0:	4a69      	ldr	r2, [pc, #420]	; (404688 <ctrl_comand_inputs+0x2f4>)
  4044e2:	7013      	strb	r3, [r2, #0]
				action_input = 0x80;  // ON
  4044e4:	2680      	movs	r6, #128	; 0x80
  4044e6:	e0ac      	b.n	404642 <ctrl_comand_inputs+0x2ae>
				if (sData.measure_ADC_input[i] >= 350)
  4044e8:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
  4044ec:	eb08 0343 	add.w	r3, r8, r3, lsl #1
  4044f0:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  4044f4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  4044f8:	da05      	bge.n	404506 <ctrl_comand_inputs+0x172>
					if( m_reset == 1)
  4044fa:	2f01      	cmp	r7, #1
  4044fc:	f000 8090 	beq.w	404620 <ctrl_comand_inputs+0x28c>
					RemoveAlarm(ALM_SMOKE_VENT_OFF);
  404500:	2038      	movs	r0, #56	; 0x38
  404502:	47c8      	blx	r9
  404504:	e025      	b.n	404552 <ctrl_comand_inputs+0x1be>
					RemoveAlarm(ALM_SMOKE_VENT_MAX);
  404506:	2039      	movs	r0, #57	; 0x39
  404508:	4c60      	ldr	r4, [pc, #384]	; (40468c <ctrl_comand_inputs+0x2f8>)
  40450a:	47a0      	blx	r4
					RemoveAlarm(ALM_SMOKE_ONLY_SUP);
  40450c:	203b      	movs	r0, #59	; 0x3b
  40450e:	47a0      	blx	r4
					RemoveAlarm(ALM_SMOKE_ONLY_EXT);
  404510:	203a      	movs	r0, #58	; 0x3a
  404512:	47a0      	blx	r4
					InsertAlarm(ALM_SMOKE_VENT_OFF);
  404514:	2038      	movs	r0, #56	; 0x38
  404516:	4b5e      	ldr	r3, [pc, #376]	; (404690 <ctrl_comand_inputs+0x2fc>)
  404518:	4798      	blx	r3
					if (m_reset == 0)
  40451a:	b10f      	cbz	r7, 404520 <ctrl_comand_inputs+0x18c>
					action_input = 0x81;
  40451c:	2681      	movs	r6, #129	; 0x81
  40451e:	e7b3      	b.n	404488 <ctrl_comand_inputs+0xf4>
						cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  404520:	207e      	movs	r0, #126	; 0x7e
  404522:	4b53      	ldr	r3, [pc, #332]	; (404670 <ctrl_comand_inputs+0x2dc>)
  404524:	4798      	blx	r3
  404526:	4604      	mov	r4, r0
						write_byte_eeprom(ADDR_EEP(manual_reset),1); //Alzo il riarmo manuale
  404528:	2101      	movs	r1, #1
  40452a:	2079      	movs	r0, #121	; 0x79
  40452c:	4d59      	ldr	r5, [pc, #356]	; (404694 <ctrl_comand_inputs+0x300>)
  40452e:	47a8      	blx	r5
						cntUpdate_SettingPar++;
  404530:	1c61      	adds	r1, r4, #1
						write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  404532:	b2c9      	uxtb	r1, r1
  404534:	207e      	movs	r0, #126	; 0x7e
  404536:	47a8      	blx	r5
					action_input = 0x81;
  404538:	2681      	movs	r6, #129	; 0x81
  40453a:	e7a5      	b.n	404488 <ctrl_comand_inputs+0xf4>
				if(sData.measure_ADC_input[i] >= 400) {
  40453c:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
  404540:	eb08 0343 	add.w	r3, r8, r3, lsl #1
  404544:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  404548:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
  40454c:	da27      	bge.n	40459e <ctrl_comand_inputs+0x20a>
				RemoveAlarm(ALM_SMOKE_VENT_MAX);
  40454e:	2039      	movs	r0, #57	; 0x39
  404550:	47c8      	blx	r9
	for(int i=0; i < 2; i++) {
  404552:	3401      	adds	r4, #1
  404554:	2c02      	cmp	r4, #2
  404556:	d093      	beq.n	404480 <ctrl_comand_inputs+0xec>
		if (val_inp[i] == INP_0V_UNIT_STOP) {
  404558:	ab01      	add	r3, sp, #4
  40455a:	5ce3      	ldrb	r3, [r4, r3]
  40455c:	2b01      	cmp	r3, #1
  40455e:	f43f af3d 	beq.w	4043dc <ctrl_comand_inputs+0x48>
			}else if (val_inp[i] == INP_12V_UNIT_STOP) {
  404562:	2b02      	cmp	r3, #2
  404564:	f43f af7d 	beq.w	404462 <ctrl_comand_inputs+0xce>
			}else if (val_inp[i] == INP_REG_AIR_FLOW) {
  404568:	2b03      	cmp	r3, #3
  40456a:	d0a8      	beq.n	4044be <ctrl_comand_inputs+0x12a>
			}else if((val_inp[i] >= INP_12V_ALM_FIRE_UNIT_STOP) && (val_inp[i] <= INP_12V_ALM_FIRE_ONLY_SUPPLY)) {  // Entro nel caso: è scattato l'allarme incendio (indipendentemente dalla modalità scelta)
  40456c:	f1a3 020b 	sub.w	r2, r3, #11
  404570:	b2d2      	uxtb	r2, r2
  404572:	2a03      	cmp	r2, #3
  404574:	d8ed      	bhi.n	404552 <ctrl_comand_inputs+0x1be>
			if(val_inp[i] == INP_12V_ALM_FIRE_UNIT_STOP){
  404576:	2b0b      	cmp	r3, #11
  404578:	d0b6      	beq.n	4044e8 <ctrl_comand_inputs+0x154>
				}else if (val_inp[i] == INP_12V_ALM_FIRE_VENT_MAX){
  40457a:	2b0c      	cmp	r3, #12
  40457c:	d0de      	beq.n	40453c <ctrl_comand_inputs+0x1a8>
				}else if (val_inp[i] == INP_12V_ALM_FIRE_ONLY_EXTRACT){
  40457e:	2b0d      	cmp	r3, #13
  404580:	d01e      	beq.n	4045c0 <ctrl_comand_inputs+0x22c>
				}else if (val_inp[i] == INP_12V_ALM_FIRE_ONLY_SUPPLY){
  404582:	2b0e      	cmp	r3, #14
  404584:	d1e5      	bne.n	404552 <ctrl_comand_inputs+0x1be>
				if(sData.measure_ADC_input[i] >= 400) {
  404586:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
  40458a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
  40458e:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  404592:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
  404596:	da31      	bge.n	4045fc <ctrl_comand_inputs+0x268>
				RemoveAlarm(ALM_SMOKE_ONLY_SUP);
  404598:	4650      	mov	r0, sl
  40459a:	47c8      	blx	r9
  40459c:	e7d9      	b.n	404552 <ctrl_comand_inputs+0x1be>
					temp_speed_motorsR = 255;
  40459e:	23ff      	movs	r3, #255	; 0xff
  4045a0:	4a38      	ldr	r2, [pc, #224]	; (404684 <ctrl_comand_inputs+0x2f0>)
  4045a2:	7013      	strb	r3, [r2, #0]
					temp_speed_motorsF = 255;
  4045a4:	4a38      	ldr	r2, [pc, #224]	; (404688 <ctrl_comand_inputs+0x2f4>)
  4045a6:	7013      	strb	r3, [r2, #0]
					RemoveAlarm(ALM_SMOKE_VENT_OFF);
  4045a8:	2038      	movs	r0, #56	; 0x38
  4045aa:	4c38      	ldr	r4, [pc, #224]	; (40468c <ctrl_comand_inputs+0x2f8>)
  4045ac:	47a0      	blx	r4
					RemoveAlarm(ALM_SMOKE_ONLY_SUP);
  4045ae:	203b      	movs	r0, #59	; 0x3b
  4045b0:	47a0      	blx	r4
					RemoveAlarm(ALM_SMOKE_ONLY_EXT);
  4045b2:	203a      	movs	r0, #58	; 0x3a
  4045b4:	47a0      	blx	r4
					InsertAlarm(ALM_SMOKE_VENT_MAX);
  4045b6:	2039      	movs	r0, #57	; 0x39
  4045b8:	4b35      	ldr	r3, [pc, #212]	; (404690 <ctrl_comand_inputs+0x2fc>)
  4045ba:	4798      	blx	r3
					action_input = 0x82;  // Vent Extract: MAX, Vent. Supply: MAX
  4045bc:	2682      	movs	r6, #130	; 0x82
					break;
  4045be:	e040      	b.n	404642 <ctrl_comand_inputs+0x2ae>
				if(sData.measure_ADC_input[i] >= 400) {
  4045c0:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
  4045c4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
  4045c8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  4045cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
  4045d0:	da02      	bge.n	4045d8 <ctrl_comand_inputs+0x244>
				RemoveAlarm(ALM_SMOKE_ONLY_EXT);
  4045d2:	203a      	movs	r0, #58	; 0x3a
  4045d4:	47c8      	blx	r9
  4045d6:	e7bc      	b.n	404552 <ctrl_comand_inputs+0x1be>
					temp_speed_motorsR = 255;
  4045d8:	22ff      	movs	r2, #255	; 0xff
  4045da:	4b2a      	ldr	r3, [pc, #168]	; (404684 <ctrl_comand_inputs+0x2f0>)
  4045dc:	701a      	strb	r2, [r3, #0]
					temp_speed_motorsF = 0;
  4045de:	2200      	movs	r2, #0
  4045e0:	4b29      	ldr	r3, [pc, #164]	; (404688 <ctrl_comand_inputs+0x2f4>)
  4045e2:	701a      	strb	r2, [r3, #0]
					RemoveAlarm(ALM_SMOKE_VENT_OFF);
  4045e4:	2038      	movs	r0, #56	; 0x38
  4045e6:	4c29      	ldr	r4, [pc, #164]	; (40468c <ctrl_comand_inputs+0x2f8>)
  4045e8:	47a0      	blx	r4
					RemoveAlarm(ALM_SMOKE_VENT_MAX);
  4045ea:	2039      	movs	r0, #57	; 0x39
  4045ec:	47a0      	blx	r4
					RemoveAlarm(ALM_SMOKE_ONLY_SUP);
  4045ee:	203b      	movs	r0, #59	; 0x3b
  4045f0:	47a0      	blx	r4
					InsertAlarm(ALM_SMOKE_ONLY_EXT);
  4045f2:	203a      	movs	r0, #58	; 0x3a
  4045f4:	4b26      	ldr	r3, [pc, #152]	; (404690 <ctrl_comand_inputs+0x2fc>)
  4045f6:	4798      	blx	r3
					action_input = 0x83;  // Vent Extract: MAX, Vent. Supply: OFF
  4045f8:	2683      	movs	r6, #131	; 0x83
					break;
  4045fa:	e745      	b.n	404488 <ctrl_comand_inputs+0xf4>
					temp_speed_motorsR = 0;
  4045fc:	2200      	movs	r2, #0
  4045fe:	4b21      	ldr	r3, [pc, #132]	; (404684 <ctrl_comand_inputs+0x2f0>)
  404600:	701a      	strb	r2, [r3, #0]
					temp_speed_motorsF = 255;
  404602:	22ff      	movs	r2, #255	; 0xff
  404604:	4b20      	ldr	r3, [pc, #128]	; (404688 <ctrl_comand_inputs+0x2f4>)
  404606:	701a      	strb	r2, [r3, #0]
					RemoveAlarm(ALM_SMOKE_VENT_OFF);
  404608:	2038      	movs	r0, #56	; 0x38
  40460a:	4c20      	ldr	r4, [pc, #128]	; (40468c <ctrl_comand_inputs+0x2f8>)
  40460c:	47a0      	blx	r4
					RemoveAlarm(ALM_SMOKE_VENT_MAX);
  40460e:	2039      	movs	r0, #57	; 0x39
  404610:	47a0      	blx	r4
					RemoveAlarm(ALM_SMOKE_ONLY_EXT);
  404612:	203a      	movs	r0, #58	; 0x3a
  404614:	47a0      	blx	r4
					InsertAlarm(ALM_SMOKE_ONLY_SUP);
  404616:	203b      	movs	r0, #59	; 0x3b
  404618:	4b1d      	ldr	r3, [pc, #116]	; (404690 <ctrl_comand_inputs+0x2fc>)
  40461a:	4798      	blx	r3
					action_input = 0x84;  // Vent Extract: OFF, Vent. Supply: MAX
  40461c:	2684      	movs	r6, #132	; 0x84
					break;
  40461e:	e010      	b.n	404642 <ctrl_comand_inputs+0x2ae>
						action_input = 0x81;   //tengo i motori fermi fintanto che non riarmo
  404620:	2681      	movs	r6, #129	; 0x81
  404622:	e796      	b.n	404552 <ctrl_comand_inputs+0x1be>
			sData.status_unit &= ~(word)(1 << POS_BIT_PIR_CHECK);
  404624:	4a14      	ldr	r2, [pc, #80]	; (404678 <ctrl_comand_inputs+0x2e4>)
  404626:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40462a:	f3c3 030e 	ubfx	r3, r3, #0, #15
  40462e:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
			pir_counter = 0;
  404632:	2300      	movs	r3, #0
  404634:	4a11      	ldr	r2, [pc, #68]	; (40467c <ctrl_comand_inputs+0x2e8>)
  404636:	6013      	str	r3, [r2, #0]
			pir_counter_flag = false;
  404638:	4a11      	ldr	r2, [pc, #68]	; (404680 <ctrl_comand_inputs+0x2ec>)
  40463a:	7013      	strb	r3, [r2, #0]
			Power_On_Already_Activated = false;
  40463c:	4a16      	ldr	r2, [pc, #88]	; (404698 <ctrl_comand_inputs+0x304>)
  40463e:	7013      	strb	r3, [r2, #0]
  404640:	2610      	movs	r6, #16
	sData.status_unit |= (word)(1 << POS_BIT_UNIT_RUN);  // ON
  404642:	4a0d      	ldr	r2, [pc, #52]	; (404678 <ctrl_comand_inputs+0x2e4>)
  404644:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  404648:	f043 0301 	orr.w	r3, r3, #1
  40464c:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  404650:	e721      	b.n	404496 <ctrl_comand_inputs+0x102>
					pir_counter = 0;
  404652:	2300      	movs	r3, #0
  404654:	4a09      	ldr	r2, [pc, #36]	; (40467c <ctrl_comand_inputs+0x2e8>)
  404656:	6013      	str	r3, [r2, #0]
					pir_counter_flag = false;
  404658:	4a09      	ldr	r2, [pc, #36]	; (404680 <ctrl_comand_inputs+0x2ec>)
  40465a:	7013      	strb	r3, [r2, #0]
					Power_On_Already_Activated = false;
  40465c:	4a0e      	ldr	r2, [pc, #56]	; (404698 <ctrl_comand_inputs+0x304>)
  40465e:	7013      	strb	r3, [r2, #0]
  404660:	e7ee      	b.n	404640 <ctrl_comand_inputs+0x2ac>
					if ((PowerMotors == POWER_SAVE) && (sData.measure_ADC_input[0] > 150))
  404662:	4b05      	ldr	r3, [pc, #20]	; (404678 <ctrl_comand_inputs+0x2e4>)
  404664:	f9b3 31d5 	ldrsh.w	r3, [r3, #469]	; 0x1d5
  404668:	2b96      	cmp	r3, #150	; 0x96
  40466a:	dc17      	bgt.n	40469c <ctrl_comand_inputs+0x308>
  40466c:	2611      	movs	r6, #17
  40466e:	e70b      	b.n	404488 <ctrl_comand_inputs+0xf4>
  404670:	0040a26d 	.word	0x0040a26d
  404674:	20000e38 	.word	0x20000e38
  404678:	200013ac 	.word	0x200013ac
  40467c:	20000e8c 	.word	0x20000e8c
  404680:	20000b90 	.word	0x20000b90
  404684:	20000b99 	.word	0x20000b99
  404688:	20000b98 	.word	0x20000b98
  40468c:	004035ad 	.word	0x004035ad
  404690:	00403555 	.word	0x00403555
  404694:	0040a1fd 	.word	0x0040a1fd
  404698:	20000b6c 	.word	0x20000b6c
						if (pir_counter_flag && !Power_On_Already_Activated)
  40469c:	4b3a      	ldr	r3, [pc, #232]	; (404788 <ctrl_comand_inputs+0x3f4>)
  40469e:	781b      	ldrb	r3, [r3, #0]
  4046a0:	2b00      	cmp	r3, #0
  4046a2:	f43f aeed 	beq.w	404480 <ctrl_comand_inputs+0xec>
  4046a6:	4b39      	ldr	r3, [pc, #228]	; (40478c <ctrl_comand_inputs+0x3f8>)
  4046a8:	781b      	ldrb	r3, [r3, #0]
  4046aa:	2b00      	cmp	r3, #0
  4046ac:	f47f aee8 	bne.w	404480 <ctrl_comand_inputs+0xec>
							pir_counter_flag = false;
  4046b0:	4a35      	ldr	r2, [pc, #212]	; (404788 <ctrl_comand_inputs+0x3f4>)
  4046b2:	7013      	strb	r3, [r2, #0]
							pir_counter = 0;
  4046b4:	4a36      	ldr	r2, [pc, #216]	; (404790 <ctrl_comand_inputs+0x3fc>)
  4046b6:	6013      	str	r3, [r2, #0]
							Power_On_Already_Activated = true;
  4046b8:	2201      	movs	r2, #1
  4046ba:	4b34      	ldr	r3, [pc, #208]	; (40478c <ctrl_comand_inputs+0x3f8>)
  4046bc:	701a      	strb	r2, [r3, #0]
							sData.status_unit |= (word)(1 << POS_BIT_PIR_CHECK);
  4046be:	4a35      	ldr	r2, [pc, #212]	; (404794 <ctrl_comand_inputs+0x400>)
  4046c0:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4046c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
  4046c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
  4046cc:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  4046d0:	e7b6      	b.n	404640 <ctrl_comand_inputs+0x2ac>
				if ((PowerMotors == POWER_SAVE) && (sData.measure_ADC_input[0] > 150))
  4046d2:	4b31      	ldr	r3, [pc, #196]	; (404798 <ctrl_comand_inputs+0x404>)
  4046d4:	781b      	ldrb	r3, [r3, #0]
  4046d6:	b10b      	cbz	r3, 4046dc <ctrl_comand_inputs+0x348>
  4046d8:	2611      	movs	r6, #17
  4046da:	e6d5      	b.n	404488 <ctrl_comand_inputs+0xf4>
  4046dc:	4b2d      	ldr	r3, [pc, #180]	; (404794 <ctrl_comand_inputs+0x400>)
  4046de:	f9b3 31d5 	ldrsh.w	r3, [r3, #469]	; 0x1d5
  4046e2:	2b96      	cmp	r3, #150	; 0x96
  4046e4:	dc01      	bgt.n	4046ea <ctrl_comand_inputs+0x356>
  4046e6:	2611      	movs	r6, #17
  4046e8:	e6ce      	b.n	404488 <ctrl_comand_inputs+0xf4>
					if (pir_counter_flag && !Power_On_Already_Activated)
  4046ea:	4b27      	ldr	r3, [pc, #156]	; (404788 <ctrl_comand_inputs+0x3f4>)
  4046ec:	781b      	ldrb	r3, [r3, #0]
  4046ee:	2b00      	cmp	r3, #0
  4046f0:	f43f aec6 	beq.w	404480 <ctrl_comand_inputs+0xec>
  4046f4:	4b25      	ldr	r3, [pc, #148]	; (40478c <ctrl_comand_inputs+0x3f8>)
  4046f6:	781b      	ldrb	r3, [r3, #0]
  4046f8:	2b00      	cmp	r3, #0
  4046fa:	f47f aec1 	bne.w	404480 <ctrl_comand_inputs+0xec>
						pir_counter_flag = false;
  4046fe:	4a22      	ldr	r2, [pc, #136]	; (404788 <ctrl_comand_inputs+0x3f4>)
  404700:	7013      	strb	r3, [r2, #0]
						pir_counter = 0;
  404702:	4a23      	ldr	r2, [pc, #140]	; (404790 <ctrl_comand_inputs+0x3fc>)
  404704:	6013      	str	r3, [r2, #0]
						Power_On_Already_Activated = true;
  404706:	2201      	movs	r2, #1
  404708:	4b20      	ldr	r3, [pc, #128]	; (40478c <ctrl_comand_inputs+0x3f8>)
  40470a:	701a      	strb	r2, [r3, #0]
						sData.status_unit |= (word)(1 << POS_BIT_PIR_CHECK);
  40470c:	4a21      	ldr	r2, [pc, #132]	; (404794 <ctrl_comand_inputs+0x400>)
  40470e:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  404712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
  404716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
  40471a:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  40471e:	e78f      	b.n	404640 <ctrl_comand_inputs+0x2ac>
		RemoveAlarm(ALM_SMOKE_VENT_OFF);
  404720:	2038      	movs	r0, #56	; 0x38
  404722:	4c1e      	ldr	r4, [pc, #120]	; (40479c <ctrl_comand_inputs+0x408>)
  404724:	47a0      	blx	r4
		RemoveAlarm(ALM_SMOKE_VENT_MAX);
  404726:	2039      	movs	r0, #57	; 0x39
  404728:	47a0      	blx	r4
		RemoveAlarm(ALM_SMOKE_ONLY_EXT);
  40472a:	203a      	movs	r0, #58	; 0x3a
  40472c:	47a0      	blx	r4
		RemoveAlarm(ALM_SMOKE_ONLY_SUP);
  40472e:	203b      	movs	r0, #59	; 0x3b
  404730:	47a0      	blx	r4
	return action_input;
  404732:	e6b3      	b.n	40449c <ctrl_comand_inputs+0x108>
	action_input = 0x10;
  404734:	2610      	movs	r6, #16
	sData.status_unit  &= ~(word)(1<< POS_BIT_CMD_FAN_INPUT);
  404736:	4a17      	ldr	r2, [pc, #92]	; (404794 <ctrl_comand_inputs+0x400>)
  404738:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40473c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  404740:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
		if (val_inp[i] == INP_0V_UNIT_STOP) {
  404744:	2d01      	cmp	r5, #1
  404746:	f43f ae48 	beq.w	4043da <ctrl_comand_inputs+0x46>
			}else if (val_inp[i] == INP_12V_UNIT_STOP) {
  40474a:	2d02      	cmp	r5, #2
  40474c:	f43f ae88 	beq.w	404460 <ctrl_comand_inputs+0xcc>
			}else if (val_inp[i] == INP_REG_AIR_FLOW) {
  404750:	2d03      	cmp	r5, #3
  404752:	f43f aeb3 	beq.w	4044bc <ctrl_comand_inputs+0x128>
  404756:	462b      	mov	r3, r5
  404758:	2400      	movs	r4, #0
				if(sData.measure_ADC_input[i] >= 400) {
  40475a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404794 <ctrl_comand_inputs+0x400>
				RemoveAlarm(ALM_SMOKE_ONLY_SUP);
  40475e:	f04f 0a3b 	mov.w	sl, #59	; 0x3b
  404762:	f8df 9038 	ldr.w	r9, [pc, #56]	; 40479c <ctrl_comand_inputs+0x408>
  404766:	e701      	b.n	40456c <ctrl_comand_inputs+0x1d8>
	action_input = 0x10;
  404768:	2610      	movs	r6, #16
  40476a:	e7e4      	b.n	404736 <ctrl_comand_inputs+0x3a2>
	sData.status_unit  |= (word)(1<< POS_BIT_CMD_FAN_INPUT);
  40476c:	4a09      	ldr	r2, [pc, #36]	; (404794 <ctrl_comand_inputs+0x400>)
  40476e:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  404772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404776:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  40477a:	2680      	movs	r6, #128	; 0x80
  40477c:	e7e2      	b.n	404744 <ctrl_comand_inputs+0x3b0>
	if (val_inp[0] == INP_0V_UNIT_STOP) {
  40477e:	2611      	movs	r6, #17
  404780:	e682      	b.n	404488 <ctrl_comand_inputs+0xf4>
			action_input = 0x81; // OFF
  404782:	2681      	movs	r6, #129	; 0x81
  404784:	e680      	b.n	404488 <ctrl_comand_inputs+0xf4>
  404786:	bf00      	nop
  404788:	20000b90 	.word	0x20000b90
  40478c:	20000b6c 	.word	0x20000b6c
  404790:	20000e8c 	.word	0x20000e8c
  404794:	200013ac 	.word	0x200013ac
  404798:	20000e38 	.word	0x20000e38
  40479c:	004035ad 	.word	0x004035ad

004047a0 <switchesToStandby>:

//-----------------------------------------------------------------------------
// Porta l'unitÃ  in standby
//-----------------------------------------------------------------------------
void switchesToStandby ()
{
  4047a0:	b510      	push	{r4, lr}
  4047a2:	b082      	sub	sp, #8

  
    // Prima di spegnere l'impianto controlliamo che vi sono elementi di riscaldamento attivi:    
    // Se si, attiviamo la  modalita' di post-ventilazione (durata max 4 minuti), cosÃ¬
    // da evitare che l'inerzia termica degli accesori danneggi l'impianto.   
    if (((DigitAccessoryOn(ACC_I2C_HEATER) && ((sData.AccI2C[ACC_I2C_HEATER].sts & STS_ACC_ELECT)))|| (DigitAccessoryOn(ACC_I2C_PREHEATER) && ((sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ELECT)))|| DigitAccessoryOn(ACC_I2C_COOLER)) 
  4047a4:	2000      	movs	r0, #0
  4047a6:	4b4f      	ldr	r3, [pc, #316]	; (4048e4 <switchesToStandby+0x144>)
  4047a8:	4798      	blx	r3
  4047aa:	b120      	cbz	r0, 4047b6 <switchesToStandby+0x16>
  4047ac:	4b4e      	ldr	r3, [pc, #312]	; (4048e8 <switchesToStandby+0x148>)
  4047ae:	79db      	ldrb	r3, [r3, #7]
  4047b0:	f013 0f08 	tst.w	r3, #8
  4047b4:	d10e      	bne.n	4047d4 <switchesToStandby+0x34>
  4047b6:	2002      	movs	r0, #2
  4047b8:	4b4a      	ldr	r3, [pc, #296]	; (4048e4 <switchesToStandby+0x144>)
  4047ba:	4798      	blx	r3
  4047bc:	b128      	cbz	r0, 4047ca <switchesToStandby+0x2a>
  4047be:	4b4a      	ldr	r3, [pc, #296]	; (4048e8 <switchesToStandby+0x148>)
  4047c0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
  4047c4:	f013 0f08 	tst.w	r3, #8
  4047c8:	d104      	bne.n	4047d4 <switchesToStandby+0x34>
  4047ca:	2001      	movs	r0, #1
  4047cc:	4b45      	ldr	r3, [pc, #276]	; (4048e4 <switchesToStandby+0x144>)
  4047ce:	4798      	blx	r3
  4047d0:	2800      	cmp	r0, #0
  4047d2:	d044      	beq.n	40485e <switchesToStandby+0xbe>
        && (count_post_vent == 0) 
  4047d4:	4b45      	ldr	r3, [pc, #276]	; (4048ec <switchesToStandby+0x14c>)
  4047d6:	681b      	ldr	r3, [r3, #0]
  4047d8:	b943      	cbnz	r3, 4047ec <switchesToStandby+0x4c>
        && (sData.status_unit & MSK_UNIT_OPERATING)) 
  4047da:	4b43      	ldr	r3, [pc, #268]	; (4048e8 <switchesToStandby+0x148>)
  4047dc:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  4047e0:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  4047e4:	d03f      	beq.n	404866 <switchesToStandby+0xc6>
    {
      count_post_vent = 150; // 150 *1.2 = 180 sec.     
  4047e6:	2296      	movs	r2, #150	; 0x96
  4047e8:	4b40      	ldr	r3, [pc, #256]	; (4048ec <switchesToStandby+0x14c>)
  4047ea:	601a      	str	r2, [r3, #0]
    }   
     
    if(count_post_vent) {
      TAG_DigitAccessoryOff(ACC_I2C_PREHEATER); 
  4047ec:	2002      	movs	r0, #2
  4047ee:	4c40      	ldr	r4, [pc, #256]	; (4048f0 <switchesToStandby+0x150>)
  4047f0:	47a0      	blx	r4
      TAG_DigitAccessoryOff(ACC_I2C_HEATER); 
  4047f2:	2000      	movs	r0, #0
  4047f4:	47a0      	blx	r4
      TAG_DigitAccessoryOff(ACC_I2C_COOLER); 
  4047f6:	2001      	movs	r0, #1
  4047f8:	47a0      	blx	r4
      
      count_post_vent--;
  4047fa:	4b3c      	ldr	r3, [pc, #240]	; (4048ec <switchesToStandby+0x14c>)
  4047fc:	681a      	ldr	r2, [r3, #0]
  4047fe:	3a01      	subs	r2, #1
  404800:	601a      	str	r2, [r3, #0]
      sData.status_unit &= ~MSK_UNIT_OPERATING; // STANDBY 
  404802:	4b39      	ldr	r3, [pc, #228]	; (4048e8 <switchesToStandby+0x148>)
  404804:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  404808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  40480c:	b29b      	uxth	r3, r3
      
      if (count_post_vent )     
  40480e:	2a00      	cmp	r2, #0
  404810:	d14a      	bne.n	4048a8 <switchesToStandby+0x108>
      sData.status_unit &= ~MSK_UNIT_OPERATING; // STANDBY 
  404812:	4a35      	ldr	r2, [pc, #212]	; (4048e8 <switchesToStandby+0x148>)
  404814:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb

      
      if (count_post_vent <= 125) // 125 * 1.2 = 150 sec. 
      { 
          // per 30 secondi mantieni la velocitÃ  come era, poi decrementa
          sData.speed_motors_R--;
  404818:	4933      	ldr	r1, [pc, #204]	; (4048e8 <switchesToStandby+0x148>)
  40481a:	f891 21af 	ldrb.w	r2, [r1, #431]	; 0x1af
  40481e:	3a01      	subs	r2, #1
  404820:	b2d2      	uxtb	r2, r2
  404822:	f881 21af 	strb.w	r2, [r1, #431]	; 0x1af
          sData.speed_motors_F--;
  404826:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
  40482a:	3b01      	subs	r3, #1
  40482c:	b2db      	uxtb	r3, r3
  40482e:	f881 31b0 	strb.w	r3, [r1, #432]	; 0x1b0
          if(sData.speed_motors_R < 85)
  404832:	2a54      	cmp	r2, #84	; 0x54
  404834:	d803      	bhi.n	40483e <switchesToStandby+0x9e>
            sData.speed_motors_R = 85; // minimo garantito: > 33%  
  404836:	2155      	movs	r1, #85	; 0x55
  404838:	4a2b      	ldr	r2, [pc, #172]	; (4048e8 <switchesToStandby+0x148>)
  40483a:	f882 11af 	strb.w	r1, [r2, #431]	; 0x1af
          if(sData.speed_motors_F < 85)
  40483e:	2b54      	cmp	r3, #84	; 0x54
  404840:	d803      	bhi.n	40484a <switchesToStandby+0xaa>
            sData.speed_motors_F = 85; // minimo garantito: > 33%  
  404842:	2255      	movs	r2, #85	; 0x55
  404844:	4b28      	ldr	r3, [pc, #160]	; (4048e8 <switchesToStandby+0x148>)
  404846:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
            
          temp_speed_motorsR = sData.speed_motors_R;
  40484a:	4b27      	ldr	r3, [pc, #156]	; (4048e8 <switchesToStandby+0x148>)
  40484c:	f893 11af 	ldrb.w	r1, [r3, #431]	; 0x1af
  404850:	4a28      	ldr	r2, [pc, #160]	; (4048f4 <switchesToStandby+0x154>)
  404852:	7011      	strb	r1, [r2, #0]
          temp_speed_motorsF = sData.speed_motors_F;  
  404854:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
  404858:	4b27      	ldr	r3, [pc, #156]	; (4048f8 <switchesToStandby+0x158>)
  40485a:	701a      	strb	r2, [r3, #0]
  40485c:	e022      	b.n	4048a4 <switchesToStandby+0x104>
    if(count_post_vent) {
  40485e:	4b23      	ldr	r3, [pc, #140]	; (4048ec <switchesToStandby+0x14c>)
  404860:	681b      	ldr	r3, [r3, #0]
  404862:	2b00      	cmp	r3, #0
  404864:	d1c2      	bne.n	4047ec <switchesToStandby+0x4c>
      Serial_println(sData.speed_motors_F, DEC);
#endif  //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg       
      
    }else { 
    
        count_switch_on    = 0;   
  404866:	2300      	movs	r3, #0
  404868:	4a24      	ldr	r2, [pc, #144]	; (4048fc <switchesToStandby+0x15c>)
  40486a:	6013      	str	r3, [r2, #0]
        temp_speed_motorsR = 0;
  40486c:	4a21      	ldr	r2, [pc, #132]	; (4048f4 <switchesToStandby+0x154>)
  40486e:	7013      	strb	r3, [r2, #0]
        temp_speed_motorsF = 0;
  404870:	4a21      	ldr	r2, [pc, #132]	; (4048f8 <switchesToStandby+0x158>)
  404872:	7013      	strb	r3, [r2, #0]
        sData.speed_motors_R = temp_speed_motorsR;
  404874:	4a1c      	ldr	r2, [pc, #112]	; (4048e8 <switchesToStandby+0x148>)
  404876:	f882 31af 	strb.w	r3, [r2, #431]	; 0x1af
        sData.speed_motors_F = temp_speed_motorsF;
  40487a:	f882 31b0 	strb.w	r3, [r2, #432]	; 0x1b0
        sData.status_unit  &= ~MSK_UNIT_OPERATING; // STANDBY   
  40487e:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  404882:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  404886:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
        
        count_switch_off++;
  40488a:	4a1d      	ldr	r2, [pc, #116]	; (404900 <switchesToStandby+0x160>)
  40488c:	6813      	ldr	r3, [r2, #0]
  40488e:	3301      	adds	r3, #1
  404890:	6013      	str	r3, [r2, #0]
                     
        if (count_switch_off == 7) 
  404892:	2b07      	cmp	r3, #7
  404894:	d010      	beq.n	4048b8 <switchesToStandby+0x118>
           addr = ADDR_EEP(hour_runnig); 
            
           update_data_eeprom(addr, (addr+3), &buff[0]);  // 4 byte            
        }  
        
        if(count_switch_off > 12)
  404896:	4b1a      	ldr	r3, [pc, #104]	; (404900 <switchesToStandby+0x160>)
  404898:	681b      	ldr	r3, [r3, #0]
  40489a:	2b0c      	cmp	r3, #12
  40489c:	dd02      	ble.n	4048a4 <switchesToStandby+0x104>
           count_switch_off = 12;
  40489e:	220c      	movs	r2, #12
  4048a0:	4b17      	ldr	r3, [pc, #92]	; (404900 <switchesToStandby+0x160>)
  4048a2:	601a      	str	r2, [r3, #0]
    }   
}  
  4048a4:	b002      	add	sp, #8
  4048a6:	bd10      	pop	{r4, pc}
        sData.status_unit |= (1 << POS_BIT_POST_VENT_OPERATING); 
  4048a8:	f043 0304 	orr.w	r3, r3, #4
  4048ac:	490e      	ldr	r1, [pc, #56]	; (4048e8 <switchesToStandby+0x148>)
  4048ae:	f8a1 31eb 	strh.w	r3, [r1, #491]	; 0x1eb
      if (count_post_vent <= 125) // 125 * 1.2 = 150 sec. 
  4048b2:	2a7d      	cmp	r2, #125	; 0x7d
  4048b4:	dcf6      	bgt.n	4048a4 <switchesToStandby+0x104>
  4048b6:	e7af      	b.n	404818 <switchesToStandby+0x78>
           PowerMode(POWER_SAVE);  
  4048b8:	2000      	movs	r0, #0
  4048ba:	4b12      	ldr	r3, [pc, #72]	; (404904 <switchesToStandby+0x164>)
  4048bc:	4798      	blx	r3
           buff[0] = (byte)countHoursFunz;             // byte Low
  4048be:	4b12      	ldr	r3, [pc, #72]	; (404908 <switchesToStandby+0x168>)
  4048c0:	681b      	ldr	r3, [r3, #0]
  4048c2:	f88d 3000 	strb.w	r3, [sp]
           buff[1] = (byte)(countHoursFunz >>  8);
  4048c6:	0a1a      	lsrs	r2, r3, #8
  4048c8:	f88d 2001 	strb.w	r2, [sp, #1]
           buff[2] = (byte)(countHoursFunz >> 16);
  4048cc:	0c1a      	lsrs	r2, r3, #16
  4048ce:	f88d 2002 	strb.w	r2, [sp, #2]
           buff[3] = (byte)(countHoursFunz >> 24);     // byte high
  4048d2:	0e1b      	lsrs	r3, r3, #24
  4048d4:	f88d 3003 	strb.w	r3, [sp, #3]
           update_data_eeprom(addr, (addr+3), &buff[0]);  // 4 byte            
  4048d8:	466a      	mov	r2, sp
  4048da:	2125      	movs	r1, #37	; 0x25
  4048dc:	2022      	movs	r0, #34	; 0x22
  4048de:	4b0b      	ldr	r3, [pc, #44]	; (40490c <switchesToStandby+0x16c>)
  4048e0:	4798      	blx	r3
  4048e2:	e7d8      	b.n	404896 <switchesToStandby+0xf6>
  4048e4:	00400151 	.word	0x00400151
  4048e8:	200013ac 	.word	0x200013ac
  4048ec:	20000b7c 	.word	0x20000b7c
  4048f0:	004001d9 	.word	0x004001d9
  4048f4:	20000b99 	.word	0x20000b99
  4048f8:	20000b98 	.word	0x20000b98
  4048fc:	20000b88 	.word	0x20000b88
  404900:	20000b84 	.word	0x20000b84
  404904:	0040b471 	.word	0x0040b471
  404908:	20000e7c 	.word	0x20000e7c
  40490c:	0040abbd 	.word	0x0040abbd

00404910 <GetMaxAirFlow>:
 { NULL, 0 }
};

// Torna la massima portata della macchina
unsigned short GetMaxAirFlow()
{
  404910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   short   maxAirFlow;
 
   CLUnitModel* unitModel = gUnitModels;

   while (unitModel->Model != NULL)
  404912:	4b22      	ldr	r3, [pc, #136]	; (40499c <GetMaxAirFlow+0x8c>)
  404914:	681b      	ldr	r3, [r3, #0]
  404916:	b30b      	cbz	r3, 40495c <GetMaxAirFlow+0x4c>
  404918:	4c20      	ldr	r4, [pc, #128]	; (40499c <GetMaxAirFlow+0x8c>)
   {
     if ((read_byte_eeprom( ADDR_EEP(SerialString) + 4) == unitModel->Model[0]) && 
  40491a:	260f      	movs	r6, #15
  40491c:	4d20      	ldr	r5, [pc, #128]	; (4049a0 <GetMaxAirFlow+0x90>)
         (read_byte_eeprom( ADDR_EEP(SerialString) + 5) == unitModel->Model[1]) && 
  40491e:	2710      	movs	r7, #16
  404920:	e002      	b.n	404928 <GetMaxAirFlow+0x18>
   while (unitModel->Model != NULL)
  404922:	f854 3f06 	ldr.w	r3, [r4, #6]!
  404926:	b1cb      	cbz	r3, 40495c <GetMaxAirFlow+0x4c>
     if ((read_byte_eeprom( ADDR_EEP(SerialString) + 4) == unitModel->Model[0]) && 
  404928:	4630      	mov	r0, r6
  40492a:	47a8      	blx	r5
  40492c:	6823      	ldr	r3, [r4, #0]
  40492e:	781b      	ldrb	r3, [r3, #0]
  404930:	4283      	cmp	r3, r0
  404932:	d1f6      	bne.n	404922 <GetMaxAirFlow+0x12>
         (read_byte_eeprom( ADDR_EEP(SerialString) + 5) == unitModel->Model[1]) && 
  404934:	4638      	mov	r0, r7
  404936:	47a8      	blx	r5
  404938:	6823      	ldr	r3, [r4, #0]
     if ((read_byte_eeprom( ADDR_EEP(SerialString) + 4) == unitModel->Model[0]) && 
  40493a:	785b      	ldrb	r3, [r3, #1]
  40493c:	4283      	cmp	r3, r0
  40493e:	d1f0      	bne.n	404922 <GetMaxAirFlow+0x12>
         (read_byte_eeprom( ADDR_EEP(SerialString) + 6) == unitModel->Model[2]) && 
  404940:	2011      	movs	r0, #17
  404942:	47a8      	blx	r5
  404944:	6823      	ldr	r3, [r4, #0]
         (read_byte_eeprom( ADDR_EEP(SerialString) + 5) == unitModel->Model[1]) && 
  404946:	789b      	ldrb	r3, [r3, #2]
  404948:	4283      	cmp	r3, r0
  40494a:	d1ea      	bne.n	404922 <GetMaxAirFlow+0x12>
         (read_byte_eeprom( ADDR_EEP(SerialString) + 7) == unitModel->Model[3]))
  40494c:	2012      	movs	r0, #18
  40494e:	47a8      	blx	r5
  404950:	6823      	ldr	r3, [r4, #0]
         (read_byte_eeprom( ADDR_EEP(SerialString) + 6) == unitModel->Model[2]) && 
  404952:	78db      	ldrb	r3, [r3, #3]
  404954:	4283      	cmp	r3, r0
  404956:	d1e4      	bne.n	404922 <GetMaxAirFlow+0x12>
    return unitModel->MaxAirFlow;
  404958:	88a0      	ldrh	r0, [r4, #4]
  40495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    unitModel++;
   }
   
   maxAirFlow = ((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 4) - '0')) * 100 + 
  40495c:	200f      	movs	r0, #15
  40495e:	4e10      	ldr	r6, [pc, #64]	; (4049a0 <GetMaxAirFlow+0x90>)
  404960:	47b0      	blx	r6
  404962:	4604      	mov	r4, r0
		((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 5) - '0')) * 10 +
  404964:	2010      	movs	r0, #16
  404966:	47b0      	blx	r6
  404968:	4605      	mov	r5, r0
		((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 6) - '0'));
  40496a:	2011      	movs	r0, #17
  40496c:	47b0      	blx	r6
		((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 5) - '0')) * 10 +
  40496e:	f5a0 50a6 	sub.w	r0, r0, #5312	; 0x14c0
  404972:	3810      	subs	r0, #16
   maxAirFlow = ((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 4) - '0')) * 100 + 
  404974:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404978:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 5) - '0')) * 10 +
  40497c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   maxAirFlow = ((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 4) - '0')) * 100 + 
  404980:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 5) - '0')) * 10 +
  404984:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   maxAirFlow = ((short) (read_byte_eeprom( ADDR_EEP(SerialString) + 4) - '0')) * 100 + 
  404988:	b21b      	sxth	r3, r3

   if (maxAirFlow < 0)
	maxAirFlow = 0;

   return maxAirFlow * 100;
  40498a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40498e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404992:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  404996:	0080      	lsls	r0, r0, #2
  404998:	b280      	uxth	r0, r0

}
  40499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40499c:	2000000c 	.word	0x2000000c
  4049a0:	0040a26d 	.word	0x0040a26d
  4049a4:	00000000 	.word	0x00000000

004049a8 <CalcQW_by_PW>:
{
  4049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049ac:	b085      	sub	sp, #20
  4049ae:	460c      	mov	r4, r1
  QW =  (double)gKVolts[ 100 - speed_r ][0] * (double)pw * (double)pw * pw;  
  4049b0:	f1c0 0a64 	rsb	sl, r0, #100	; 0x64
  4049b4:	4608      	mov	r0, r1
  4049b6:	4b34      	ldr	r3, [pc, #208]	; (404a88 <CalcQW_by_PW+0xe0>)
  4049b8:	4798      	blx	r3
  4049ba:	4680      	mov	r8, r0
  4049bc:	4689      	mov	r9, r1
  4049be:	4620      	mov	r0, r4
  4049c0:	4b32      	ldr	r3, [pc, #200]	; (404a8c <CalcQW_by_PW+0xe4>)
  4049c2:	4798      	blx	r3
  4049c4:	e9cd 0100 	strd	r0, r1, [sp]
  4049c8:	4d31      	ldr	r5, [pc, #196]	; (404a90 <CalcQW_by_PW+0xe8>)
  4049ca:	eb05 154a 	add.w	r5, r5, sl, lsl #5
  4049ce:	4c31      	ldr	r4, [pc, #196]	; (404a94 <CalcQW_by_PW+0xec>)
  4049d0:	e9d5 2300 	ldrd	r2, r3, [r5]
  4049d4:	4640      	mov	r0, r8
  4049d6:	4649      	mov	r1, r9
  4049d8:	47a0      	blx	r4
  4049da:	4642      	mov	r2, r8
  4049dc:	464b      	mov	r3, r9
  4049de:	47a0      	blx	r4
  4049e0:	e9dd 2300 	ldrd	r2, r3, [sp]
  4049e4:	47a0      	blx	r4
  4049e6:	4e2c      	ldr	r6, [pc, #176]	; (404a98 <CalcQW_by_PW+0xf0>)
  4049e8:	47b0      	blx	r6
  QW += (double)gKVolts[ 100 - speed_r ][1] * (double)pw * pw;
  4049ea:	4f2c      	ldr	r7, [pc, #176]	; (404a9c <CalcQW_by_PW+0xf4>)
  4049ec:	47b8      	blx	r7
  4049ee:	4682      	mov	sl, r0
  4049f0:	468b      	mov	fp, r1
  4049f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  4049f6:	4640      	mov	r0, r8
  4049f8:	4649      	mov	r1, r9
  4049fa:	47a0      	blx	r4
  4049fc:	e9dd 2300 	ldrd	r2, r3, [sp]
  404a00:	47a0      	blx	r4
  404a02:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 404ab4 <CalcQW_by_PW+0x10c>
  404a06:	4602      	mov	r2, r0
  404a08:	460b      	mov	r3, r1
  404a0a:	4650      	mov	r0, sl
  404a0c:	4659      	mov	r1, fp
  404a0e:	47c0      	blx	r8
  404a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
  QW += (double)gKVolts[ 100 - speed_r ][2] * pw;
  404a14:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
  404a18:	e9dd 0100 	ldrd	r0, r1, [sp]
  404a1c:	47a0      	blx	r4
  404a1e:	4682      	mov	sl, r0
  404a20:	468b      	mov	fp, r1
  QW += (double)gKVolts[ 100 - speed_r ][1] * (double)pw * pw;
  404a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404a26:	47b0      	blx	r6
  QW += (double)gKVolts[ 100 - speed_r ][2] * pw;
  404a28:	47b8      	blx	r7
  404a2a:	4602      	mov	r2, r0
  404a2c:	460b      	mov	r3, r1
  404a2e:	4650      	mov	r0, sl
  404a30:	4659      	mov	r1, fp
  404a32:	47c0      	blx	r8
  404a34:	47b0      	blx	r6
  QW += gKVolts[ 100 - speed_r ][3];
  404a36:	47b8      	blx	r7
  404a38:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
  404a3c:	47c0      	blx	r8
  404a3e:	47b0      	blx	r6
  404a40:	4605      	mov	r5, r0
  MaxQW = (float)GetMaxAirFlow() * 1.07;
  404a42:	4b17      	ldr	r3, [pc, #92]	; (404aa0 <CalcQW_by_PW+0xf8>)
  404a44:	4798      	blx	r3
  404a46:	4b17      	ldr	r3, [pc, #92]	; (404aa4 <CalcQW_by_PW+0xfc>)
  404a48:	4798      	blx	r3
  404a4a:	47b8      	blx	r7
  404a4c:	a30c      	add	r3, pc, #48	; (adr r3, 404a80 <CalcQW_by_PW+0xd8>)
  404a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a52:	47a0      	blx	r4
  404a54:	47b0      	blx	r6
  404a56:	4604      	mov	r4, r0
  if( QW  > MaxQW)
  404a58:	4601      	mov	r1, r0
  404a5a:	4628      	mov	r0, r5
  404a5c:	4b12      	ldr	r3, [pc, #72]	; (404aa8 <CalcQW_by_PW+0x100>)
  404a5e:	4798      	blx	r3
  404a60:	b928      	cbnz	r0, 404a6e <CalcQW_by_PW+0xc6>
  else if ( QW  < 10) 
  404a62:	4912      	ldr	r1, [pc, #72]	; (404aac <CalcQW_by_PW+0x104>)
  404a64:	4628      	mov	r0, r5
  404a66:	4b12      	ldr	r3, [pc, #72]	; (404ab0 <CalcQW_by_PW+0x108>)
  404a68:	4798      	blx	r3
  404a6a:	b120      	cbz	r0, 404a76 <CalcQW_by_PW+0xce>
    QW = 10;
  404a6c:	4c0f      	ldr	r4, [pc, #60]	; (404aac <CalcQW_by_PW+0x104>)
}  
  404a6e:	4620      	mov	r0, r4
  404a70:	b005      	add	sp, #20
  404a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  QW += gKVolts[ 100 - speed_r ][3];
  404a76:	462c      	mov	r4, r5
  return QW;  
  404a78:	e7f9      	b.n	404a6e <CalcQW_by_PW+0xc6>
  404a7a:	bf00      	nop
  404a7c:	f3af 8000 	nop.w
  404a80:	51eb851f 	.word	0x51eb851f
  404a84:	3ff11eb8 	.word	0x3ff11eb8
  404a88:	0040ce5d 	.word	0x0040ce5d
  404a8c:	0040ce7d 	.word	0x0040ce7d
  404a90:	00411c78 	.word	0x00411c78
  404a94:	0040cf49 	.word	0x0040cf49
  404a98:	0040d539 	.word	0x0040d539
  404a9c:	0040cea1 	.word	0x0040cea1
  404aa0:	00404911 	.word	0x00404911
  404aa4:	0040d745 	.word	0x0040d745
  404aa8:	0040db6d 	.word	0x0040db6d
  404aac:	41200000 	.word	0x41200000
  404ab0:	0040db31 	.word	0x0040db31
  404ab4:	0040cbe5 	.word	0x0040cbe5

00404ab8 <Func_Pressure_Const_R>:
	signed char		deltaPSign;
	unsigned short            Kmin_reg,Kmax_calcDep;
	int                       speedNew = 51,i;
	
	
	rpm_r = (sData.rpm_motors_R[0] + rpm_r_preview[0]) >> 1;
  404ab8:	4b75      	ldr	r3, [pc, #468]	; (404c90 <Func_Pressure_Const_R+0x1d8>)
  404aba:	f9b3 31db 	ldrsh.w	r3, [r3, #475]	; 0x1db
  404abe:	4a75      	ldr	r2, [pc, #468]	; (404c94 <Func_Pressure_Const_R+0x1dc>)
  404ac0:	8811      	ldrh	r1, [r2, #0]
  404ac2:	440b      	add	r3, r1
  404ac4:	105b      	asrs	r3, r3, #1
	rpm_r_preview[0] = rpm_r;
  404ac6:	8013      	strh	r3, [r2, #0]
	
	// in caso di non rotazione esci dalla funzione
	if(rpm_r < 120)
  404ac8:	b21b      	sxth	r3, r3
  404aca:	2b77      	cmp	r3, #119	; 0x77
  404acc:	dc00      	bgt.n	404ad0 <Func_Pressure_Const_R+0x18>
  404ace:	4770      	bx	lr
{
  404ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404ad4:	4607      	mov	r7, r0
	return;
	
	
	if(DigitAccessoryOperating(ACC_I2C_FLW2))
  404ad6:	2012      	movs	r0, #18
  404ad8:	4b6f      	ldr	r3, [pc, #444]	; (404c98 <Func_Pressure_Const_R+0x1e0>)
  404ada:	4798      	blx	r3
  404adc:	2800      	cmp	r0, #0
  404ade:	d072      	beq.n	404bc6 <Func_Pressure_Const_R+0x10e>

		// avendo un dispositivo che legge direttamente la pressione
		// having a device that directly reads the pressure
		// la funzione è molto più semplice
		// the function is much simpler
		pw =  sData.AccI2C[ACC_I2C_FLW2].measure4;
  404ae0:	4b6b      	ldr	r3, [pc, #428]	; (404c90 <Func_Pressure_Const_R+0x1d8>)
  404ae2:	f9b3 8153 	ldrsh.w	r8, [r3, #339]	; 0x153
  404ae6:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
  404aea:	bfa8      	it	ge
  404aec:	f44f 7848 	movge.w	r8, #800	; 0x320
		
		//--------------- correzione limiti di lettura p
		if(pw > 800)
		pw = 800;
		if(pw < 0)
		pw = 10;
  404af0:	f1b8 0f00 	cmp.w	r8, #0
  404af4:	bfb8      	it	lt
  404af6:	f04f 080a 	movlt.w	r8, #10
		
		//--------------- visualizzo p sul kts
		//sData.measure_pressure = pw;
		Pressure_CAPR = pw;
  404afa:	4b68      	ldr	r3, [pc, #416]	; (404c9c <Func_Pressure_Const_R+0x1e4>)
  404afc:	f8a3 8000 	strh.w	r8, [r3]
		//--------------- calcolo qw

		MaxAirFlow = (float)GetMaxAirFlow();
  404b00:	4b67      	ldr	r3, [pc, #412]	; (404ca0 <Func_Pressure_Const_R+0x1e8>)
  404b02:	4798      	blx	r3
  404b04:	4606      	mov	r6, r0
		qSetPoint  = MaxAirFlow * (float) ((float) setPoint / 1000.0);
  404b06:	4c67      	ldr	r4, [pc, #412]	; (404ca4 <Func_Pressure_Const_R+0x1ec>)
  404b08:	4638      	mov	r0, r7
  404b0a:	47a0      	blx	r4
  404b0c:	4966      	ldr	r1, [pc, #408]	; (404ca8 <Func_Pressure_Const_R+0x1f0>)
  404b0e:	4b67      	ldr	r3, [pc, #412]	; (404cac <Func_Pressure_Const_R+0x1f4>)
  404b10:	4798      	blx	r3
  404b12:	4605      	mov	r5, r0
		MaxAirFlow = (float)GetMaxAirFlow();
  404b14:	4630      	mov	r0, r6
  404b16:	47a0      	blx	r4
		qSetPoint  = MaxAirFlow * (float) ((float) setPoint / 1000.0);
  404b18:	4601      	mov	r1, r0
  404b1a:	4628      	mov	r0, r5
  404b1c:	4b64      	ldr	r3, [pc, #400]	; (404cb0 <Func_Pressure_Const_R+0x1f8>)
  404b1e:	4798      	blx	r3
  404b20:	4682      	mov	sl, r0
		speed_r    = (byte)((float)sData.speed_motors_R / 2.55); // step di 0.1V
  404b22:	4b5b      	ldr	r3, [pc, #364]	; (404c90 <Func_Pressure_Const_R+0x1d8>)
  404b24:	f893 01af 	ldrb.w	r0, [r3, #431]	; 0x1af
  404b28:	47a0      	blx	r4
  404b2a:	4b62      	ldr	r3, [pc, #392]	; (404cb4 <Func_Pressure_Const_R+0x1fc>)
  404b2c:	4798      	blx	r3
  404b2e:	a354      	add	r3, pc, #336	; (adr r3, 404c80 <Func_Pressure_Const_R+0x1c8>)
  404b30:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b34:	4c60      	ldr	r4, [pc, #384]	; (404cb8 <Func_Pressure_Const_R+0x200>)
  404b36:	47a0      	blx	r4
  404b38:	4b60      	ldr	r3, [pc, #384]	; (404cbc <Func_Pressure_Const_R+0x204>)
  404b3a:	4798      	blx	r3
  404b3c:	fa5f f980 	uxtb.w	r9, r0
		
		Kmax_calcDep = KMax * calcDepot();
  404b40:	4b5f      	ldr	r3, [pc, #380]	; (404cc0 <Func_Pressure_Const_R+0x208>)
  404b42:	4798      	blx	r3
		Kmin_reg = KMin;
		
		
		for( i=1; i < KRPM_Length;  i++) {
			if(qSetPoint > qmax_rpm[i])
  404b44:	495f      	ldr	r1, [pc, #380]	; (404cc4 <Func_Pressure_Const_R+0x20c>)
  404b46:	4650      	mov	r0, sl
  404b48:	4b5f      	ldr	r3, [pc, #380]	; (404cc8 <Func_Pressure_Const_R+0x210>)
  404b4a:	4798      	blx	r3
  404b4c:	2800      	cmp	r0, #0
  404b4e:	d13c      	bne.n	404bca <Func_Pressure_Const_R+0x112>
  404b50:	4d5e      	ldr	r5, [pc, #376]	; (404ccc <Func_Pressure_Const_R+0x214>)
		for( i=1; i < KRPM_Length;  i++) {
  404b52:	2402      	movs	r4, #2
			if(qSetPoint > qmax_rpm[i])
  404b54:	4e5c      	ldr	r6, [pc, #368]	; (404cc8 <Func_Pressure_Const_R+0x210>)
  404b56:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404b5a:	4650      	mov	r0, sl
  404b5c:	47b0      	blx	r6
  404b5e:	b910      	cbnz	r0, 404b66 <Func_Pressure_Const_R+0xae>
		for( i=1; i < KRPM_Length;  i++) {
  404b60:	3401      	adds	r4, #1
  404b62:	2c3d      	cmp	r4, #61	; 0x3d
  404b64:	d1f7      	bne.n	404b56 <Func_Pressure_Const_R+0x9e>
			break;
		}
		
		Kmin_reg = (100 - i + 1); // Kmin_reg : va da 99 a 40
  404b66:	f1c4 0465 	rsb	r4, r4, #101	; 0x65
  404b6a:	b2a4      	uxth	r4, r4

		korr = 0.000243055*qw*qw*0.8;

		Kmin_reg = (100 - i + 1); // Kmin_reg : va da 99 a 40

		if(speed_r >= Kmin_reg)
  404b6c:	fa1f f389 	uxth.w	r3, r9
  404b70:	429c      	cmp	r4, r3
  404b72:	d82c      	bhi.n	404bce <Func_Pressure_Const_R+0x116>
		qw = CalcQW_by_PW(speed_r, pw-korr);
  404b74:	4640      	mov	r0, r8
  404b76:	4b56      	ldr	r3, [pc, #344]	; (404cd0 <Func_Pressure_Const_R+0x218>)
  404b78:	4798      	blx	r3
  404b7a:	4956      	ldr	r1, [pc, #344]	; (404cd4 <Func_Pressure_Const_R+0x21c>)
  404b7c:	4b56      	ldr	r3, [pc, #344]	; (404cd8 <Func_Pressure_Const_R+0x220>)
  404b7e:	4798      	blx	r3
  404b80:	4b56      	ldr	r3, [pc, #344]	; (404cdc <Func_Pressure_Const_R+0x224>)
  404b82:	4798      	blx	r3
  404b84:	b281      	uxth	r1, r0
  404b86:	4648      	mov	r0, r9
  404b88:	4b55      	ldr	r3, [pc, #340]	; (404ce0 <Func_Pressure_Const_R+0x228>)
  404b8a:	4798      	blx	r3
		else {
			qw = CalcQW_by_PW(Kmin_reg, pw) * 0.95;
		}
		//--------------- visualizzo qw sul kts
		//sData.measure_airflow  = qw;
		Airflow_CAPR = qw;
  404b8c:	4b55      	ldr	r3, [pc, #340]	; (404ce4 <Func_Pressure_Const_R+0x22c>)
  404b8e:	4798      	blx	r3
  404b90:	4b55      	ldr	r3, [pc, #340]	; (404ce8 <Func_Pressure_Const_R+0x230>)
  404b92:	8018      	strh	r0, [r3, #0]
		
		//inizia la regolazione
		//---------------- fai la regolazione ogni 9 * 1.2 = 10.8 secondi
		if(++cnt_delay1 <= 60)
  404b94:	4a55      	ldr	r2, [pc, #340]	; (404cec <Func_Pressure_Const_R+0x234>)
  404b96:	7813      	ldrb	r3, [r2, #0]
  404b98:	3301      	adds	r3, #1
  404b9a:	b2db      	uxtb	r3, r3
  404b9c:	7013      	strb	r3, [r2, #0]
  404b9e:	2b3c      	cmp	r3, #60	; 0x3c
  404ba0:	d911      	bls.n	404bc6 <Func_Pressure_Const_R+0x10e>
		//------------------------------------------------------------------------
		// Commentato perchè di poca utilità e crea azzeramenti continui sul KTS
		//------------------------------------------------------------------------

		// Impostiamo di default i valori correnti di speed motors
		speedNew = sData.speed_motors_R; // passo il valore precedente
  404ba2:	4b3b      	ldr	r3, [pc, #236]	; (404c90 <Func_Pressure_Const_R+0x1d8>)
  404ba4:	f893 31af 	ldrb.w	r3, [r3, #431]	; 0x1af
		
		if(pw < (setPoint - 2)) {
  404ba8:	1eba      	subs	r2, r7, #2
  404baa:	4590      	cmp	r8, r2
  404bac:	d23b      	bcs.n	404c26 <Func_Pressure_Const_R+0x16e>
			soglie[0] = (setPoint >> 1);                // -50.0%
			soglie[1] = setPoint - (setPoint >> 2);     // -25.0%
			soglie[2] = setPoint - (setPoint >> 3);     // -12.5%
			soglie[3] = setPoint - (setPoint * 5)/ 100; //  -5.0%
			
			if(pw < soglie[0]) {
  404bae:	ebb8 0f57 	cmp.w	r8, r7, lsr #1
  404bb2:	da1b      	bge.n	404bec <Func_Pressure_Const_R+0x134>
				speedNew += 1;  // + 10%
  404bb4:	3301      	adds	r3, #1
				cnt_delay1 = -30;  // la correzione è grossa occorre apettare 18 sec., visto l'inerzia dei motori
  404bb6:	21e2      	movs	r1, #226	; 0xe2
  404bb8:	4a4c      	ldr	r2, [pc, #304]	; (404cec <Func_Pressure_Const_R+0x234>)
  404bba:	7011      	strb	r1, [r2, #0]
  404bbc:	2bff      	cmp	r3, #255	; 0xff
  404bbe:	bfa8      	it	ge
  404bc0:	23ff      	movge	r3, #255	; 0xff
			
			if(speedNew < 52)
			speedNew = 52;
		}
		
		temp_speed_motorsR = (speedNew &0x0FF);
  404bc2:	4a4b      	ldr	r2, [pc, #300]	; (404cf0 <Func_Pressure_Const_R+0x238>)
  404bc4:	7013      	strb	r3, [r2, #0]
  404bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for( i=1; i < KRPM_Length;  i++) {
  404bca:	2401      	movs	r4, #1
  404bcc:	e7cb      	b.n	404b66 <Func_Pressure_Const_R+0xae>
			qw = CalcQW_by_PW(Kmin_reg, pw) * 0.95;
  404bce:	fa1f f188 	uxth.w	r1, r8
  404bd2:	b2e0      	uxtb	r0, r4
  404bd4:	4b42      	ldr	r3, [pc, #264]	; (404ce0 <Func_Pressure_Const_R+0x228>)
  404bd6:	4798      	blx	r3
  404bd8:	4b36      	ldr	r3, [pc, #216]	; (404cb4 <Func_Pressure_Const_R+0x1fc>)
  404bda:	4798      	blx	r3
  404bdc:	a32a      	add	r3, pc, #168	; (adr r3, 404c88 <Func_Pressure_Const_R+0x1d0>)
  404bde:	e9d3 2300 	ldrd	r2, r3, [r3]
  404be2:	4c44      	ldr	r4, [pc, #272]	; (404cf4 <Func_Pressure_Const_R+0x23c>)
  404be4:	47a0      	blx	r4
  404be6:	4b44      	ldr	r3, [pc, #272]	; (404cf8 <Func_Pressure_Const_R+0x240>)
  404be8:	4798      	blx	r3
  404bea:	e7cf      	b.n	404b8c <Func_Pressure_Const_R+0xd4>
			soglie[1] = setPoint - (setPoint >> 2);     // -25.0%
  404bec:	eba7 0197 	sub.w	r1, r7, r7, lsr #2
				}else if (pw < soglie[1]) {
  404bf0:	4541      	cmp	r1, r8
  404bf2:	dd04      	ble.n	404bfe <Func_Pressure_Const_R+0x146>
				speedNew += 1;  // + 5%
  404bf4:	3301      	adds	r3, #1
				cnt_delay1 = -20;  // la correzione abbastanza grossa occorre apettare: 13.2 sec.
  404bf6:	21ec      	movs	r1, #236	; 0xec
  404bf8:	4a3c      	ldr	r2, [pc, #240]	; (404cec <Func_Pressure_Const_R+0x234>)
  404bfa:	7011      	strb	r1, [r2, #0]
  404bfc:	e7de      	b.n	404bbc <Func_Pressure_Const_R+0x104>
			soglie[2] = setPoint - (setPoint >> 3);     // -12.5%
  404bfe:	eba7 01d7 	sub.w	r1, r7, r7, lsr #3
				}else if (pw < soglie[2]) {
  404c02:	4541      	cmp	r1, r8
  404c04:	dd04      	ble.n	404c10 <Func_Pressure_Const_R+0x158>
				speedNew += 1;   // + 2%
  404c06:	3301      	adds	r3, #1
				cnt_delay1 = -10;
  404c08:	21f6      	movs	r1, #246	; 0xf6
  404c0a:	4a38      	ldr	r2, [pc, #224]	; (404cec <Func_Pressure_Const_R+0x234>)
  404c0c:	7011      	strb	r1, [r2, #0]
  404c0e:	e7d5      	b.n	404bbc <Func_Pressure_Const_R+0x104>
			soglie[3] = setPoint - (setPoint * 5)/ 100; //  -5.0%
  404c10:	eb07 0187 	add.w	r1, r7, r7, lsl #2
  404c14:	4839      	ldr	r0, [pc, #228]	; (404cfc <Func_Pressure_Const_R+0x244>)
  404c16:	fba0 0101 	umull	r0, r1, r0, r1
  404c1a:	eba7 1751 	sub.w	r7, r7, r1, lsr #5
			}else if (pw <= soglie[3])
  404c1e:	4547      	cmp	r7, r8
			speedNew++;
  404c20:	bfa8      	it	ge
  404c22:	3301      	addge	r3, #1
  404c24:	e7ca      	b.n	404bbc <Func_Pressure_Const_R+0x104>
			}else if(pw > (setPoint + 2)){
  404c26:	1cba      	adds	r2, r7, #2
  404c28:	4590      	cmp	r8, r2
  404c2a:	d9ca      	bls.n	404bc2 <Func_Pressure_Const_R+0x10a>
			soglie[0] = setPoint + (setPoint >> 1);     // +50.0%
  404c2c:	eb07 0257 	add.w	r2, r7, r7, lsr #1
			if(pw > soglie[0]) {
  404c30:	4542      	cmp	r2, r8
  404c32:	da07      	bge.n	404c44 <Func_Pressure_Const_R+0x18c>
				speedNew -= 1;  // + 10%
  404c34:	3b01      	subs	r3, #1
				cnt_delay1 = -30;  // la correzione è grossa occorre apettare 18 sec., visto l'inerzia dei motori
  404c36:	21e2      	movs	r1, #226	; 0xe2
  404c38:	4a2c      	ldr	r2, [pc, #176]	; (404cec <Func_Pressure_Const_R+0x234>)
  404c3a:	7011      	strb	r1, [r2, #0]
  404c3c:	2b34      	cmp	r3, #52	; 0x34
  404c3e:	bfb8      	it	lt
  404c40:	2334      	movlt	r3, #52	; 0x34
  404c42:	e7be      	b.n	404bc2 <Func_Pressure_Const_R+0x10a>
			soglie[1] = setPoint + (setPoint >> 2);     // +25.0%
  404c44:	eb07 0297 	add.w	r2, r7, r7, lsr #2
				}else if (pw > soglie[1]) {
  404c48:	4542      	cmp	r2, r8
  404c4a:	da04      	bge.n	404c56 <Func_Pressure_Const_R+0x19e>
				speedNew -= 1;  // + 5%
  404c4c:	3b01      	subs	r3, #1
				cnt_delay1 = -20;  // la correzione abbastanza grossa occorre apettare: 13.2 sec.
  404c4e:	21ec      	movs	r1, #236	; 0xec
  404c50:	4a26      	ldr	r2, [pc, #152]	; (404cec <Func_Pressure_Const_R+0x234>)
  404c52:	7011      	strb	r1, [r2, #0]
  404c54:	e7f2      	b.n	404c3c <Func_Pressure_Const_R+0x184>
			soglie[2] = setPoint + (setPoint >> 3);     // +12.5%
  404c56:	eb07 02d7 	add.w	r2, r7, r7, lsr #3
				}else if (pw > soglie[2]) {
  404c5a:	4542      	cmp	r2, r8
  404c5c:	da04      	bge.n	404c68 <Func_Pressure_Const_R+0x1b0>
				speedNew -= 1;
  404c5e:	3b01      	subs	r3, #1
				cnt_delay1 = -10;
  404c60:	21f6      	movs	r1, #246	; 0xf6
  404c62:	4a22      	ldr	r2, [pc, #136]	; (404cec <Func_Pressure_Const_R+0x234>)
  404c64:	7011      	strb	r1, [r2, #0]
  404c66:	e7e9      	b.n	404c3c <Func_Pressure_Const_R+0x184>
			soglie[3] = setPoint + (setPoint * 5)/ 100; //  +5.0%
  404c68:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  404c6c:	4823      	ldr	r0, [pc, #140]	; (404cfc <Func_Pressure_Const_R+0x244>)
  404c6e:	fba0 0202 	umull	r0, r2, r0, r2
  404c72:	eb07 1752 	add.w	r7, r7, r2, lsr #5
			}else if (pw <= soglie[3])
  404c76:	4547      	cmp	r7, r8
			speedNew--;
  404c78:	bfa8      	it	ge
  404c7a:	f103 33ff 	addge.w	r3, r3, #4294967295
  404c7e:	e7dd      	b.n	404c3c <Func_Pressure_Const_R+0x184>
  404c80:	66666666 	.word	0x66666666
  404c84:	40046666 	.word	0x40046666
  404c88:	66666666 	.word	0x66666666
  404c8c:	3fee6666 	.word	0x3fee6666
  404c90:	200013ac 	.word	0x200013ac
  404c94:	20001040 	.word	0x20001040
  404c98:	0040012d 	.word	0x0040012d
  404c9c:	20000aea 	.word	0x20000aea
  404ca0:	00404911 	.word	0x00404911
  404ca4:	0040d745 	.word	0x0040d745
  404ca8:	447a0000 	.word	0x447a0000
  404cac:	0040d95d 	.word	0x0040d95d
  404cb0:	0040d7f5 	.word	0x0040d7f5
  404cb4:	0040cea1 	.word	0x0040cea1
  404cb8:	0040d19d 	.word	0x0040d19d
  404cbc:	0040d4f9 	.word	0x0040d4f9
  404cc0:	00404341 	.word	0x00404341
  404cc4:	44c74017 	.word	0x44c74017
  404cc8:	0040db6d 	.word	0x0040db6d
  404ccc:	00412434 	.word	0x00412434
  404cd0:	0040d74d 	.word	0x0040d74d
  404cd4:	3c9f49dd 	.word	0x3c9f49dd
  404cd8:	0040d5e1 	.word	0x0040d5e1
  404cdc:	0040dbcd 	.word	0x0040dbcd
  404ce0:	004049a9 	.word	0x004049a9
  404ce4:	0040db81 	.word	0x0040db81
  404ce8:	20000a14 	.word	0x20000a14
  404cec:	20000b75 	.word	0x20000b75
  404cf0:	20000b99 	.word	0x20000b99
  404cf4:	0040cf49 	.word	0x0040cf49
  404cf8:	0040d539 	.word	0x0040d539
  404cfc:	51eb851f 	.word	0x51eb851f

00404d00 <Func_Pressure_Const_F>:
	signed char		deltaPSign;
	unsigned short            Kmin_reg,Kmax_calcDep;
	int                       speedNew = 51,i;
	
	
	rpm_r = (sData.rpm_motors_F[0] + rpm_r_preview[0]) >> 1;
  404d00:	4b75      	ldr	r3, [pc, #468]	; (404ed8 <Func_Pressure_Const_F+0x1d8>)
  404d02:	f9b3 31e1 	ldrsh.w	r3, [r3, #481]	; 0x1e1
  404d06:	4a75      	ldr	r2, [pc, #468]	; (404edc <Func_Pressure_Const_F+0x1dc>)
  404d08:	8811      	ldrh	r1, [r2, #0]
  404d0a:	440b      	add	r3, r1
  404d0c:	105b      	asrs	r3, r3, #1
	rpm_r_preview[0] = rpm_r;
  404d0e:	8013      	strh	r3, [r2, #0]
	
	// in caso di non rotazione esci dalla funzione
	if(rpm_r < 120)
  404d10:	b21b      	sxth	r3, r3
  404d12:	2b77      	cmp	r3, #119	; 0x77
  404d14:	dc00      	bgt.n	404d18 <Func_Pressure_Const_F+0x18>
  404d16:	4770      	bx	lr
{
  404d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d1c:	4607      	mov	r7, r0
	return;
	
	
	if(DigitAccessoryOperating(ACC_I2C_FLW1)) //CAPS
  404d1e:	2011      	movs	r0, #17
  404d20:	4b6f      	ldr	r3, [pc, #444]	; (404ee0 <Func_Pressure_Const_F+0x1e0>)
  404d22:	4798      	blx	r3
  404d24:	2800      	cmp	r0, #0
  404d26:	d072      	beq.n	404e0e <Func_Pressure_Const_F+0x10e>

		// avendo un dispositivo che legge direttamente la pressione
		// having a device that directly reads the pressure
		// la funzione è molto più semplice
		// the function is much simpler
		pw =  sData.AccI2C[ACC_I2C_FLW1].measure4;
  404d28:	4b6b      	ldr	r3, [pc, #428]	; (404ed8 <Func_Pressure_Const_F+0x1d8>)
  404d2a:	f9b3 8141 	ldrsh.w	r8, [r3, #321]	; 0x141
  404d2e:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
  404d32:	bfa8      	it	ge
  404d34:	f44f 7848 	movge.w	r8, #800	; 0x320
		
		//--------------- correzione limiti di lettura p
		if(pw > 800)
		pw = 800;
		if(pw < 0)
		pw = 10;
  404d38:	f1b8 0f00 	cmp.w	r8, #0
  404d3c:	bfb8      	it	lt
  404d3e:	f04f 080a 	movlt.w	r8, #10
		
		//--------------- visualizzo p sul kts
		//sData.measure_pressure = pw;
		Pressure_CAPS = pw;
  404d42:	4b68      	ldr	r3, [pc, #416]	; (404ee4 <Func_Pressure_Const_F+0x1e4>)
  404d44:	f8a3 8000 	strh.w	r8, [r3]
		//--------------- calcolo qw

		MaxAirFlow = (float)GetMaxAirFlow();
  404d48:	4b67      	ldr	r3, [pc, #412]	; (404ee8 <Func_Pressure_Const_F+0x1e8>)
  404d4a:	4798      	blx	r3
  404d4c:	4606      	mov	r6, r0
		qSetPoint  = MaxAirFlow * (float) ((float) setPoint / 1000.0);
  404d4e:	4c67      	ldr	r4, [pc, #412]	; (404eec <Func_Pressure_Const_F+0x1ec>)
  404d50:	4638      	mov	r0, r7
  404d52:	47a0      	blx	r4
  404d54:	4966      	ldr	r1, [pc, #408]	; (404ef0 <Func_Pressure_Const_F+0x1f0>)
  404d56:	4b67      	ldr	r3, [pc, #412]	; (404ef4 <Func_Pressure_Const_F+0x1f4>)
  404d58:	4798      	blx	r3
  404d5a:	4605      	mov	r5, r0
		MaxAirFlow = (float)GetMaxAirFlow();
  404d5c:	4630      	mov	r0, r6
  404d5e:	47a0      	blx	r4
		qSetPoint  = MaxAirFlow * (float) ((float) setPoint / 1000.0);
  404d60:	4601      	mov	r1, r0
  404d62:	4628      	mov	r0, r5
  404d64:	4b64      	ldr	r3, [pc, #400]	; (404ef8 <Func_Pressure_Const_F+0x1f8>)
  404d66:	4798      	blx	r3
  404d68:	4682      	mov	sl, r0
		speed_r    = (byte)((float)sData.speed_motors_F / 2.55); // step di 0.1V
  404d6a:	4b5b      	ldr	r3, [pc, #364]	; (404ed8 <Func_Pressure_Const_F+0x1d8>)
  404d6c:	f893 01b0 	ldrb.w	r0, [r3, #432]	; 0x1b0
  404d70:	47a0      	blx	r4
  404d72:	4b62      	ldr	r3, [pc, #392]	; (404efc <Func_Pressure_Const_F+0x1fc>)
  404d74:	4798      	blx	r3
  404d76:	a354      	add	r3, pc, #336	; (adr r3, 404ec8 <Func_Pressure_Const_F+0x1c8>)
  404d78:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d7c:	4c60      	ldr	r4, [pc, #384]	; (404f00 <Func_Pressure_Const_F+0x200>)
  404d7e:	47a0      	blx	r4
  404d80:	4b60      	ldr	r3, [pc, #384]	; (404f04 <Func_Pressure_Const_F+0x204>)
  404d82:	4798      	blx	r3
  404d84:	fa5f f980 	uxtb.w	r9, r0
		
		Kmax_calcDep = KMax * calcDepot();
  404d88:	4b5f      	ldr	r3, [pc, #380]	; (404f08 <Func_Pressure_Const_F+0x208>)
  404d8a:	4798      	blx	r3
		Kmin_reg = KMin;
		
		
		for( i=1; i < KRPM_Length;  i++) {
			if(qSetPoint > qmax_rpm[i])
  404d8c:	495f      	ldr	r1, [pc, #380]	; (404f0c <Func_Pressure_Const_F+0x20c>)
  404d8e:	4650      	mov	r0, sl
  404d90:	4b5f      	ldr	r3, [pc, #380]	; (404f10 <Func_Pressure_Const_F+0x210>)
  404d92:	4798      	blx	r3
  404d94:	2800      	cmp	r0, #0
  404d96:	d13c      	bne.n	404e12 <Func_Pressure_Const_F+0x112>
  404d98:	4d5e      	ldr	r5, [pc, #376]	; (404f14 <Func_Pressure_Const_F+0x214>)
		for( i=1; i < KRPM_Length;  i++) {
  404d9a:	2402      	movs	r4, #2
			if(qSetPoint > qmax_rpm[i])
  404d9c:	4e5c      	ldr	r6, [pc, #368]	; (404f10 <Func_Pressure_Const_F+0x210>)
  404d9e:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404da2:	4650      	mov	r0, sl
  404da4:	47b0      	blx	r6
  404da6:	b910      	cbnz	r0, 404dae <Func_Pressure_Const_F+0xae>
		for( i=1; i < KRPM_Length;  i++) {
  404da8:	3401      	adds	r4, #1
  404daa:	2c3d      	cmp	r4, #61	; 0x3d
  404dac:	d1f7      	bne.n	404d9e <Func_Pressure_Const_F+0x9e>
			break;
		}
		
		Kmin_reg = (100 - i + 1); // Kmin_reg : va da 99 a 40
  404dae:	f1c4 0465 	rsb	r4, r4, #101	; 0x65
  404db2:	b2a4      	uxth	r4, r4

		korr = 0.000243055*qw*qw*0.8;

		Kmin_reg = (100 - i + 1); // Kmin_reg : va da 99 a 40

		if(speed_r >= Kmin_reg)
  404db4:	fa1f f389 	uxth.w	r3, r9
  404db8:	429c      	cmp	r4, r3
  404dba:	d82c      	bhi.n	404e16 <Func_Pressure_Const_F+0x116>
		qw = CalcQW_by_PW(speed_r, pw-korr);
  404dbc:	4640      	mov	r0, r8
  404dbe:	4b56      	ldr	r3, [pc, #344]	; (404f18 <Func_Pressure_Const_F+0x218>)
  404dc0:	4798      	blx	r3
  404dc2:	4956      	ldr	r1, [pc, #344]	; (404f1c <Func_Pressure_Const_F+0x21c>)
  404dc4:	4b56      	ldr	r3, [pc, #344]	; (404f20 <Func_Pressure_Const_F+0x220>)
  404dc6:	4798      	blx	r3
  404dc8:	4b56      	ldr	r3, [pc, #344]	; (404f24 <Func_Pressure_Const_F+0x224>)
  404dca:	4798      	blx	r3
  404dcc:	b281      	uxth	r1, r0
  404dce:	4648      	mov	r0, r9
  404dd0:	4b55      	ldr	r3, [pc, #340]	; (404f28 <Func_Pressure_Const_F+0x228>)
  404dd2:	4798      	blx	r3
		else {
			qw = CalcQW_by_PW(Kmin_reg, pw) * 0.95;
		}
		//--------------- visualizzo qw sul kts
		//sData.measure_airflow  = qw;
		Airflow_CAPR = qw;
  404dd4:	4b55      	ldr	r3, [pc, #340]	; (404f2c <Func_Pressure_Const_F+0x22c>)
  404dd6:	4798      	blx	r3
  404dd8:	4b55      	ldr	r3, [pc, #340]	; (404f30 <Func_Pressure_Const_F+0x230>)
  404dda:	8018      	strh	r0, [r3, #0]
		
		//inizia la regolazione
		//---------------- fai la regolazione ogni 9 * 1.2 = 10.8 secondi
		if(++cnt_delay1 <= 60)
  404ddc:	4a55      	ldr	r2, [pc, #340]	; (404f34 <Func_Pressure_Const_F+0x234>)
  404dde:	7813      	ldrb	r3, [r2, #0]
  404de0:	3301      	adds	r3, #1
  404de2:	b2db      	uxtb	r3, r3
  404de4:	7013      	strb	r3, [r2, #0]
  404de6:	2b3c      	cmp	r3, #60	; 0x3c
  404de8:	d911      	bls.n	404e0e <Func_Pressure_Const_F+0x10e>
		//------------------------------------------------------------------------
		// Commentato perchè di poca utilità e crea azzeramenti continui sul KTS
		//------------------------------------------------------------------------

		// Impostiamo di default i valori correnti di speed motors
		speedNew = sData.speed_motors_F; // passo il valore precedente
  404dea:	4b3b      	ldr	r3, [pc, #236]	; (404ed8 <Func_Pressure_Const_F+0x1d8>)
  404dec:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
		
		if(pw < (setPoint - 2)) {
  404df0:	1eba      	subs	r2, r7, #2
  404df2:	4590      	cmp	r8, r2
  404df4:	d23b      	bcs.n	404e6e <Func_Pressure_Const_F+0x16e>
			soglie[0] = (setPoint >> 1);                // -50.0%
			soglie[1] = setPoint - (setPoint >> 2);     // -25.0%
			soglie[2] = setPoint - (setPoint >> 3);     // -12.5%
			soglie[3] = setPoint - (setPoint * 5)/ 100; //  -5.0%
			
			if(pw < soglie[0]) {
  404df6:	ebb8 0f57 	cmp.w	r8, r7, lsr #1
  404dfa:	da1b      	bge.n	404e34 <Func_Pressure_Const_F+0x134>
				speedNew += 1;  // + 10%
  404dfc:	3301      	adds	r3, #1
				cnt_delay1 = -30;  // la correzione è grossa occorre apettare 18 sec., visto l'inerzia dei motori
  404dfe:	21e2      	movs	r1, #226	; 0xe2
  404e00:	4a4c      	ldr	r2, [pc, #304]	; (404f34 <Func_Pressure_Const_F+0x234>)
  404e02:	7011      	strb	r1, [r2, #0]
  404e04:	2bff      	cmp	r3, #255	; 0xff
  404e06:	bfa8      	it	ge
  404e08:	23ff      	movge	r3, #255	; 0xff
			
			if(speedNew < 52)
			speedNew = 52;
		}
		
		temp_speed_motorsF = (speedNew &0x0FF);
  404e0a:	4a4b      	ldr	r2, [pc, #300]	; (404f38 <Func_Pressure_Const_F+0x238>)
  404e0c:	7013      	strb	r3, [r2, #0]
  404e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for( i=1; i < KRPM_Length;  i++) {
  404e12:	2401      	movs	r4, #1
  404e14:	e7cb      	b.n	404dae <Func_Pressure_Const_F+0xae>
			qw = CalcQW_by_PW(Kmin_reg, pw) * 0.95;
  404e16:	fa1f f188 	uxth.w	r1, r8
  404e1a:	b2e0      	uxtb	r0, r4
  404e1c:	4b42      	ldr	r3, [pc, #264]	; (404f28 <Func_Pressure_Const_F+0x228>)
  404e1e:	4798      	blx	r3
  404e20:	4b36      	ldr	r3, [pc, #216]	; (404efc <Func_Pressure_Const_F+0x1fc>)
  404e22:	4798      	blx	r3
  404e24:	a32a      	add	r3, pc, #168	; (adr r3, 404ed0 <Func_Pressure_Const_F+0x1d0>)
  404e26:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e2a:	4c44      	ldr	r4, [pc, #272]	; (404f3c <Func_Pressure_Const_F+0x23c>)
  404e2c:	47a0      	blx	r4
  404e2e:	4b44      	ldr	r3, [pc, #272]	; (404f40 <Func_Pressure_Const_F+0x240>)
  404e30:	4798      	blx	r3
  404e32:	e7cf      	b.n	404dd4 <Func_Pressure_Const_F+0xd4>
			soglie[1] = setPoint - (setPoint >> 2);     // -25.0%
  404e34:	eba7 0197 	sub.w	r1, r7, r7, lsr #2
				}else if (pw < soglie[1]) {
  404e38:	4541      	cmp	r1, r8
  404e3a:	dd04      	ble.n	404e46 <Func_Pressure_Const_F+0x146>
				speedNew += 1;  // + 5%
  404e3c:	3301      	adds	r3, #1
				cnt_delay1 = -20;  // la correzione abbastanza grossa occorre apettare: 13.2 sec.
  404e3e:	21ec      	movs	r1, #236	; 0xec
  404e40:	4a3c      	ldr	r2, [pc, #240]	; (404f34 <Func_Pressure_Const_F+0x234>)
  404e42:	7011      	strb	r1, [r2, #0]
  404e44:	e7de      	b.n	404e04 <Func_Pressure_Const_F+0x104>
			soglie[2] = setPoint - (setPoint >> 3);     // -12.5%
  404e46:	eba7 01d7 	sub.w	r1, r7, r7, lsr #3
				}else if (pw < soglie[2]) {
  404e4a:	4541      	cmp	r1, r8
  404e4c:	dd04      	ble.n	404e58 <Func_Pressure_Const_F+0x158>
				speedNew += 1;   // + 2%
  404e4e:	3301      	adds	r3, #1
				cnt_delay1 = -10;
  404e50:	21f6      	movs	r1, #246	; 0xf6
  404e52:	4a38      	ldr	r2, [pc, #224]	; (404f34 <Func_Pressure_Const_F+0x234>)
  404e54:	7011      	strb	r1, [r2, #0]
  404e56:	e7d5      	b.n	404e04 <Func_Pressure_Const_F+0x104>
			soglie[3] = setPoint - (setPoint * 5)/ 100; //  -5.0%
  404e58:	eb07 0187 	add.w	r1, r7, r7, lsl #2
  404e5c:	4839      	ldr	r0, [pc, #228]	; (404f44 <Func_Pressure_Const_F+0x244>)
  404e5e:	fba0 0101 	umull	r0, r1, r0, r1
  404e62:	eba7 1751 	sub.w	r7, r7, r1, lsr #5
			}else if (pw <= soglie[3])
  404e66:	4547      	cmp	r7, r8
			speedNew++;
  404e68:	bfa8      	it	ge
  404e6a:	3301      	addge	r3, #1
  404e6c:	e7ca      	b.n	404e04 <Func_Pressure_Const_F+0x104>
			}else if(pw > (setPoint + 2)){
  404e6e:	1cba      	adds	r2, r7, #2
  404e70:	4590      	cmp	r8, r2
  404e72:	d9ca      	bls.n	404e0a <Func_Pressure_Const_F+0x10a>
			soglie[0] = setPoint + (setPoint >> 1);     // +50.0%
  404e74:	eb07 0257 	add.w	r2, r7, r7, lsr #1
			if(pw > soglie[0]) {
  404e78:	4542      	cmp	r2, r8
  404e7a:	da07      	bge.n	404e8c <Func_Pressure_Const_F+0x18c>
				speedNew -= 1;  // + 10%
  404e7c:	3b01      	subs	r3, #1
				cnt_delay1 = -30;  // la correzione è grossa occorre apettare 18 sec., visto l'inerzia dei motori
  404e7e:	21e2      	movs	r1, #226	; 0xe2
  404e80:	4a2c      	ldr	r2, [pc, #176]	; (404f34 <Func_Pressure_Const_F+0x234>)
  404e82:	7011      	strb	r1, [r2, #0]
  404e84:	2b34      	cmp	r3, #52	; 0x34
  404e86:	bfb8      	it	lt
  404e88:	2334      	movlt	r3, #52	; 0x34
  404e8a:	e7be      	b.n	404e0a <Func_Pressure_Const_F+0x10a>
			soglie[1] = setPoint + (setPoint >> 2);     // +25.0%
  404e8c:	eb07 0297 	add.w	r2, r7, r7, lsr #2
				}else if (pw > soglie[1]) {
  404e90:	4542      	cmp	r2, r8
  404e92:	da04      	bge.n	404e9e <Func_Pressure_Const_F+0x19e>
				speedNew -= 1;  // + 5%
  404e94:	3b01      	subs	r3, #1
				cnt_delay1 = -20;  // la correzione abbastanza grossa occorre apettare: 13.2 sec.
  404e96:	21ec      	movs	r1, #236	; 0xec
  404e98:	4a26      	ldr	r2, [pc, #152]	; (404f34 <Func_Pressure_Const_F+0x234>)
  404e9a:	7011      	strb	r1, [r2, #0]
  404e9c:	e7f2      	b.n	404e84 <Func_Pressure_Const_F+0x184>
			soglie[2] = setPoint + (setPoint >> 3);     // +12.5%
  404e9e:	eb07 02d7 	add.w	r2, r7, r7, lsr #3
				}else if (pw > soglie[2]) {
  404ea2:	4542      	cmp	r2, r8
  404ea4:	da04      	bge.n	404eb0 <Func_Pressure_Const_F+0x1b0>
				speedNew -= 1;
  404ea6:	3b01      	subs	r3, #1
				cnt_delay1 = -10;
  404ea8:	21f6      	movs	r1, #246	; 0xf6
  404eaa:	4a22      	ldr	r2, [pc, #136]	; (404f34 <Func_Pressure_Const_F+0x234>)
  404eac:	7011      	strb	r1, [r2, #0]
  404eae:	e7e9      	b.n	404e84 <Func_Pressure_Const_F+0x184>
			soglie[3] = setPoint + (setPoint * 5)/ 100; //  +5.0%
  404eb0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  404eb4:	4823      	ldr	r0, [pc, #140]	; (404f44 <Func_Pressure_Const_F+0x244>)
  404eb6:	fba0 0202 	umull	r0, r2, r0, r2
  404eba:	eb07 1752 	add.w	r7, r7, r2, lsr #5
			}else if (pw <= soglie[3])
  404ebe:	4547      	cmp	r7, r8
			speedNew--;
  404ec0:	bfa8      	it	ge
  404ec2:	f103 33ff 	addge.w	r3, r3, #4294967295
  404ec6:	e7dd      	b.n	404e84 <Func_Pressure_Const_F+0x184>
  404ec8:	66666666 	.word	0x66666666
  404ecc:	40046666 	.word	0x40046666
  404ed0:	66666666 	.word	0x66666666
  404ed4:	3fee6666 	.word	0x3fee6666
  404ed8:	200013ac 	.word	0x200013ac
  404edc:	20001040 	.word	0x20001040
  404ee0:	0040012d 	.word	0x0040012d
  404ee4:	20000aec 	.word	0x20000aec
  404ee8:	00404911 	.word	0x00404911
  404eec:	0040d745 	.word	0x0040d745
  404ef0:	447a0000 	.word	0x447a0000
  404ef4:	0040d95d 	.word	0x0040d95d
  404ef8:	0040d7f5 	.word	0x0040d7f5
  404efc:	0040cea1 	.word	0x0040cea1
  404f00:	0040d19d 	.word	0x0040d19d
  404f04:	0040d4f9 	.word	0x0040d4f9
  404f08:	00404341 	.word	0x00404341
  404f0c:	44c74017 	.word	0x44c74017
  404f10:	0040db6d 	.word	0x0040db6d
  404f14:	00412434 	.word	0x00412434
  404f18:	0040d74d 	.word	0x0040d74d
  404f1c:	3c9f49dd 	.word	0x3c9f49dd
  404f20:	0040d5e1 	.word	0x0040d5e1
  404f24:	0040dbcd 	.word	0x0040dbcd
  404f28:	004049a9 	.word	0x004049a9
  404f2c:	0040db81 	.word	0x0040db81
  404f30:	20000a14 	.word	0x20000a14
  404f34:	20000b75 	.word	0x20000b75
  404f38:	20000b98 	.word	0x20000b98
  404f3c:	0040cf49 	.word	0x0040cf49
  404f40:	0040d539 	.word	0x0040d539
  404f44:	51eb851f 	.word	0x51eb851f

00404f48 <Func_AirFlow_Const>:
//    1:  Con accessorio esterno
//    2:  Con calcoli tramite SW
//------------------------------------------------------------------------------
//#define _PRINT_CAF // attiva le stringhe di debug
void Func_AirFlow_Const( unsigned int setPoint )
{
  404f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float			delta_P, delta_Q;      
               
  
        // dobbiamo mediare di + gli rpm. 
        for(i=(NUM_AVERAGE_RPM-1); i; i--) 
           rpm_r_preview[i] = rpm_r_preview[i-1];  
  404f4c:	4b90      	ldr	r3, [pc, #576]	; (405190 <Func_AirFlow_Const+0x248>)
  404f4e:	889a      	ldrh	r2, [r3, #4]
  404f50:	80da      	strh	r2, [r3, #6]
  404f52:	8859      	ldrh	r1, [r3, #2]
  404f54:	8099      	strh	r1, [r3, #4]
  404f56:	881c      	ldrh	r4, [r3, #0]
  404f58:	805c      	strh	r4, [r3, #2]
       
        rpm_r_preview[0] = sData.rpm_motors_R[0];   
  404f5a:	4d8e      	ldr	r5, [pc, #568]	; (405194 <Func_AirFlow_Const+0x24c>)
  404f5c:	f9b5 51db 	ldrsh.w	r5, [r5, #475]	; 0x1db
  404f60:	801d      	strh	r5, [r3, #0]
        
        for(i=0, rpm_r = 0; i < NUM_AVERAGE_RPM; i++) 
          rpm_r += rpm_r_preview[i];    
  404f62:	442c      	add	r4, r5
  404f64:	4421      	add	r1, r4
  404f66:	440a      	add	r2, r1
     
        rpm_r /= NUM_AVERAGE_RPM;      
        
         // in caso di non rotazione esci dalla funzione 
        if(rpm_r <= 150)
  404f68:	b212      	sxth	r2, r2
  404f6a:	f5b2 7f17 	cmp.w	r2, #604	; 0x25c
  404f6e:	db06      	blt.n	404f7e <Func_AirFlow_Const+0x36>
           return;
        
        if(++cnt_delay <= 6) 
  404f70:	4a89      	ldr	r2, [pc, #548]	; (405198 <Func_AirFlow_Const+0x250>)
  404f72:	7813      	ldrb	r3, [r2, #0]
  404f74:	3301      	adds	r3, #1
  404f76:	b2db      	uxtb	r3, r3
  404f78:	7013      	strb	r3, [r2, #0]
  404f7a:	2b06      	cmp	r3, #6
  404f7c:	d801      	bhi.n	404f82 <Func_AirFlow_Const+0x3a>
  404f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f82:	4604      	mov	r4, r0
          return;
           
        MaxAirFlow = (float)GetMaxAirFlow();
  404f84:	4b85      	ldr	r3, [pc, #532]	; (40519c <Func_AirFlow_Const+0x254>)
  404f86:	4798      	blx	r3
  404f88:	4d85      	ldr	r5, [pc, #532]	; (4051a0 <Func_AirFlow_Const+0x258>)
  404f8a:	47a8      	blx	r5
  404f8c:	4680      	mov	r8, r0
        qSetPoint  = MaxAirFlow * (float) ((float) setPoint / 1000.0);    
  404f8e:	4620      	mov	r0, r4
  404f90:	47a8      	blx	r5
  404f92:	4984      	ldr	r1, [pc, #528]	; (4051a4 <Func_AirFlow_Const+0x25c>)
  404f94:	4b84      	ldr	r3, [pc, #528]	; (4051a8 <Func_AirFlow_Const+0x260>)
  404f96:	4798      	blx	r3
  404f98:	4641      	mov	r1, r8
  404f9a:	4b84      	ldr	r3, [pc, #528]	; (4051ac <Func_AirFlow_Const+0x264>)
  404f9c:	4798      	blx	r3
  404f9e:	4606      	mov	r6, r0
        speed_r    = (byte)((float)sData.speed_motors_R / 2.55); // step di 0.1V            
  404fa0:	4b7c      	ldr	r3, [pc, #496]	; (405194 <Func_AirFlow_Const+0x24c>)
  404fa2:	f893 01af 	ldrb.w	r0, [r3, #431]	; 0x1af
  404fa6:	47a8      	blx	r5
  404fa8:	4b81      	ldr	r3, [pc, #516]	; (4051b0 <Func_AirFlow_Const+0x268>)
  404faa:	4798      	blx	r3
  404fac:	a374      	add	r3, pc, #464	; (adr r3, 405180 <Func_AirFlow_Const+0x238>)
  404fae:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fb2:	4c80      	ldr	r4, [pc, #512]	; (4051b4 <Func_AirFlow_Const+0x26c>)
  404fb4:	47a0      	blx	r4
  404fb6:	4b80      	ldr	r3, [pc, #512]	; (4051b8 <Func_AirFlow_Const+0x270>)
  404fb8:	4798      	blx	r3
  404fba:	fa5f fa80 	uxtb.w	sl, r0
   
        Kmax_calcDep = KMax * calcDepot();             
  404fbe:	4b7f      	ldr	r3, [pc, #508]	; (4051bc <Func_AirFlow_Const+0x274>)
  404fc0:	4798      	blx	r3
        Kmin_reg = KMin;
        
        
        for( i=1; i < KRPM_Length;  i++) {
           if(qSetPoint > qmax_rpm[i])
  404fc2:	497f      	ldr	r1, [pc, #508]	; (4051c0 <Func_AirFlow_Const+0x278>)
  404fc4:	4630      	mov	r0, r6
  404fc6:	4b7f      	ldr	r3, [pc, #508]	; (4051c4 <Func_AirFlow_Const+0x27c>)
  404fc8:	4798      	blx	r3
  404fca:	bb00      	cbnz	r0, 40500e <Func_AirFlow_Const+0xc6>
  404fcc:	4d7e      	ldr	r5, [pc, #504]	; (4051c8 <Func_AirFlow_Const+0x280>)
        for( i=1; i < KRPM_Length;  i++) {
  404fce:	2402      	movs	r4, #2
           if(qSetPoint > qmax_rpm[i])
  404fd0:	4f7c      	ldr	r7, [pc, #496]	; (4051c4 <Func_AirFlow_Const+0x27c>)
  404fd2:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404fd6:	4630      	mov	r0, r6
  404fd8:	47b8      	blx	r7
  404fda:	b918      	cbnz	r0, 404fe4 <Func_AirFlow_Const+0x9c>
        for( i=1; i < KRPM_Length;  i++) {
  404fdc:	3401      	adds	r4, #1
  404fde:	b2e4      	uxtb	r4, r4
  404fe0:	2c3d      	cmp	r4, #61	; 0x3d
  404fe2:	d1f6      	bne.n	404fd2 <Func_AirFlow_Const+0x8a>
              break;         
        }  
        
        Kmin_reg = (100 - i + 1); // Kmin_reg : va da 99 a 40
  404fe4:	f1c4 0465 	rsb	r4, r4, #101	; 0x65
  404fe8:	b2a4      	uxth	r4, r4
//----------------------------------

#ifdef COMESSA_2388
         // avendo un dispositivo che legge direttamente la pressione 
         // la funzione è molto più semplice
         pw =  sData.AccI2C[ACC_I2C_PCAP].measure1;
  404fea:	4b6a      	ldr	r3, [pc, #424]	; (405194 <Func_AirFlow_Const+0x24c>)
  404fec:	f9b3 00ab 	ldrsh.w	r0, [r3, #171]	; 0xab
  404ff0:	4b76      	ldr	r3, [pc, #472]	; (4051cc <Func_AirFlow_Const+0x284>)
  404ff2:	4798      	blx	r3
  404ff4:	4681      	mov	r9, r0
         
         if(pw > 800)
  404ff6:	4976      	ldr	r1, [pc, #472]	; (4051d0 <Func_AirFlow_Const+0x288>)
  404ff8:	4b72      	ldr	r3, [pc, #456]	; (4051c4 <Func_AirFlow_Const+0x27c>)
  404ffa:	4798      	blx	r3
  404ffc:	b948      	cbnz	r0, 405012 <Func_AirFlow_Const+0xca>
              pw = 800;
         if(pw < 0)
  404ffe:	2100      	movs	r1, #0
  405000:	4648      	mov	r0, r9
  405002:	4b74      	ldr	r3, [pc, #464]	; (4051d4 <Func_AirFlow_Const+0x28c>)
  405004:	4798      	blx	r3
  405006:	b130      	cbz	r0, 405016 <Func_AirFlow_Const+0xce>
             pw = 10;
  405008:	f8df 921c 	ldr.w	r9, [pc, #540]	; 405228 <Func_AirFlow_Const+0x2e0>
  40500c:	e003      	b.n	405016 <Func_AirFlow_Const+0xce>
        for( i=1; i < KRPM_Length;  i++) {
  40500e:	2401      	movs	r4, #1
  405010:	e7e8      	b.n	404fe4 <Func_AirFlow_Const+0x9c>
              pw = 800;
  405012:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 4051d0 <Func_AirFlow_Const+0x288>
         
         sData.measure_pressure = pw;
  405016:	4648      	mov	r0, r9
  405018:	4b6f      	ldr	r3, [pc, #444]	; (4051d8 <Func_AirFlow_Const+0x290>)
  40501a:	4798      	blx	r3
  40501c:	4b5d      	ldr	r3, [pc, #372]	; (405194 <Func_AirFlow_Const+0x24c>)
  40501e:	f8a3 01c3 	strh.w	r0, [r3, #451]	; 0x1c3
         
         korr = 0.000243055*qw*qw;
         
         if(speed_r >= Kmin_reg) 
  405022:	fa1f f58a 	uxth.w	r5, sl
  405026:	42ac      	cmp	r4, r5
  405028:	d87e      	bhi.n	405128 <Func_AirFlow_Const+0x1e0>
           qw = CalcQW_by_PW(speed_r, pw-korr);
  40502a:	496c      	ldr	r1, [pc, #432]	; (4051dc <Func_AirFlow_Const+0x294>)
  40502c:	4648      	mov	r0, r9
  40502e:	4b6c      	ldr	r3, [pc, #432]	; (4051e0 <Func_AirFlow_Const+0x298>)
  405030:	4798      	blx	r3
  405032:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 405220 <Func_AirFlow_Const+0x2d8>
  405036:	47c8      	blx	r9
  405038:	b281      	uxth	r1, r0
  40503a:	4650      	mov	r0, sl
  40503c:	4b69      	ldr	r3, [pc, #420]	; (4051e4 <Func_AirFlow_Const+0x29c>)
  40503e:	4798      	blx	r3
  405040:	4607      	mov	r7, r0
           pw = 750;
#endif

       	      
	// Impostiamo di default i valori correnti di speed motors
	temp_speed_motorsR = sData.speed_motors_R; // passo il valore precedente
  405042:	4b54      	ldr	r3, [pc, #336]	; (405194 <Func_AirFlow_Const+0x24c>)
  405044:	f893 31af 	ldrb.w	r3, [r3, #431]	; 0x1af
  405048:	4a67      	ldr	r2, [pc, #412]	; (4051e8 <Func_AirFlow_Const+0x2a0>)
  40504a:	7013      	strb	r3, [r2, #0]
	temp_speed_motorsF = temp_speed_motorsR;
  40504c:	4a67      	ldr	r2, [pc, #412]	; (4051ec <Func_AirFlow_Const+0x2a4>)
  40504e:	7013      	strb	r3, [r2, #0]
          acc_measure_pressure    >>= 1;
          sample_measure_pressure >>= 1;
        }   
#endif

        acc_measure_airflow += (unsigned short)qw;
  405050:	47c8      	blx	r9
  405052:	4a67      	ldr	r2, [pc, #412]	; (4051f0 <Func_AirFlow_Const+0x2a8>)
  405054:	6813      	ldr	r3, [r2, #0]
  405056:	fa13 f080 	uxtah	r0, r3, r0
  40505a:	6010      	str	r0, [r2, #0]
        sample_measure_airflow++;
  40505c:	4a65      	ldr	r2, [pc, #404]	; (4051f4 <Func_AirFlow_Const+0x2ac>)
  40505e:	6813      	ldr	r3, [r2, #0]
  405060:	3301      	adds	r3, #1
  405062:	6013      	str	r3, [r2, #0]
        
                       
        if (sample_measure_airflow >= 8) {
  405064:	2b07      	cmp	r3, #7
  405066:	dc7c      	bgt.n	405162 <Func_AirFlow_Const+0x21a>
        }    
        
        delta_Q  = (float)qSetPoint - (float) qw;   
                
        
        if(cnt_delay < 12) 
  405068:	4b4b      	ldr	r3, [pc, #300]	; (405198 <Func_AirFlow_Const+0x250>)
  40506a:	781b      	ldrb	r3, [r3, #0]
  40506c:	2b0b      	cmp	r3, #11
  40506e:	d986      	bls.n	404f7e <Func_AirFlow_Const+0x36>
        delta_Q  = (float)qSetPoint - (float) qw;   
  405070:	4639      	mov	r1, r7
  405072:	4630      	mov	r0, r6
  405074:	4b5a      	ldr	r3, [pc, #360]	; (4051e0 <Func_AirFlow_Const+0x298>)
  405076:	4798      	blx	r3
  405078:	4607      	mov	r7, r0
          return; 
                  
        cnt_delay = 0; 
  40507a:	2200      	movs	r2, #0
  40507c:	4b46      	ldr	r3, [pc, #280]	; (405198 <Func_AirFlow_Const+0x250>)
  40507e:	701a      	strb	r2, [r3, #0]
        
        // Calcola la Curva di impianto, e la sua distanza dal punto di lavoro.        
        pwNew    = (pw / (long int)(qw * qw)) * ((long int)qSetPoint * qSetPoint);
        delta_P  = pwNew - pw;      
        errMax   = ((MaxAirFlow * 5.0) + 50) / 100;
  405080:	4640      	mov	r0, r8
  405082:	4b4b      	ldr	r3, [pc, #300]	; (4051b0 <Func_AirFlow_Const+0x268>)
  405084:	4798      	blx	r3
  405086:	2200      	movs	r2, #0
  405088:	4b5b      	ldr	r3, [pc, #364]	; (4051f8 <Func_AirFlow_Const+0x2b0>)
  40508a:	4e5c      	ldr	r6, [pc, #368]	; (4051fc <Func_AirFlow_Const+0x2b4>)
  40508c:	47b0      	blx	r6
  40508e:	2200      	movs	r2, #0
  405090:	4b5b      	ldr	r3, [pc, #364]	; (405200 <Func_AirFlow_Const+0x2b8>)
  405092:	4e5c      	ldr	r6, [pc, #368]	; (405204 <Func_AirFlow_Const+0x2bc>)
  405094:	47b0      	blx	r6
  405096:	2200      	movs	r2, #0
  405098:	4b5b      	ldr	r3, [pc, #364]	; (405208 <Func_AirFlow_Const+0x2c0>)
  40509a:	4e46      	ldr	r6, [pc, #280]	; (4051b4 <Func_AirFlow_Const+0x26c>)
  40509c:	47b0      	blx	r6
  40509e:	4b5b      	ldr	r3, [pc, #364]	; (40520c <Func_AirFlow_Const+0x2c4>)
  4050a0:	4798      	blx	r3
  4050a2:	4606      	mov	r6, r0
        Serial_println(Kmax_calcDep, DEC);     
#endif
//-----------------------------------      

        // se il sistema chiede una diversa pressione, e non compromettiamo la portatata, aumentiamo o diminuiamo
	if (((delta_Q >= errMax) || (delta_Q <= -errMax))) //&& (speed_r >= Kmin_reg))  // && (speed_r <= Kmax_calcDep))
  4050a4:	4601      	mov	r1, r0
  4050a6:	4638      	mov	r0, r7
  4050a8:	4b59      	ldr	r3, [pc, #356]	; (405210 <Func_AirFlow_Const+0x2c8>)
  4050aa:	4798      	blx	r3
  4050ac:	b938      	cbnz	r0, 4050be <Func_AirFlow_Const+0x176>
  4050ae:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
  4050b2:	4638      	mov	r0, r7
  4050b4:	4b57      	ldr	r3, [pc, #348]	; (405214 <Func_AirFlow_Const+0x2cc>)
  4050b6:	4798      	blx	r3
  4050b8:	2800      	cmp	r0, #0
  4050ba:	f43f af60 	beq.w	404f7e <Func_AirFlow_Const+0x36>
             Serial_print(speedNew, DEC);
#endif
//-----------------------------------                                     


             if (delta_Q >= (errMax * 3))      // > 18.0%
  4050be:	4956      	ldr	r1, [pc, #344]	; (405218 <Func_AirFlow_Const+0x2d0>)
  4050c0:	4630      	mov	r0, r6
  4050c2:	4b3a      	ldr	r3, [pc, #232]	; (4051ac <Func_AirFlow_Const+0x264>)
  4050c4:	4798      	blx	r3
  4050c6:	4680      	mov	r8, r0
  4050c8:	4601      	mov	r1, r0
  4050ca:	4638      	mov	r0, r7
  4050cc:	4b50      	ldr	r3, [pc, #320]	; (405210 <Func_AirFlow_Const+0x2c8>)
  4050ce:	4798      	blx	r3
  4050d0:	2800      	cmp	r0, #0
  4050d2:	f000 80ab 	beq.w	40522c <Func_AirFlow_Const+0x2e4>
               speedNew += 5;     // +5%  
  4050d6:	3505      	adds	r5, #5
  4050d8:	2d64      	cmp	r5, #100	; 0x64
  4050da:	bf28      	it	cs
  4050dc:	2564      	movcs	r5, #100	; 0x64
  4050de:	b2a8      	uxth	r0, r5
#ifdef _PRINT_CAF
             Serial_print1("  New SpeedR: ");
             Serial_print(speedNew, DEC);
#endif
//-----------------------------------                                     
             calc_new_PWM = ((float)((float)speedNew + 0.45) * 2.55); // da 102 a 255
  4050e0:	42a0      	cmp	r0, r4
  4050e2:	bf38      	it	cc
  4050e4:	4620      	movcc	r0, r4
  4050e6:	4b2e      	ldr	r3, [pc, #184]	; (4051a0 <Func_AirFlow_Const+0x258>)
  4050e8:	4798      	blx	r3
  4050ea:	4d31      	ldr	r5, [pc, #196]	; (4051b0 <Func_AirFlow_Const+0x268>)
  4050ec:	47a8      	blx	r5
  4050ee:	a326      	add	r3, pc, #152	; (adr r3, 405188 <Func_AirFlow_Const+0x240>)
  4050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050f4:	4c43      	ldr	r4, [pc, #268]	; (405204 <Func_AirFlow_Const+0x2bc>)
  4050f6:	47a0      	blx	r4
  4050f8:	4c44      	ldr	r4, [pc, #272]	; (40520c <Func_AirFlow_Const+0x2c4>)
  4050fa:	47a0      	blx	r4
  4050fc:	47a8      	blx	r5
  4050fe:	a320      	add	r3, pc, #128	; (adr r3, 405180 <Func_AirFlow_Const+0x238>)
  405100:	e9d3 2300 	ldrd	r2, r3, [r3]
  405104:	4d3d      	ldr	r5, [pc, #244]	; (4051fc <Func_AirFlow_Const+0x2b4>)
  405106:	47a8      	blx	r5
  405108:	47a0      	blx	r4
  40510a:	4604      	mov	r4, r0
             if(calc_new_PWM > 255.0)
  40510c:	4943      	ldr	r1, [pc, #268]	; (40521c <Func_AirFlow_Const+0x2d4>)
  40510e:	4b2d      	ldr	r3, [pc, #180]	; (4051c4 <Func_AirFlow_Const+0x27c>)
  405110:	4798      	blx	r3
  405112:	b100      	cbz	r0, 405116 <Func_AirFlow_Const+0x1ce>
               calc_new_PWM = 255.0;
  405114:	4c41      	ldr	r4, [pc, #260]	; (40521c <Func_AirFlow_Const+0x2d4>)
               
             temp_speed_motorsR = (byte)calc_new_PWM; // da 102 a 255
  405116:	4620      	mov	r0, r4
  405118:	4b41      	ldr	r3, [pc, #260]	; (405220 <Func_AirFlow_Const+0x2d8>)
  40511a:	4798      	blx	r3
  40511c:	b2c0      	uxtb	r0, r0
  40511e:	4b32      	ldr	r3, [pc, #200]	; (4051e8 <Func_AirFlow_Const+0x2a0>)
  405120:	7018      	strb	r0, [r3, #0]
	     temp_speed_motorsF = temp_speed_motorsR;    
  405122:	4b32      	ldr	r3, [pc, #200]	; (4051ec <Func_AirFlow_Const+0x2a4>)
  405124:	7018      	strb	r0, [r3, #0]
  405126:	e72a      	b.n	404f7e <Func_AirFlow_Const+0x36>
           qw = CalcQW_by_PW(Kmin_reg, pw) * 0.95;
  405128:	4648      	mov	r0, r9
  40512a:	4b3d      	ldr	r3, [pc, #244]	; (405220 <Func_AirFlow_Const+0x2d8>)
  40512c:	4798      	blx	r3
  40512e:	b281      	uxth	r1, r0
  405130:	b2e0      	uxtb	r0, r4
  405132:	4b2c      	ldr	r3, [pc, #176]	; (4051e4 <Func_AirFlow_Const+0x29c>)
  405134:	4798      	blx	r3
           temp_speed_motorsR = ((Kmin_reg + 0.45) * 2.55); 
  405136:	4620      	mov	r0, r4
  405138:	4b3a      	ldr	r3, [pc, #232]	; (405224 <Func_AirFlow_Const+0x2dc>)
  40513a:	4798      	blx	r3
  40513c:	a312      	add	r3, pc, #72	; (adr r3, 405188 <Func_AirFlow_Const+0x240>)
  40513e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405142:	4c30      	ldr	r4, [pc, #192]	; (405204 <Func_AirFlow_Const+0x2bc>)
  405144:	47a0      	blx	r4
  405146:	a30e      	add	r3, pc, #56	; (adr r3, 405180 <Func_AirFlow_Const+0x238>)
  405148:	e9d3 2300 	ldrd	r2, r3, [r3]
  40514c:	4c2b      	ldr	r4, [pc, #172]	; (4051fc <Func_AirFlow_Const+0x2b4>)
  40514e:	47a0      	blx	r4
  405150:	4b19      	ldr	r3, [pc, #100]	; (4051b8 <Func_AirFlow_Const+0x270>)
  405152:	4798      	blx	r3
  405154:	b2c0      	uxtb	r0, r0
  405156:	4b24      	ldr	r3, [pc, #144]	; (4051e8 <Func_AirFlow_Const+0x2a0>)
  405158:	7018      	strb	r0, [r3, #0]
           temp_speed_motorsF =  temp_speed_motorsR;
  40515a:	4b24      	ldr	r3, [pc, #144]	; (4051ec <Func_AirFlow_Const+0x2a4>)
  40515c:	7018      	strb	r0, [r3, #0]
           return; 
  40515e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          sData.measure_airflow   =  acc_measure_airflow / sample_measure_airflow;
  405162:	fb90 f1f3 	sdiv	r1, r0, r3
  405166:	4a0b      	ldr	r2, [pc, #44]	; (405194 <Func_AirFlow_Const+0x24c>)
  405168:	f8a2 11c5 	strh.w	r1, [r2, #453]	; 0x1c5
          sample_measure_airflow  >>= 1;
  40516c:	105b      	asrs	r3, r3, #1
  40516e:	4a21      	ldr	r2, [pc, #132]	; (4051f4 <Func_AirFlow_Const+0x2ac>)
  405170:	6013      	str	r3, [r2, #0]
          acc_measure_airflow     >>= 1;
  405172:	1040      	asrs	r0, r0, #1
  405174:	4b1e      	ldr	r3, [pc, #120]	; (4051f0 <Func_AirFlow_Const+0x2a8>)
  405176:	6018      	str	r0, [r3, #0]
  405178:	e776      	b.n	405068 <Func_AirFlow_Const+0x120>
  40517a:	bf00      	nop
  40517c:	f3af 8000 	nop.w
  405180:	66666666 	.word	0x66666666
  405184:	40046666 	.word	0x40046666
  405188:	cccccccd 	.word	0xcccccccd
  40518c:	3fdccccc 	.word	0x3fdccccc
  405190:	20001040 	.word	0x20001040
  405194:	200013ac 	.word	0x200013ac
  405198:	20000b74 	.word	0x20000b74
  40519c:	00404911 	.word	0x00404911
  4051a0:	0040d745 	.word	0x0040d745
  4051a4:	447a0000 	.word	0x447a0000
  4051a8:	0040d95d 	.word	0x0040d95d
  4051ac:	0040d7f5 	.word	0x0040d7f5
  4051b0:	0040cea1 	.word	0x0040cea1
  4051b4:	0040d19d 	.word	0x0040d19d
  4051b8:	0040d4f9 	.word	0x0040d4f9
  4051bc:	00404341 	.word	0x00404341
  4051c0:	44c74017 	.word	0x44c74017
  4051c4:	0040db6d 	.word	0x0040db6d
  4051c8:	00412434 	.word	0x00412434
  4051cc:	0040d74d 	.word	0x0040d74d
  4051d0:	44480000 	.word	0x44480000
  4051d4:	0040db31 	.word	0x0040db31
  4051d8:	0040db81 	.word	0x0040db81
  4051dc:	3cc71c54 	.word	0x3cc71c54
  4051e0:	0040d5e1 	.word	0x0040d5e1
  4051e4:	004049a9 	.word	0x004049a9
  4051e8:	20000b99 	.word	0x20000b99
  4051ec:	20000b98 	.word	0x20000b98
  4051f0:	20000b70 	.word	0x20000b70
  4051f4:	20000b94 	.word	0x20000b94
  4051f8:	40140000 	.word	0x40140000
  4051fc:	0040cf49 	.word	0x0040cf49
  405200:	40490000 	.word	0x40490000
  405204:	0040cbe5 	.word	0x0040cbe5
  405208:	40590000 	.word	0x40590000
  40520c:	0040d539 	.word	0x0040d539
  405210:	0040db59 	.word	0x0040db59
  405214:	0040db45 	.word	0x0040db45
  405218:	40400000 	.word	0x40400000
  40521c:	437f0000 	.word	0x437f0000
  405220:	0040dbcd 	.word	0x0040dbcd
  405224:	0040ce7d 	.word	0x0040ce7d
  405228:	41200000 	.word	0x41200000
             else if (delta_Q >= (errMax * 2)) // > 12.0%
  40522c:	4631      	mov	r1, r6
  40522e:	4630      	mov	r0, r6
  405230:	4b12      	ldr	r3, [pc, #72]	; (40527c <Func_AirFlow_Const+0x334>)
  405232:	4798      	blx	r3
  405234:	4606      	mov	r6, r0
  405236:	4601      	mov	r1, r0
  405238:	4638      	mov	r0, r7
  40523a:	4b11      	ldr	r3, [pc, #68]	; (405280 <Func_AirFlow_Const+0x338>)
  40523c:	4798      	blx	r3
  40523e:	b108      	cbz	r0, 405244 <Func_AirFlow_Const+0x2fc>
               speedNew += 2;     // +2%
  405240:	3502      	adds	r5, #2
  405242:	e749      	b.n	4050d8 <Func_AirFlow_Const+0x190>
             else if (delta_Q > 0) 
  405244:	2100      	movs	r1, #0
  405246:	4638      	mov	r0, r7
  405248:	4b0e      	ldr	r3, [pc, #56]	; (405284 <Func_AirFlow_Const+0x33c>)
  40524a:	4798      	blx	r3
  40524c:	b108      	cbz	r0, 405252 <Func_AirFlow_Const+0x30a>
                speedNew++;       // +1%
  40524e:	3501      	adds	r5, #1
  405250:	e742      	b.n	4050d8 <Func_AirFlow_Const+0x190>
             else if (delta_Q < -(errMax * 3))  // < -12.0%
  405252:	f108 4100 	add.w	r1, r8, #2147483648	; 0x80000000
  405256:	4638      	mov	r0, r7
  405258:	4b0b      	ldr	r3, [pc, #44]	; (405288 <Func_AirFlow_Const+0x340>)
  40525a:	4798      	blx	r3
  40525c:	b110      	cbz	r0, 405264 <Func_AirFlow_Const+0x31c>
               speedNew -= 5;    // -3%
  40525e:	3d05      	subs	r5, #5
  405260:	b2ad      	uxth	r5, r5
  405262:	e739      	b.n	4050d8 <Func_AirFlow_Const+0x190>
             else if (delta_Q < -(errMax * 2))  // < -12.0%
  405264:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
  405268:	4638      	mov	r0, r7
  40526a:	4b07      	ldr	r3, [pc, #28]	; (405288 <Func_AirFlow_Const+0x340>)
  40526c:	4798      	blx	r3
  40526e:	b110      	cbz	r0, 405276 <Func_AirFlow_Const+0x32e>
                speedNew -= 2;    // -2%
  405270:	3d02      	subs	r5, #2
  405272:	b2ad      	uxth	r5, r5
  405274:	e730      	b.n	4050d8 <Func_AirFlow_Const+0x190>
                speedNew--;       // -1% 
  405276:	3d01      	subs	r5, #1
  405278:	b2ad      	uxth	r5, r5
  40527a:	e72d      	b.n	4050d8 <Func_AirFlow_Const+0x190>
  40527c:	0040d5e5 	.word	0x0040d5e5
  405280:	0040db59 	.word	0x0040db59
  405284:	0040db6d 	.word	0x0040db6d
  405288:	0040db31 	.word	0x0040db31
  40528c:	00000000 	.word	0x00000000

00405290 <Func_SpeedFan_Const>:
//------------------------------------------------------------------------------
// Gestione ventole con velocitÃ  costante:
// il setPoint Ã¨ espresso in %, da 20.0%  a 100.0% (step di 0.1% = 1)
//------------------------------------------------------------------------------
void Func_SpeedFan_Const(unsigned int setPoint)
{
  405290:	b510      	push	{r4, lr}
   unsigned int value_pwm = MINSPEED;
   
   value_pwm = (unsigned int )((float)setPoint * 0.255); //  es: 50.0% = 500 * 0.255 = 127
  405292:	4b0b      	ldr	r3, [pc, #44]	; (4052c0 <Func_SpeedFan_Const+0x30>)
  405294:	4798      	blx	r3
  405296:	4b0b      	ldr	r3, [pc, #44]	; (4052c4 <Func_SpeedFan_Const+0x34>)
  405298:	4798      	blx	r3
  40529a:	a307      	add	r3, pc, #28	; (adr r3, 4052b8 <Func_SpeedFan_Const+0x28>)
  40529c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052a0:	4c09      	ldr	r4, [pc, #36]	; (4052c8 <Func_SpeedFan_Const+0x38>)
  4052a2:	47a0      	blx	r4
  4052a4:	4b09      	ldr	r3, [pc, #36]	; (4052cc <Func_SpeedFan_Const+0x3c>)
  4052a6:	4798      	blx	r3
       Serial_print1(" PWM:");
       Serial_print(value_pwm, DEC);
   }
#endif  //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg          
                               
   temp_speed_motorsR = (byte)value_pwm;
  4052a8:	b2c0      	uxtb	r0, r0
  4052aa:	4b09      	ldr	r3, [pc, #36]	; (4052d0 <Func_SpeedFan_Const+0x40>)
  4052ac:	7018      	strb	r0, [r3, #0]
   temp_speed_motorsF = (byte)value_pwm;
  4052ae:	4b09      	ldr	r3, [pc, #36]	; (4052d4 <Func_SpeedFan_Const+0x44>)
  4052b0:	7018      	strb	r0, [r3, #0]
  4052b2:	bd10      	pop	{r4, pc}
  4052b4:	f3af 8000 	nop.w
  4052b8:	851eb852 	.word	0x851eb852
  4052bc:	3fd051eb 	.word	0x3fd051eb
  4052c0:	0040d745 	.word	0x0040d745
  4052c4:	0040cea1 	.word	0x0040cea1
  4052c8:	0040cf49 	.word	0x0040cf49
  4052cc:	0040d4f9 	.word	0x0040d4f9
  4052d0:	20000b99 	.word	0x20000b99
  4052d4:	20000b98 	.word	0x20000b98

004052d8 <motor_speed>:
//     CAP  (pressione cost.)                IMBALANCE 
//     CAF  (portata  cost.)                 IMBALANCE 
//------------------------------------------------------------------------------

int motor_speed() 
{  
  4052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052dc:	b083      	sub	sp, #12

#ifdef _MAPPING_FUNC
   debug_mapping_motors();
#else
    
   if(CkAlarm(ALM_EB_CTRL_FAN)) 
  4052de:	2050      	movs	r0, #80	; 0x50
  4052e0:	4ba3      	ldr	r3, [pc, #652]	; (405570 <motor_speed+0x298>)
  4052e2:	4798      	blx	r3
  4052e4:	b998      	cbnz	r0, 40530e <motor_speed+0x36>
   //------------------------------------------------
   // Verifico la presenza di allarmi acqua nel phwd
   // e nel caso tengo fermi i motori
   // ALM_PEH_NTC_KO,    ALM_PEH_TW_DANGER, ALM_PEH_TW_OVR,    ALM_PEH_ELECT,     ALM_PEH_TA_OVR,    ALM_PEH_SIZE,     ALM_PEHD_PRESS,     ALM_PEH_LINK,   // byte 02
   //------------------------------------------------
   if((sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ELECT)==0)
  4052e6:	4ba3      	ldr	r3, [pc, #652]	; (405574 <motor_speed+0x29c>)
  4052e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
  4052ec:	f013 0f08 	tst.w	r3, #8
  4052f0:	d120      	bne.n	405334 <motor_speed+0x5c>
     {
       if(CkAlarm(ALM_PEH_TW_DANGER) || CkAlarm(ALM_PEH_TW_OVR) || CkAlarm(ALM_PEH_NTC_KO) || CkAlarm(ALM_PEH_ELECT))
  4052f2:	2011      	movs	r0, #17
  4052f4:	4b9e      	ldr	r3, [pc, #632]	; (405570 <motor_speed+0x298>)
  4052f6:	4798      	blx	r3
  4052f8:	b168      	cbz	r0, 405316 <motor_speed+0x3e>
        {
          
         temp_speed_motorsR = 0;
  4052fa:	2300      	movs	r3, #0
  4052fc:	4a9e      	ldr	r2, [pc, #632]	; (405578 <motor_speed+0x2a0>)
  4052fe:	7013      	strb	r3, [r2, #0]
         temp_speed_motorsF = 0;
  405300:	4a9e      	ldr	r2, [pc, #632]	; (40557c <motor_speed+0x2a4>)
  405302:	7013      	strb	r3, [r2, #0]
         
         sData.speed_motors_R = temp_speed_motorsR;
  405304:	4a9b      	ldr	r2, [pc, #620]	; (405574 <motor_speed+0x29c>)
  405306:	f882 31af 	strb.w	r3, [r2, #431]	; 0x1af
         sData.speed_motors_F = temp_speed_motorsF;
  40530a:	f882 31b0 	strb.w	r3, [r2, #432]	; 0x1b0
   sData.speed_motors_R = temp_speed_motorsR;
   sData.speed_motors_F = temp_speed_motorsF;
    
   return 1;
  
}
  40530e:	2001      	movs	r0, #1
  405310:	b003      	add	sp, #12
  405312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       if(CkAlarm(ALM_PEH_TW_DANGER) || CkAlarm(ALM_PEH_TW_OVR) || CkAlarm(ALM_PEH_NTC_KO) || CkAlarm(ALM_PEH_ELECT))
  405316:	2012      	movs	r0, #18
  405318:	4b95      	ldr	r3, [pc, #596]	; (405570 <motor_speed+0x298>)
  40531a:	4798      	blx	r3
  40531c:	2800      	cmp	r0, #0
  40531e:	d1ec      	bne.n	4052fa <motor_speed+0x22>
  405320:	2010      	movs	r0, #16
  405322:	4b93      	ldr	r3, [pc, #588]	; (405570 <motor_speed+0x298>)
  405324:	4798      	blx	r3
  405326:	2800      	cmp	r0, #0
  405328:	d1e7      	bne.n	4052fa <motor_speed+0x22>
  40532a:	2013      	movs	r0, #19
  40532c:	4b90      	ldr	r3, [pc, #576]	; (405570 <motor_speed+0x298>)
  40532e:	4798      	blx	r3
  405330:	2800      	cmp	r0, #0
  405332:	d1e2      	bne.n	4052fa <motor_speed+0x22>
   enab_func = read_word_eeprom(ADDR_EEP(Enab_Fuction)); 
  405334:	202e      	movs	r0, #46	; 0x2e
  405336:	4b92      	ldr	r3, [pc, #584]	; (405580 <motor_speed+0x2a8>)
  405338:	4798      	blx	r3
  40533a:	4604      	mov	r4, r0
   if ((enab_func & (1 << ENAB_MBF)) && (AccessoryPresent_EepList(ACC_EEP_MBUS)) )
  40533c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  405340:	d004      	beq.n	40534c <motor_speed+0x74>
  405342:	2008      	movs	r0, #8
  405344:	4b8f      	ldr	r3, [pc, #572]	; (405584 <motor_speed+0x2ac>)
  405346:	4798      	blx	r3
  405348:	2800      	cmp	r0, #0
  40534a:	d15b      	bne.n	405404 <motor_speed+0x12c>
	if ( AccessoryPresent_EepList(ACC_EEP_P1CO2) || AccessoryPresent_EepList(ACC_EEP_P2CO2)) // check if unit is in standby mode for more than 2 hours
  40534c:	2016      	movs	r0, #22
  40534e:	4b8d      	ldr	r3, [pc, #564]	; (405584 <motor_speed+0x2ac>)
  405350:	4798      	blx	r3
  405352:	b918      	cbnz	r0, 40535c <motor_speed+0x84>
  405354:	2017      	movs	r0, #23
  405356:	4b8b      	ldr	r3, [pc, #556]	; (405584 <motor_speed+0x2ac>)
  405358:	4798      	blx	r3
  40535a:	b318      	cbz	r0, 4053a4 <motor_speed+0xcc>
		 if (read_byte_eeprom(ADDR_EEP(Set_Power_ON)) == 0 ) // check if unit is in standby mode
  40535c:	204c      	movs	r0, #76	; 0x4c
  40535e:	4b8a      	ldr	r3, [pc, #552]	; (405588 <motor_speed+0x2b0>)
  405360:	4798      	blx	r3
  405362:	b9f8      	cbnz	r0, 4053a4 <motor_speed+0xcc>
			 if ( Clean_Event_Counter_2_hours >= 7200000 ) // unit is in standby for more than 2 hours
  405364:	4b89      	ldr	r3, [pc, #548]	; (40558c <motor_speed+0x2b4>)
  405366:	681a      	ldr	r2, [r3, #0]
  405368:	4b89      	ldr	r3, [pc, #548]	; (405590 <motor_speed+0x2b8>)
  40536a:	429a      	cmp	r2, r3
  40536c:	d91a      	bls.n	4053a4 <motor_speed+0xcc>
				 Clean_Event_Counter_2_hours = 0;
  40536e:	2200      	movs	r2, #0
  405370:	4b86      	ldr	r3, [pc, #536]	; (40558c <motor_speed+0x2b4>)
  405372:	601a      	str	r2, [r3, #0]
				 if (( Index_CO2_1 != 0) || ( Index_CO2_2 != 0)) // last clean event in 24 hours
  405374:	4b87      	ldr	r3, [pc, #540]	; (405594 <motor_speed+0x2bc>)
  405376:	781b      	ldrb	r3, [r3, #0]
  405378:	b913      	cbnz	r3, 405380 <motor_speed+0xa8>
  40537a:	4b87      	ldr	r3, [pc, #540]	; (405598 <motor_speed+0x2c0>)
  40537c:	781b      	ldrb	r3, [r3, #0]
  40537e:	b18b      	cbz	r3, 4053a4 <motor_speed+0xcc>
					 if ( Clean_Event_Flag1 || Clean_Event_Flag2)
  405380:	4b86      	ldr	r3, [pc, #536]	; (40559c <motor_speed+0x2c4>)
  405382:	781b      	ldrb	r3, [r3, #0]
  405384:	b913      	cbnz	r3, 40538c <motor_speed+0xb4>
  405386:	4b86      	ldr	r3, [pc, #536]	; (4055a0 <motor_speed+0x2c8>)
  405388:	781b      	ldrb	r3, [r3, #0]
  40538a:	b15b      	cbz	r3, 4053a4 <motor_speed+0xcc>
						 Clean_Event_Flag1 = false;
  40538c:	2300      	movs	r3, #0
  40538e:	4a83      	ldr	r2, [pc, #524]	; (40559c <motor_speed+0x2c4>)
  405390:	7013      	strb	r3, [r2, #0]
						 Clean_Event_Flag2 = false;
  405392:	4a83      	ldr	r2, [pc, #524]	; (4055a0 <motor_speed+0x2c8>)
  405394:	7013      	strb	r3, [r2, #0]
						 sData.status_unit |= (1 << POS_BIT_CLEANEVENT_CHECK); // activate clean event , KTS go to ON mode
  405396:	4a77      	ldr	r2, [pc, #476]	; (405574 <motor_speed+0x29c>)
  405398:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40539c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4053a0:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
	 if ((enab_func & (1 << ENAB_CLEAN_EVENT)) && (AccessoryPresent_EepList(ACC_EEP_P1CO2) || AccessoryPresent_EepList(ACC_EEP_P2CO2)))
  4053a4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
  4053a8:	d158      	bne.n	40545c <motor_speed+0x184>
		sData.status_unit &= ~(1 << POS_BIT_CLEANEVENT_CHECK);
  4053aa:	4a72      	ldr	r2, [pc, #456]	; (405574 <motor_speed+0x29c>)
  4053ac:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4053b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  4053b4:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
		Clean_Event_Counter = 0;
  4053b8:	2200      	movs	r2, #0
  4053ba:	4b7a      	ldr	r3, [pc, #488]	; (4055a4 <motor_speed+0x2cc>)
  4053bc:	601a      	str	r2, [r3, #0]
   status_inputs = ctrl_comand_inputs();
  4053be:	4b7a      	ldr	r3, [pc, #488]	; (4055a8 <motor_speed+0x2d0>)
  4053c0:	4798      	blx	r3
  4053c2:	4605      	mov	r5, r0
   status_output1 = read_byte_eeprom(ADDR_EEP(Set_Output[0]));
  4053c4:	2050      	movs	r0, #80	; 0x50
  4053c6:	4e70      	ldr	r6, [pc, #448]	; (405588 <motor_speed+0x2b0>)
  4053c8:	47b0      	blx	r6
   status_output2 = read_byte_eeprom(ADDR_EEP(Set_Output[0]));
  4053ca:	2050      	movs	r0, #80	; 0x50
  4053cc:	47b0      	blx	r6
   if((status_inputs == 0x81) || (status_inputs == 0x11)) {
  4053ce:	2d81      	cmp	r5, #129	; 0x81
  4053d0:	f000 810a 	beq.w	4055e8 <motor_speed+0x310>
  4053d4:	2d11      	cmp	r5, #17
  4053d6:	f000 8107 	beq.w	4055e8 <motor_speed+0x310>
     if ((status_inputs & 0x80) == 0) {
  4053da:	fa4f f885 	sxtb.w	r8, r5
  4053de:	f1b8 0f00 	cmp.w	r8, #0
  4053e2:	db7d      	blt.n	4054e0 <motor_speed+0x208>
         PwrOff = !read_byte_eeprom(ADDR_EEP(Set_Power_ON));   //  1 byte:   1= SET UNIT IDLE (power_on), 0 = SET UNIT STANDBY (power_off) 
  4053e4:	204c      	movs	r0, #76	; 0x4c
  4053e6:	47b0      	blx	r6
         if (sData.status_weekly & MSK_BIT_WEEKLY_ENAB)
  4053e8:	4b62      	ldr	r3, [pc, #392]	; (405574 <motor_speed+0x29c>)
	         if ((sData.status_weekly & MSK_BIT_WEEKLY_RUN) == 0) {
  4053ea:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
  4053ee:	f003 0303 	and.w	r3, r3, #3
  4053f2:	2b03      	cmp	r3, #3
  4053f4:	d171      	bne.n	4054da <motor_speed+0x202>
		         if (PwrOff) {
  4053f6:	2800      	cmp	r0, #0
  4053f8:	d172      	bne.n	4054e0 <motor_speed+0x208>
			         write_byte_eeprom(ADDR_EEP(Set_Power_ON), 0x01);
  4053fa:	2101      	movs	r1, #1
  4053fc:	204c      	movs	r0, #76	; 0x4c
  4053fe:	4b6b      	ldr	r3, [pc, #428]	; (4055ac <motor_speed+0x2d4>)
  405400:	4798      	blx	r3
  405402:	e06d      	b.n	4054e0 <motor_speed+0x208>
     sData.status_unit |= (1 << POS_BIT_UNIT_RUN); 
  405404:	4c5b      	ldr	r4, [pc, #364]	; (405574 <motor_speed+0x29c>)
  405406:	f8b4 31eb 	ldrh.w	r3, [r4, #491]	; 0x1eb
  40540a:	f043 0301 	orr.w	r3, r3, #1
  40540e:	f8a4 31eb 	strh.w	r3, [r4, #491]	; 0x1eb
     temp_speed_motorsR = (unsigned int )((float)read_byte_eeprom(ADDR_EEP(Set_MBF_return)) * 2.55);
  405412:	207c      	movs	r0, #124	; 0x7c
  405414:	f8df a170 	ldr.w	sl, [pc, #368]	; 405588 <motor_speed+0x2b0>
  405418:	47d0      	blx	sl
  40541a:	4d57      	ldr	r5, [pc, #348]	; (405578 <motor_speed+0x2a0>)
  40541c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 4055e0 <motor_speed+0x308>
  405420:	47c8      	blx	r9
  405422:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 4055e4 <motor_speed+0x30c>
  405426:	47c0      	blx	r8
  405428:	4f61      	ldr	r7, [pc, #388]	; (4055b0 <motor_speed+0x2d8>)
  40542a:	a34f      	add	r3, pc, #316	; (adr r3, 405568 <motor_speed+0x290>)
  40542c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405430:	47b8      	blx	r7
  405432:	4e60      	ldr	r6, [pc, #384]	; (4055b4 <motor_speed+0x2dc>)
  405434:	47b0      	blx	r6
  405436:	7028      	strb	r0, [r5, #0]
     temp_speed_motorsF = (unsigned int )((float)read_byte_eeprom(ADDR_EEP(Set_MBF_fresh)) * 2.55); 
  405438:	207b      	movs	r0, #123	; 0x7b
  40543a:	47d0      	blx	sl
  40543c:	47c8      	blx	r9
  40543e:	47c0      	blx	r8
  405440:	a349      	add	r3, pc, #292	; (adr r3, 405568 <motor_speed+0x290>)
  405442:	e9d3 2300 	ldrd	r2, r3, [r3]
  405446:	47b8      	blx	r7
  405448:	47b0      	blx	r6
  40544a:	b2c0      	uxtb	r0, r0
  40544c:	4b4b      	ldr	r3, [pc, #300]	; (40557c <motor_speed+0x2a4>)
  40544e:	7018      	strb	r0, [r3, #0]
     sData.speed_motors_R = temp_speed_motorsR;
  405450:	782b      	ldrb	r3, [r5, #0]
  405452:	f884 31af 	strb.w	r3, [r4, #431]	; 0x1af
     sData.speed_motors_F = temp_speed_motorsF;
  405456:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
     return 1;
  40545a:	e758      	b.n	40530e <motor_speed+0x36>
	 if ((enab_func & (1 << ENAB_CLEAN_EVENT)) && (AccessoryPresent_EepList(ACC_EEP_P1CO2) || AccessoryPresent_EepList(ACC_EEP_P2CO2)))
  40545c:	2016      	movs	r0, #22
  40545e:	4b49      	ldr	r3, [pc, #292]	; (405584 <motor_speed+0x2ac>)
  405460:	4798      	blx	r3
  405462:	b300      	cbz	r0, 4054a6 <motor_speed+0x1ce>
		 if ( Clean_Event_Counter <= 1800000) // clean event counter 30 min
  405464:	4b4f      	ldr	r3, [pc, #316]	; (4055a4 <motor_speed+0x2cc>)
  405466:	681a      	ldr	r2, [r3, #0]
  405468:	4b53      	ldr	r3, [pc, #332]	; (4055b8 <motor_speed+0x2e0>)
  40546a:	429a      	cmp	r2, r3
  40546c:	d822      	bhi.n	4054b4 <motor_speed+0x1dc>
			 sData.status_unit |= (1 << POS_BIT_CLEANEVENT_CHECK);
  40546e:	4b41      	ldr	r3, [pc, #260]	; (405574 <motor_speed+0x29c>)
  405470:	f8b3 21eb 	ldrh.w	r2, [r3, #491]	; 0x1eb
  405474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  405478:	f8a3 21eb 	strh.w	r2, [r3, #491]	; 0x1eb
			 temp_speed_motorsR = (unsigned int )(80 * 2.55);
  40547c:	22cc      	movs	r2, #204	; 0xcc
  40547e:	493e      	ldr	r1, [pc, #248]	; (405578 <motor_speed+0x2a0>)
  405480:	700a      	strb	r2, [r1, #0]
			 temp_speed_motorsF = (unsigned int )(80 * 2.55);
  405482:	493e      	ldr	r1, [pc, #248]	; (40557c <motor_speed+0x2a4>)
  405484:	700a      	strb	r2, [r1, #0]
			 sData.speed_motors_R = temp_speed_motorsR;
  405486:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
			 sData.speed_motors_F = temp_speed_motorsF;
  40548a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
			 Clean_Event_Flag1 = false;
  40548e:	2300      	movs	r3, #0
  405490:	4a42      	ldr	r2, [pc, #264]	; (40559c <motor_speed+0x2c4>)
  405492:	7013      	strb	r3, [r2, #0]
			 Index_CO2_1 = 0;
  405494:	4a3f      	ldr	r2, [pc, #252]	; (405594 <motor_speed+0x2bc>)
  405496:	7013      	strb	r3, [r2, #0]
			 Index_CO2_2 = 0;
  405498:	4a3f      	ldr	r2, [pc, #252]	; (405598 <motor_speed+0x2c0>)
  40549a:	7013      	strb	r3, [r2, #0]
			 CO2_1_Average_Counter = 0;
  40549c:	4a47      	ldr	r2, [pc, #284]	; (4055bc <motor_speed+0x2e4>)
  40549e:	6013      	str	r3, [r2, #0]
			 CO2_2_Average_Counter = 0;
  4054a0:	4a47      	ldr	r2, [pc, #284]	; (4055c0 <motor_speed+0x2e8>)
  4054a2:	6013      	str	r3, [r2, #0]
			 return 1;
  4054a4:	e733      	b.n	40530e <motor_speed+0x36>
	 if ((enab_func & (1 << ENAB_CLEAN_EVENT)) && (AccessoryPresent_EepList(ACC_EEP_P1CO2) || AccessoryPresent_EepList(ACC_EEP_P2CO2)))
  4054a6:	2017      	movs	r0, #23
  4054a8:	4b36      	ldr	r3, [pc, #216]	; (405584 <motor_speed+0x2ac>)
  4054aa:	4798      	blx	r3
  4054ac:	2800      	cmp	r0, #0
  4054ae:	f43f af7c 	beq.w	4053aa <motor_speed+0xd2>
  4054b2:	e7d7      	b.n	405464 <motor_speed+0x18c>
			 enab_func &=  ~(1 << ENAB_CLEAN_EVENT);
  4054b4:	f3c4 040e 	ubfx	r4, r4, #0, #15
			 Clean_Event_Counter = 0;
  4054b8:	2200      	movs	r2, #0
  4054ba:	4b3a      	ldr	r3, [pc, #232]	; (4055a4 <motor_speed+0x2cc>)
  4054bc:	601a      	str	r2, [r3, #0]
			 temp_08 = read_byte_eeprom(ADDR_EEP(cntUpdate_info));
  4054be:	203a      	movs	r0, #58	; 0x3a
  4054c0:	4b31      	ldr	r3, [pc, #196]	; (405588 <motor_speed+0x2b0>)
  4054c2:	4798      	blx	r3
  4054c4:	4605      	mov	r5, r0
			 write_word_eeprom(ADDR_EEP(Enab_Fuction), enab_func);
  4054c6:	4621      	mov	r1, r4
  4054c8:	202e      	movs	r0, #46	; 0x2e
  4054ca:	4b3e      	ldr	r3, [pc, #248]	; (4055c4 <motor_speed+0x2ec>)
  4054cc:	4798      	blx	r3
			 temp_08++;
  4054ce:	1c69      	adds	r1, r5, #1
			 write_byte_eeprom(ADDR_EEP(cntUpdate_info), temp_08);
  4054d0:	b2c9      	uxtb	r1, r1
  4054d2:	203a      	movs	r0, #58	; 0x3a
  4054d4:	4b35      	ldr	r3, [pc, #212]	; (4055ac <motor_speed+0x2d4>)
  4054d6:	4798      	blx	r3
		 if ( Clean_Event_Counter <= 1800000) // clean event counter 30 min
  4054d8:	e771      	b.n	4053be <motor_speed+0xe6>
   if(unit_standby) {
  4054da:	2800      	cmp	r0, #0
  4054dc:	f000 8084 	beq.w	4055e8 <motor_speed+0x310>
   if(PowerMotors == POWER_SAVE) {
  4054e0:	4b39      	ldr	r3, [pc, #228]	; (4055c8 <motor_speed+0x2f0>)
  4054e2:	781b      	ldrb	r3, [r3, #0]
  4054e4:	2b00      	cmp	r3, #0
  4054e6:	f000 8082 	beq.w	4055ee <motor_speed+0x316>
   count_switch_off = 0;
  4054ea:	2200      	movs	r2, #0
  4054ec:	4b37      	ldr	r3, [pc, #220]	; (4055cc <motor_speed+0x2f4>)
  4054ee:	601a      	str	r2, [r3, #0]
  4054f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4054f4:	4b36      	ldr	r3, [pc, #216]	; (4055d0 <motor_speed+0x2f8>)
  4054f6:	635a      	str	r2, [r3, #52]	; 0x34
   sData.status_unit |= (1 << POS_BIT_UNIT_RUN); 
  4054f8:	4a1e      	ldr	r2, [pc, #120]	; (405574 <motor_speed+0x29c>)
  4054fa:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4054fe:	f043 0101 	orr.w	r1, r3, #1
  405502:	f8a2 11eb 	strh.w	r1, [r2, #491]	; 0x1eb
   if(count_switch_on++ < 25)  
  405506:	4a33      	ldr	r2, [pc, #204]	; (4055d4 <motor_speed+0x2fc>)
  405508:	6812      	ldr	r2, [r2, #0]
  40550a:	2a18      	cmp	r2, #24
  40550c:	dc73      	bgt.n	4055f6 <motor_speed+0x31e>
  40550e:	3201      	adds	r2, #1
  405510:	4930      	ldr	r1, [pc, #192]	; (4055d4 <motor_speed+0x2fc>)
  405512:	600a      	str	r2, [r1, #0]
      minSpeedMotors = MINSPEED_STARTUP;                        
  405514:	2655      	movs	r6, #85	; 0x55
   if (sData.status_unit &  (1 << POS_BIT_BYPASS_RUN)) {
  405516:	f013 0f40 	tst.w	r3, #64	; 0x40
  40551a:	d171      	bne.n	405600 <motor_speed+0x328>
    if (sData.status_unit &  (1 << POS_BIT_DPP_CHECK)) {
  40551c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  405520:	f47f aef5 	bne.w	40530e <motor_speed+0x36>
   if ((status_inputs & 0x80) == 0)
  405524:	f1b8 0f00 	cmp.w	r8, #0
  405528:	f2c0 82ef 	blt.w	405b0a <motor_speed+0x832>
     if (sData.status_weekly  & MSK_BIT_WEEKLY_ENAB)
  40552c:	4b11      	ldr	r3, [pc, #68]	; (405574 <motor_speed+0x29c>)
  40552e:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
  405532:	f013 0f01 	tst.w	r3, #1
  405536:	d075      	beq.n	405624 <motor_speed+0x34c>
       if (sData.status_weekly & MSK_BIT_WEEKLY_RUN) {
  405538:	f013 0f02 	tst.w	r3, #2
  40553c:	f000 808c 	beq.w	405658 <motor_speed+0x380>
          idx = (sData.status_weekly >> POS_STEP_SPEED) & 0x03;  // bit[7,6]: 1,1=----/ 1,0=SPEED_3/ 0,1=SPEED_2/ 0,0=SPEED_1
  405540:	099f      	lsrs	r7, r3, #6
          if(enab_func & (1<< ENAB_CAP)) {
  405542:	f014 0f40 	tst.w	r4, #64	; 0x40
  405546:	d061      	beq.n	40560c <motor_speed+0x334>
            setPoint = read_word_eeprom(ADDR_EEP(Set_StepMotors_CAP[3]));
  405548:	2061      	movs	r0, #97	; 0x61
  40554a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 405580 <motor_speed+0x2a8>
  40554e:	47c0      	blx	r8
  405550:	4681      	mov	r9, r0
			setPoint1 = read_word_eeprom(ADDR_EEP(Set_StepMotors_CAP[1]));
  405552:	205d      	movs	r0, #93	; 0x5d
  405554:	47c0      	blx	r8
  405556:	4680      	mov	r8, r0
            Func_Pressure_Const_F(setPoint); // pressione costante
  405558:	4648      	mov	r0, r9
  40555a:	4b1f      	ldr	r3, [pc, #124]	; (4055d8 <motor_speed+0x300>)
  40555c:	4798      	blx	r3
			Func_Pressure_Const_R(setPoint1); // pressione costante
  40555e:	4640      	mov	r0, r8
  405560:	4b1e      	ldr	r3, [pc, #120]	; (4055dc <motor_speed+0x304>)
  405562:	4798      	blx	r3
  405564:	e078      	b.n	405658 <motor_speed+0x380>
  405566:	bf00      	nop
  405568:	66666666 	.word	0x66666666
  40556c:	40046666 	.word	0x40046666
  405570:	00403535 	.word	0x00403535
  405574:	200013ac 	.word	0x200013ac
  405578:	20000b99 	.word	0x20000b99
  40557c:	20000b98 	.word	0x20000b98
  405580:	0040a279 	.word	0x0040a279
  405584:	00400175 	.word	0x00400175
  405588:	0040a26d 	.word	0x0040a26d
  40558c:	20000e2c 	.word	0x20000e2c
  405590:	006ddcff 	.word	0x006ddcff
  405594:	20000ae8 	.word	0x20000ae8
  405598:	20000ae9 	.word	0x20000ae9
  40559c:	20000ae0 	.word	0x20000ae0
  4055a0:	20000ae1 	.word	0x20000ae1
  4055a4:	20000e28 	.word	0x20000e28
  4055a8:	00404395 	.word	0x00404395
  4055ac:	0040a1fd 	.word	0x0040a1fd
  4055b0:	0040cf49 	.word	0x0040cf49
  4055b4:	0040d4f9 	.word	0x0040d4f9
  4055b8:	001b7740 	.word	0x001b7740
  4055bc:	20000e18 	.word	0x20000e18
  4055c0:	20000e20 	.word	0x20000e20
  4055c4:	0040a215 	.word	0x0040a215
  4055c8:	20000e38 	.word	0x20000e38
  4055cc:	20000b84 	.word	0x20000b84
  4055d0:	400e0e00 	.word	0x400e0e00
  4055d4:	20000b88 	.word	0x20000b88
  4055d8:	00404d01 	.word	0x00404d01
  4055dc:	00404ab9 	.word	0x00404ab9
  4055e0:	0040d745 	.word	0x0040d745
  4055e4:	0040cea1 	.word	0x0040cea1
     switchesToStandby (); 
  4055e8:	4bb3      	ldr	r3, [pc, #716]	; (4058b8 <motor_speed+0x5e0>)
  4055ea:	4798      	blx	r3
     return 1;
  4055ec:	e68f      	b.n	40530e <motor_speed+0x36>
     PowerMode(POWER_ON);     
  4055ee:	204f      	movs	r0, #79	; 0x4f
  4055f0:	4bb2      	ldr	r3, [pc, #712]	; (4058bc <motor_speed+0x5e4>)
  4055f2:	4798      	blx	r3
     return 1;
  4055f4:	e68b      	b.n	40530e <motor_speed+0x36>
      count_switch_on = 26;
  4055f6:	211a      	movs	r1, #26
  4055f8:	4ab1      	ldr	r2, [pc, #708]	; (4058c0 <motor_speed+0x5e8>)
  4055fa:	6011      	str	r1, [r2, #0]
      minSpeedMotors = MINSPEED;
  4055fc:	2640      	movs	r6, #64	; 0x40
  4055fe:	e78a      	b.n	405516 <motor_speed+0x23e>
       sData.speed_motors_R = minSpeedMotors;
  405600:	4bb0      	ldr	r3, [pc, #704]	; (4058c4 <motor_speed+0x5ec>)
  405602:	f883 61af 	strb.w	r6, [r3, #431]	; 0x1af
       sData.speed_motors_F = minSpeedMotors;
  405606:	f883 61b0 	strb.w	r6, [r3, #432]	; 0x1b0
       return 1;
  40560a:	e680      	b.n	40530e <motor_speed+0x36>
            setPoint = read_word_eeprom(ADDR_EEP(Set_StepMotorsCFS_CAF[idx]));
  40560c:	0078      	lsls	r0, r7, #1
  40560e:	3053      	adds	r0, #83	; 0x53
  405610:	b280      	uxth	r0, r0
  405612:	4bad      	ldr	r3, [pc, #692]	; (4058c8 <motor_speed+0x5f0>)
  405614:	4798      	blx	r3
            if (enab_func & (1 << ENAB_CAF)) 
  405616:	f014 0f80 	tst.w	r4, #128	; 0x80
              Func_AirFlow_Const(setPoint);   // portata costante
  40561a:	bf14      	ite	ne
  40561c:	4bab      	ldrne	r3, [pc, #684]	; (4058cc <motor_speed+0x5f4>)
              Func_SpeedFan_Const(setPoint);  // Velocita'  costante     
  40561e:	4bac      	ldreq	r3, [pc, #688]	; (4058d0 <motor_speed+0x5f8>)
  405620:	4798      	blx	r3
  405622:	e019      	b.n	405658 <motor_speed+0x380>
        idx = read_byte_eeprom(ADDR_EEP(sel_idxStepMotors));
  405624:	2052      	movs	r0, #82	; 0x52
  405626:	4bab      	ldr	r3, [pc, #684]	; (4058d4 <motor_speed+0x5fc>)
  405628:	4798      	blx	r3
  40562a:	2803      	cmp	r0, #3
  40562c:	bf28      	it	cs
  40562e:	2003      	movcs	r0, #3
  405630:	4607      	mov	r7, r0
        if(enab_func & (1<< ENAB_CAP)) {
  405632:	f014 0f40 	tst.w	r4, #64	; 0x40
  405636:	d140      	bne.n	4056ba <motor_speed+0x3e2>
        }else if ((enab_func & (1 << ENAB_CAF)) &&  !((sData.status_unit & (1 << POS_BIT_MAX_VOC)) || (sData.status_unit & (1 << POS_BIT_MAX_CO2)) || (sData.status_unit & (1 << POS_BIT_MAX_RH))) ){ 
  405638:	f014 0f80 	tst.w	r4, #128	; 0x80
  40563c:	d005      	beq.n	40564a <motor_speed+0x372>
  40563e:	4ba1      	ldr	r3, [pc, #644]	; (4058c4 <motor_speed+0x5ec>)
  405640:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  405644:	f413 6f60 	tst.w	r3, #3584	; 0xe00
  405648:	d046      	beq.n	4056d8 <motor_speed+0x400>
            setPoint = read_word_eeprom(ADDR_EEP(Set_StepMotorsCFS_CAF[idx]));
  40564a:	0078      	lsls	r0, r7, #1
  40564c:	3053      	adds	r0, #83	; 0x53
  40564e:	b280      	uxth	r0, r0
  405650:	4b9d      	ldr	r3, [pc, #628]	; (4058c8 <motor_speed+0x5f0>)
  405652:	4798      	blx	r3
            Func_SpeedFan_Const(setPoint);  // VelocitÃ  costante         
  405654:	4b9e      	ldr	r3, [pc, #632]	; (4058d0 <motor_speed+0x5f8>)
  405656:	4798      	blx	r3
     if(enab_func & (1 << ENAB_DEFROST))
  405658:	f014 0f01 	tst.w	r4, #1
  40565c:	d144      	bne.n	4056e8 <motor_speed+0x410>
     probeQAirActive();
  40565e:	4b9e      	ldr	r3, [pc, #632]	; (4058d8 <motor_speed+0x600>)
  405660:	4798      	blx	r3
     if (((sData.status_unit & (1 << POS_BIT_DEFROST_OPERATING))== 0) && !(enab_func & (1<< ENAB_CAP)))
  405662:	4b98      	ldr	r3, [pc, #608]	; (4058c4 <motor_speed+0x5ec>)
  405664:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  405668:	f013 0f02 	tst.w	r3, #2
  40566c:	d102      	bne.n	405674 <motor_speed+0x39c>
  40566e:	f014 0f40 	tst.w	r4, #64	; 0x40
  405672:	d03c      	beq.n	4056ee <motor_speed+0x416>
           sData.status_unit &= ~(1 << POS_BIT_IMBALANCE_OPERATING);       
  405674:	f023 0308 	bic.w	r3, r3, #8
  405678:	4a92      	ldr	r2, [pc, #584]	; (4058c4 <motor_speed+0x5ec>)
  40567a:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
   if(!(enab_func & (1<< ENAB_CAP)) && !(enab_func & (1<< ENAB_CAF))) {
  40567e:	f014 0fc0 	tst.w	r4, #192	; 0xc0
  405682:	f000 82fb 	beq.w	405c7c <motor_speed+0x9a4>
   if((status_inputs != 0x83) && (status_inputs != 0x84)) { 
  405686:	357d      	adds	r5, #125	; 0x7d
  405688:	b2ed      	uxtb	r5, r5
  40568a:	2d01      	cmp	r5, #1
  40568c:	d90b      	bls.n	4056a6 <motor_speed+0x3ce>
     if(temp_speed_motorsR < minSpeedMotors)
  40568e:	4b93      	ldr	r3, [pc, #588]	; (4058dc <motor_speed+0x604>)
  405690:	781b      	ldrb	r3, [r3, #0]
  405692:	42b3      	cmp	r3, r6
       temp_speed_motorsR = minSpeedMotors;
  405694:	bf3c      	itt	cc
  405696:	4b91      	ldrcc	r3, [pc, #580]	; (4058dc <motor_speed+0x604>)
  405698:	701e      	strbcc	r6, [r3, #0]
     if(temp_speed_motorsF < minSpeedMotors)
  40569a:	4b91      	ldr	r3, [pc, #580]	; (4058e0 <motor_speed+0x608>)
  40569c:	781b      	ldrb	r3, [r3, #0]
  40569e:	42b3      	cmp	r3, r6
       temp_speed_motorsF = minSpeedMotors; 
  4056a0:	bf3c      	itt	cc
  4056a2:	4b8f      	ldrcc	r3, [pc, #572]	; (4058e0 <motor_speed+0x608>)
  4056a4:	701e      	strbcc	r6, [r3, #0]
   sData.speed_motors_R = temp_speed_motorsR;
  4056a6:	4b87      	ldr	r3, [pc, #540]	; (4058c4 <motor_speed+0x5ec>)
  4056a8:	4a8c      	ldr	r2, [pc, #560]	; (4058dc <motor_speed+0x604>)
  4056aa:	7812      	ldrb	r2, [r2, #0]
  4056ac:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
   sData.speed_motors_F = temp_speed_motorsF;
  4056b0:	4a8b      	ldr	r2, [pc, #556]	; (4058e0 <motor_speed+0x608>)
  4056b2:	7812      	ldrb	r2, [r2, #0]
  4056b4:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
   return 1;
  4056b8:	e629      	b.n	40530e <motor_speed+0x36>
             setPoint = read_word_eeprom(ADDR_EEP(Set_StepMotors_CAP[3]));
  4056ba:	2061      	movs	r0, #97	; 0x61
  4056bc:	f8df 8208 	ldr.w	r8, [pc, #520]	; 4058c8 <motor_speed+0x5f0>
  4056c0:	47c0      	blx	r8
  4056c2:	4681      	mov	r9, r0
             setPoint1 = read_word_eeprom(ADDR_EEP(Set_StepMotors_CAP[1]));
  4056c4:	205d      	movs	r0, #93	; 0x5d
  4056c6:	47c0      	blx	r8
  4056c8:	4680      	mov	r8, r0
             Func_Pressure_Const_F(setPoint); // pressione costante
  4056ca:	4648      	mov	r0, r9
  4056cc:	4b85      	ldr	r3, [pc, #532]	; (4058e4 <motor_speed+0x60c>)
  4056ce:	4798      	blx	r3
             Func_Pressure_Const_R(setPoint1); // pressione costante
  4056d0:	4640      	mov	r0, r8
  4056d2:	4b85      	ldr	r3, [pc, #532]	; (4058e8 <motor_speed+0x610>)
  4056d4:	4798      	blx	r3
  4056d6:	e7bf      	b.n	405658 <motor_speed+0x380>
            setPoint = read_word_eeprom(ADDR_EEP(Set_StepMotorsCFS_CAF[idx]));
  4056d8:	0040      	lsls	r0, r0, #1
  4056da:	3053      	adds	r0, #83	; 0x53
  4056dc:	b280      	uxth	r0, r0
  4056de:	4b7a      	ldr	r3, [pc, #488]	; (4058c8 <motor_speed+0x5f0>)
  4056e0:	4798      	blx	r3
            Func_AirFlow_Const(setPoint);   // portata costante
  4056e2:	4b7a      	ldr	r3, [pc, #488]	; (4058cc <motor_speed+0x5f4>)
  4056e4:	4798      	blx	r3
  4056e6:	e7b7      	b.n	405658 <motor_speed+0x380>
        deFrostFunc();
  4056e8:	4b80      	ldr	r3, [pc, #512]	; (4058ec <motor_speed+0x614>)
  4056ea:	4798      	blx	r3
  4056ec:	e7b7      	b.n	40565e <motor_speed+0x386>
        spd_1 = temp_speed_motorsR; 
  4056ee:	4b7b      	ldr	r3, [pc, #492]	; (4058dc <motor_speed+0x604>)
  4056f0:	f893 a000 	ldrb.w	sl, [r3]
        if (DigitAccessoryOperating(ACC_I2C_VOC) && !(sData.status_test & MSK_TEST_ENABLE))  
  4056f4:	2007      	movs	r0, #7
  4056f6:	4b7e      	ldr	r3, [pc, #504]	; (4058f0 <motor_speed+0x618>)
  4056f8:	4798      	blx	r3
  4056fa:	b128      	cbz	r0, 405708 <motor_speed+0x430>
  4056fc:	4b71      	ldr	r3, [pc, #452]	; (4058c4 <motor_speed+0x5ec>)
  4056fe:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  405702:	f013 0f01 	tst.w	r3, #1
  405706:	d04b      	beq.n	4057a0 <motor_speed+0x4c8>
           sData.status_unit &= ~(1 << POS_BIT_MAX_VOC);
  405708:	4a6e      	ldr	r2, [pc, #440]	; (4058c4 <motor_speed+0x5ec>)
  40570a:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40570e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405712:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
        sensorAir_op = 0;
  405716:	f04f 0900 	mov.w	r9, #0
        if ((DigitAccessoryOperating(ACC_I2C_RH_1) || DigitAccessoryOperating(ACC_I2C_RH_2)) && !(sData.status_test & MSK_TEST_ENABLE))  
  40571a:	2005      	movs	r0, #5
  40571c:	4b74      	ldr	r3, [pc, #464]	; (4058f0 <motor_speed+0x618>)
  40571e:	4798      	blx	r3
  405720:	2800      	cmp	r0, #0
  405722:	f000 809b 	beq.w	40585c <motor_speed+0x584>
  405726:	4b67      	ldr	r3, [pc, #412]	; (4058c4 <motor_speed+0x5ec>)
  405728:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  40572c:	f013 0f01 	tst.w	r3, #1
  405730:	f000 809b 	beq.w	40586a <motor_speed+0x592>
          sData.status_unit &= ~(1 << POS_BIT_MAX_RH);   
  405734:	4a63      	ldr	r2, [pc, #396]	; (4058c4 <motor_speed+0x5ec>)
  405736:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40573a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  40573e:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
       if ((DigitAccessoryOperating(ACC_I2C_CO2_1) || DigitAccessoryOperating(ACC_I2C_CO2_2)) && !(sData.status_test & MSK_TEST_ENABLE))   
  405742:	2003      	movs	r0, #3
  405744:	4b6a      	ldr	r3, [pc, #424]	; (4058f0 <motor_speed+0x618>)
  405746:	4798      	blx	r3
  405748:	2800      	cmp	r0, #0
  40574a:	f000 8104 	beq.w	405956 <motor_speed+0x67e>
  40574e:	4b5d      	ldr	r3, [pc, #372]	; (4058c4 <motor_speed+0x5ec>)
  405750:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  405754:	f013 0f01 	tst.w	r3, #1
  405758:	f000 8104 	beq.w	405964 <motor_speed+0x68c>
         sData.status_unit &= ~(1 << POS_BIT_MAX_CO2);
  40575c:	4a59      	ldr	r2, [pc, #356]	; (4058c4 <motor_speed+0x5ec>)
  40575e:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  405762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  405766:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
       if(sensorAir_op) { 
  40576a:	f1b9 0f00 	cmp.w	r9, #0
  40576e:	f040 8141 	bne.w	4059f4 <motor_speed+0x71c>
           sData.increase_speed_RH_CO2 = 10; // Coefficiente moltiplicativo per 10,  10= 1.0 ed è l'incremento della velocità rispetto al set-poin a causa: RH alta, o CO2 alta, o VOCs alta.     
  405772:	220a      	movs	r2, #10
  405774:	4b53      	ldr	r3, [pc, #332]	; (4058c4 <motor_speed+0x5ec>)
  405776:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
       if (enab_func & (1 << ENAB_BOOST)) {
  40577a:	f014 0f02 	tst.w	r4, #2
  40577e:	f040 818e 	bne.w	405a9e <motor_speed+0x7c6>
          sData.status_unit &= ~(1 << POS_BIT_BOOST_OPERATING);   
  405782:	4a50      	ldr	r2, [pc, #320]	; (4058c4 <motor_speed+0x5ec>)
  405784:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  405788:	f023 0310 	bic.w	r3, r3, #16
  40578c:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
       if (((sData.status_unit & (1 << POS_BIT_DEFROST_OPERATING))== 0) && !(enab_func & (1<< ENAB_CAP)))
  405790:	4b4c      	ldr	r3, [pc, #304]	; (4058c4 <motor_speed+0x5ec>)
  405792:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  405796:	f013 0f02 	tst.w	r3, #2
  40579a:	f000 81c1 	beq.w	405b20 <motor_speed+0x848>
  40579e:	e769      	b.n	405674 <motor_speed+0x39c>
           setPoint = read_word_eeprom(ADDR_EEP(SetPoint_VOC));
  4057a0:	2069      	movs	r0, #105	; 0x69
  4057a2:	4b49      	ldr	r3, [pc, #292]	; (4058c8 <motor_speed+0x5f0>)
  4057a4:	4798      	blx	r3
           if ((setPoint < 7) ||  (setPoint > 90)) {
  4057a6:	1fc3      	subs	r3, r0, #7
  4057a8:	b29b      	uxth	r3, r3
  4057aa:	2b53      	cmp	r3, #83	; 0x53
  4057ac:	d819      	bhi.n	4057e2 <motor_speed+0x50a>
           if(setPoint < 10) {
  4057ae:	2809      	cmp	r0, #9
  4057b0:	d827      	bhi.n	405802 <motor_speed+0x52a>
             sgl_qAir = (setPoint - 4);  
  4057b2:	1f03      	subs	r3, r0, #4
  4057b4:	fa0f fe83 	sxth.w	lr, r3
             temp16   = (256 - spd_1)/4;
  4057b8:	f5ca 7380 	rsb	r3, sl, #256	; 0x100
  4057bc:	f3c3 038f 	ubfx	r3, r3, #2, #16
           if(sData.measure_VOC_max > setPoint) {
  4057c0:	4a40      	ldr	r2, [pc, #256]	; (4058c4 <motor_speed+0x5ec>)
  4057c2:	f9b2 21bf 	ldrsh.w	r2, [r2, #447]	; 0x1bf
  4057c6:	4282      	cmp	r2, r0
  4057c8:	dd26      	ble.n	405818 <motor_speed+0x540>
             sData.status_unit |= (1 << POS_BIT_MAX_VOC);
  4057ca:	4a3e      	ldr	r2, [pc, #248]	; (4058c4 <motor_speed+0x5ec>)
  4057cc:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4057d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4057d4:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
             sensorAir_op = 1;
  4057d8:	f04f 0901 	mov.w	r9, #1
             spd_1 = 255;
  4057dc:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4057e0:	e79b      	b.n	40571a <motor_speed+0x442>
             write_word_eeprom(ADDR_EEP(SetPoint_VOC), 10);
  4057e2:	210a      	movs	r1, #10
  4057e4:	2069      	movs	r0, #105	; 0x69
  4057e6:	4b43      	ldr	r3, [pc, #268]	; (4058f4 <motor_speed+0x61c>)
  4057e8:	4798      	blx	r3
             setPoint = 15;
  4057ea:	200f      	movs	r0, #15
             sgl_qAir = (setPoint - 10); 
  4057ec:	f1a0 030a 	sub.w	r3, r0, #10
  4057f0:	fa0f fe83 	sxth.w	lr, r3
             temp16   = (256 - spd_1)/10;
  4057f4:	f5ca 7380 	rsb	r3, sl, #256	; 0x100
  4057f8:	220a      	movs	r2, #10
  4057fa:	fbb3 f3f2 	udiv	r3, r3, r2
  4057fe:	b29b      	uxth	r3, r3
  405800:	e7de      	b.n	4057c0 <motor_speed+0x4e8>
           }else if (setPoint < 15) { 
  405802:	280e      	cmp	r0, #14
  405804:	d8f2      	bhi.n	4057ec <motor_speed+0x514>
             sgl_qAir = (setPoint - 7);  
  405806:	fa0f fe83 	sxth.w	lr, r3
             temp16   = (256 - spd_1)/7;
  40580a:	f5ca 7380 	rsb	r3, sl, #256	; 0x100
  40580e:	2207      	movs	r2, #7
  405810:	fbb3 f3f2 	udiv	r3, r3, r2
  405814:	b29b      	uxth	r3, r3
  405816:	e7d3      	b.n	4057c0 <motor_speed+0x4e8>
           }else if(sData.measure_VOC_max > sgl_qAir) { 
  405818:	4596      	cmp	lr, r2
  40581a:	da15      	bge.n	405848 <motor_speed+0x570>
             sData.status_unit |= (1 << POS_BIT_MAX_VOC);
  40581c:	4829      	ldr	r0, [pc, #164]	; (4058c4 <motor_speed+0x5ec>)
  40581e:	f8b0 11eb 	ldrh.w	r1, [r0, #491]	; 0x1eb
  405822:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  405826:	f8a0 11eb 	strh.w	r1, [r0, #491]	; 0x1eb
             diff = (sData.measure_VOC_max - sgl_qAir) * temp16;      
  40582a:	eba2 020e 	sub.w	r2, r2, lr
             spd_2 = temp_speed_motorsR  + diff; 
  40582e:	492b      	ldr	r1, [pc, #172]	; (4058dc <motor_speed+0x604>)
  405830:	7809      	ldrb	r1, [r1, #0]
  405832:	fb03 1302 	mla	r3, r3, r2, r1
  405836:	2bff      	cmp	r3, #255	; 0xff
  405838:	bf28      	it	cs
  40583a:	23ff      	movcs	r3, #255	; 0xff
  40583c:	459a      	cmp	sl, r3
  40583e:	bf38      	it	cc
  405840:	469a      	movcc	sl, r3
             sensorAir_op = 1; 
  405842:	f04f 0901 	mov.w	r9, #1
  405846:	e768      	b.n	40571a <motor_speed+0x442>
             sData.status_unit &= ~(1 << POS_BIT_MAX_VOC);
  405848:	4a1e      	ldr	r2, [pc, #120]	; (4058c4 <motor_speed+0x5ec>)
  40584a:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40584e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405852:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
        sensorAir_op = 0;
  405856:	f04f 0900 	mov.w	r9, #0
  40585a:	e75e      	b.n	40571a <motor_speed+0x442>
        if ((DigitAccessoryOperating(ACC_I2C_RH_1) || DigitAccessoryOperating(ACC_I2C_RH_2)) && !(sData.status_test & MSK_TEST_ENABLE))  
  40585c:	2006      	movs	r0, #6
  40585e:	4b24      	ldr	r3, [pc, #144]	; (4058f0 <motor_speed+0x618>)
  405860:	4798      	blx	r3
  405862:	2800      	cmp	r0, #0
  405864:	f43f af66 	beq.w	405734 <motor_speed+0x45c>
  405868:	e75d      	b.n	405726 <motor_speed+0x44e>
           setPoint = read_byte_eeprom(ADDR_EEP(SetPoint_RH));
  40586a:	2068      	movs	r0, #104	; 0x68
  40586c:	4b19      	ldr	r3, [pc, #100]	; (4058d4 <motor_speed+0x5fc>)
  40586e:	4798      	blx	r3
  405870:	b280      	uxth	r0, r0
           if ((setPoint < 20) ||  (setPoint > 99)) {
  405872:	f1a0 0314 	sub.w	r3, r0, #20
  405876:	b29b      	uxth	r3, r3
  405878:	2b4f      	cmp	r3, #79	; 0x4f
  40587a:	d83d      	bhi.n	4058f8 <motor_speed+0x620>
           if(setPoint < 50) {
  40587c:	2831      	cmp	r0, #49	; 0x31
  40587e:	d840      	bhi.n	405902 <motor_speed+0x62a>
             sgl_qAir = (setPoint - 10); 
  405880:	f1a0 030a 	sub.w	r3, r0, #10
  405884:	b219      	sxth	r1, r3
             temp16   = (256 - spd_1) / 10; 
  405886:	f5ca 7380 	rsb	r3, sl, #256	; 0x100
  40588a:	220a      	movs	r2, #10
  40588c:	fbb3 f3f2 	udiv	r3, r3, r2
  405890:	fa1f fe83 	uxth.w	lr, r3
           if(sData.measure_RH_max >= setPoint) {
  405894:	4b0b      	ldr	r3, [pc, #44]	; (4058c4 <motor_speed+0x5ec>)
  405896:	f9b3 31bd 	ldrsh.w	r3, [r3, #445]	; 0x1bd
  40589a:	4283      	cmp	r3, r0
  40589c:	db3c      	blt.n	405918 <motor_speed+0x640>
             sData.status_unit |= (1 << POS_BIT_MAX_RH);
  40589e:	4a09      	ldr	r2, [pc, #36]	; (4058c4 <motor_speed+0x5ec>)
  4058a0:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4058a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4058a8:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
             sensorAir_op = 1;
  4058ac:	f04f 0901 	mov.w	r9, #1
             spd_1 = 255;        
  4058b0:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4058b4:	e745      	b.n	405742 <motor_speed+0x46a>
  4058b6:	bf00      	nop
  4058b8:	004047a1 	.word	0x004047a1
  4058bc:	0040b471 	.word	0x0040b471
  4058c0:	20000b88 	.word	0x20000b88
  4058c4:	200013ac 	.word	0x200013ac
  4058c8:	0040a279 	.word	0x0040a279
  4058cc:	00404f49 	.word	0x00404f49
  4058d0:	00405291 	.word	0x00405291
  4058d4:	0040a26d 	.word	0x0040a26d
  4058d8:	00400cd5 	.word	0x00400cd5
  4058dc:	20000b99 	.word	0x20000b99
  4058e0:	20000b98 	.word	0x20000b98
  4058e4:	00404d01 	.word	0x00404d01
  4058e8:	00404ab9 	.word	0x00404ab9
  4058ec:	00403ff1 	.word	0x00403ff1
  4058f0:	0040012d 	.word	0x0040012d
  4058f4:	0040a215 	.word	0x0040a215
             write_byte_eeprom(ADDR_EEP(SetPoint_RH), 50);
  4058f8:	2132      	movs	r1, #50	; 0x32
  4058fa:	2068      	movs	r0, #104	; 0x68
  4058fc:	4bb0      	ldr	r3, [pc, #704]	; (405bc0 <motor_speed+0x8e8>)
  4058fe:	4798      	blx	r3
             setPoint = 50;
  405900:	2032      	movs	r0, #50	; 0x32
             sgl_qAir = (setPoint - 12); 
  405902:	f1a0 030c 	sub.w	r3, r0, #12
  405906:	b219      	sxth	r1, r3
             temp16   = (256 - spd_1) / 12; 
  405908:	f5ca 7380 	rsb	r3, sl, #256	; 0x100
  40590c:	220c      	movs	r2, #12
  40590e:	fbb3 f3f2 	udiv	r3, r3, r2
  405912:	fa1f fe83 	uxth.w	lr, r3
  405916:	e7bd      	b.n	405894 <motor_speed+0x5bc>
           }else if(sData.measure_RH_max > sgl_qAir) {
  405918:	4299      	cmp	r1, r3
  40591a:	da14      	bge.n	405946 <motor_speed+0x66e>
             sData.status_unit |= (1 << POS_BIT_MAX_RH);
  40591c:	48a9      	ldr	r0, [pc, #676]	; (405bc4 <motor_speed+0x8ec>)
  40591e:	f8b0 21eb 	ldrh.w	r2, [r0, #491]	; 0x1eb
  405922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  405926:	f8a0 21eb 	strh.w	r2, [r0, #491]	; 0x1eb
             diff = (sData.measure_RH_max - sgl_qAir) * temp16;
  40592a:	1a5b      	subs	r3, r3, r1
             spd_2 = temp_speed_motorsR  + diff; 
  40592c:	4aa6      	ldr	r2, [pc, #664]	; (405bc8 <motor_speed+0x8f0>)
  40592e:	7812      	ldrb	r2, [r2, #0]
  405930:	fb0e 2303 	mla	r3, lr, r3, r2
  405934:	2bff      	cmp	r3, #255	; 0xff
  405936:	bf28      	it	cs
  405938:	23ff      	movcs	r3, #255	; 0xff
  40593a:	459a      	cmp	sl, r3
  40593c:	bf38      	it	cc
  40593e:	469a      	movcc	sl, r3
             sensorAir_op = 1;
  405940:	f04f 0901 	mov.w	r9, #1
  405944:	e6fd      	b.n	405742 <motor_speed+0x46a>
             sData.status_unit &= ~(1 << POS_BIT_MAX_RH);        
  405946:	4a9f      	ldr	r2, [pc, #636]	; (405bc4 <motor_speed+0x8ec>)
  405948:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40594c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  405950:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  405954:	e6f5      	b.n	405742 <motor_speed+0x46a>
       if ((DigitAccessoryOperating(ACC_I2C_CO2_1) || DigitAccessoryOperating(ACC_I2C_CO2_2)) && !(sData.status_test & MSK_TEST_ENABLE))   
  405956:	2004      	movs	r0, #4
  405958:	4b9c      	ldr	r3, [pc, #624]	; (405bcc <motor_speed+0x8f4>)
  40595a:	4798      	blx	r3
  40595c:	2800      	cmp	r0, #0
  40595e:	f43f aefd 	beq.w	40575c <motor_speed+0x484>
  405962:	e6f4      	b.n	40574e <motor_speed+0x476>
          setPoint = read_word_eeprom(ADDR_EEP(SetPoint_CO2));
  405964:	2066      	movs	r0, #102	; 0x66
  405966:	4b9a      	ldr	r3, [pc, #616]	; (405bd0 <motor_speed+0x8f8>)
  405968:	4798      	blx	r3
         if ((setPoint < 590) ||  (setPoint > 1500)) {
  40596a:	f2a0 234e 	subw	r3, r0, #590	; 0x24e
  40596e:	b29b      	uxth	r3, r3
  405970:	f240 328e 	movw	r2, #910	; 0x38e
  405974:	4293      	cmp	r3, r2
  405976:	d807      	bhi.n	405988 <motor_speed+0x6b0>
         if(setPoint < 900)
  405978:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
  40597c:	d30b      	bcc.n	405996 <motor_speed+0x6be>
         sgl_qAir = (setPoint - 260);
  40597e:	f5a0 7882 	sub.w	r8, r0, #260	; 0x104
  405982:	fa0f f888 	sxth.w	r8, r8
  405986:	e00a      	b.n	40599e <motor_speed+0x6c6>
	         write_word_eeprom(ADDR_EEP(SetPoint_CO2), 750);
  405988:	f240 21ee 	movw	r1, #750	; 0x2ee
  40598c:	2066      	movs	r0, #102	; 0x66
  40598e:	4b91      	ldr	r3, [pc, #580]	; (405bd4 <motor_speed+0x8fc>)
  405990:	4798      	blx	r3
	         setPoint = 600;
  405992:	f44f 7016 	mov.w	r0, #600	; 0x258
         sgl_qAir = (setPoint - 220);
  405996:	f1a0 08dc 	sub.w	r8, r0, #220	; 0xdc
  40599a:	fa0f f888 	sxth.w	r8, r8
  40599e:	f5b8 7f16 	cmp.w	r8, #600	; 0x258
  4059a2:	bfb8      	it	lt
  4059a4:	f44f 7816 	movlt.w	r8, #600	; 0x258
          if(sData.measure_CO2_max >= setPoint) {
  4059a8:	4b86      	ldr	r3, [pc, #536]	; (405bc4 <motor_speed+0x8ec>)
  4059aa:	f9b3 31bb 	ldrsh.w	r3, [r3, #443]	; 0x1bb
  4059ae:	9001      	str	r0, [sp, #4]
  4059b0:	4283      	cmp	r3, r0
  4059b2:	da09      	bge.n	4059c8 <motor_speed+0x6f0>
          }else if(sData.measure_CO2_max > sgl_qAir) {
  4059b4:	4543      	cmp	r3, r8
  4059b6:	dc45      	bgt.n	405a44 <motor_speed+0x76c>
            sData.status_unit &= ~(1 << POS_BIT_MAX_CO2);  
  4059b8:	4a82      	ldr	r2, [pc, #520]	; (405bc4 <motor_speed+0x8ec>)
  4059ba:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4059be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4059c2:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  4059c6:	e6d0      	b.n	40576a <motor_speed+0x492>
             setpoint_airflow_co2 = read_byte_eeprom(ADDR_EEP(SetPoint_Airflow_CO2));
  4059c8:	207d      	movs	r0, #125	; 0x7d
  4059ca:	4b83      	ldr	r3, [pc, #524]	; (405bd8 <motor_speed+0x900>)
  4059cc:	4798      	blx	r3
             sData.status_unit |= (1 << POS_BIT_MAX_CO2);
  4059ce:	4a7d      	ldr	r2, [pc, #500]	; (405bc4 <motor_speed+0x8ec>)
  4059d0:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  4059d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4059d8:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
             spd_1 = ( 51 * setpoint_airflow_co2 ) / 20;
  4059dc:	2333      	movs	r3, #51	; 0x33
  4059de:	fb03 f300 	mul.w	r3, r3, r0
  4059e2:	f04f 0a14 	mov.w	sl, #20
  4059e6:	fb93 fafa 	sdiv	sl, r3, sl
  4059ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
  4059ee:	bf28      	it	cs
  4059f0:	f04f 0aff 	movcs.w	sl, #255	; 0xff
         ref = read_word_eeprom(ADDR_EEP(Set_StepMotorsCFS_CAF[idx]));
  4059f4:	0078      	lsls	r0, r7, #1
  4059f6:	3053      	adds	r0, #83	; 0x53
  4059f8:	b280      	uxth	r0, r0
  4059fa:	4b75      	ldr	r3, [pc, #468]	; (405bd0 <motor_speed+0x8f8>)
  4059fc:	4798      	blx	r3
         ref = (unsigned short)((float)ref *0.255);
  4059fe:	4b77      	ldr	r3, [pc, #476]	; (405bdc <motor_speed+0x904>)
  405a00:	4798      	blx	r3
  405a02:	4b77      	ldr	r3, [pc, #476]	; (405be0 <motor_speed+0x908>)
  405a04:	4798      	blx	r3
  405a06:	a36c      	add	r3, pc, #432	; (adr r3, 405bb8 <motor_speed+0x8e0>)
  405a08:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a0c:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 405c0c <motor_speed+0x934>
  405a10:	47c0      	blx	r8
         temp16 = (((unsigned short)spd_1 * 10) + 9 ) / ref; 
  405a12:	fa1f f38a 	uxth.w	r3, sl
  405a16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  405a1a:	ea4f 0843 	mov.w	r8, r3, lsl #1
  405a1e:	f108 0809 	add.w	r8, r8, #9
         ref = (unsigned short)((float)ref *0.255);
  405a22:	4b70      	ldr	r3, [pc, #448]	; (405be4 <motor_speed+0x90c>)
  405a24:	4798      	blx	r3
         temp16 = (((unsigned short)spd_1 * 10) + 9 ) / ref; 
  405a26:	b280      	uxth	r0, r0
  405a28:	fb98 f8f0 	sdiv	r8, r8, r0
         sData.increase_speed_RH_CO2 =  (byte)temp16;
  405a2c:	4b65      	ldr	r3, [pc, #404]	; (405bc4 <motor_speed+0x8ec>)
  405a2e:	f883 81b1 	strb.w	r8, [r3, #433]	; 0x1b1
         temp_speed_motorsR = spd_1;
  405a32:	fa5f fa8a 	uxtb.w	sl, sl
  405a36:	4b64      	ldr	r3, [pc, #400]	; (405bc8 <motor_speed+0x8f0>)
  405a38:	f883 a000 	strb.w	sl, [r3]
         temp_speed_motorsF = spd_1;
  405a3c:	4b6a      	ldr	r3, [pc, #424]	; (405be8 <motor_speed+0x910>)
  405a3e:	f883 a000 	strb.w	sl, [r3]
  405a42:	e69a      	b.n	40577a <motor_speed+0x4a2>
             sData.status_unit |= (1 << POS_BIT_MAX_CO2);
  405a44:	f8df a17c 	ldr.w	sl, [pc, #380]	; 405bc4 <motor_speed+0x8ec>
  405a48:	f8ba 31eb 	ldrh.w	r3, [sl, #491]	; 0x1eb
  405a4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  405a50:	f8aa 31eb 	strh.w	r3, [sl, #491]	; 0x1eb
             spd_1 = temp_speed_motorsR;
  405a54:	f8df 9170 	ldr.w	r9, [pc, #368]	; 405bc8 <motor_speed+0x8f0>
  405a58:	f899 b000 	ldrb.w	fp, [r9]
             setpoint_airflow_co2 = read_byte_eeprom(ADDR_EEP(SetPoint_Airflow_CO2));
  405a5c:	207d      	movs	r0, #125	; 0x7d
  405a5e:	4b5e      	ldr	r3, [pc, #376]	; (405bd8 <motor_speed+0x900>)
  405a60:	4798      	blx	r3
             setpoint_airflow_co2 = ( 51 * setpoint_airflow_co2 ) / 20;
  405a62:	2333      	movs	r3, #51	; 0x33
  405a64:	fb03 f300 	mul.w	r3, r3, r0
  405a68:	2214      	movs	r2, #20
  405a6a:	fb93 f3f2 	sdiv	r3, r3, r2
             diff = ((unsigned int)(setpoint_airflow_co2 - spd_1) * (sData.measure_CO2_max - sgl_qAir))/ (setPoint - sgl_qAir);
  405a6e:	b2db      	uxtb	r3, r3
  405a70:	eba3 0b0b 	sub.w	fp, r3, fp
  405a74:	f9ba 31bb 	ldrsh.w	r3, [sl, #443]	; 0x1bb
  405a78:	eba3 0308 	sub.w	r3, r3, r8
  405a7c:	fb03 fb0b 	mul.w	fp, r3, fp
  405a80:	9b01      	ldr	r3, [sp, #4]
  405a82:	eba3 0308 	sub.w	r3, r3, r8
  405a86:	fbbb f3f3 	udiv	r3, fp, r3
             spd_1 = temp_speed_motorsR  + diff;
  405a8a:	f899 a000 	ldrb.w	sl, [r9]
  405a8e:	449a      	add	sl, r3
             temp_speed_motorsR = spd_1;
  405a90:	fa5f f38a 	uxtb.w	r3, sl
  405a94:	f889 3000 	strb.w	r3, [r9]
             temp_speed_motorsF = spd_1;
  405a98:	4a53      	ldr	r2, [pc, #332]	; (405be8 <motor_speed+0x910>)
  405a9a:	7013      	strb	r3, [r2, #0]
  405a9c:	e7aa      	b.n	4059f4 <motor_speed+0x71c>
          count_Boost_on++;
  405a9e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 405bec <motor_speed+0x914>
  405aa2:	f8d8 3000 	ldr.w	r3, [r8]
  405aa6:	3301      	adds	r3, #1
  405aa8:	f8c8 3000 	str.w	r3, [r8]
          setPoint = (unsigned short)read_byte_eeprom(ADDR_EEP(Set_TimeBoost));  
  405aac:	2065      	movs	r0, #101	; 0x65
  405aae:	4b4a      	ldr	r3, [pc, #296]	; (405bd8 <motor_speed+0x900>)
  405ab0:	4798      	blx	r3
  405ab2:	b280      	uxth	r0, r0
          setPoint *= 50; // trasformo i minuti dell set point in secondi (la funzione gira OGNI 1,2 sec)
  405ab4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405ab8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405abc:	0043      	lsls	r3, r0, #1
          if(count_Boost_on < setPoint) {
  405abe:	b29b      	uxth	r3, r3
  405ac0:	f8d8 2000 	ldr.w	r2, [r8]
  405ac4:	4293      	cmp	r3, r2
  405ac6:	dd0c      	ble.n	405ae2 <motor_speed+0x80a>
            temp_speed_motorsR = 255;
  405ac8:	23ff      	movs	r3, #255	; 0xff
  405aca:	4a3f      	ldr	r2, [pc, #252]	; (405bc8 <motor_speed+0x8f0>)
  405acc:	7013      	strb	r3, [r2, #0]
            temp_speed_motorsF = 255;
  405ace:	4a46      	ldr	r2, [pc, #280]	; (405be8 <motor_speed+0x910>)
  405ad0:	7013      	strb	r3, [r2, #0]
            sData.status_unit |= (1 << POS_BIT_BOOST_OPERATING); 
  405ad2:	4a3c      	ldr	r2, [pc, #240]	; (405bc4 <motor_speed+0x8ec>)
  405ad4:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  405ad8:	f043 0310 	orr.w	r3, r3, #16
  405adc:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  405ae0:	e656      	b.n	405790 <motor_speed+0x4b8>
              enab_func &=  ~(1 << ENAB_BOOST);
  405ae2:	f024 0402 	bic.w	r4, r4, #2
  405ae6:	b2a4      	uxth	r4, r4
              count_Boost_on = 0;  // ATTENZIONE Corretto baco BOOST
  405ae8:	2200      	movs	r2, #0
  405aea:	4b40      	ldr	r3, [pc, #256]	; (405bec <motor_speed+0x914>)
  405aec:	601a      	str	r2, [r3, #0]
              temp_08 = read_byte_eeprom(ADDR_EEP(cntUpdate_info));
  405aee:	203a      	movs	r0, #58	; 0x3a
  405af0:	4b39      	ldr	r3, [pc, #228]	; (405bd8 <motor_speed+0x900>)
  405af2:	4798      	blx	r3
  405af4:	4680      	mov	r8, r0
              write_word_eeprom(ADDR_EEP(Enab_Fuction), enab_func);
  405af6:	4621      	mov	r1, r4
  405af8:	202e      	movs	r0, #46	; 0x2e
  405afa:	4b36      	ldr	r3, [pc, #216]	; (405bd4 <motor_speed+0x8fc>)
  405afc:	4798      	blx	r3
              temp_08++;
  405afe:	f108 0101 	add.w	r1, r8, #1
              write_byte_eeprom(ADDR_EEP(cntUpdate_info), temp_08);
  405b02:	b2c9      	uxtb	r1, r1
  405b04:	203a      	movs	r0, #58	; 0x3a
  405b06:	4b2e      	ldr	r3, [pc, #184]	; (405bc0 <motor_speed+0x8e8>)
  405b08:	4798      	blx	r3
       if (((sData.status_unit & (1 << POS_BIT_DEFROST_OPERATING))== 0) && !(enab_func & (1<< ENAB_CAP)))
  405b0a:	4b2e      	ldr	r3, [pc, #184]	; (405bc4 <motor_speed+0x8ec>)
  405b0c:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  405b10:	f013 0f02 	tst.w	r3, #2
  405b14:	f47f adae 	bne.w	405674 <motor_speed+0x39c>
  405b18:	f014 0f40 	tst.w	r4, #64	; 0x40
  405b1c:	f47f adaa 	bne.w	405674 <motor_speed+0x39c>
       if (((sData.status_weekly & MSK_BIT_WEEKLY_RUN)  &&  (sData.status_weekly  & (0x03 << POS_BIT_SET_IMBAL))) || (enab_func & (1 << ENAB_IMBALANCE)))        
  405b20:	4b28      	ldr	r3, [pc, #160]	; (405bc4 <motor_speed+0x8ec>)
  405b22:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
  405b26:	f013 0f02 	tst.w	r3, #2
  405b2a:	d002      	beq.n	405b32 <motor_speed+0x85a>
  405b2c:	f013 0f30 	tst.w	r3, #48	; 0x30
  405b30:	d103      	bne.n	405b3a <motor_speed+0x862>
  405b32:	f014 0f10 	tst.w	r4, #16
  405b36:	f43f ada2 	beq.w	40567e <motor_speed+0x3a6>
            Serial_println1("passo dallo sblancio");
  405b3a:	482d      	ldr	r0, [pc, #180]	; (405bf0 <motor_speed+0x918>)
  405b3c:	4b2d      	ldr	r3, [pc, #180]	; (405bf4 <motor_speed+0x91c>)
  405b3e:	4798      	blx	r3
              byte sbil = (byte)read_byte_eeprom(ADDR_EEP(Set_Imbalance[0]));  
  405b40:	2063      	movs	r0, #99	; 0x63
  405b42:	4b25      	ldr	r3, [pc, #148]	; (405bd8 <motor_speed+0x900>)
  405b44:	4798      	blx	r3
  405b46:	4680      	mov	r8, r0
			if (sbil & 0x80) {
  405b48:	f010 0f80 	tst.w	r0, #128	; 0x80
  405b4c:	d160      	bne.n	405c10 <motor_speed+0x938>
			ref = read_word_eeprom(ADDR_EEP(Set_StepMotorsCFS_CAF[idx]));
  405b4e:	0078      	lsls	r0, r7, #1
  405b50:	3053      	adds	r0, #83	; 0x53
  405b52:	b280      	uxth	r0, r0
  405b54:	4b1e      	ldr	r3, [pc, #120]	; (405bd0 <motor_speed+0x8f8>)
  405b56:	4798      	blx	r3
            }else if (tempsb  > 0) {
  405b58:	f1b8 0f00 	cmp.w	r8, #0
  405b5c:	f340 8086 	ble.w	405c6c <motor_speed+0x994>
			ref = (unsigned short)((float)ref *0.255);
  405b60:	4f1e      	ldr	r7, [pc, #120]	; (405bdc <motor_speed+0x904>)
  405b62:	47b8      	blx	r7
  405b64:	4b1e      	ldr	r3, [pc, #120]	; (405be0 <motor_speed+0x908>)
  405b66:	4798      	blx	r3
  405b68:	a313      	add	r3, pc, #76	; (adr r3, 405bb8 <motor_speed+0x8e0>)
  405b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b6e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 405c0c <motor_speed+0x934>
  405b72:	47c8      	blx	r9
  405b74:	4b1b      	ldr	r3, [pc, #108]	; (405be4 <motor_speed+0x90c>)
  405b76:	4798      	blx	r3
  405b78:	fa1f f980 	uxth.w	r9, r0
	            temp_speed_motorsF = ref;
  405b7c:	4b1a      	ldr	r3, [pc, #104]	; (405be8 <motor_speed+0x910>)
  405b7e:	f883 9000 	strb.w	r9, [r3]
               sbilanc_fan = (float)(100 - tempsb) / 100;  
  405b82:	f1c8 0064 	rsb	r0, r8, #100	; 0x64
  405b86:	4b1c      	ldr	r3, [pc, #112]	; (405bf8 <motor_speed+0x920>)
  405b88:	4798      	blx	r3
  405b8a:	491c      	ldr	r1, [pc, #112]	; (405bfc <motor_speed+0x924>)
  405b8c:	4b1c      	ldr	r3, [pc, #112]	; (405c00 <motor_speed+0x928>)
  405b8e:	4798      	blx	r3
  405b90:	4680      	mov	r8, r0
	            temp_speed_motorsR = (unsigned int)(sbilanc_fan * (float)ref);
  405b92:	4648      	mov	r0, r9
  405b94:	47b8      	blx	r7
  405b96:	4601      	mov	r1, r0
  405b98:	4640      	mov	r0, r8
  405b9a:	4b1a      	ldr	r3, [pc, #104]	; (405c04 <motor_speed+0x92c>)
  405b9c:	4798      	blx	r3
  405b9e:	4b1a      	ldr	r3, [pc, #104]	; (405c08 <motor_speed+0x930>)
  405ba0:	4798      	blx	r3
  405ba2:	4b09      	ldr	r3, [pc, #36]	; (405bc8 <motor_speed+0x8f0>)
  405ba4:	7018      	strb	r0, [r3, #0]
                sData.status_unit |= (1 << POS_BIT_IMBALANCE_OPERATING);        
  405ba6:	4a07      	ldr	r2, [pc, #28]	; (405bc4 <motor_speed+0x8ec>)
  405ba8:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  405bac:	f043 0308 	orr.w	r3, r3, #8
  405bb0:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  405bb4:	e563      	b.n	40567e <motor_speed+0x3a6>
  405bb6:	bf00      	nop
  405bb8:	851eb852 	.word	0x851eb852
  405bbc:	3fd051eb 	.word	0x3fd051eb
  405bc0:	0040a1fd 	.word	0x0040a1fd
  405bc4:	200013ac 	.word	0x200013ac
  405bc8:	20000b99 	.word	0x20000b99
  405bcc:	0040012d 	.word	0x0040012d
  405bd0:	0040a279 	.word	0x0040a279
  405bd4:	0040a215 	.word	0x0040a215
  405bd8:	0040a26d 	.word	0x0040a26d
  405bdc:	0040d745 	.word	0x0040d745
  405be0:	0040cea1 	.word	0x0040cea1
  405be4:	0040d4f9 	.word	0x0040d4f9
  405be8:	20000b98 	.word	0x20000b98
  405bec:	20000b78 	.word	0x20000b78
  405bf0:	00412418 	.word	0x00412418
  405bf4:	00406051 	.word	0x00406051
  405bf8:	0040d74d 	.word	0x0040d74d
  405bfc:	42c80000 	.word	0x42c80000
  405c00:	0040d95d 	.word	0x0040d95d
  405c04:	0040d7f5 	.word	0x0040d7f5
  405c08:	0040dbcd 	.word	0x0040dbcd
  405c0c:	0040cf49 	.word	0x0040cf49
			ref = read_word_eeprom(ADDR_EEP(Set_StepMotorsCFS_CAF[idx]));
  405c10:	0078      	lsls	r0, r7, #1
  405c12:	3053      	adds	r0, #83	; 0x53
  405c14:	b280      	uxth	r0, r0
  405c16:	4b2a      	ldr	r3, [pc, #168]	; (405cc0 <motor_speed+0x9e8>)
  405c18:	4798      	blx	r3
			ref = (unsigned short)((float)ref *0.255);
  405c1a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 405cf4 <motor_speed+0xa1c>
  405c1e:	47c8      	blx	r9
  405c20:	4b28      	ldr	r3, [pc, #160]	; (405cc4 <motor_speed+0x9ec>)
  405c22:	4798      	blx	r3
  405c24:	a324      	add	r3, pc, #144	; (adr r3, 405cb8 <motor_speed+0x9e0>)
  405c26:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c2a:	4f27      	ldr	r7, [pc, #156]	; (405cc8 <motor_speed+0x9f0>)
  405c2c:	47b8      	blx	r7
  405c2e:	4b27      	ldr	r3, [pc, #156]	; (405ccc <motor_speed+0x9f4>)
  405c30:	4798      	blx	r3
  405c32:	b287      	uxth	r7, r0
               sbilanc_fan = (float)(100 + tempsb) / 100; 
  405c34:	f1a8 009c 	sub.w	r0, r8, #156	; 0x9c
  405c38:	4b25      	ldr	r3, [pc, #148]	; (405cd0 <motor_speed+0x9f8>)
  405c3a:	4798      	blx	r3
  405c3c:	4925      	ldr	r1, [pc, #148]	; (405cd4 <motor_speed+0x9fc>)
  405c3e:	4b26      	ldr	r3, [pc, #152]	; (405cd8 <motor_speed+0xa00>)
  405c40:	4798      	blx	r3
  405c42:	4680      	mov	r8, r0
               temp_speed_motorsF = (unsigned int)(sbilanc_fan * (float)ref);
  405c44:	4638      	mov	r0, r7
  405c46:	47c8      	blx	r9
  405c48:	4601      	mov	r1, r0
  405c4a:	4640      	mov	r0, r8
  405c4c:	4b23      	ldr	r3, [pc, #140]	; (405cdc <motor_speed+0xa04>)
  405c4e:	4798      	blx	r3
  405c50:	4b23      	ldr	r3, [pc, #140]	; (405ce0 <motor_speed+0xa08>)
  405c52:	4798      	blx	r3
  405c54:	4b23      	ldr	r3, [pc, #140]	; (405ce4 <motor_speed+0xa0c>)
  405c56:	7018      	strb	r0, [r3, #0]
               temp_speed_motorsR = ref;
  405c58:	4b23      	ldr	r3, [pc, #140]	; (405ce8 <motor_speed+0xa10>)
  405c5a:	701f      	strb	r7, [r3, #0]
               sData.status_unit |= (1 << POS_BIT_IMBALANCE_OPERATING);   
  405c5c:	4a23      	ldr	r2, [pc, #140]	; (405cec <motor_speed+0xa14>)
  405c5e:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  405c62:	f043 0308 	orr.w	r3, r3, #8
  405c66:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  405c6a:	e508      	b.n	40567e <motor_speed+0x3a6>
                sData.status_unit &= ~(1 << POS_BIT_IMBALANCE_OPERATING);  
  405c6c:	4a1f      	ldr	r2, [pc, #124]	; (405cec <motor_speed+0xa14>)
  405c6e:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  405c72:	f023 0308 	bic.w	r3, r3, #8
  405c76:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  405c7a:	e500      	b.n	40567e <motor_speed+0x3a6>
       temp_speed_motorsR = (int)((float)temp_speed_motorsR * calcDepot());
  405c7c:	4c1a      	ldr	r4, [pc, #104]	; (405ce8 <motor_speed+0xa10>)
  405c7e:	f8df a074 	ldr.w	sl, [pc, #116]	; 405cf4 <motor_speed+0xa1c>
  405c82:	7820      	ldrb	r0, [r4, #0]
  405c84:	47d0      	blx	sl
  405c86:	4607      	mov	r7, r0
  405c88:	f8df 906c 	ldr.w	r9, [pc, #108]	; 405cf8 <motor_speed+0xa20>
  405c8c:	47c8      	blx	r9
  405c8e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 405cdc <motor_speed+0xa04>
  405c92:	4601      	mov	r1, r0
  405c94:	4638      	mov	r0, r7
  405c96:	47c0      	blx	r8
  405c98:	4f15      	ldr	r7, [pc, #84]	; (405cf0 <motor_speed+0xa18>)
  405c9a:	47b8      	blx	r7
  405c9c:	7020      	strb	r0, [r4, #0]
       temp_speed_motorsF = (int)((float)temp_speed_motorsF * calcDepot());
  405c9e:	4c11      	ldr	r4, [pc, #68]	; (405ce4 <motor_speed+0xa0c>)
  405ca0:	7820      	ldrb	r0, [r4, #0]
  405ca2:	47d0      	blx	sl
  405ca4:	4682      	mov	sl, r0
  405ca6:	47c8      	blx	r9
  405ca8:	4601      	mov	r1, r0
  405caa:	4650      	mov	r0, sl
  405cac:	47c0      	blx	r8
  405cae:	47b8      	blx	r7
  405cb0:	7020      	strb	r0, [r4, #0]
  405cb2:	e4e8      	b.n	405686 <motor_speed+0x3ae>
  405cb4:	f3af 8000 	nop.w
  405cb8:	851eb852 	.word	0x851eb852
  405cbc:	3fd051eb 	.word	0x3fd051eb
  405cc0:	0040a279 	.word	0x0040a279
  405cc4:	0040cea1 	.word	0x0040cea1
  405cc8:	0040cf49 	.word	0x0040cf49
  405ccc:	0040d4f9 	.word	0x0040d4f9
  405cd0:	0040d74d 	.word	0x0040d74d
  405cd4:	42c80000 	.word	0x42c80000
  405cd8:	0040d95d 	.word	0x0040d95d
  405cdc:	0040d7f5 	.word	0x0040d7f5
  405ce0:	0040dbcd 	.word	0x0040dbcd
  405ce4:	20000b98 	.word	0x20000b98
  405ce8:	20000b99 	.word	0x20000b99
  405cec:	200013ac 	.word	0x200013ac
  405cf0:	0040db81 	.word	0x0040db81
  405cf4:	0040d745 	.word	0x0040d745
  405cf8:	00404341 	.word	0x00404341

00405cfc <init_scheduler>:
 * Function:
 *  init_scheduler
 *
 *-------------------------------------------------*/
void init_scheduler()
{
  405cfc:	4b07      	ldr	r3, [pc, #28]	; (405d1c <init_scheduler+0x20>)
  405cfe:	f503 7180 	add.w	r1, r3, #256	; 0x100
    int i;

    for(i=0; i < MAX_PROCESS_RUN; i++) {
       sSheduler[i].enable = 0;
  405d02:	2200      	movs	r2, #0
  405d04:	601a      	str	r2, [r3, #0]
       sSheduler[i].call_function   = NULL;
  405d06:	60da      	str	r2, [r3, #12]
       sSheduler[i].countdown_0s1   = 0;
  405d08:	605a      	str	r2, [r3, #4]
       sSheduler[i].value_timer_0s1 = 0;
  405d0a:	609a      	str	r2, [r3, #8]
  405d0c:	3310      	adds	r3, #16
    for(i=0; i < MAX_PROCESS_RUN; i++) {
  405d0e:	428b      	cmp	r3, r1
  405d10:	d1f8      	bne.n	405d04 <init_scheduler+0x8>
    }

    Scheduler_Counter = 0;
  405d12:	2200      	movs	r2, #0
  405d14:	4b02      	ldr	r3, [pc, #8]	; (405d20 <init_scheduler+0x24>)
  405d16:	601a      	str	r2, [r3, #0]
  405d18:	4770      	bx	lr
  405d1a:	bf00      	nop
  405d1c:	20001048 	.word	0x20001048
  405d20:	20000e48 	.word	0x20000e48

00405d24 <Scheduler_Timer_Callback>:
 * Description:
 *  L'interrupt si attiva ogni 100ms
 *
 *-------------------------------------------------*/
void Scheduler_Timer_Callback ( void )
{
  405d24:	4b08      	ldr	r3, [pc, #32]	; (405d48 <Scheduler_Timer_Callback+0x24>)
  405d26:	f503 7080 	add.w	r0, r3, #256	; 0x100
  405d2a:	e002      	b.n	405d32 <Scheduler_Timer_Callback+0xe>
  405d2c:	3310      	adds	r3, #16
    int i;
    
    for(i=0; i<MAX_PROCESS_RUN; i++)  {
  405d2e:	4283      	cmp	r3, r0
  405d30:	d008      	beq.n	405d44 <Scheduler_Timer_Callback+0x20>
        if(sSheduler[i].enable && sSheduler[i].countdown_0s1)
  405d32:	681a      	ldr	r2, [r3, #0]
  405d34:	2a00      	cmp	r2, #0
  405d36:	d0f9      	beq.n	405d2c <Scheduler_Timer_Callback+0x8>
  405d38:	685a      	ldr	r2, [r3, #4]
  405d3a:	2a00      	cmp	r2, #0
  405d3c:	d0f6      	beq.n	405d2c <Scheduler_Timer_Callback+0x8>
            sSheduler[i].countdown_0s1--;
  405d3e:	3a01      	subs	r2, #1
  405d40:	605a      	str	r2, [r3, #4]
  405d42:	e7f3      	b.n	405d2c <Scheduler_Timer_Callback+0x8>
    }
    
}
  405d44:	4770      	bx	lr
  405d46:	bf00      	nop
  405d48:	20001048 	.word	0x20001048

00405d4c <insert_function_scheduler>:
 *  un tempo, che allo scadere processa la funzione
 *  (mini kernel)
 *
 *-------------------------------------------------*/
int insert_function_scheduler(CallBack_FUNC name_func, unsigned int sample)
{
  405d4c:	b430      	push	{r4, r5}
    int i, ret =-1;

    for(i=0; i < MAX_PROCESS_RUN; i++) {
        if(sSheduler[i].enable == 0)
  405d4e:	4b0d      	ldr	r3, [pc, #52]	; (405d84 <insert_function_scheduler+0x38>)
  405d50:	681b      	ldr	r3, [r3, #0]
  405d52:	b15b      	cbz	r3, 405d6c <insert_function_scheduler+0x20>
  405d54:	4a0b      	ldr	r2, [pc, #44]	; (405d84 <insert_function_scheduler+0x38>)
    for(i=0; i < MAX_PROCESS_RUN; i++) {
  405d56:	2301      	movs	r3, #1
        if(sSheduler[i].enable == 0)
  405d58:	6914      	ldr	r4, [r2, #16]
  405d5a:	b144      	cbz	r4, 405d6e <insert_function_scheduler+0x22>
    for(i=0; i < MAX_PROCESS_RUN; i++) {
  405d5c:	3301      	adds	r3, #1
  405d5e:	3210      	adds	r2, #16
  405d60:	2b10      	cmp	r3, #16
  405d62:	d1f9      	bne.n	405d58 <insert_function_scheduler+0xc>
    int i, ret =-1;
  405d64:	f04f 30ff 	mov.w	r0, #4294967295
        }

    }

    return ret;
}
  405d68:	bc30      	pop	{r4, r5}
  405d6a:	4770      	bx	lr
    for(i=0; i < MAX_PROCESS_RUN; i++) {
  405d6c:	2300      	movs	r3, #0
            sSheduler[i].enable = 1;
  405d6e:	4c05      	ldr	r4, [pc, #20]	; (405d84 <insert_function_scheduler+0x38>)
  405d70:	011b      	lsls	r3, r3, #4
  405d72:	18e2      	adds	r2, r4, r3
  405d74:	2501      	movs	r5, #1
  405d76:	50e5      	str	r5, [r4, r3]
            sSheduler[i].call_function   = name_func;
  405d78:	60d0      	str	r0, [r2, #12]
            sSheduler[i].countdown_0s1   = sample;
  405d7a:	6051      	str	r1, [r2, #4]
            sSheduler[i].value_timer_0s1 = sample;
  405d7c:	6091      	str	r1, [r2, #8]
            ret = 0; // ok c'Ã¨ spazio.
  405d7e:	2000      	movs	r0, #0
            break;
  405d80:	e7f2      	b.n	405d68 <insert_function_scheduler+0x1c>
  405d82:	bf00      	nop
  405d84:	20001048 	.word	0x20001048

00405d88 <process_scheduler>:
 * Description:
 *
 *
 *-------------------------------------------------*/
void process_scheduler()
{
  405d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405d8a:	4c0c      	ldr	r4, [pc, #48]	; (405dbc <process_scheduler+0x34>)
  405d8c:	f504 7680 	add.w	r6, r4, #256	; 0x100
            // se getvalue != 0 ricarico il timer per un altro giro.
            if(getvalue){
                sSheduler[i].countdown_0s1  =  sSheduler[i].value_timer_0s1;
            }else {
                //altrimenti cancello la funzione dallo SCHEDULER
                sSheduler[i].call_function = NULL;
  405d90:	2700      	movs	r7, #0
  405d92:	e004      	b.n	405d9e <process_scheduler+0x16>
  405d94:	60e7      	str	r7, [r4, #12]
                sSheduler[i].enable  = 0;
  405d96:	6027      	str	r7, [r4, #0]
  405d98:	3410      	adds	r4, #16
    for(i=0; i < MAX_PROCESS_RUN; i++) {
  405d9a:	42b4      	cmp	r4, r6
  405d9c:	d00c      	beq.n	405db8 <process_scheduler+0x30>
        if(sSheduler[i].enable && (sSheduler[i].countdown_0s1 == 0))
  405d9e:	6823      	ldr	r3, [r4, #0]
  405da0:	2b00      	cmp	r3, #0
  405da2:	d0f9      	beq.n	405d98 <process_scheduler+0x10>
  405da4:	6863      	ldr	r3, [r4, #4]
  405da6:	2b00      	cmp	r3, #0
  405da8:	d1f6      	bne.n	405d98 <process_scheduler+0x10>
            getvalue = (*sSheduler[i].call_function)();
  405daa:	68e3      	ldr	r3, [r4, #12]
  405dac:	4798      	blx	r3
            if(getvalue){
  405dae:	2800      	cmp	r0, #0
  405db0:	d0f0      	beq.n	405d94 <process_scheduler+0xc>
                sSheduler[i].countdown_0s1  =  sSheduler[i].value_timer_0s1;
  405db2:	68a3      	ldr	r3, [r4, #8]
  405db4:	6063      	str	r3, [r4, #4]
  405db6:	e7ef      	b.n	405d98 <process_scheduler+0x10>
            }
        }
    }
}
  405db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405dba:	bf00      	nop
  405dbc:	20001048 	.word	0x20001048

00405dc0 <UART0_Handler>:
extern Pdc* UART0_PDC;
extern pdc_packet_t pdc_uart0_packet;
extern uint8_t USART0_buffRX[128];

void UART0_Handler ( void )
{
  405dc0:	b510      	push	{r4, lr}
	UART0_Status_Register = uart_get_status(CONF_UART0);
  405dc2:	4c19      	ldr	r4, [pc, #100]	; (405e28 <UART0_Handler+0x68>)
  405dc4:	4620      	mov	r0, r4
  405dc6:	4b19      	ldr	r3, [pc, #100]	; (405e2c <UART0_Handler+0x6c>)
  405dc8:	4798      	blx	r3
  405dca:	4b19      	ldr	r3, [pc, #100]	; (405e30 <UART0_Handler+0x70>)
  405dcc:	6018      	str	r0, [r3, #0]
	uart_reset_status(CONF_UART0);
  405dce:	4620      	mov	r0, r4
  405dd0:	4b18      	ldr	r3, [pc, #96]	; (405e34 <UART0_Handler+0x74>)
  405dd2:	4798      	blx	r3
	
	*rxTail = CONF_UART0->UART_RHR;
  405dd4:	4b18      	ldr	r3, [pc, #96]	; (405e38 <UART0_Handler+0x78>)
  405dd6:	681a      	ldr	r2, [r3, #0]
  405dd8:	69a1      	ldr	r1, [r4, #24]
  405dda:	7011      	strb	r1, [r2, #0]

	// Will the increment not result in a wrap and not result in a pure collision?
	// This is most often condition so check first
	if ( ( rxTail    != (rxQueue + UART0_CONFIG_RX_BYTEQ_LENGTH-1)) &&
  405ddc:	681a      	ldr	r2, [r3, #0]
  405dde:	4b17      	ldr	r3, [pc, #92]	; (405e3c <UART0_Handler+0x7c>)
  405de0:	429a      	cmp	r2, r3
  405de2:	d00e      	beq.n	405e02 <UART0_Handler+0x42>
	((rxTail+1) != rxHead) )
  405de4:	4b14      	ldr	r3, [pc, #80]	; (405e38 <UART0_Handler+0x78>)
  405de6:	681b      	ldr	r3, [r3, #0]
  405de8:	3301      	adds	r3, #1
  405dea:	4a15      	ldr	r2, [pc, #84]	; (405e40 <UART0_Handler+0x80>)
	if ( ( rxTail    != (rxQueue + UART0_CONFIG_RX_BYTEQ_LENGTH-1)) &&
  405dec:	6812      	ldr	r2, [r2, #0]
  405dee:	429a      	cmp	r2, r3
  405df0:	d007      	beq.n	405e02 <UART0_Handler+0x42>
	{
		rxTail++;
  405df2:	4a11      	ldr	r2, [pc, #68]	; (405e38 <UART0_Handler+0x78>)
  405df4:	6813      	ldr	r3, [r2, #0]
  405df6:	3301      	adds	r3, #1
  405df8:	6013      	str	r3, [r2, #0]
	}
	else // must be collision
	{
		rxOverflowed = true;
	}
	UART0_Timeout = 0;
  405dfa:	2200      	movs	r2, #0
  405dfc:	4b11      	ldr	r3, [pc, #68]	; (405e44 <UART0_Handler+0x84>)
  405dfe:	601a      	str	r2, [r3, #0]
  405e00:	bd10      	pop	{r4, pc}
	else if ( (rxTail == (rxQueue + UART0_CONFIG_RX_BYTEQ_LENGTH-1)) &&
  405e02:	4b0d      	ldr	r3, [pc, #52]	; (405e38 <UART0_Handler+0x78>)
  405e04:	681a      	ldr	r2, [r3, #0]
  405e06:	4b0d      	ldr	r3, [pc, #52]	; (405e3c <UART0_Handler+0x7c>)
  405e08:	429a      	cmp	r2, r3
  405e0a:	d003      	beq.n	405e14 <UART0_Handler+0x54>
		rxOverflowed = true;
  405e0c:	2201      	movs	r2, #1
  405e0e:	4b0e      	ldr	r3, [pc, #56]	; (405e48 <UART0_Handler+0x88>)
  405e10:	701a      	strb	r2, [r3, #0]
  405e12:	e7f2      	b.n	405dfa <UART0_Handler+0x3a>
	(rxHead !=  rxQueue) )
  405e14:	4b0a      	ldr	r3, [pc, #40]	; (405e40 <UART0_Handler+0x80>)
	else if ( (rxTail == (rxQueue + UART0_CONFIG_RX_BYTEQ_LENGTH-1)) &&
  405e16:	681a      	ldr	r2, [r3, #0]
  405e18:	4b0c      	ldr	r3, [pc, #48]	; (405e4c <UART0_Handler+0x8c>)
  405e1a:	429a      	cmp	r2, r3
  405e1c:	d0f6      	beq.n	405e0c <UART0_Handler+0x4c>
		rxTail = rxQueue;
  405e1e:	461a      	mov	r2, r3
  405e20:	4b05      	ldr	r3, [pc, #20]	; (405e38 <UART0_Handler+0x78>)
  405e22:	601a      	str	r2, [r3, #0]
  405e24:	e7e9      	b.n	405dfa <UART0_Handler+0x3a>
  405e26:	bf00      	nop
  405e28:	400e0600 	.word	0x400e0600
  405e2c:	0040922f 	.word	0x0040922f
  405e30:	20000b9c 	.word	0x20000b9c
  405e34:	00409233 	.word	0x00409233
  405e38:	20000c2c 	.word	0x20000c2c
  405e3c:	20000c28 	.word	0x20000c28
  405e40:	20000ba0 	.word	0x20000ba0
  405e44:	20000e58 	.word	0x20000e58
  405e48:	20000ba4 	.word	0x20000ba4
  405e4c:	20000ba8 	.word	0x20000ba8

00405e50 <Serial_begin>:
}

void Serial_begin( void )
{
	txHead = txQueue;
  405e50:	4a05      	ldr	r2, [pc, #20]	; (405e68 <Serial_begin+0x18>)
  405e52:	4b06      	ldr	r3, [pc, #24]	; (405e6c <Serial_begin+0x1c>)
  405e54:	601a      	str	r2, [r3, #0]
	txTail = txQueue;
	rxHead = rxQueue;
  405e56:	4b06      	ldr	r3, [pc, #24]	; (405e70 <Serial_begin+0x20>)
  405e58:	4a06      	ldr	r2, [pc, #24]	; (405e74 <Serial_begin+0x24>)
  405e5a:	6013      	str	r3, [r2, #0]
	rxTail = rxQueue;
  405e5c:	4a06      	ldr	r2, [pc, #24]	; (405e78 <Serial_begin+0x28>)
  405e5e:	6013      	str	r3, [r2, #0]
	
	rxOverflowed = false;
  405e60:	2200      	movs	r2, #0
  405e62:	4b06      	ldr	r3, [pc, #24]	; (405e7c <Serial_begin+0x2c>)
  405e64:	701a      	strb	r2, [r3, #0]
  405e66:	4770      	bx	lr
  405e68:	20000c34 	.word	0x20000c34
  405e6c:	20000c30 	.word	0x20000c30
  405e70:	20000ba8 	.word	0x20000ba8
  405e74:	20000ba0 	.word	0x20000ba0
  405e78:	20000c2c 	.word	0x20000c2c
  405e7c:	20000ba4 	.word	0x20000ba4

00405e80 <Serial_available>:
{
	
}

int Serial_available( void )
{
  405e80:	b538      	push	{r3, r4, r5, lr}
	uint16_t size;
	
	size = 0;
	
	if ( pdc_read_rx_counter(UART0_PDC) == 120 )
  405e82:	4b15      	ldr	r3, [pc, #84]	; (405ed8 <Serial_available+0x58>)
  405e84:	6818      	ldr	r0, [r3, #0]
  405e86:	4b15      	ldr	r3, [pc, #84]	; (405edc <Serial_available+0x5c>)
  405e88:	4798      	blx	r3
  405e8a:	2878      	cmp	r0, #120	; 0x78
  405e8c:	d009      	beq.n	405ea2 <Serial_available+0x22>
			UART0_Timeout = 0;
			return 0;
		}
	else
		{
			size = ( 120 - pdc_read_rx_counter(UART0_PDC) );
  405e8e:	4b12      	ldr	r3, [pc, #72]	; (405ed8 <Serial_available+0x58>)
  405e90:	6818      	ldr	r0, [r3, #0]
  405e92:	4b12      	ldr	r3, [pc, #72]	; (405edc <Serial_available+0x5c>)
  405e94:	4798      	blx	r3
			if ( UART0_Timeout >= 150 )
  405e96:	4b12      	ldr	r3, [pc, #72]	; (405ee0 <Serial_available+0x60>)
  405e98:	681b      	ldr	r3, [r3, #0]
  405e9a:	2b95      	cmp	r3, #149	; 0x95
  405e9c:	d805      	bhi.n	405eaa <Serial_available+0x2a>
				UART0_Timeout = 0;
				rxHead = rxQueue;
				return size;
			}
			else
				return 0;
  405e9e:	2000      	movs	r0, #0
		{
			return size;
		}
	else
		return 0;*/
}
  405ea0:	bd38      	pop	{r3, r4, r5, pc}
			UART0_Timeout = 0;
  405ea2:	2000      	movs	r0, #0
  405ea4:	4b0e      	ldr	r3, [pc, #56]	; (405ee0 <Serial_available+0x60>)
  405ea6:	6018      	str	r0, [r3, #0]
			return 0;
  405ea8:	bd38      	pop	{r3, r4, r5, pc}
			size = ( 120 - pdc_read_rx_counter(UART0_PDC) );
  405eaa:	f1c0 0078 	rsb	r0, r0, #120	; 0x78
  405eae:	b284      	uxth	r4, r0
				memcpy ( rxQueue, USART0_buffRX, size );
  405eb0:	4d0c      	ldr	r5, [pc, #48]	; (405ee4 <Serial_available+0x64>)
  405eb2:	4622      	mov	r2, r4
  405eb4:	490c      	ldr	r1, [pc, #48]	; (405ee8 <Serial_available+0x68>)
  405eb6:	4628      	mov	r0, r5
  405eb8:	4b0c      	ldr	r3, [pc, #48]	; (405eec <Serial_available+0x6c>)
  405eba:	4798      	blx	r3
				pdc_rx_init(UART0_PDC, &pdc_uart0_packet, NULL);
  405ebc:	2200      	movs	r2, #0
  405ebe:	490c      	ldr	r1, [pc, #48]	; (405ef0 <Serial_available+0x70>)
  405ec0:	4b05      	ldr	r3, [pc, #20]	; (405ed8 <Serial_available+0x58>)
  405ec2:	6818      	ldr	r0, [r3, #0]
  405ec4:	4b0b      	ldr	r3, [pc, #44]	; (405ef4 <Serial_available+0x74>)
  405ec6:	4798      	blx	r3
				UART0_Timeout = 0;
  405ec8:	2200      	movs	r2, #0
  405eca:	4b05      	ldr	r3, [pc, #20]	; (405ee0 <Serial_available+0x60>)
  405ecc:	601a      	str	r2, [r3, #0]
				rxHead = rxQueue;
  405ece:	4b0a      	ldr	r3, [pc, #40]	; (405ef8 <Serial_available+0x78>)
  405ed0:	601d      	str	r5, [r3, #0]
				return size;
  405ed2:	4620      	mov	r0, r4
  405ed4:	bd38      	pop	{r3, r4, r5, pc}
  405ed6:	bf00      	nop
  405ed8:	200016b4 	.word	0x200016b4
  405edc:	00403785 	.word	0x00403785
  405ee0:	20000e58 	.word	0x20000e58
  405ee4:	20000ba8 	.word	0x20000ba8
  405ee8:	200015b4 	.word	0x200015b4
  405eec:	0040dc69 	.word	0x0040dc69
  405ef0:	20001394 	.word	0x20001394
  405ef4:	00403761 	.word	0x00403761
  405ef8:	20000ba0 	.word	0x20000ba0

00405efc <Serial_read>:

int Serial_read( void )
{
	uint8_t data = 0;
	
	data = *rxHead;
  405efc:	4a02      	ldr	r2, [pc, #8]	; (405f08 <Serial_read+0xc>)
  405efe:	6813      	ldr	r3, [r2, #0]
  405f00:	f813 0b01 	ldrb.w	r0, [r3], #1
	rxHead++;
  405f04:	6013      	str	r3, [r2, #0]
    if (rxHead == (rxQueue + UART0_CONFIG_RX_BYTEQ_LENGTH))
    {
        rxHead = rxQueue;
    }*/
    return data;
}
  405f06:	4770      	bx	lr
  405f08:	20000ba0 	.word	0x20000ba0

00405f0c <Serial_write>:
{
	
}

void Serial_write(uint8_t* b, uint16_t len)
{
  405f0c:	b538      	push	{r3, r4, r5, lr}
	usart_serial_write_packet(CONSOLE_UART , b, len);
  405f0e:	460a      	mov	r2, r1
  405f10:	4601      	mov	r1, r0
  405f12:	4805      	ldr	r0, [pc, #20]	; (405f28 <Serial_write+0x1c>)
  405f14:	4b05      	ldr	r3, [pc, #20]	; (405f2c <Serial_write+0x20>)
  405f16:	4798      	blx	r3
	while ( !uart_is_tx_empty(CONSOLE_UART))
  405f18:	4d03      	ldr	r5, [pc, #12]	; (405f28 <Serial_write+0x1c>)
  405f1a:	4c05      	ldr	r4, [pc, #20]	; (405f30 <Serial_write+0x24>)
  405f1c:	4628      	mov	r0, r5
  405f1e:	47a0      	blx	r4
  405f20:	2800      	cmp	r0, #0
  405f22:	d0fb      	beq.n	405f1c <Serial_write+0x10>
	{
		
	}
}
  405f24:	bd38      	pop	{r3, r4, r5, pc}
  405f26:	bf00      	nop
  405f28:	400e0600 	.word	0x400e0600
  405f2c:	00408f35 	.word	0x00408f35
  405f30:	0040923b 	.word	0x0040923b

00405f34 <Serial_print1>:

void Serial_print1(const char* buff)
{
  405f34:	b538      	push	{r3, r4, r5, lr}
  405f36:	4604      	mov	r4, r0
	usart_serial_write_packet(CONSOLE_UART , buff, strlen (buff));
  405f38:	4b06      	ldr	r3, [pc, #24]	; (405f54 <Serial_print1+0x20>)
  405f3a:	4798      	blx	r3
  405f3c:	4602      	mov	r2, r0
  405f3e:	4621      	mov	r1, r4
  405f40:	4805      	ldr	r0, [pc, #20]	; (405f58 <Serial_print1+0x24>)
  405f42:	4b06      	ldr	r3, [pc, #24]	; (405f5c <Serial_print1+0x28>)
  405f44:	4798      	blx	r3
	while ( !uart_is_tx_empty(CONSOLE_UART))
  405f46:	4d04      	ldr	r5, [pc, #16]	; (405f58 <Serial_print1+0x24>)
  405f48:	4c05      	ldr	r4, [pc, #20]	; (405f60 <Serial_print1+0x2c>)
  405f4a:	4628      	mov	r0, r5
  405f4c:	47a0      	blx	r4
  405f4e:	2800      	cmp	r0, #0
  405f50:	d0fb      	beq.n	405f4a <Serial_print1+0x16>
	{
		
	}
}
  405f52:	bd38      	pop	{r3, r4, r5, pc}
  405f54:	0040dec1 	.word	0x0040dec1
  405f58:	400e0600 	.word	0x400e0600
  405f5c:	00408f35 	.word	0x00408f35
  405f60:	0040923b 	.word	0x0040923b

00405f64 <Serial_print>:

void Serial_print(Byte b, int base)
{
  405f64:	b530      	push	{r4, r5, lr}
  405f66:	b08f      	sub	sp, #60	; 0x3c
  405f68:	4605      	mov	r5, r0
  405f6a:	460c      	mov	r4, r1
	char Buffer[50];
	
	memset ( Buffer, 0, sizeof(Buffer));
  405f6c:	2232      	movs	r2, #50	; 0x32
  405f6e:	2100      	movs	r1, #0
  405f70:	a801      	add	r0, sp, #4
  405f72:	4b2d      	ldr	r3, [pc, #180]	; (406028 <Serial_print+0xc4>)
  405f74:	4798      	blx	r3
	if ( base == BYTE )
  405f76:	b13c      	cbz	r4, 405f88 <Serial_print+0x24>
			 
		 }
		 return;
	}
	
	if ( base == DEC )
  405f78:	2c0a      	cmp	r4, #10
  405f7a:	d019      	beq.n	405fb0 <Serial_print+0x4c>
			
		}
		return;
	}
	
	if ( base == HEX )
  405f7c:	2c10      	cmp	r4, #16
  405f7e:	d02b      	beq.n	405fd8 <Serial_print+0x74>
			
		}
		return;
	}
	
	if ( base == 1 )
  405f80:	2c01      	cmp	r4, #1
  405f82:	d03d      	beq.n	406000 <Serial_print+0x9c>
			
		}
		return;
	}
	
}
  405f84:	b00f      	add	sp, #60	; 0x3c
  405f86:	bd30      	pop	{r4, r5, pc}
		 sprintf(Buffer ,"%c", b);
  405f88:	462a      	mov	r2, r5
  405f8a:	4928      	ldr	r1, [pc, #160]	; (40602c <Serial_print+0xc8>)
  405f8c:	a801      	add	r0, sp, #4
  405f8e:	4b28      	ldr	r3, [pc, #160]	; (406030 <Serial_print+0xcc>)
  405f90:	4798      	blx	r3
		 usart_serial_write_packet(CONSOLE_UART , Buffer, strlen (Buffer));
  405f92:	a801      	add	r0, sp, #4
  405f94:	4b27      	ldr	r3, [pc, #156]	; (406034 <Serial_print+0xd0>)
  405f96:	4798      	blx	r3
  405f98:	4602      	mov	r2, r0
  405f9a:	a901      	add	r1, sp, #4
  405f9c:	4826      	ldr	r0, [pc, #152]	; (406038 <Serial_print+0xd4>)
  405f9e:	4b27      	ldr	r3, [pc, #156]	; (40603c <Serial_print+0xd8>)
  405fa0:	4798      	blx	r3
		 while ( !uart_is_tx_empty(CONSOLE_UART))
  405fa2:	4d25      	ldr	r5, [pc, #148]	; (406038 <Serial_print+0xd4>)
  405fa4:	4c26      	ldr	r4, [pc, #152]	; (406040 <Serial_print+0xdc>)
  405fa6:	4628      	mov	r0, r5
  405fa8:	47a0      	blx	r4
  405faa:	2800      	cmp	r0, #0
  405fac:	d0fb      	beq.n	405fa6 <Serial_print+0x42>
  405fae:	e7e9      	b.n	405f84 <Serial_print+0x20>
		sprintf(Buffer ,"%d", b);
  405fb0:	462a      	mov	r2, r5
  405fb2:	4924      	ldr	r1, [pc, #144]	; (406044 <Serial_print+0xe0>)
  405fb4:	a801      	add	r0, sp, #4
  405fb6:	4b1e      	ldr	r3, [pc, #120]	; (406030 <Serial_print+0xcc>)
  405fb8:	4798      	blx	r3
		usart_serial_write_packet(CONSOLE_UART , Buffer, strlen (Buffer));
  405fba:	a801      	add	r0, sp, #4
  405fbc:	4b1d      	ldr	r3, [pc, #116]	; (406034 <Serial_print+0xd0>)
  405fbe:	4798      	blx	r3
  405fc0:	4602      	mov	r2, r0
  405fc2:	a901      	add	r1, sp, #4
  405fc4:	481c      	ldr	r0, [pc, #112]	; (406038 <Serial_print+0xd4>)
  405fc6:	4b1d      	ldr	r3, [pc, #116]	; (40603c <Serial_print+0xd8>)
  405fc8:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  405fca:	4d1b      	ldr	r5, [pc, #108]	; (406038 <Serial_print+0xd4>)
  405fcc:	4c1c      	ldr	r4, [pc, #112]	; (406040 <Serial_print+0xdc>)
  405fce:	4628      	mov	r0, r5
  405fd0:	47a0      	blx	r4
  405fd2:	2800      	cmp	r0, #0
  405fd4:	d0fb      	beq.n	405fce <Serial_print+0x6a>
  405fd6:	e7d5      	b.n	405f84 <Serial_print+0x20>
		sprintf(Buffer ,"%X", b);
  405fd8:	462a      	mov	r2, r5
  405fda:	491b      	ldr	r1, [pc, #108]	; (406048 <Serial_print+0xe4>)
  405fdc:	a801      	add	r0, sp, #4
  405fde:	4b14      	ldr	r3, [pc, #80]	; (406030 <Serial_print+0xcc>)
  405fe0:	4798      	blx	r3
		usart_serial_write_packet(CONSOLE_UART , Buffer, strlen (Buffer));
  405fe2:	a801      	add	r0, sp, #4
  405fe4:	4b13      	ldr	r3, [pc, #76]	; (406034 <Serial_print+0xd0>)
  405fe6:	4798      	blx	r3
  405fe8:	4602      	mov	r2, r0
  405fea:	a901      	add	r1, sp, #4
  405fec:	4812      	ldr	r0, [pc, #72]	; (406038 <Serial_print+0xd4>)
  405fee:	4b13      	ldr	r3, [pc, #76]	; (40603c <Serial_print+0xd8>)
  405ff0:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  405ff2:	4d11      	ldr	r5, [pc, #68]	; (406038 <Serial_print+0xd4>)
  405ff4:	4c12      	ldr	r4, [pc, #72]	; (406040 <Serial_print+0xdc>)
  405ff6:	4628      	mov	r0, r5
  405ff8:	47a0      	blx	r4
  405ffa:	2800      	cmp	r0, #0
  405ffc:	d0fb      	beq.n	405ff6 <Serial_print+0x92>
  405ffe:	e7c1      	b.n	405f84 <Serial_print+0x20>
		sprintf(Buffer ,"%.1f", b);
  406000:	462a      	mov	r2, r5
  406002:	4912      	ldr	r1, [pc, #72]	; (40604c <Serial_print+0xe8>)
  406004:	a801      	add	r0, sp, #4
  406006:	4b0a      	ldr	r3, [pc, #40]	; (406030 <Serial_print+0xcc>)
  406008:	4798      	blx	r3
		usart_serial_write_packet(CONSOLE_UART , Buffer, strlen (Buffer));
  40600a:	a801      	add	r0, sp, #4
  40600c:	4b09      	ldr	r3, [pc, #36]	; (406034 <Serial_print+0xd0>)
  40600e:	4798      	blx	r3
  406010:	4602      	mov	r2, r0
  406012:	a901      	add	r1, sp, #4
  406014:	4808      	ldr	r0, [pc, #32]	; (406038 <Serial_print+0xd4>)
  406016:	4b09      	ldr	r3, [pc, #36]	; (40603c <Serial_print+0xd8>)
  406018:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  40601a:	4d07      	ldr	r5, [pc, #28]	; (406038 <Serial_print+0xd4>)
  40601c:	4c08      	ldr	r4, [pc, #32]	; (406040 <Serial_print+0xdc>)
  40601e:	4628      	mov	r0, r5
  406020:	47a0      	blx	r4
  406022:	2800      	cmp	r0, #0
  406024:	d0fb      	beq.n	40601e <Serial_print+0xba>
  406026:	e7ad      	b.n	405f84 <Serial_print+0x20>
  406028:	0040dd9d 	.word	0x0040dd9d
  40602c:	00412544 	.word	0x00412544
  406030:	0040de39 	.word	0x0040de39
  406034:	0040dec1 	.word	0x0040dec1
  406038:	400e0600 	.word	0x400e0600
  40603c:	00408f35 	.word	0x00408f35
  406040:	0040923b 	.word	0x0040923b
  406044:	00412548 	.word	0x00412548
  406048:	0041254c 	.word	0x0041254c
  40604c:	00412550 	.word	0x00412550

00406050 <Serial_println1>:

void Serial_println1(const char* buff)
{
  406050:	b538      	push	{r3, r4, r5, lr}
  406052:	4604      	mov	r4, r0
	usart_serial_write_packet(CONSOLE_UART ,  buff, strlen (buff));
  406054:	4b0c      	ldr	r3, [pc, #48]	; (406088 <Serial_println1+0x38>)
  406056:	4798      	blx	r3
  406058:	4602      	mov	r2, r0
  40605a:	4621      	mov	r1, r4
  40605c:	480b      	ldr	r0, [pc, #44]	; (40608c <Serial_println1+0x3c>)
  40605e:	4b0c      	ldr	r3, [pc, #48]	; (406090 <Serial_println1+0x40>)
  406060:	4798      	blx	r3
	while ( !uart_is_tx_empty(CONSOLE_UART))
  406062:	4d0a      	ldr	r5, [pc, #40]	; (40608c <Serial_println1+0x3c>)
  406064:	4c0b      	ldr	r4, [pc, #44]	; (406094 <Serial_println1+0x44>)
  406066:	4628      	mov	r0, r5
  406068:	47a0      	blx	r4
  40606a:	2800      	cmp	r0, #0
  40606c:	d0fb      	beq.n	406066 <Serial_println1+0x16>
	{
		
	}
	usart_serial_write_packet(CONSOLE_UART ,  "\r\n", 2);
  40606e:	2202      	movs	r2, #2
  406070:	4909      	ldr	r1, [pc, #36]	; (406098 <Serial_println1+0x48>)
  406072:	4806      	ldr	r0, [pc, #24]	; (40608c <Serial_println1+0x3c>)
  406074:	4b06      	ldr	r3, [pc, #24]	; (406090 <Serial_println1+0x40>)
  406076:	4798      	blx	r3
	while ( !uart_is_tx_empty(CONSOLE_UART))
  406078:	4d04      	ldr	r5, [pc, #16]	; (40608c <Serial_println1+0x3c>)
  40607a:	4c06      	ldr	r4, [pc, #24]	; (406094 <Serial_println1+0x44>)
  40607c:	4628      	mov	r0, r5
  40607e:	47a0      	blx	r4
  406080:	2800      	cmp	r0, #0
  406082:	d0fb      	beq.n	40607c <Serial_println1+0x2c>
	{
		
	}
}
  406084:	bd38      	pop	{r3, r4, r5, pc}
  406086:	bf00      	nop
  406088:	0040dec1 	.word	0x0040dec1
  40608c:	400e0600 	.word	0x400e0600
  406090:	00408f35 	.word	0x00408f35
  406094:	0040923b 	.word	0x0040923b
  406098:	00412558 	.word	0x00412558

0040609c <Serial_println>:

void Serial_println(Byte b, int base)
{
  40609c:	b530      	push	{r4, r5, lr}
  40609e:	b08f      	sub	sp, #60	; 0x3c
  4060a0:	4605      	mov	r5, r0
  4060a2:	460c      	mov	r4, r1
	char Buffer[50];
	
	memset ( Buffer, 0, sizeof(Buffer));
  4060a4:	2232      	movs	r2, #50	; 0x32
  4060a6:	2100      	movs	r1, #0
  4060a8:	a801      	add	r0, sp, #4
  4060aa:	4b43      	ldr	r3, [pc, #268]	; (4061b8 <Serial_println+0x11c>)
  4060ac:	4798      	blx	r3
	if ( base == BYTE )
  4060ae:	b13c      	cbz	r4, 4060c0 <Serial_println+0x24>
			
		}
		return;
	}
	
	if ( base == DEC )
  4060b0:	2c0a      	cmp	r4, #10
  4060b2:	d024      	beq.n	4060fe <Serial_println+0x62>
			
		}
		return;
	}
	
	if ( base == HEX )
  4060b4:	2c10      	cmp	r4, #16
  4060b6:	d041      	beq.n	40613c <Serial_println+0xa0>
			
		}
		return;
	}
	
	if ( base == 1 )
  4060b8:	2c01      	cmp	r4, #1
  4060ba:	d05e      	beq.n	40617a <Serial_println+0xde>
		{
			
		}
		return;
	}
}
  4060bc:	b00f      	add	sp, #60	; 0x3c
  4060be:	bd30      	pop	{r4, r5, pc}
		sprintf(Buffer ,"%c", b);
  4060c0:	462a      	mov	r2, r5
  4060c2:	493e      	ldr	r1, [pc, #248]	; (4061bc <Serial_println+0x120>)
  4060c4:	a801      	add	r0, sp, #4
  4060c6:	4b3e      	ldr	r3, [pc, #248]	; (4061c0 <Serial_println+0x124>)
  4060c8:	4798      	blx	r3
		usart_serial_write_packet(CONSOLE_UART , Buffer, strlen (Buffer));
  4060ca:	a801      	add	r0, sp, #4
  4060cc:	4b3d      	ldr	r3, [pc, #244]	; (4061c4 <Serial_println+0x128>)
  4060ce:	4798      	blx	r3
  4060d0:	4602      	mov	r2, r0
  4060d2:	a901      	add	r1, sp, #4
  4060d4:	483c      	ldr	r0, [pc, #240]	; (4061c8 <Serial_println+0x12c>)
  4060d6:	4b3d      	ldr	r3, [pc, #244]	; (4061cc <Serial_println+0x130>)
  4060d8:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  4060da:	4d3b      	ldr	r5, [pc, #236]	; (4061c8 <Serial_println+0x12c>)
  4060dc:	4c3c      	ldr	r4, [pc, #240]	; (4061d0 <Serial_println+0x134>)
  4060de:	4628      	mov	r0, r5
  4060e0:	47a0      	blx	r4
  4060e2:	2800      	cmp	r0, #0
  4060e4:	d0fb      	beq.n	4060de <Serial_println+0x42>
		usart_serial_write_packet(CONSOLE_UART ,  "\r\n", 2);
  4060e6:	2202      	movs	r2, #2
  4060e8:	493a      	ldr	r1, [pc, #232]	; (4061d4 <Serial_println+0x138>)
  4060ea:	4837      	ldr	r0, [pc, #220]	; (4061c8 <Serial_println+0x12c>)
  4060ec:	4b37      	ldr	r3, [pc, #220]	; (4061cc <Serial_println+0x130>)
  4060ee:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  4060f0:	4d35      	ldr	r5, [pc, #212]	; (4061c8 <Serial_println+0x12c>)
  4060f2:	4c37      	ldr	r4, [pc, #220]	; (4061d0 <Serial_println+0x134>)
  4060f4:	4628      	mov	r0, r5
  4060f6:	47a0      	blx	r4
  4060f8:	2800      	cmp	r0, #0
  4060fa:	d0fb      	beq.n	4060f4 <Serial_println+0x58>
  4060fc:	e7de      	b.n	4060bc <Serial_println+0x20>
		sprintf(Buffer ,"%d", b);
  4060fe:	462a      	mov	r2, r5
  406100:	4935      	ldr	r1, [pc, #212]	; (4061d8 <Serial_println+0x13c>)
  406102:	a801      	add	r0, sp, #4
  406104:	4b2e      	ldr	r3, [pc, #184]	; (4061c0 <Serial_println+0x124>)
  406106:	4798      	blx	r3
		usart_serial_write_packet(CONSOLE_UART , Buffer, strlen (Buffer));
  406108:	a801      	add	r0, sp, #4
  40610a:	4b2e      	ldr	r3, [pc, #184]	; (4061c4 <Serial_println+0x128>)
  40610c:	4798      	blx	r3
  40610e:	4602      	mov	r2, r0
  406110:	a901      	add	r1, sp, #4
  406112:	482d      	ldr	r0, [pc, #180]	; (4061c8 <Serial_println+0x12c>)
  406114:	4b2d      	ldr	r3, [pc, #180]	; (4061cc <Serial_println+0x130>)
  406116:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  406118:	4d2b      	ldr	r5, [pc, #172]	; (4061c8 <Serial_println+0x12c>)
  40611a:	4c2d      	ldr	r4, [pc, #180]	; (4061d0 <Serial_println+0x134>)
  40611c:	4628      	mov	r0, r5
  40611e:	47a0      	blx	r4
  406120:	2800      	cmp	r0, #0
  406122:	d0fb      	beq.n	40611c <Serial_println+0x80>
		usart_serial_write_packet(CONSOLE_UART ,  "\r\n", 2);
  406124:	2202      	movs	r2, #2
  406126:	492b      	ldr	r1, [pc, #172]	; (4061d4 <Serial_println+0x138>)
  406128:	4827      	ldr	r0, [pc, #156]	; (4061c8 <Serial_println+0x12c>)
  40612a:	4b28      	ldr	r3, [pc, #160]	; (4061cc <Serial_println+0x130>)
  40612c:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  40612e:	4d26      	ldr	r5, [pc, #152]	; (4061c8 <Serial_println+0x12c>)
  406130:	4c27      	ldr	r4, [pc, #156]	; (4061d0 <Serial_println+0x134>)
  406132:	4628      	mov	r0, r5
  406134:	47a0      	blx	r4
  406136:	2800      	cmp	r0, #0
  406138:	d0fb      	beq.n	406132 <Serial_println+0x96>
  40613a:	e7bf      	b.n	4060bc <Serial_println+0x20>
		sprintf(Buffer ,"%X", b);
  40613c:	462a      	mov	r2, r5
  40613e:	4927      	ldr	r1, [pc, #156]	; (4061dc <Serial_println+0x140>)
  406140:	a801      	add	r0, sp, #4
  406142:	4b1f      	ldr	r3, [pc, #124]	; (4061c0 <Serial_println+0x124>)
  406144:	4798      	blx	r3
		usart_serial_write_packet(CONSOLE_UART , Buffer, strlen (Buffer));
  406146:	a801      	add	r0, sp, #4
  406148:	4b1e      	ldr	r3, [pc, #120]	; (4061c4 <Serial_println+0x128>)
  40614a:	4798      	blx	r3
  40614c:	4602      	mov	r2, r0
  40614e:	a901      	add	r1, sp, #4
  406150:	481d      	ldr	r0, [pc, #116]	; (4061c8 <Serial_println+0x12c>)
  406152:	4b1e      	ldr	r3, [pc, #120]	; (4061cc <Serial_println+0x130>)
  406154:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  406156:	4d1c      	ldr	r5, [pc, #112]	; (4061c8 <Serial_println+0x12c>)
  406158:	4c1d      	ldr	r4, [pc, #116]	; (4061d0 <Serial_println+0x134>)
  40615a:	4628      	mov	r0, r5
  40615c:	47a0      	blx	r4
  40615e:	2800      	cmp	r0, #0
  406160:	d0fb      	beq.n	40615a <Serial_println+0xbe>
		usart_serial_write_packet(CONSOLE_UART ,  "\r\n", 2);
  406162:	2202      	movs	r2, #2
  406164:	491b      	ldr	r1, [pc, #108]	; (4061d4 <Serial_println+0x138>)
  406166:	4818      	ldr	r0, [pc, #96]	; (4061c8 <Serial_println+0x12c>)
  406168:	4b18      	ldr	r3, [pc, #96]	; (4061cc <Serial_println+0x130>)
  40616a:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  40616c:	4d16      	ldr	r5, [pc, #88]	; (4061c8 <Serial_println+0x12c>)
  40616e:	4c18      	ldr	r4, [pc, #96]	; (4061d0 <Serial_println+0x134>)
  406170:	4628      	mov	r0, r5
  406172:	47a0      	blx	r4
  406174:	2800      	cmp	r0, #0
  406176:	d0fb      	beq.n	406170 <Serial_println+0xd4>
  406178:	e7a0      	b.n	4060bc <Serial_println+0x20>
		sprintf(Buffer ,"%.1f", b);
  40617a:	462a      	mov	r2, r5
  40617c:	4918      	ldr	r1, [pc, #96]	; (4061e0 <Serial_println+0x144>)
  40617e:	a801      	add	r0, sp, #4
  406180:	4b0f      	ldr	r3, [pc, #60]	; (4061c0 <Serial_println+0x124>)
  406182:	4798      	blx	r3
		usart_serial_write_packet(CONSOLE_UART , Buffer, strlen (Buffer));
  406184:	a801      	add	r0, sp, #4
  406186:	4b0f      	ldr	r3, [pc, #60]	; (4061c4 <Serial_println+0x128>)
  406188:	4798      	blx	r3
  40618a:	4602      	mov	r2, r0
  40618c:	a901      	add	r1, sp, #4
  40618e:	480e      	ldr	r0, [pc, #56]	; (4061c8 <Serial_println+0x12c>)
  406190:	4b0e      	ldr	r3, [pc, #56]	; (4061cc <Serial_println+0x130>)
  406192:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  406194:	4d0c      	ldr	r5, [pc, #48]	; (4061c8 <Serial_println+0x12c>)
  406196:	4c0e      	ldr	r4, [pc, #56]	; (4061d0 <Serial_println+0x134>)
  406198:	4628      	mov	r0, r5
  40619a:	47a0      	blx	r4
  40619c:	2800      	cmp	r0, #0
  40619e:	d0fb      	beq.n	406198 <Serial_println+0xfc>
		usart_serial_write_packet(CONSOLE_UART ,  "\r\n", 2);
  4061a0:	2202      	movs	r2, #2
  4061a2:	490c      	ldr	r1, [pc, #48]	; (4061d4 <Serial_println+0x138>)
  4061a4:	4808      	ldr	r0, [pc, #32]	; (4061c8 <Serial_println+0x12c>)
  4061a6:	4b09      	ldr	r3, [pc, #36]	; (4061cc <Serial_println+0x130>)
  4061a8:	4798      	blx	r3
		while ( !uart_is_tx_empty(CONSOLE_UART))
  4061aa:	4d07      	ldr	r5, [pc, #28]	; (4061c8 <Serial_println+0x12c>)
  4061ac:	4c08      	ldr	r4, [pc, #32]	; (4061d0 <Serial_println+0x134>)
  4061ae:	4628      	mov	r0, r5
  4061b0:	47a0      	blx	r4
  4061b2:	2800      	cmp	r0, #0
  4061b4:	d0fb      	beq.n	4061ae <Serial_println+0x112>
  4061b6:	e781      	b.n	4060bc <Serial_println+0x20>
  4061b8:	0040dd9d 	.word	0x0040dd9d
  4061bc:	00412544 	.word	0x00412544
  4061c0:	0040de39 	.word	0x0040de39
  4061c4:	0040dec1 	.word	0x0040dec1
  4061c8:	400e0600 	.word	0x400e0600
  4061cc:	00408f35 	.word	0x00408f35
  4061d0:	0040923b 	.word	0x0040923b
  4061d4:	00412558 	.word	0x00412558
  4061d8:	00412548 	.word	0x00412548
  4061dc:	0041254c 	.word	0x0041254c
  4061e0:	00412550 	.word	0x00412550

004061e4 <UART2_Handler>:
extern Pdc* UART2_PDC;
extern pdc_packet_t pdc_uart2_packet;
extern uint8_t USART2_buffRX[128];

void UART2_Handler ( void )
{
  4061e4:	b510      	push	{r4, lr}
	UART2_Status_Register = uart_get_status(CONF_UART2);
  4061e6:	4c19      	ldr	r4, [pc, #100]	; (40624c <UART2_Handler+0x68>)
  4061e8:	4620      	mov	r0, r4
  4061ea:	4b19      	ldr	r3, [pc, #100]	; (406250 <UART2_Handler+0x6c>)
  4061ec:	4798      	blx	r3
  4061ee:	4b19      	ldr	r3, [pc, #100]	; (406254 <UART2_Handler+0x70>)
  4061f0:	6018      	str	r0, [r3, #0]
	uart_reset_status(CONF_UART2);
  4061f2:	4620      	mov	r0, r4
  4061f4:	4b18      	ldr	r3, [pc, #96]	; (406258 <UART2_Handler+0x74>)
  4061f6:	4798      	blx	r3
	
	*rxTail2 = CONF_UART2->UART_RHR;
  4061f8:	4b18      	ldr	r3, [pc, #96]	; (40625c <UART2_Handler+0x78>)
  4061fa:	681a      	ldr	r2, [r3, #0]
  4061fc:	69a1      	ldr	r1, [r4, #24]
  4061fe:	7011      	strb	r1, [r2, #0]

	// Will the increment not result in a wrap and not result in a pure collision?
	// This is most often condition so check first
	if ( ( rxTail2    != (rxQueue2 + UART2_CONFIG_RX_BYTEQ_LENGTH-1)) &&
  406200:	681a      	ldr	r2, [r3, #0]
  406202:	4b17      	ldr	r3, [pc, #92]	; (406260 <UART2_Handler+0x7c>)
  406204:	429a      	cmp	r2, r3
  406206:	d00e      	beq.n	406226 <UART2_Handler+0x42>
	((rxTail2+1) != rxHead2) )
  406208:	4b14      	ldr	r3, [pc, #80]	; (40625c <UART2_Handler+0x78>)
  40620a:	681b      	ldr	r3, [r3, #0]
  40620c:	3301      	adds	r3, #1
  40620e:	4a15      	ldr	r2, [pc, #84]	; (406264 <UART2_Handler+0x80>)
	if ( ( rxTail2    != (rxQueue2 + UART2_CONFIG_RX_BYTEQ_LENGTH-1)) &&
  406210:	6812      	ldr	r2, [r2, #0]
  406212:	429a      	cmp	r2, r3
  406214:	d007      	beq.n	406226 <UART2_Handler+0x42>
	{
		rxTail2++;
  406216:	4a11      	ldr	r2, [pc, #68]	; (40625c <UART2_Handler+0x78>)
  406218:	6813      	ldr	r3, [r2, #0]
  40621a:	3301      	adds	r3, #1
  40621c:	6013      	str	r3, [r2, #0]
	}
	else // must be collision
	{
		rxOverflowed2 = true;
	}
	UART2_Timeout = 0;
  40621e:	2200      	movs	r2, #0
  406220:	4b11      	ldr	r3, [pc, #68]	; (406268 <UART2_Handler+0x84>)
  406222:	601a      	str	r2, [r3, #0]
  406224:	bd10      	pop	{r4, pc}
	else if ( (rxTail2 == (rxQueue2 + UART2_CONFIG_RX_BYTEQ_LENGTH-1)) &&
  406226:	4b0d      	ldr	r3, [pc, #52]	; (40625c <UART2_Handler+0x78>)
  406228:	681a      	ldr	r2, [r3, #0]
  40622a:	4b0d      	ldr	r3, [pc, #52]	; (406260 <UART2_Handler+0x7c>)
  40622c:	429a      	cmp	r2, r3
  40622e:	d003      	beq.n	406238 <UART2_Handler+0x54>
		rxOverflowed2 = true;
  406230:	2201      	movs	r2, #1
  406232:	4b0e      	ldr	r3, [pc, #56]	; (40626c <UART2_Handler+0x88>)
  406234:	701a      	strb	r2, [r3, #0]
  406236:	e7f2      	b.n	40621e <UART2_Handler+0x3a>
	(rxHead2 !=  rxQueue2) )
  406238:	4b0a      	ldr	r3, [pc, #40]	; (406264 <UART2_Handler+0x80>)
	else if ( (rxTail2 == (rxQueue2 + UART2_CONFIG_RX_BYTEQ_LENGTH-1)) &&
  40623a:	681a      	ldr	r2, [r3, #0]
  40623c:	4b0c      	ldr	r3, [pc, #48]	; (406270 <UART2_Handler+0x8c>)
  40623e:	429a      	cmp	r2, r3
  406240:	d0f6      	beq.n	406230 <UART2_Handler+0x4c>
		rxTail2 = rxQueue2;
  406242:	461a      	mov	r2, r3
  406244:	4b05      	ldr	r3, [pc, #20]	; (40625c <UART2_Handler+0x78>)
  406246:	601a      	str	r2, [r3, #0]
  406248:	e7e9      	b.n	40621e <UART2_Handler+0x3a>
  40624a:	bf00      	nop
  40624c:	40044000 	.word	0x40044000
  406250:	0040922f 	.word	0x0040922f
  406254:	20000cb8 	.word	0x20000cb8
  406258:	00409233 	.word	0x00409233
  40625c:	20000d48 	.word	0x20000d48
  406260:	20000d44 	.word	0x20000d44
  406264:	20000cbc 	.word	0x20000cbc
  406268:	20000e5c 	.word	0x20000e5c
  40626c:	20000cc0 	.word	0x20000cc0
  406270:	20000cc4 	.word	0x20000cc4

00406274 <Serial2_begin>:
}

void Serial2_begin( void )
{
	txHead2 = txQueue2;
  406274:	4a05      	ldr	r2, [pc, #20]	; (40628c <Serial2_begin+0x18>)
  406276:	4b06      	ldr	r3, [pc, #24]	; (406290 <Serial2_begin+0x1c>)
  406278:	601a      	str	r2, [r3, #0]
	txTail2 = txQueue2;
	rxHead2 = rxQueue2;
  40627a:	4b06      	ldr	r3, [pc, #24]	; (406294 <Serial2_begin+0x20>)
  40627c:	4a06      	ldr	r2, [pc, #24]	; (406298 <Serial2_begin+0x24>)
  40627e:	6013      	str	r3, [r2, #0]
	rxTail2 = rxQueue2;
  406280:	4a06      	ldr	r2, [pc, #24]	; (40629c <Serial2_begin+0x28>)
  406282:	6013      	str	r3, [r2, #0]
	
	rxOverflowed2 = false;
  406284:	2200      	movs	r2, #0
  406286:	4b06      	ldr	r3, [pc, #24]	; (4062a0 <Serial2_begin+0x2c>)
  406288:	701a      	strb	r2, [r3, #0]
  40628a:	4770      	bx	lr
  40628c:	20000d50 	.word	0x20000d50
  406290:	20000d4c 	.word	0x20000d4c
  406294:	20000cc4 	.word	0x20000cc4
  406298:	20000cbc 	.word	0x20000cbc
  40629c:	20000d48 	.word	0x20000d48
  4062a0:	20000cc0 	.word	0x20000cc0

004062a4 <Serial2_available>:
{
	
}

int Serial2_available( void )
{
  4062a4:	b538      	push	{r3, r4, r5, lr}
	uint16_t size;
	
	size = 0;
	
	if ( pdc_read_rx_counter(UART2_PDC) == 100 )
  4062a6:	4b15      	ldr	r3, [pc, #84]	; (4062fc <Serial2_available+0x58>)
  4062a8:	6818      	ldr	r0, [r3, #0]
  4062aa:	4b15      	ldr	r3, [pc, #84]	; (406300 <Serial2_available+0x5c>)
  4062ac:	4798      	blx	r3
  4062ae:	2864      	cmp	r0, #100	; 0x64
  4062b0:	d009      	beq.n	4062c6 <Serial2_available+0x22>
		UART2_Timeout = 0;
		return 0;
	}
	else
	{
		size = ( 100 - pdc_read_rx_counter(UART2_PDC) );
  4062b2:	4b12      	ldr	r3, [pc, #72]	; (4062fc <Serial2_available+0x58>)
  4062b4:	6818      	ldr	r0, [r3, #0]
  4062b6:	4b12      	ldr	r3, [pc, #72]	; (406300 <Serial2_available+0x5c>)
  4062b8:	4798      	blx	r3
		if ( UART2_Timeout >= 150 )
  4062ba:	4b12      	ldr	r3, [pc, #72]	; (406304 <Serial2_available+0x60>)
  4062bc:	681b      	ldr	r3, [r3, #0]
  4062be:	2b95      	cmp	r3, #149	; 0x95
  4062c0:	d805      	bhi.n	4062ce <Serial2_available+0x2a>
			UART2_Timeout = 0;
			rxHead2 = rxQueue2;
			return size;
		}
		else
		return 0;
  4062c2:	2000      	movs	r0, #0
		{
			return size;
		}
	else
		return 0;*/
}
  4062c4:	bd38      	pop	{r3, r4, r5, pc}
		UART2_Timeout = 0;
  4062c6:	2000      	movs	r0, #0
  4062c8:	4b0e      	ldr	r3, [pc, #56]	; (406304 <Serial2_available+0x60>)
  4062ca:	6018      	str	r0, [r3, #0]
		return 0;
  4062cc:	bd38      	pop	{r3, r4, r5, pc}
		size = ( 100 - pdc_read_rx_counter(UART2_PDC) );
  4062ce:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
  4062d2:	b284      	uxth	r4, r0
			memcpy ( rxQueue2, USART2_buffRX, size );
  4062d4:	4d0c      	ldr	r5, [pc, #48]	; (406308 <Serial2_available+0x64>)
  4062d6:	4622      	mov	r2, r4
  4062d8:	490c      	ldr	r1, [pc, #48]	; (40630c <Serial2_available+0x68>)
  4062da:	4628      	mov	r0, r5
  4062dc:	4b0c      	ldr	r3, [pc, #48]	; (406310 <Serial2_available+0x6c>)
  4062de:	4798      	blx	r3
			pdc_rx_init(UART2_PDC, &pdc_uart2_packet, NULL);
  4062e0:	2200      	movs	r2, #0
  4062e2:	490c      	ldr	r1, [pc, #48]	; (406314 <Serial2_available+0x70>)
  4062e4:	4b05      	ldr	r3, [pc, #20]	; (4062fc <Serial2_available+0x58>)
  4062e6:	6818      	ldr	r0, [r3, #0]
  4062e8:	4b0b      	ldr	r3, [pc, #44]	; (406318 <Serial2_available+0x74>)
  4062ea:	4798      	blx	r3
			UART2_Timeout = 0;
  4062ec:	2200      	movs	r2, #0
  4062ee:	4b05      	ldr	r3, [pc, #20]	; (406304 <Serial2_available+0x60>)
  4062f0:	601a      	str	r2, [r3, #0]
			rxHead2 = rxQueue2;
  4062f2:	4b0a      	ldr	r3, [pc, #40]	; (40631c <Serial2_available+0x78>)
  4062f4:	601d      	str	r5, [r3, #0]
			return size;
  4062f6:	4620      	mov	r0, r4
  4062f8:	bd38      	pop	{r3, r4, r5, pc}
  4062fa:	bf00      	nop
  4062fc:	200016b8 	.word	0x200016b8
  406300:	00403785 	.word	0x00403785
  406304:	20000e5c 	.word	0x20000e5c
  406308:	20000cc4 	.word	0x20000cc4
  40630c:	2000174c 	.word	0x2000174c
  406310:	0040dc69 	.word	0x0040dc69
  406314:	2000139c 	.word	0x2000139c
  406318:	00403761 	.word	0x00403761
  40631c:	20000cbc 	.word	0x20000cbc

00406320 <Serial2_read>:

int Serial2_read( void )
{
	uint8_t data = 0;
	
	data = *rxHead2;
  406320:	4a02      	ldr	r2, [pc, #8]	; (40632c <Serial2_read+0xc>)
  406322:	6813      	ldr	r3, [r2, #0]
  406324:	f813 0b01 	ldrb.w	r0, [r3], #1
	rxHead2++;
  406328:	6013      	str	r3, [r2, #0]
	if (rxHead2 == (rxQueue2 + UART2_CONFIG_RX_BYTEQ_LENGTH))
	{
		rxHead2 = rxQueue2;
	}*/
	return data;
}
  40632a:	4770      	bx	lr
  40632c:	20000cbc 	.word	0x20000cbc

00406330 <Serial2_write>:
{
	
}

void Serial2_write(uint8_t* b, uint16_t len)
{
  406330:	b538      	push	{r3, r4, r5, lr}
	usart_serial_write_packet(PERIPH_UART , b, len);
  406332:	460a      	mov	r2, r1
  406334:	4601      	mov	r1, r0
  406336:	4806      	ldr	r0, [pc, #24]	; (406350 <Serial2_write+0x20>)
  406338:	4b06      	ldr	r3, [pc, #24]	; (406354 <Serial2_write+0x24>)
  40633a:	4798      	blx	r3
	while ( !uart_is_tx_empty(PERIPH_UART))
  40633c:	4d04      	ldr	r5, [pc, #16]	; (406350 <Serial2_write+0x20>)
  40633e:	4c06      	ldr	r4, [pc, #24]	; (406358 <Serial2_write+0x28>)
  406340:	4628      	mov	r0, r5
  406342:	47a0      	blx	r4
  406344:	2800      	cmp	r0, #0
  406346:	d0fb      	beq.n	406340 <Serial2_write+0x10>
	{
		
	}
	status_Uart2 = UART2_FREE;
  406348:	2200      	movs	r2, #0
  40634a:	4b04      	ldr	r3, [pc, #16]	; (40635c <Serial2_write+0x2c>)
  40634c:	701a      	strb	r2, [r3, #0]
  40634e:	bd38      	pop	{r3, r4, r5, pc}
  406350:	40044000 	.word	0x40044000
  406354:	00408f35 	.word	0x00408f35
  406358:	0040923b 	.word	0x0040923b
  40635c:	20000dde 	.word	0x20000dde

00406360 <calc_cksum_16>:
word calc_cksum_16(Byte * buffer, int lenght)
{
  
  word cksum16_temp = 0;
  
  for(int i=0; i < lenght; i++)
  406360:	2900      	cmp	r1, #0
  406362:	dd0b      	ble.n	40637c <calc_cksum_16+0x1c>
  406364:	4603      	mov	r3, r0
  406366:	4401      	add	r1, r0
  406368:	2000      	movs	r0, #0
    cksum16_temp += buffer[i];
  40636a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40636e:	4410      	add	r0, r2
  406370:	b280      	uxth	r0, r0
  for(int i=0; i < lenght; i++)
  406372:	428b      	cmp	r3, r1
  406374:	d1f9      	bne.n	40636a <calc_cksum_16+0xa>
    
  return ~cksum16_temp;
  406376:	43c0      	mvns	r0, r0
}
  406378:	b280      	uxth	r0, r0
  40637a:	4770      	bx	lr
  word cksum16_temp = 0;
  40637c:	2000      	movs	r0, #0
  40637e:	e7fa      	b.n	406376 <calc_cksum_16+0x16>

00406380 <Write_Message_Ser1>:

//---------------------------------------------------------
// Manda un messaggio sulla seriale 1. 
//---------------------------------------------------------
void Write_Message_Ser1(Byte *buff)
{
  406380:	b570      	push	{r4, r5, r6, lr}
  406382:	4604      	mov	r4, r0
   unsigned short Cksum16, len, i;
   Byte i_pos_crc_lo;
   
   // testa del messaggio
   buff[IHM1_START_MSG_0] = PROTO_START_MSG_0;
  406384:	2373      	movs	r3, #115	; 0x73
  406386:	7003      	strb	r3, [r0, #0]
   buff[IHM1_START_MSG_1] = PROTO_START_MSG_1;
  406388:	236d      	movs	r3, #109	; 0x6d
  40638a:	7043      	strb	r3, [r0, #1]
   
   // lunghezza del messaggio
   i_pos_crc_lo = buff[IHM1_POS_CRC_LO]; 
  40638c:	7885      	ldrb	r5, [r0, #2]
   len = i_pos_crc_lo + 2; 
  40638e:	1cae      	adds	r6, r5, #2
   len &= 0x7F; // max 127 byte. 
   
   // calcola il cksum
   Cksum16 = calc_cksum_16(buff,  i_pos_crc_lo);
  406390:	4629      	mov	r1, r5
  406392:	4b06      	ldr	r3, [pc, #24]	; (4063ac <Write_Message_Ser1+0x2c>)
  406394:	4798      	blx	r3
   
   buff[i_pos_crc_lo ]   = lowByte(Cksum16);
  406396:	5560      	strb	r0, [r4, r5]
   buff[i_pos_crc_lo+1]  = highByte(Cksum16);
  406398:	4425      	add	r5, r4
  40639a:	0a00      	lsrs	r0, r0, #8
  40639c:	7068      	strb	r0, [r5, #1]

   Serial_write(buff, len);     
  40639e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
  4063a2:	4620      	mov	r0, r4
  4063a4:	4b02      	ldr	r3, [pc, #8]	; (4063b0 <Write_Message_Ser1+0x30>)
  4063a6:	4798      	blx	r3
  4063a8:	bd70      	pop	{r4, r5, r6, pc}
  4063aa:	bf00      	nop
  4063ac:	00406361 	.word	0x00406361
  4063b0:	00405f0d 	.word	0x00405f0d

004063b4 <Read_Message_Ser1>:
         -2            ERROR_LEN_MESSAGE
         -2            ERROR_CKSUM_16
         
 --------------------------------------------------------------- */          
int Read_Message_Ser1()
{  
  4063b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   return 0;
#endif   //-------------------------------------------

  
  
   Byte_aval = Serial_available();
  4063b8:	4b28      	ldr	r3, [pc, #160]	; (40645c <Read_Message_Ser1+0xa8>)
  4063ba:	4798      	blx	r3
   
   // se abbiamo ricevuto dei carattere, attendiamo la fine del messaggio prima di andare a scaricarlo.
   if(Byte_aval) {      
  4063bc:	4607      	mov	r7, r0
  4063be:	b138      	cbz	r0, 4063d0 <Read_Message_Ser1+0x1c>
       if(Byte_aval != rx_buf_tail) {
  4063c0:	4b27      	ldr	r3, [pc, #156]	; (406460 <Read_Message_Ser1+0xac>)
  4063c2:	781b      	ldrb	r3, [r3, #0]
  4063c4:	4298      	cmp	r0, r3
  4063c6:	d007      	beq.n	4063d8 <Read_Message_Ser1+0x24>
         // finchÃ¨ il numero di caratteri aumenta aspetta ad andare a scaricare
         // il messaggio.
         rx_buf_tail = Byte_aval;
  4063c8:	4b25      	ldr	r3, [pc, #148]	; (406460 <Read_Message_Ser1+0xac>)
  4063ca:	7018      	strb	r0, [r3, #0]
         return RUN_DOWNLOAD; // aquisizione del messaggio in corso, aspettiamo di che finisca.
  4063cc:	2701      	movs	r7, #1
  4063ce:	e035      	b.n	40643c <Read_Message_Ser1+0x88>
       }            
   }else { 
     if (rx_buf_tail == 0)
  4063d0:	4b23      	ldr	r3, [pc, #140]	; (406460 <Read_Message_Ser1+0xac>)
  4063d2:	781b      	ldrb	r3, [r3, #0]
  4063d4:	2b00      	cmp	r3, #0
  4063d6:	d031      	beq.n	40643c <Read_Message_Ser1+0x88>
   }  
   
   //--------------------------------------------------------------------
   // Abbiamo ricevuto un messaggio, andiamo a verificare se Ã¨ corretto
   //---------------------------------------------------------------------   
   len = (rx_buf_tail % RX_BUFFER_SIZE);
  4063d8:	4b21      	ldr	r3, [pc, #132]	; (406460 <Read_Message_Ser1+0xac>)
  4063da:	f893 8000 	ldrb.w	r8, [r3]
  4063de:	f008 087f 	and.w	r8, r8, #127	; 0x7f
  4063e2:	4647      	mov	r7, r8
   rx_buf_tail = 0;
  4063e4:	2200      	movs	r2, #0
  4063e6:	701a      	strb	r2, [r3, #0]

   // scarichiamo il messaggio
   for(i=0; i < len; i++) {
  4063e8:	f1b8 0f00 	cmp.w	r8, #0
  4063ec:	d008      	beq.n	406400 <Read_Message_Ser1+0x4c>
  4063ee:	4c1d      	ldr	r4, [pc, #116]	; (406464 <Read_Message_Ser1+0xb0>)
  4063f0:	eb04 0608 	add.w	r6, r4, r8
     buff_ser1[i] = Serial_read();     
  4063f4:	4d1c      	ldr	r5, [pc, #112]	; (406468 <Read_Message_Ser1+0xb4>)
  4063f6:	47a8      	blx	r5
  4063f8:	f804 0f01 	strb.w	r0, [r4, #1]!
   for(i=0; i < len; i++) {
  4063fc:	42b4      	cmp	r4, r6
  4063fe:	d1fa      	bne.n	4063f6 <Read_Message_Ser1+0x42>
   }  
   
   // 1. Verifichiamo L'intestazione del messaggio.
   if((buff_ser1[IHM1_START_MSG_0] != PROTO_START_MSG_0) || (buff_ser1[IHM1_START_MSG_1] != PROTO_START_MSG_1))
  406400:	4b1a      	ldr	r3, [pc, #104]	; (40646c <Read_Message_Ser1+0xb8>)
  406402:	781b      	ldrb	r3, [r3, #0]
  406404:	2b73      	cmp	r3, #115	; 0x73
  406406:	d11c      	bne.n	406442 <Read_Message_Ser1+0x8e>
  406408:	4b18      	ldr	r3, [pc, #96]	; (40646c <Read_Message_Ser1+0xb8>)
  40640a:	785b      	ldrb	r3, [r3, #1]
  40640c:	2b6d      	cmp	r3, #109	; 0x6d
  40640e:	d11b      	bne.n	406448 <Read_Message_Ser1+0x94>
     return  ERROR_HEAD_MESSAGE;
     
   // 2. Verifichaimo la lunghezza del messaggio.
   if(((buff_ser1[IHM1_POS_CRC_LO] + 2) != len) || ( len <= IHM1_START_DATA))
  406410:	4b16      	ldr	r3, [pc, #88]	; (40646c <Read_Message_Ser1+0xb8>)
  406412:	789c      	ldrb	r4, [r3, #2]
  406414:	1ca3      	adds	r3, r4, #2
  406416:	4598      	cmp	r8, r3
  406418:	d119      	bne.n	40644e <Read_Message_Ser1+0x9a>
  40641a:	f1b8 0f04 	cmp.w	r8, #4
  40641e:	dd19      	ble.n	406454 <Read_Message_Ser1+0xa0>
   
   // 3. Verifichiamo il cksum_16 del messaggio
   i = buff_ser1[IHM1_POS_CRC_LO];
   Cksum16 = (unsigned short)(((unsigned short)buff_ser1[i+1] << 8) | buff_ser1[i]) ;
   Cksum16 &= 0x0FFFF;
   Cksum16_calc = calc_cksum_16(buff_ser1, i);
  406420:	4d12      	ldr	r5, [pc, #72]	; (40646c <Read_Message_Ser1+0xb8>)
  406422:	4621      	mov	r1, r4
  406424:	4628      	mov	r0, r5
  406426:	4b12      	ldr	r3, [pc, #72]	; (406470 <Read_Message_Ser1+0xbc>)
  406428:	4798      	blx	r3
   Cksum16 = (unsigned short)(((unsigned short)buff_ser1[i+1] << 8) | buff_ser1[i]) ;
  40642a:	192b      	adds	r3, r5, r4
  40642c:	785a      	ldrb	r2, [r3, #1]
  40642e:	5d2b      	ldrb	r3, [r5, r4]

               
   if (Cksum16 != Cksum16_calc)  
  406430:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     return  ERROR_CKSUM_16;
  406434:	4283      	cmp	r3, r0
  406436:	bf18      	it	ne
  406438:	f06f 0702 	mvnne.w	r7, #2
//---------------------------------------------------
                   
    
    return len;
 
 }
  40643c:	4638      	mov	r0, r7
  40643e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     return  ERROR_HEAD_MESSAGE;
  406442:	f04f 37ff 	mov.w	r7, #4294967295
  406446:	e7f9      	b.n	40643c <Read_Message_Ser1+0x88>
  406448:	f04f 37ff 	mov.w	r7, #4294967295
  40644c:	e7f6      	b.n	40643c <Read_Message_Ser1+0x88>
     return  ERROR_LEN_MESSAGE;
  40644e:	f06f 0701 	mvn.w	r7, #1
  406452:	e7f3      	b.n	40643c <Read_Message_Ser1+0x88>
  406454:	f06f 0701 	mvn.w	r7, #1
  406458:	e7f0      	b.n	40643c <Read_Message_Ser1+0x88>
  40645a:	bf00      	nop
  40645c:	00405e81 	.word	0x00405e81
  406460:	20000dd1 	.word	0x20000dd1
  406464:	20001633 	.word	0x20001633
  406468:	00405efd 	.word	0x00405efd
  40646c:	20001634 	.word	0x20001634
  406470:	00406361 	.word	0x00406361

00406474 <free_serial_2>:
//--------------------------------------
// Libera la seriale 2, e riparti da zero
//--------------------------------------
void free_serial_2()
{
    iBuffU2 = 0;
  406474:	2300      	movs	r3, #0
  406476:	4a04      	ldr	r2, [pc, #16]	; (406488 <free_serial_2+0x14>)
  406478:	6013      	str	r3, [r2, #0]
    status_Uart2 = UART2_FREE;
  40647a:	4a04      	ldr	r2, [pc, #16]	; (40648c <free_serial_2+0x18>)
  40647c:	7013      	strb	r3, [r2, #0]
    lenRXU2_old  = 0xFF; 
  40647e:	22ff      	movs	r2, #255	; 0xff
  406480:	4b03      	ldr	r3, [pc, #12]	; (406490 <free_serial_2+0x1c>)
  406482:	701a      	strb	r2, [r3, #0]
  406484:	4770      	bx	lr
  406486:	bf00      	nop
  406488:	20000dd4 	.word	0x20000dd4
  40648c:	20000dde 	.word	0x20000dde
  406490:	20000030 	.word	0x20000030

00406494 <Send_Message_Ser2>:

/*===========================================================*
   Invia un messaggio sul canale della seriale 2     
 *===========================================================*/
void Send_Message_Ser2(Byte *pBuff, int len)
{
  406494:	b538      	push	{r3, r4, r5, lr}
  int i;
  word cksum16;  

  for(i=0; i <(len - 1); i++) 
  406496:	1e4b      	subs	r3, r1, #1
  406498:	2b00      	cmp	r3, #0
  40649a:	dd09      	ble.n	4064b0 <Send_Message_Ser2+0x1c>
  40649c:	1e42      	subs	r2, r0, #1
  40649e:	4b15      	ldr	r3, [pc, #84]	; (4064f4 <Send_Message_Ser2+0x60>)
  4064a0:	4419      	add	r1, r3
  4064a2:	1e48      	subs	r0, r1, #1
    buff_ser2[i] = *pBuff++;
  4064a4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4064a8:	f803 1f01 	strb.w	r1, [r3, #1]!
  for(i=0; i <(len - 1); i++) 
  4064ac:	4283      	cmp	r3, r0
  4064ae:	d1f9      	bne.n	4064a4 <Send_Message_Ser2+0x10>

  // secondo Protocol_Ser2, completiamo il buffer prima di inviare
  buff_ser2[IHM2_START_MSG_0] = PROTO_START_MSG_0;    
  4064b0:	4c11      	ldr	r4, [pc, #68]	; (4064f8 <Send_Message_Ser2+0x64>)
  4064b2:	2373      	movs	r3, #115	; 0x73
  4064b4:	7023      	strb	r3, [r4, #0]
  buff_ser2[IHM2_START_MSG_1] = PROTO_START_MSG_1;    
  4064b6:	236d      	movs	r3, #109	; 0x6d
  4064b8:	7063      	strb	r3, [r4, #1]
  
  i = buff_ser2[IHM2_POS_CRC_LO];
  4064ba:	78a5      	ldrb	r5, [r4, #2]
  
  // calcoliamo il Cksum_16
  cksum16 = calc_cksum_16(&buff_ser2[0],  i);
  4064bc:	4629      	mov	r1, r5
  4064be:	4620      	mov	r0, r4
  4064c0:	4b0e      	ldr	r3, [pc, #56]	; (4064fc <Send_Message_Ser2+0x68>)
  4064c2:	4798      	blx	r3
  
  buff_ser2[i]   = lowByte(cksum16);    
  4064c4:	5560      	strb	r0, [r4, r5]
  buff_ser2[i+1] = highByte(cksum16); 
  4064c6:	1963      	adds	r3, r4, r5
  4064c8:	0a00      	lsrs	r0, r0, #8
  4064ca:	7058      	strb	r0, [r3, #1]
  
  lenTxU2 = i + 2;
  4064cc:	1ca9      	adds	r1, r5, #2
  4064ce:	4b0c      	ldr	r3, [pc, #48]	; (406500 <Send_Message_Ser2+0x6c>)
  4064d0:	6019      	str	r1, [r3, #0]

  // -- Inviamo il messaggio --
  _FLAG_INT_UART2_SW = INT_TX_BYTE;
  4064d2:	2204      	movs	r2, #4
  4064d4:	4b0b      	ldr	r3, [pc, #44]	; (406504 <Send_Message_Ser2+0x70>)
  4064d6:	701a      	strb	r2, [r3, #0]
  status_Uart2       = SEND_MESSAGE;
  4064d8:	2202      	movs	r2, #2
  4064da:	4b0b      	ldr	r3, [pc, #44]	; (406508 <Send_Message_Ser2+0x74>)
  4064dc:	701a      	strb	r2, [r3, #0]
  
  //CloseINT2();   // disabilitiamo la ricezione
  offset  = 0;    
  4064de:	2300      	movs	r3, #0
  4064e0:	4a0a      	ldr	r2, [pc, #40]	; (40650c <Send_Message_Ser2+0x78>)
  4064e2:	7013      	strb	r3, [r2, #0]
  iBuffU2 = 0;
  4064e4:	4a0a      	ldr	r2, [pc, #40]	; (406510 <Send_Message_Ser2+0x7c>)
  4064e6:	6013      	str	r3, [r2, #0]
   
  start_Timer_bit(_bitPeriod);
  
  Serial2_write(buff_ser2, lenTxU2); 
  4064e8:	b289      	uxth	r1, r1
  4064ea:	4620      	mov	r0, r4
  4064ec:	4b09      	ldr	r3, [pc, #36]	; (406514 <Send_Message_Ser2+0x80>)
  4064ee:	4798      	blx	r3
  4064f0:	bd38      	pop	{r3, r4, r5, pc}
  4064f2:	bf00      	nop
  4064f4:	200016bb 	.word	0x200016bb
  4064f8:	200016bc 	.word	0x200016bc
  4064fc:	00406361 	.word	0x00406361
  406500:	20000dd8 	.word	0x20000dd8
  406504:	20000dd2 	.word	0x20000dd2
  406508:	20000dde 	.word	0x20000dde
  40650c:	20000ddc 	.word	0x20000ddc
  406510:	20000dd4 	.word	0x20000dd4
  406514:	00406331 	.word	0x00406331

00406518 <Read_Message_Ser2>:
        -1 = ERROR_HEAD_MESSAGE               
        -2 = ERROR_LEN_MESSAGE          
        -3 = ERROR_CKSUM_16         
 *===========================================================*/
int Read_Message_Ser2(void)
{  
  406518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int  Byte_aval = 0;
  int  i, len;
  int iCks;
  unsigned short cks16_buff, cks16_calc; 
  
  Byte_aval = Serial2_available();
  40651c:	4b28      	ldr	r3, [pc, #160]	; (4065c0 <Read_Message_Ser2+0xa8>)
  40651e:	4798      	blx	r3
  
  // se abbiamo ricevuto dei carattere, attendiamo la fine del messaggio prima di andare a scaricarlo.
  if(Byte_aval) {
  406520:	4607      	mov	r7, r0
  406522:	b148      	cbz	r0, 406538 <Read_Message_Ser2+0x20>
	  if(Byte_aval != rx_buf2_tail) {
  406524:	4b27      	ldr	r3, [pc, #156]	; (4065c4 <Read_Message_Ser2+0xac>)
  406526:	781b      	ldrb	r3, [r3, #0]
  406528:	4298      	cmp	r0, r3
  40652a:	d009      	beq.n	406540 <Read_Message_Ser2+0x28>
		  // finchè il numero di caratteri aumenta aspetta ad andare a scaricare
		  // il messaggio.
		  rx_buf2_tail = Byte_aval;
  40652c:	4b25      	ldr	r3, [pc, #148]	; (4065c4 <Read_Message_Ser2+0xac>)
  40652e:	7018      	strb	r0, [r3, #0]
		  return RUN_DOWNLOAD; // aquisizione del messaggio in corso, aspettiamo di che finisca.
  406530:	2701      	movs	r7, #1
	//---------- (5) Messaggio Ok, Copia il buffer temporaneo nel buffer 2 ----------
	for(i=0; i <len; i++)
	buff_ser2[i] = buff_ser2[i];
	}
	  
}
  406532:	4638      	mov	r0, r7
  406534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  if (rx_buf2_tail == 0)
  406538:	4b22      	ldr	r3, [pc, #136]	; (4065c4 <Read_Message_Ser2+0xac>)
  40653a:	781b      	ldrb	r3, [r3, #0]
  40653c:	2b00      	cmp	r3, #0
  40653e:	d0f8      	beq.n	406532 <Read_Message_Ser2+0x1a>
  len = (rx_buf2_tail % RX_BUFFER_SIZE);
  406540:	4b20      	ldr	r3, [pc, #128]	; (4065c4 <Read_Message_Ser2+0xac>)
  406542:	f893 8000 	ldrb.w	r8, [r3]
  406546:	f008 087f 	and.w	r8, r8, #127	; 0x7f
  40654a:	4647      	mov	r7, r8
  rx_buf2_tail = 0;
  40654c:	2200      	movs	r2, #0
  40654e:	701a      	strb	r2, [r3, #0]
  for(i=0; i < len; i++) {
  406550:	f1b8 0f00 	cmp.w	r8, #0
  406554:	d008      	beq.n	406568 <Read_Message_Ser2+0x50>
  406556:	4c1c      	ldr	r4, [pc, #112]	; (4065c8 <Read_Message_Ser2+0xb0>)
  406558:	eb04 0608 	add.w	r6, r4, r8
	  buff_ser2[i] = Serial2_read();
  40655c:	4d1b      	ldr	r5, [pc, #108]	; (4065cc <Read_Message_Ser2+0xb4>)
  40655e:	47a8      	blx	r5
  406560:	f804 0f01 	strb.w	r0, [r4, #1]!
  for(i=0; i < len; i++) {
  406564:	42b4      	cmp	r4, r6
  406566:	d1fa      	bne.n	40655e <Read_Message_Ser2+0x46>
  if ((buff_ser2[IHM2_START_MSG_0] != PROTO_START_MSG_0) || (buff_ser2[IHM2_START_MSG_1] != PROTO_START_MSG_1)) {
  406568:	4b19      	ldr	r3, [pc, #100]	; (4065d0 <Read_Message_Ser2+0xb8>)
  40656a:	781b      	ldrb	r3, [r3, #0]
  40656c:	2b73      	cmp	r3, #115	; 0x73
  40656e:	d11e      	bne.n	4065ae <Read_Message_Ser2+0x96>
  406570:	4b17      	ldr	r3, [pc, #92]	; (4065d0 <Read_Message_Ser2+0xb8>)
  406572:	785b      	ldrb	r3, [r3, #1]
  406574:	2b6d      	cmp	r3, #109	; 0x6d
  406576:	d11d      	bne.n	4065b4 <Read_Message_Ser2+0x9c>
  if ((buff_ser2[IHM2_ADDR_RECEIVER] != ADDR_RD_UNIT)) {
  406578:	4b15      	ldr	r3, [pc, #84]	; (4065d0 <Read_Message_Ser2+0xb8>)
  40657a:	78db      	ldrb	r3, [r3, #3]
  40657c:	2b01      	cmp	r3, #1
  40657e:	d001      	beq.n	406584 <Read_Message_Ser2+0x6c>
	  return BUFFER_RX_EMPY;
  406580:	2700      	movs	r7, #0
  406582:	e7d6      	b.n	406532 <Read_Message_Ser2+0x1a>
  iCks = buff_ser2[IHM2_POS_CRC_LO];
  406584:	4b12      	ldr	r3, [pc, #72]	; (4065d0 <Read_Message_Ser2+0xb8>)
  406586:	789c      	ldrb	r4, [r3, #2]
  if (iCks != (len - 2)) {
  406588:	f1a8 0802 	sub.w	r8, r8, #2
  40658c:	4544      	cmp	r4, r8
  40658e:	d114      	bne.n	4065ba <Read_Message_Ser2+0xa2>
	cks16_calc = (unsigned int)calc_cksum_16(&buff_ser2[0], iCks);
  406590:	461d      	mov	r5, r3
  406592:	4621      	mov	r1, r4
  406594:	4618      	mov	r0, r3
  406596:	4b0f      	ldr	r3, [pc, #60]	; (4065d4 <Read_Message_Ser2+0xbc>)
  406598:	4798      	blx	r3
	cks16_buff = (unsigned int)(buff_ser2[iCks + 1] << 8) & 0xFF00;
  40659a:	192b      	adds	r3, r5, r4
  40659c:	785a      	ldrb	r2, [r3, #1]
	cks16_buff |= buff_ser2[iCks];
  40659e:	5d2b      	ldrb	r3, [r5, r4]
	if(cks16_calc != cks16_buff) {
  4065a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return ERROR_CKSUM_16;
  4065a4:	4298      	cmp	r0, r3
  4065a6:	bf18      	it	ne
  4065a8:	f06f 0702 	mvnne.w	r7, #2
  4065ac:	e7c1      	b.n	406532 <Read_Message_Ser2+0x1a>
	  return ERROR_HEAD_MESSAGE;
  4065ae:	f04f 37ff 	mov.w	r7, #4294967295
  4065b2:	e7be      	b.n	406532 <Read_Message_Ser2+0x1a>
  4065b4:	f04f 37ff 	mov.w	r7, #4294967295
  4065b8:	e7bb      	b.n	406532 <Read_Message_Ser2+0x1a>
	  return ERROR_LEN_MESSAGE;
  4065ba:	f06f 0701 	mvn.w	r7, #1
  4065be:	e7b8      	b.n	406532 <Read_Message_Ser2+0x1a>
  4065c0:	004062a5 	.word	0x004062a5
  4065c4:	20000ddd 	.word	0x20000ddd
  4065c8:	200016bb 	.word	0x200016bb
  4065cc:	00406321 	.word	0x00406321
  4065d0:	200016bc 	.word	0x200016bc
  4065d4:	00406361 	.word	0x00406361

004065d8 <Stampa_Prompt>:

//---------------------------------------------------
// sprompt Memu Principale
//---------------------------------------------------
void Stampa_Prompt()
{
  4065d8:	b508      	push	{r3, lr}
  Serial_println1(" ");  
  4065da:	4803      	ldr	r0, [pc, #12]	; (4065e8 <Stampa_Prompt+0x10>)
  4065dc:	4b03      	ldr	r3, [pc, #12]	; (4065ec <Stampa_Prompt+0x14>)
  4065de:	4798      	blx	r3
  Serial_print1("> Select the number (0,..,9): ");     
  4065e0:	4803      	ldr	r0, [pc, #12]	; (4065f0 <Stampa_Prompt+0x18>)
  4065e2:	4b04      	ldr	r3, [pc, #16]	; (4065f4 <Stampa_Prompt+0x1c>)
  4065e4:	4798      	blx	r3
  4065e6:	bd08      	pop	{r3, pc}
  4065e8:	004126b8 	.word	0x004126b8
  4065ec:	00406051 	.word	0x00406051
  4065f0:	004126bc 	.word	0x004126bc
  4065f4:	00405f35 	.word	0x00405f35

004065f8 <printPrompMenu6>:
}  
//----------------------------------------------------
// prompt Menu manual Testing
//----------------------------------------------------
void printPrompMenu6()
{
  4065f8:	b508      	push	{r3, lr}
   Serial_println1(" "); 
  4065fa:	4803      	ldr	r0, [pc, #12]	; (406608 <printPrompMenu6+0x10>)
  4065fc:	4b03      	ldr	r3, [pc, #12]	; (40660c <printPrompMenu6+0x14>)
  4065fe:	4798      	blx	r3
   Serial_print1("> Select Test (0,..,6): ");   
  406600:	4803      	ldr	r0, [pc, #12]	; (406610 <printPrompMenu6+0x18>)
  406602:	4b04      	ldr	r3, [pc, #16]	; (406614 <printPrompMenu6+0x1c>)
  406604:	4798      	blx	r3
  406606:	bd08      	pop	{r3, pc}
  406608:	004126b8 	.word	0x004126b8
  40660c:	00406051 	.word	0x00406051
  406610:	00412714 	.word	0x00412714
  406614:	00405f35 	.word	0x00405f35

00406618 <wait_response_by_terminal>:

//------------------------------------------------------
// Attendi la risposta dal terminale
//------------------------------------------------------
int wait_response_by_terminal()
{
  406618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Byte nb = 0, nb_preview;
  Byte exit_loop = 0;
  int i;
   
  // scarichiamo prima il buffer
   nb = Serial_available(); 
  40661c:	4b18      	ldr	r3, [pc, #96]	; (406680 <wait_response_by_terminal+0x68>)
  40661e:	4798      	blx	r3
  406620:	b2c5      	uxtb	r5, r0
   for(i=0; i< nb; i++) 
  406622:	b13d      	cbz	r5, 406634 <wait_response_by_terminal+0x1c>
  406624:	2400      	movs	r4, #0
     buff_RS232_rx[0] = Serial_read();
  406626:	4f17      	ldr	r7, [pc, #92]	; (406684 <wait_response_by_terminal+0x6c>)
  406628:	4e17      	ldr	r6, [pc, #92]	; (406688 <wait_response_by_terminal+0x70>)
  40662a:	47b8      	blx	r7
  40662c:	7030      	strb	r0, [r6, #0]
   for(i=0; i< nb; i++) 
  40662e:	3401      	adds	r4, #1
  406630:	42ac      	cmp	r4, r5
  406632:	d1fa      	bne.n	40662a <wait_response_by_terminal+0x12>
   
   nb_preview = 0;
   
   while(!exit_loop)
   { 
	 wdt_restart(WATCH_DOG);
  406634:	4e15      	ldr	r6, [pc, #84]	; (40668c <wait_response_by_terminal+0x74>)
  406636:	4d16      	ldr	r5, [pc, #88]	; (406690 <wait_response_by_terminal+0x78>)
	   
     delay_ms (75);
  406638:	4c16      	ldr	r4, [pc, #88]	; (406694 <wait_response_by_terminal+0x7c>)
	 wdt_restart(WATCH_DOG);
  40663a:	4630      	mov	r0, r6
  40663c:	47a8      	blx	r5
     delay_ms (75);
  40663e:	4620      	mov	r0, r4
  406640:	4b15      	ldr	r3, [pc, #84]	; (406698 <wait_response_by_terminal+0x80>)
  406642:	4798      	blx	r3
        
     nb = Serial_available();    
  406644:	4b0e      	ldr	r3, [pc, #56]	; (406680 <wait_response_by_terminal+0x68>)
  406646:	4798      	blx	r3
     
     if(nb) {
  406648:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
  40664c:	d0f5      	beq.n	40663a <wait_response_by_terminal+0x22>
       if(/*nb_preview == */nb) {
           for(i=0; i< nb; i++) {
  40664e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
  406652:	d011      	beq.n	406678 <wait_response_by_terminal+0x60>
               buff_RS232_rx[i] = Serial_read();
  406654:	4b0b      	ldr	r3, [pc, #44]	; (406684 <wait_response_by_terminal+0x6c>)
  406656:	4798      	blx	r3
  406658:	4e0b      	ldr	r6, [pc, #44]	; (406688 <wait_response_by_terminal+0x70>)
  40665a:	7030      	strb	r0, [r6, #0]
  40665c:	4634      	mov	r4, r6
  40665e:	3d01      	subs	r5, #1
  406660:	4435      	add	r5, r6
  406662:	363e      	adds	r6, #62	; 0x3e
  406664:	4f07      	ldr	r7, [pc, #28]	; (406684 <wait_response_by_terminal+0x6c>)
           for(i=0; i< nb; i++) {
  406666:	42a5      	cmp	r5, r4
  406668:	d006      	beq.n	406678 <wait_response_by_terminal+0x60>
               buff_RS232_rx[i] = Serial_read();
  40666a:	47b8      	blx	r7
  40666c:	f804 0f01 	strb.w	r0, [r4, #1]!
               if(i >= 62) {
  406670:	42b4      	cmp	r4, r6
  406672:	d1f8      	bne.n	406666 <wait_response_by_terminal+0x4e>
                 nb=62;
  406674:	f04f 083e 	mov.w	r8, #62	; 0x3e
           nb_preview = nb;      
    } 
  }

  return nb;  
}
  406678:	4640      	mov	r0, r8
  40667a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40667e:	bf00      	nop
  406680:	00405e81 	.word	0x00405e81
  406684:	00405efd 	.word	0x00405efd
  406688:	20001148 	.word	0x20001148
  40668c:	400e1450 	.word	0x400e1450
  406690:	00403a89 	.word	0x00403a89
  406694:	00082ca3 	.word	0x00082ca3
  406698:	20000001 	.word	0x20000001

0040669c <PrintFlashString>:

//----------------------------------------------------------
// stampa una stringa utilizzando la memoria in flash
//----------------------------------------------------------
int PrintFlashString(const char *str_f, char newline)
{
  40669c:	b530      	push	{r4, r5, lr}
  40669e:	b091      	sub	sp, #68	; 0x44
   char str[64];
   int len =0;
   
   do {
     str[len] = *str_f++;
  4066a0:	1c43      	adds	r3, r0, #1
  4066a2:	f810 2b3e 	ldrb.w	r2, [r0], #62
  4066a6:	ac10      	add	r4, sp, #64	; 0x40
  4066a8:	f804 2d40 	strb.w	r2, [r4, #-64]!
     if(++len >= 62)
  4066ac:	2201      	movs	r2, #1
       break;
   }while(*str_f);
  4066ae:	781d      	ldrb	r5, [r3, #0]
  4066b0:	b135      	cbz	r5, 4066c0 <PrintFlashString+0x24>
     str[len] = *str_f++;
  4066b2:	f813 5b01 	ldrb.w	r5, [r3], #1
  4066b6:	f804 5f01 	strb.w	r5, [r4, #1]!
     if(++len >= 62)
  4066ba:	3201      	adds	r2, #1
  4066bc:	4283      	cmp	r3, r0
  4066be:	d1f6      	bne.n	4066ae <PrintFlashString+0x12>
   
   str[len] = 0;  
  4066c0:	ab10      	add	r3, sp, #64	; 0x40
  4066c2:	441a      	add	r2, r3
  4066c4:	2300      	movs	r3, #0
  4066c6:	f802 3c40 	strb.w	r3, [r2, #-64]
   
   if(newline == NEW_LINE)
  4066ca:	296e      	cmp	r1, #110	; 0x6e
     Serial_println1(str);
  4066cc:	4668      	mov	r0, sp
  4066ce:	bf0c      	ite	eq
  4066d0:	4b02      	ldreq	r3, [pc, #8]	; (4066dc <PrintFlashString+0x40>)
   else  
     Serial_print1(str);
  4066d2:	4b03      	ldrne	r3, [pc, #12]	; (4066e0 <PrintFlashString+0x44>)
  4066d4:	4798      	blx	r3
   
}  
  4066d6:	b011      	add	sp, #68	; 0x44
  4066d8:	bd30      	pop	{r4, r5, pc}
  4066da:	bf00      	nop
  4066dc:	00406051 	.word	0x00406051
  4066e0:	00405f35 	.word	0x00405f35

004066e4 <Stampa_menu_config>:

//---------------------------------------------------
// Stampa il menu con le opzioni
//---------------------------------------------------
void Stampa_menu_config()
{
  4066e4:	b570      	push	{r4, r5, r6, lr}
     Serial_println1(" "); 
  4066e6:	4e18      	ldr	r6, [pc, #96]	; (406748 <Stampa_menu_config+0x64>)
  4066e8:	4630      	mov	r0, r6
  4066ea:	4d18      	ldr	r5, [pc, #96]	; (40674c <Stampa_menu_config+0x68>)
  4066ec:	47a8      	blx	r5
     Serial_println1(" ");
  4066ee:	4630      	mov	r0, r6
  4066f0:	47a8      	blx	r5
     PrintFlashString(str_Title_MainMenu,  NEW_LINE);
  4066f2:	216e      	movs	r1, #110	; 0x6e
  4066f4:	4816      	ldr	r0, [pc, #88]	; (406750 <Stampa_menu_config+0x6c>)
  4066f6:	4c17      	ldr	r4, [pc, #92]	; (406754 <Stampa_menu_config+0x70>)
  4066f8:	47a0      	blx	r4
     Serial_println1(" ");
  4066fa:	4630      	mov	r0, r6
  4066fc:	47a8      	blx	r5
     delay_ms (10);
  4066fe:	4816      	ldr	r0, [pc, #88]	; (406758 <Stampa_menu_config+0x74>)
  406700:	4d16      	ldr	r5, [pc, #88]	; (40675c <Stampa_menu_config+0x78>)
  406702:	47a8      	blx	r5
     PrintFlashString(str_0_Row_MainMenu, NEW_LINE);
  406704:	216e      	movs	r1, #110	; 0x6e
  406706:	4816      	ldr	r0, [pc, #88]	; (406760 <Stampa_menu_config+0x7c>)
  406708:	47a0      	blx	r4
     PrintFlashString(str_1_Row_MainMenu, NEW_LINE);
  40670a:	216e      	movs	r1, #110	; 0x6e
  40670c:	4815      	ldr	r0, [pc, #84]	; (406764 <Stampa_menu_config+0x80>)
  40670e:	47a0      	blx	r4
     PrintFlashString(str_2_Row_MainMenu, NEW_LINE);
  406710:	216e      	movs	r1, #110	; 0x6e
  406712:	4815      	ldr	r0, [pc, #84]	; (406768 <Stampa_menu_config+0x84>)
  406714:	47a0      	blx	r4
     PrintFlashString(str_3_Row_MainMenu, NEW_LINE);
  406716:	216e      	movs	r1, #110	; 0x6e
  406718:	4814      	ldr	r0, [pc, #80]	; (40676c <Stampa_menu_config+0x88>)
  40671a:	47a0      	blx	r4
     PrintFlashString(str_4_Row_MainMenu, NEW_LINE);
  40671c:	216e      	movs	r1, #110	; 0x6e
  40671e:	4814      	ldr	r0, [pc, #80]	; (406770 <Stampa_menu_config+0x8c>)
  406720:	47a0      	blx	r4
     delay_ms (20);
  406722:	4814      	ldr	r0, [pc, #80]	; (406774 <Stampa_menu_config+0x90>)
  406724:	47a8      	blx	r5
     PrintFlashString(str_5_Row_MainMenu, NEW_LINE);
  406726:	216e      	movs	r1, #110	; 0x6e
  406728:	4813      	ldr	r0, [pc, #76]	; (406778 <Stampa_menu_config+0x94>)
  40672a:	47a0      	blx	r4
     PrintFlashString(str_6_Row_MainMenu, NEW_LINE);
  40672c:	216e      	movs	r1, #110	; 0x6e
  40672e:	4813      	ldr	r0, [pc, #76]	; (40677c <Stampa_menu_config+0x98>)
  406730:	47a0      	blx	r4
     PrintFlashString(str_7_Row_MainMenu, NEW_LINE);
  406732:	216e      	movs	r1, #110	; 0x6e
  406734:	4812      	ldr	r0, [pc, #72]	; (406780 <Stampa_menu_config+0x9c>)
  406736:	47a0      	blx	r4
     PrintFlashString(str_8_Row_MainMenu, NEW_LINE);
  406738:	216e      	movs	r1, #110	; 0x6e
  40673a:	4812      	ldr	r0, [pc, #72]	; (406784 <Stampa_menu_config+0xa0>)
  40673c:	47a0      	blx	r4
     PrintFlashString(str_9_Row_MainMenu, NEW_LINE);
  40673e:	216e      	movs	r1, #110	; 0x6e
  406740:	4811      	ldr	r0, [pc, #68]	; (406788 <Stampa_menu_config+0xa4>)
  406742:	47a0      	blx	r4
  406744:	bd70      	pop	{r4, r5, r6, pc}
  406746:	bf00      	nop
  406748:	004126b8 	.word	0x004126b8
  40674c:	00406051 	.word	0x00406051
  406750:	00412d28 	.word	0x00412d28
  406754:	0040669d 	.word	0x0040669d
  406758:	00011705 	.word	0x00011705
  40675c:	20000001 	.word	0x20000001
  406760:	004128a0 	.word	0x004128a0
  406764:	004128c4 	.word	0x004128c4
  406768:	004128e0 	.word	0x004128e0
  40676c:	00412900 	.word	0x00412900
  406770:	0041291c 	.word	0x0041291c
  406774:	00022e0a 	.word	0x00022e0a
  406778:	0041293c 	.word	0x0041293c
  40677c:	00412950 	.word	0x00412950
  406780:	00412974 	.word	0x00412974
  406784:	00412990 	.word	0x00412990
  406788:	004129ac 	.word	0x004129ac

0040678c <WriteEepromDefault>:

//---------------------------------------------------
// (1) Write eeprom default
//---------------------------------------------------
void WriteEepromDefault()
{ 
  40678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   Byte nb;
   unsigned int a, addr_end;
    
   PrintFlashString(str_Title_1_Menu,  NEW_LINE);
  406790:	216e      	movs	r1, #110	; 0x6e
  406792:	4826      	ldr	r0, [pc, #152]	; (40682c <WriteEepromDefault+0xa0>)
  406794:	4c26      	ldr	r4, [pc, #152]	; (406830 <WriteEepromDefault+0xa4>)
  406796:	47a0      	blx	r4
   Serial_println1(" "); 
  406798:	4826      	ldr	r0, [pc, #152]	; (406834 <WriteEepromDefault+0xa8>)
  40679a:	4b27      	ldr	r3, [pc, #156]	; (406838 <WriteEepromDefault+0xac>)
  40679c:	4798      	blx	r3
   
   PrintFlashString(str_confirm_1_Menu, NEW_LINE);
  40679e:	216e      	movs	r1, #110	; 0x6e
  4067a0:	4826      	ldr	r0, [pc, #152]	; (40683c <WriteEepromDefault+0xb0>)
  4067a2:	47a0      	blx	r4

   while(1)
   {    
     nb = wait_response_by_terminal();
  4067a4:	4c26      	ldr	r4, [pc, #152]	; (406840 <WriteEepromDefault+0xb4>)
       else if ((buff_RS232_rx[0] == 'N') || (buff_RS232_rx[0] == 'n'))
         return;
       else  
         PrintFlashString(str_error_char_1_Menu, NEW_LINE);
     }else
       PrintFlashString(str_error_char_1_Menu, NEW_LINE);       
  4067a6:	4e27      	ldr	r6, [pc, #156]	; (406844 <WriteEepromDefault+0xb8>)
  4067a8:	4d21      	ldr	r5, [pc, #132]	; (406830 <WriteEepromDefault+0xa4>)
  4067aa:	e002      	b.n	4067b2 <WriteEepromDefault+0x26>
  4067ac:	216e      	movs	r1, #110	; 0x6e
  4067ae:	4630      	mov	r0, r6
  4067b0:	47a8      	blx	r5
     nb = wait_response_by_terminal();
  4067b2:	47a0      	blx	r4
     if(nb >= 1) {
  4067b4:	b2c0      	uxtb	r0, r0
  4067b6:	2800      	cmp	r0, #0
  4067b8:	d0f8      	beq.n	4067ac <WriteEepromDefault+0x20>
       if ((buff_RS232_rx[0] == 'Y') || (buff_RS232_rx[0] == 'y'))
  4067ba:	4b23      	ldr	r3, [pc, #140]	; (406848 <WriteEepromDefault+0xbc>)
  4067bc:	781b      	ldrb	r3, [r3, #0]
  4067be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4067c2:	2b59      	cmp	r3, #89	; 0x59
  4067c4:	d005      	beq.n	4067d2 <WriteEepromDefault+0x46>
       else if ((buff_RS232_rx[0] == 'N') || (buff_RS232_rx[0] == 'n'))
  4067c6:	2b4e      	cmp	r3, #78	; 0x4e
  4067c8:	d02e      	beq.n	406828 <WriteEepromDefault+0x9c>
         PrintFlashString(str_error_char_1_Menu, NEW_LINE);
  4067ca:	216e      	movs	r1, #110	; 0x6e
  4067cc:	4630      	mov	r0, r6
  4067ce:	47a8      	blx	r5
  4067d0:	e7ef      	b.n	4067b2 <WriteEepromDefault+0x26>
   }     

   
   Serial_println1(" ");
  4067d2:	4818      	ldr	r0, [pc, #96]	; (406834 <WriteEepromDefault+0xa8>)
  4067d4:	4c18      	ldr	r4, [pc, #96]	; (406838 <WriteEepromDefault+0xac>)
  4067d6:	47a0      	blx	r4
   Serial_println1("Init eeprom");        
  4067d8:	481c      	ldr	r0, [pc, #112]	; (40684c <WriteEepromDefault+0xc0>)
  4067da:	47a0      	blx	r4
   
   addr_end = ADDR_EEP(check_eeprom[1]);  
   for(a=0; a <= addr_end; a++) {
      eep_write_byte(a,  vect_default_eeprom[a]); 
  4067dc:	4f1c      	ldr	r7, [pc, #112]	; (406850 <WriteEepromDefault+0xc4>)
  4067de:	783c      	ldrb	r4, [r7, #0]
  4067e0:	4621      	mov	r1, r4
  4067e2:	2000      	movs	r0, #0
  4067e4:	4b1b      	ldr	r3, [pc, #108]	; (406854 <WriteEepromDefault+0xc8>)
  4067e6:	4798      	blx	r3
      Shadow_eep[a] = vect_default_eeprom[a];
  4067e8:	4e1b      	ldr	r6, [pc, #108]	; (406858 <WriteEepromDefault+0xcc>)
  4067ea:	7034      	strb	r4, [r6, #0]
   for(a=0; a <= addr_end; a++) {
  4067ec:	2400      	movs	r4, #0
      eep_write_byte(a,  vect_default_eeprom[a]); 
  4067ee:	f8df 8064 	ldr.w	r8, [pc, #100]	; 406854 <WriteEepromDefault+0xc8>
      
      if((a&0x0F) == 0x0F) {
        Serial_print1(".");
  4067f2:	f8df a074 	ldr.w	sl, [pc, #116]	; 406868 <WriteEepromDefault+0xdc>
  4067f6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 40686c <WriteEepromDefault+0xe0>
   for(a=0; a <= addr_end; a++) {
  4067fa:	3401      	adds	r4, #1
  4067fc:	2cf1      	cmp	r4, #241	; 0xf1
  4067fe:	d010      	beq.n	406822 <WriteEepromDefault+0x96>
      eep_write_byte(a,  vect_default_eeprom[a]); 
  406800:	f817 5f01 	ldrb.w	r5, [r7, #1]!
  406804:	4629      	mov	r1, r5
  406806:	4620      	mov	r0, r4
  406808:	47c0      	blx	r8
      Shadow_eep[a] = vect_default_eeprom[a];
  40680a:	f806 5f01 	strb.w	r5, [r6, #1]!
      if((a&0x0F) == 0x0F) {
  40680e:	f004 030f 	and.w	r3, r4, #15
  406812:	2b0f      	cmp	r3, #15
  406814:	d1f1      	bne.n	4067fa <WriteEepromDefault+0x6e>
        Serial_print1(".");
  406816:	4650      	mov	r0, sl
  406818:	47c8      	blx	r9
        delay_ms (50);
  40681a:	4810      	ldr	r0, [pc, #64]	; (40685c <WriteEepromDefault+0xd0>)
  40681c:	4b10      	ldr	r3, [pc, #64]	; (406860 <WriteEepromDefault+0xd4>)
  40681e:	4798      	blx	r3
  406820:	e7eb      	b.n	4067fa <WriteEepromDefault+0x6e>
      }  
   }   
   Serial_println1("  Done");
  406822:	4810      	ldr	r0, [pc, #64]	; (406864 <WriteEepromDefault+0xd8>)
  406824:	4b04      	ldr	r3, [pc, #16]	; (406838 <WriteEepromDefault+0xac>)
  406826:	4798      	blx	r3
  406828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40682c:	00412c2c 	.word	0x00412c2c
  406830:	0040669d 	.word	0x0040669d
  406834:	004126b8 	.word	0x004126b8
  406838:	00406051 	.word	0x00406051
  40683c:	00412da8 	.word	0x00412da8
  406840:	00406619 	.word	0x00406619
  406844:	00413040 	.word	0x00413040
  406848:	20001148 	.word	0x20001148
  40684c:	004126dc 	.word	0x004126dc
  406850:	0041378c 	.word	0x0041378c
  406854:	0040c005 	.word	0x0040c005
  406858:	20001194 	.word	0x20001194
  40685c:	00057317 	.word	0x00057317
  406860:	20000001 	.word	0x20000001
  406864:	004126e8 	.word	0x004126e8
  406868:	00413788 	.word	0x00413788
  40686c:	00405f35 	.word	0x00405f35

00406870 <PrintSN>:

//---------------------------------------------------
//
//---------------------------------------------------
void PrintSN()
{
  406870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406874:	b087      	sub	sp, #28
  406876:	466e      	mov	r6, sp
  406878:	2400      	movs	r4, #0
  unsigned short addr, a;
  char buff[24];
  
  addr = ADDR_EEP(SerialString[0]);
  40687a:	200b      	movs	r0, #11
  
  for(a=0; a <22; ) {
    if ((a==4) || (a==9) || (a==13) || (a==18)) 
      buff[a] = ' ';  // mettiamo gli spazi per comprendere meglio il significato del serial number
    else
      buff[a] = eep_read_byte(addr++);
  40687c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 4068cc <PrintSN+0x5c>
    if ((a==4) || (a==9) || (a==13) || (a==18)) 
  406880:	4f10      	ldr	r7, [pc, #64]	; (4068c4 <PrintSN+0x54>)
      buff[a] = ' ';  // mettiamo gli spazi per comprendere meglio il significato del serial number
  406882:	f04f 0920 	mov.w	r9, #32
  406886:	e00d      	b.n	4068a4 <PrintSN+0x34>
    if ((a==4) || (a==9) || (a==13) || (a==18)) 
  406888:	fa27 f304 	lsr.w	r3, r7, r4
  40688c:	f013 0f01 	tst.w	r3, #1
  406890:	d10c      	bne.n	4068ac <PrintSN+0x3c>
      buff[a] = eep_read_byte(addr++);
  406892:	1c45      	adds	r5, r0, #1
  406894:	b2ad      	uxth	r5, r5
  406896:	47c0      	blx	r8
  406898:	7030      	strb	r0, [r6, #0]
  40689a:	4628      	mov	r0, r5
  40689c:	3401      	adds	r4, #1
  40689e:	3601      	adds	r6, #1
  for(a=0; a <22; ) {
  4068a0:	2c16      	cmp	r4, #22
  4068a2:	d006      	beq.n	4068b2 <PrintSN+0x42>
    if ((a==4) || (a==9) || (a==13) || (a==18)) 
  4068a4:	b2a3      	uxth	r3, r4
  4068a6:	2b12      	cmp	r3, #18
  4068a8:	d8f3      	bhi.n	406892 <PrintSN+0x22>
  4068aa:	e7ed      	b.n	406888 <PrintSN+0x18>
      buff[a] = ' ';  // mettiamo gli spazi per comprendere meglio il significato del serial number
  4068ac:	f886 9000 	strb.w	r9, [r6]
  4068b0:	e7f4      	b.n	40689c <PrintSN+0x2c>
    a++;
  }  
  buff[a] = 0; // chiudiamo la stringa
  4068b2:	2300      	movs	r3, #0
  4068b4:	f88d 3016 	strb.w	r3, [sp, #22]
  Serial_println1(buff); // es:  1565 0023 015 1351 002  
  4068b8:	4668      	mov	r0, sp
  4068ba:	4b03      	ldr	r3, [pc, #12]	; (4068c8 <PrintSN+0x58>)
  4068bc:	4798      	blx	r3
}  
  4068be:	b007      	add	sp, #28
  4068c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4068c4:	00042210 	.word	0x00042210
  4068c8:	00406051 	.word	0x00406051
  4068cc:	0040bfd1 	.word	0x0040bfd1

004068d0 <PrintPositionNTC>:

//---------------------------------------------------
//
//---------------------------------------------------
void PrintPositionNTC(Byte val)
{
  4068d0:	b570      	push	{r4, r5, r6, lr}
  4068d2:	4604      	mov	r4, r0
    Byte n;
    
    Serial_print1("TFr=");
  4068d4:	480d      	ldr	r0, [pc, #52]	; (40690c <PrintPositionNTC+0x3c>)
  4068d6:	4d0e      	ldr	r5, [pc, #56]	; (406910 <PrintPositionNTC+0x40>)
  4068d8:	47a8      	blx	r5
    n = val & 0x03;
    Serial_print(n, DEC);
  4068da:	210a      	movs	r1, #10
  4068dc:	f004 0003 	and.w	r0, r4, #3
  4068e0:	4e0c      	ldr	r6, [pc, #48]	; (406914 <PrintPositionNTC+0x44>)
  4068e2:	47b0      	blx	r6
  
    Serial_print1(" TRe=");
  4068e4:	480c      	ldr	r0, [pc, #48]	; (406918 <PrintPositionNTC+0x48>)
  4068e6:	47a8      	blx	r5
    n = (val >> 2) & 0x03;
    Serial_print(n, DEC);
  4068e8:	210a      	movs	r1, #10
  4068ea:	f3c4 0081 	ubfx	r0, r4, #2, #2
  4068ee:	47b0      	blx	r6
  
    Serial_print1(" TSu=");
  4068f0:	480a      	ldr	r0, [pc, #40]	; (40691c <PrintPositionNTC+0x4c>)
  4068f2:	47a8      	blx	r5
    n = (val >> 4) & 0x03;
    Serial_print(n, DEC);
  4068f4:	210a      	movs	r1, #10
  4068f6:	f3c4 1001 	ubfx	r0, r4, #4, #2
  4068fa:	47b0      	blx	r6
    
    Serial_print1(" TEx=");
  4068fc:	4808      	ldr	r0, [pc, #32]	; (406920 <PrintPositionNTC+0x50>)
  4068fe:	47a8      	blx	r5
    n = (val >> 6) & 0x03;
    Serial_println(n, DEC);  
  406900:	210a      	movs	r1, #10
  406902:	09a0      	lsrs	r0, r4, #6
  406904:	4b07      	ldr	r3, [pc, #28]	; (406924 <PrintPositionNTC+0x54>)
  406906:	4798      	blx	r3
  406908:	bd70      	pop	{r4, r5, r6, pc}
  40690a:	bf00      	nop
  40690c:	0041255c 	.word	0x0041255c
  406910:	00405f35 	.word	0x00405f35
  406914:	00405f65 	.word	0x00405f65
  406918:	00412564 	.word	0x00412564
  40691c:	0041256c 	.word	0x0041256c
  406920:	00412574 	.word	0x00412574
  406924:	0040609d 	.word	0x0040609d

00406928 <read_cfg_data>:
//   Capac.Motors: 100%
//   Number NTC  : 4
//   Position NTC: TFr=0 TRe=1 TSu=2 Tex=3
//---------------------------------------------------
void read_cfg_data()
{
  406928:	b5f0      	push	{r4, r5, r6, r7, lr}
  40692a:	b087      	sub	sp, #28
  unsigned short addr, a;
  Byte val;
  char buff[24];
  
  PrintFlashString(str_Title_2_Menu,  NEW_LINE);
  40692c:	216e      	movs	r1, #110	; 0x6e
  40692e:	4879      	ldr	r0, [pc, #484]	; (406b14 <read_cfg_data+0x1ec>)
  406930:	4c79      	ldr	r4, [pc, #484]	; (406b18 <read_cfg_data+0x1f0>)
  406932:	47a0      	blx	r4

  // Address Unit: 1
  PrintFlashString(str_addrUnit_2_Menu, NO_NEW_LINE);
  406934:	2100      	movs	r1, #0
  406936:	4879      	ldr	r0, [pc, #484]	; (406b1c <read_cfg_data+0x1f4>)
  406938:	47a0      	blx	r4
  a = (word)eep_read_byte(ADDR_EEP(AddrUnit));
  40693a:	2000      	movs	r0, #0
  40693c:	4d78      	ldr	r5, [pc, #480]	; (406b20 <read_cfg_data+0x1f8>)
  40693e:	47a8      	blx	r5
  Serial_println(a, DEC);
  406940:	210a      	movs	r1, #10
  406942:	4b78      	ldr	r3, [pc, #480]	; (406b24 <read_cfg_data+0x1fc>)
  406944:	4798      	blx	r3

  // Control Unit: BASIC/EXTRA
  PrintFlashString(str_Control_2_Menu, NO_NEW_LINE);
  406946:	2100      	movs	r1, #0
  406948:	4877      	ldr	r0, [pc, #476]	; (406b28 <read_cfg_data+0x200>)
  40694a:	47a0      	blx	r4
  val = eep_read_byte(ADDR_EEP(Type_func));
  40694c:	2001      	movs	r0, #1
  40694e:	47a8      	blx	r5
  
  if(val)
  406950:	2800      	cmp	r0, #0
  406952:	f000 80a8 	beq.w	406aa6 <read_cfg_data+0x17e>
    Serial_println1("EXTRA"); 
  406956:	4875      	ldr	r0, [pc, #468]	; (406b2c <read_cfg_data+0x204>)
  406958:	4b75      	ldr	r3, [pc, #468]	; (406b30 <read_cfg_data+0x208>)
  40695a:	4798      	blx	r3
  else  
    Serial_println1("BASIC"); 
    
  // Version HW  : 4.0
  PrintFlashString(str_VerHW_2_Menu, NO_NEW_LINE);
  40695c:	2100      	movs	r1, #0
  40695e:	4875      	ldr	r0, [pc, #468]	; (406b34 <read_cfg_data+0x20c>)
  406960:	4b6d      	ldr	r3, [pc, #436]	; (406b18 <read_cfg_data+0x1f0>)
  406962:	4798      	blx	r3
  406964:	466d      	mov	r5, sp
  406966:	466e      	mov	r6, sp
  406968:	2402      	movs	r4, #2
  addr = ADDR_EEP(HW_Vers[0]);
  for(a=0; a < 4; a++)
    buff[a] = eep_read_byte(addr+a);
  40696a:	4f6d      	ldr	r7, [pc, #436]	; (406b20 <read_cfg_data+0x1f8>)
  40696c:	4620      	mov	r0, r4
  40696e:	47b8      	blx	r7
  406970:	f806 0b01 	strb.w	r0, [r6], #1
  406974:	3401      	adds	r4, #1
  for(a=0; a < 4; a++)
  406976:	2c06      	cmp	r4, #6
  406978:	d1f8      	bne.n	40696c <read_cfg_data+0x44>
  buff[a] = 0; // chiudiamo la stringa
  40697a:	2600      	movs	r6, #0
  40697c:	f88d 6004 	strb.w	r6, [sp, #4]
  Serial_println1(buff);  
  406980:	4668      	mov	r0, sp
  406982:	4b6b      	ldr	r3, [pc, #428]	; (406b30 <read_cfg_data+0x208>)
  406984:	4798      	blx	r3
  
  delay_ms (50);
  406986:	486c      	ldr	r0, [pc, #432]	; (406b38 <read_cfg_data+0x210>)
  406988:	4b6c      	ldr	r3, [pc, #432]	; (406b3c <read_cfg_data+0x214>)
  40698a:	4798      	blx	r3
  
  // Version SW  : 2.01
  PrintFlashString(str_VerSW_2_Menu, NO_NEW_LINE);
  40698c:	4631      	mov	r1, r6
  40698e:	486c      	ldr	r0, [pc, #432]	; (406b40 <read_cfg_data+0x218>)
  406990:	4b61      	ldr	r3, [pc, #388]	; (406b18 <read_cfg_data+0x1f0>)
  406992:	4798      	blx	r3
  addr = ADDR_EEP(SW_Vers[0]);
  for(a=0; a < 5; a++)
    buff[a] = eep_read_byte(addr+a);
  406994:	4e62      	ldr	r6, [pc, #392]	; (406b20 <read_cfg_data+0x1f8>)
  406996:	4620      	mov	r0, r4
  406998:	47b0      	blx	r6
  40699a:	f805 0b01 	strb.w	r0, [r5], #1
  40699e:	3401      	adds	r4, #1
  for(a=0; a < 5; a++)
  4069a0:	2c0b      	cmp	r4, #11
  4069a2:	d1f8      	bne.n	406996 <read_cfg_data+0x6e>
    
  buff[a] = 0; // chiudiamo la stringa
  4069a4:	2400      	movs	r4, #0
  4069a6:	f88d 4005 	strb.w	r4, [sp, #5]
  Serial_println1(buff);  
  4069aa:	4668      	mov	r0, sp
  4069ac:	4b60      	ldr	r3, [pc, #384]	; (406b30 <read_cfg_data+0x208>)
  4069ae:	4798      	blx	r3
    
  // SerialNumber: 1565 0023 015 1351 002
  PrintFlashString(str_SerNumb_2_Menu, NO_NEW_LINE);
  4069b0:	4621      	mov	r1, r4
  4069b2:	4864      	ldr	r0, [pc, #400]	; (406b44 <read_cfg_data+0x21c>)
  4069b4:	4d58      	ldr	r5, [pc, #352]	; (406b18 <read_cfg_data+0x1f0>)
  4069b6:	47a8      	blx	r5
  PrintSN();
  4069b8:	4b63      	ldr	r3, [pc, #396]	; (406b48 <read_cfg_data+0x220>)
  4069ba:	4798      	blx	r3

  // Numb. Motors: 2, 4, 6
  PrintFlashString(str_NumMotors_2_Menu, NO_NEW_LINE);
  4069bc:	4621      	mov	r1, r4
  4069be:	4863      	ldr	r0, [pc, #396]	; (406b4c <read_cfg_data+0x224>)
  4069c0:	47a8      	blx	r5
  addr = ADDR_EEP(numMotors);
  val = eep_read_byte(addr);
  4069c2:	203b      	movs	r0, #59	; 0x3b
  4069c4:	4e56      	ldr	r6, [pc, #344]	; (406b20 <read_cfg_data+0x1f8>)
  4069c6:	47b0      	blx	r6
  Serial_println(val, DEC);
  4069c8:	210a      	movs	r1, #10
  4069ca:	4f56      	ldr	r7, [pc, #344]	; (406b24 <read_cfg_data+0x1fc>)
  4069cc:	47b8      	blx	r7
  
  // Num.TH round: 
  PrintFlashString(str_NumPulse_2_Menu, NO_NEW_LINE);
  4069ce:	4621      	mov	r1, r4
  4069d0:	485f      	ldr	r0, [pc, #380]	; (406b50 <read_cfg_data+0x228>)
  4069d2:	47a8      	blx	r5
  addr = ADDR_EEP(numPulseMotors);
  val = eep_read_byte(addr);
  4069d4:	203c      	movs	r0, #60	; 0x3c
  4069d6:	47b0      	blx	r6
  Serial_println(val, DEC);
  4069d8:	210a      	movs	r1, #10
  4069da:	47b8      	blx	r7
  
  delay_ms (50);
  4069dc:	4856      	ldr	r0, [pc, #344]	; (406b38 <read_cfg_data+0x210>)
  4069de:	4b57      	ldr	r3, [pc, #348]	; (406b3c <read_cfg_data+0x214>)
  4069e0:	4798      	blx	r3
  
  //
  PrintFlashString(str_EnabCAF_2_Menu, NO_NEW_LINE);
  4069e2:	4621      	mov	r1, r4
  4069e4:	485b      	ldr	r0, [pc, #364]	; (406b54 <read_cfg_data+0x22c>)
  4069e6:	47a8      	blx	r5
  addr = ADDR_EEP(msk_Enab_Fuction);
  val = eep_read_byte(addr);
  4069e8:	2030      	movs	r0, #48	; 0x30
  4069ea:	47b0      	blx	r6
  4069ec:	4604      	mov	r4, r0
  if (val & (1 << ENAB_CAF))
  4069ee:	f010 0f80 	tst.w	r0, #128	; 0x80
    Serial_println1("Yes");
  4069f2:	bf14      	ite	ne
  4069f4:	4858      	ldrne	r0, [pc, #352]	; (406b58 <read_cfg_data+0x230>)
  else 
    Serial_println1("No");  
  4069f6:	4859      	ldreq	r0, [pc, #356]	; (406b5c <read_cfg_data+0x234>)
  4069f8:	4b4d      	ldr	r3, [pc, #308]	; (406b30 <read_cfg_data+0x208>)
  4069fa:	4798      	blx	r3

  PrintFlashString(str_EnabCAP_2_Menu, NO_NEW_LINE);
  4069fc:	2100      	movs	r1, #0
  4069fe:	4858      	ldr	r0, [pc, #352]	; (406b60 <read_cfg_data+0x238>)
  406a00:	4b45      	ldr	r3, [pc, #276]	; (406b18 <read_cfg_data+0x1f0>)
  406a02:	4798      	blx	r3
  if (val & (1 << ENAB_CAP))
  406a04:	f014 0f40 	tst.w	r4, #64	; 0x40
    Serial_println1("Yes");
  406a08:	bf14      	ite	ne
  406a0a:	4853      	ldrne	r0, [pc, #332]	; (406b58 <read_cfg_data+0x230>)
  else 
    Serial_println1("No");  
  406a0c:	4853      	ldreq	r0, [pc, #332]	; (406b5c <read_cfg_data+0x234>)
  406a0e:	4b48      	ldr	r3, [pc, #288]	; (406b30 <read_cfg_data+0x208>)
  406a10:	4798      	blx	r3
  
  // Capac.Motors: 100%,..,40% 
  PrintFlashString(str_CapMotors_2_Menu, NO_NEW_LINE);
  406a12:	2100      	movs	r1, #0
  406a14:	4853      	ldr	r0, [pc, #332]	; (406b64 <read_cfg_data+0x23c>)
  406a16:	4d40      	ldr	r5, [pc, #256]	; (406b18 <read_cfg_data+0x1f0>)
  406a18:	47a8      	blx	r5
  addr = ADDR_EEP(depotMotors);
  val = eep_read_byte(addr);
  406a1a:	203f      	movs	r0, #63	; 0x3f
  406a1c:	4c40      	ldr	r4, [pc, #256]	; (406b20 <read_cfg_data+0x1f8>)
  406a1e:	47a0      	blx	r4
  Serial_print(val, DEC);
  406a20:	210a      	movs	r1, #10
  406a22:	4b51      	ldr	r3, [pc, #324]	; (406b68 <read_cfg_data+0x240>)
  406a24:	4798      	blx	r3
  Serial_println1("% ");
  406a26:	4851      	ldr	r0, [pc, #324]	; (406b6c <read_cfg_data+0x244>)
  406a28:	4b41      	ldr	r3, [pc, #260]	; (406b30 <read_cfg_data+0x208>)
  406a2a:	4798      	blx	r3
  
  // Number NTC  : 2, 3, 4
  PrintFlashString(str_NumNTC_2_Menu, NO_NEW_LINE);
  406a2c:	2100      	movs	r1, #0
  406a2e:	4850      	ldr	r0, [pc, #320]	; (406b70 <read_cfg_data+0x248>)
  406a30:	47a8      	blx	r5
  addr = ADDR_EEP(numNTC);
  val = eep_read_byte(addr);
  406a32:	2040      	movs	r0, #64	; 0x40
  406a34:	47a0      	blx	r4
  Serial_println(val, DEC);
  406a36:	210a      	movs	r1, #10
  406a38:	4b3a      	ldr	r3, [pc, #232]	; (406b24 <read_cfg_data+0x1fc>)
  406a3a:	4798      	blx	r3
  
  // Position NTC
  PrintFlashString(str_PosNTC_2_Menu, NO_NEW_LINE);
  406a3c:	2100      	movs	r1, #0
  406a3e:	484d      	ldr	r0, [pc, #308]	; (406b74 <read_cfg_data+0x24c>)
  406a40:	47a8      	blx	r5
  addr = ADDR_EEP(Posiz_NTC);
  val = eep_read_byte(addr);
  406a42:	2041      	movs	r0, #65	; 0x41
  406a44:	47a0      	blx	r4
  PrintPositionNTC(val);
  406a46:	4b4c      	ldr	r3, [pc, #304]	; (406b78 <read_cfg_data+0x250>)
  406a48:	4798      	blx	r3
  
  delay_ms (50);
  406a4a:	483b      	ldr	r0, [pc, #236]	; (406b38 <read_cfg_data+0x210>)
  406a4c:	4b3b      	ldr	r3, [pc, #236]	; (406b3c <read_cfg_data+0x214>)
  406a4e:	4798      	blx	r3
  
  // Set Bypass_Close
  PrintFlashString(str_Bypass_2_Menu, NO_NEW_LINE);
  406a50:	2100      	movs	r1, #0
  406a52:	484a      	ldr	r0, [pc, #296]	; (406b7c <read_cfg_data+0x254>)
  406a54:	47a8      	blx	r5
  addr = ADDR_EEP(RotazioneBypass);
  val = eep_read_byte(addr);
  406a56:	2042      	movs	r0, #66	; 0x42
  406a58:	47a0      	blx	r4
  if(val)
  406a5a:	b340      	cbz	r0, 406aae <read_cfg_data+0x186>
    Serial_println1("1=AntiOrario (default)");
  406a5c:	4848      	ldr	r0, [pc, #288]	; (406b80 <read_cfg_data+0x258>)
  406a5e:	4b34      	ldr	r3, [pc, #208]	; (406b30 <read_cfg_data+0x208>)
  406a60:	4798      	blx	r3
//  List AccessoyHW[1]:  parte 2 list Acc.HW: (MSB)    DPS,   CAF,   CAP,   INP,   OUT,  DDPV2,   RFM,  MBUS  (LSB) 
//  List AccessoyHW[2]:  parte 3 list Acc.HW: (MSB)  P2CO2, P1CO2, -----,  P2RH,  P1RH,  ----, P1VOC, -----  (LSB) 
//  List AccessoyHW[3]:  parte 4 list Acc.HW: (MSB)  -----, -----, -----, -----, -----, -----, -----, -----  (LSB)


  PrintFlashString(str_Accessory_2_Menu, NO_NEW_LINE);
  406a62:	2100      	movs	r1, #0
  406a64:	4847      	ldr	r0, [pc, #284]	; (406b84 <read_cfg_data+0x25c>)
  406a66:	4b2c      	ldr	r3, [pc, #176]	; (406b18 <read_cfg_data+0x1f0>)
  406a68:	4798      	blx	r3
  
  addr = ADDR_EEP(AccessoyHW[0]);
  buff[0] = eep_read_byte(addr);
  406a6a:	202a      	movs	r0, #42	; 0x2a
  406a6c:	4c2c      	ldr	r4, [pc, #176]	; (406b20 <read_cfg_data+0x1f8>)
  406a6e:	47a0      	blx	r4
  406a70:	f88d 0000 	strb.w	r0, [sp]
  buff[1] = eep_read_byte(addr+1);
  406a74:	202b      	movs	r0, #43	; 0x2b
  406a76:	47a0      	blx	r4
  406a78:	f88d 0001 	strb.w	r0, [sp, #1]
  buff[2] = eep_read_byte(addr+2);
  406a7c:	202c      	movs	r0, #44	; 0x2c
  406a7e:	47a0      	blx	r4
  406a80:	f88d 0002 	strb.w	r0, [sp, #2]
  
  if(((buff[0] & 0x01) == 0) && ((buff[1] & 0x08) == 0) && ((buff[2] & 0xDA) == 0))
  406a84:	f89d 3000 	ldrb.w	r3, [sp]
  406a88:	f013 0f01 	tst.w	r3, #1
  406a8c:	d113      	bne.n	406ab6 <read_cfg_data+0x18e>
  406a8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
  406a92:	f013 0f08 	tst.w	r3, #8
  406a96:	d111      	bne.n	406abc <read_cfg_data+0x194>
  406a98:	f010 0fda 	tst.w	r0, #218	; 0xda
  406a9c:	d10e      	bne.n	406abc <read_cfg_data+0x194>
    Serial_print1("- - - ");
  406a9e:	483a      	ldr	r0, [pc, #232]	; (406b88 <read_cfg_data+0x260>)
  406aa0:	4b3a      	ldr	r3, [pc, #232]	; (406b8c <read_cfg_data+0x264>)
  406aa2:	4798      	blx	r3
  406aa4:	e01e      	b.n	406ae4 <read_cfg_data+0x1bc>
    Serial_println1("BASIC"); 
  406aa6:	483a      	ldr	r0, [pc, #232]	; (406b90 <read_cfg_data+0x268>)
  406aa8:	4b21      	ldr	r3, [pc, #132]	; (406b30 <read_cfg_data+0x208>)
  406aaa:	4798      	blx	r3
  406aac:	e756      	b.n	40695c <read_cfg_data+0x34>
    Serial_println1("0=Orario");
  406aae:	4839      	ldr	r0, [pc, #228]	; (406b94 <read_cfg_data+0x26c>)
  406ab0:	4b1f      	ldr	r3, [pc, #124]	; (406b30 <read_cfg_data+0x208>)
  406ab2:	4798      	blx	r3
  406ab4:	e7d5      	b.n	406a62 <read_cfg_data+0x13a>
  else {  
    if (buff[0] & 0x01) Serial_print1("PreHeater  ");
  406ab6:	4838      	ldr	r0, [pc, #224]	; (406b98 <read_cfg_data+0x270>)
  406ab8:	4b34      	ldr	r3, [pc, #208]	; (406b8c <read_cfg_data+0x264>)
  406aba:	4798      	blx	r3
    if (buff[1] & 0x04) Serial_print1("DPP_V2  ");
  406abc:	f89d 3001 	ldrb.w	r3, [sp, #1]
  406ac0:	f013 0f04 	tst.w	r3, #4
  406ac4:	d116      	bne.n	406af4 <read_cfg_data+0x1cc>
    if (buff[2] & 0x02) Serial_print1("VOC_Sensor  ");
  406ac6:	f89d 3002 	ldrb.w	r3, [sp, #2]
  406aca:	f013 0f02 	tst.w	r3, #2
  406ace:	d115      	bne.n	406afc <read_cfg_data+0x1d4>
    if (buff[2] & 0x18) Serial_print1("RH_Sensor  ");
  406ad0:	f89d 3002 	ldrb.w	r3, [sp, #2]
  406ad4:	f013 0f18 	tst.w	r3, #24
  406ad8:	d114      	bne.n	406b04 <read_cfg_data+0x1dc>
    if (buff[2] & 0xC0) Serial_print1("CO2_Sensor  ");
  406ada:	f89d 3002 	ldrb.w	r3, [sp, #2]
  406ade:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  406ae2:	d113      	bne.n	406b0c <read_cfg_data+0x1e4>
  }

  Serial_println1(" ");
  406ae4:	482d      	ldr	r0, [pc, #180]	; (406b9c <read_cfg_data+0x274>)
  406ae6:	4b12      	ldr	r3, [pc, #72]	; (406b30 <read_cfg_data+0x208>)
  406ae8:	4798      	blx	r3
  delay_ms (800);
  406aea:	482d      	ldr	r0, [pc, #180]	; (406ba0 <read_cfg_data+0x278>)
  406aec:	4b13      	ldr	r3, [pc, #76]	; (406b3c <read_cfg_data+0x214>)
  406aee:	4798      	blx	r3
}
  406af0:	b007      	add	sp, #28
  406af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (buff[1] & 0x04) Serial_print1("DPP_V2  ");
  406af4:	482b      	ldr	r0, [pc, #172]	; (406ba4 <read_cfg_data+0x27c>)
  406af6:	4b25      	ldr	r3, [pc, #148]	; (406b8c <read_cfg_data+0x264>)
  406af8:	4798      	blx	r3
  406afa:	e7e4      	b.n	406ac6 <read_cfg_data+0x19e>
    if (buff[2] & 0x02) Serial_print1("VOC_Sensor  ");
  406afc:	482a      	ldr	r0, [pc, #168]	; (406ba8 <read_cfg_data+0x280>)
  406afe:	4b23      	ldr	r3, [pc, #140]	; (406b8c <read_cfg_data+0x264>)
  406b00:	4798      	blx	r3
  406b02:	e7e5      	b.n	406ad0 <read_cfg_data+0x1a8>
    if (buff[2] & 0x18) Serial_print1("RH_Sensor  ");
  406b04:	4829      	ldr	r0, [pc, #164]	; (406bac <read_cfg_data+0x284>)
  406b06:	4b21      	ldr	r3, [pc, #132]	; (406b8c <read_cfg_data+0x264>)
  406b08:	4798      	blx	r3
  406b0a:	e7e6      	b.n	406ada <read_cfg_data+0x1b2>
    if (buff[2] & 0xC0) Serial_print1("CO2_Sensor  ");
  406b0c:	4828      	ldr	r0, [pc, #160]	; (406bb0 <read_cfg_data+0x288>)
  406b0e:	4b1f      	ldr	r3, [pc, #124]	; (406b8c <read_cfg_data+0x264>)
  406b10:	4798      	blx	r3
  406b12:	e7e7      	b.n	406ae4 <read_cfg_data+0x1bc>
  406b14:	00412c50 	.word	0x00412c50
  406b18:	0040669d 	.word	0x0040669d
  406b1c:	00412d90 	.word	0x00412d90
  406b20:	0040bfd1 	.word	0x0040bfd1
  406b24:	0040609d 	.word	0x0040609d
  406b28:	00412a6c 	.word	0x00412a6c
  406b2c:	00412794 	.word	0x00412794
  406b30:	00406051 	.word	0x00406051
  406b34:	00412d4c 	.word	0x00412d4c
  406b38:	00057317 	.word	0x00057317
  406b3c:	20000001 	.word	0x20000001
  406b40:	00412d64 	.word	0x00412d64
  406b44:	00412c14 	.word	0x00412c14
  406b48:	00406871 	.word	0x00406871
  406b4c:	00412b60 	.word	0x00412b60
  406b50:	00412bb4 	.word	0x00412bb4
  406b54:	00412a84 	.word	0x00412a84
  406b58:	004127a4 	.word	0x004127a4
  406b5c:	004127a8 	.word	0x004127a8
  406b60:	00412a9c 	.word	0x00412a9c
  406b64:	00412a2c 	.word	0x00412a2c
  406b68:	00405f65 	.word	0x00405f65
  406b6c:	004127ac 	.word	0x004127ac
  406b70:	00412b9c 	.word	0x00412b9c
  406b74:	00412bfc 	.word	0x00412bfc
  406b78:	004068d1 	.word	0x004068d1
  406b7c:	004129e8 	.word	0x004129e8
  406b80:	004127b0 	.word	0x004127b0
  406b84:	004129d0 	.word	0x004129d0
  406b88:	004127d4 	.word	0x004127d4
  406b8c:	00405f35 	.word	0x00405f35
  406b90:	0041279c 	.word	0x0041279c
  406b94:	004127c8 	.word	0x004127c8
  406b98:	004127dc 	.word	0x004127dc
  406b9c:	004126b8 	.word	0x004126b8
  406ba0:	0057316e 	.word	0x0057316e
  406ba4:	004127e8 	.word	0x004127e8
  406ba8:	004127f4 	.word	0x004127f4
  406bac:	00412804 	.word	0x00412804
  406bb0:	00412810 	.word	0x00412810

00406bb4 <Set_SerialNumb>:
//
//  Actualy SN: 1565 0023 015 1351 002
//  New SN....: 
//------------------------------------------------------
void Set_SerialNumb()
{
  406bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406bb8:	b087      	sub	sp, #28
   Byte i, nb, numSN;
   char newVal[22], wr_eep = 0;
   unsigned short addr;
   
   PrintFlashString(str_Title_3_Menu, NEW_LINE);
  406bba:	216e      	movs	r1, #110	; 0x6e
  406bbc:	4842      	ldr	r0, [pc, #264]	; (406cc8 <Set_SerialNumb+0x114>)
  406bbe:	4c43      	ldr	r4, [pc, #268]	; (406ccc <Set_SerialNumb+0x118>)
  406bc0:	47a0      	blx	r4
   Serial_println1(" ");  
  406bc2:	4e43      	ldr	r6, [pc, #268]	; (406cd0 <Set_SerialNumb+0x11c>)
  406bc4:	4630      	mov	r0, r6
  406bc6:	4d43      	ldr	r5, [pc, #268]	; (406cd4 <Set_SerialNumb+0x120>)
  406bc8:	47a8      	blx	r5
   PrintFlashString(str_actualy_SN_3_Menu, NO_NEW_LINE);
  406bca:	2100      	movs	r1, #0
  406bcc:	4842      	ldr	r0, [pc, #264]	; (406cd8 <Set_SerialNumb+0x124>)
  406bce:	47a0      	blx	r4
   PrintSN(); 
  406bd0:	4b42      	ldr	r3, [pc, #264]	; (406cdc <Set_SerialNumb+0x128>)
  406bd2:	4798      	blx	r3
   PrintFlashString(str_enter_SN_DESC_1, NEW_LINE);
  406bd4:	216e      	movs	r1, #110	; 0x6e
  406bd6:	4842      	ldr	r0, [pc, #264]	; (406ce0 <Set_SerialNumb+0x12c>)
  406bd8:	47a0      	blx	r4
   PrintFlashString(str_enter_SN_DESC_2, NEW_LINE);
  406bda:	216e      	movs	r1, #110	; 0x6e
  406bdc:	4841      	ldr	r0, [pc, #260]	; (406ce4 <Set_SerialNumb+0x130>)
  406bde:	47a0      	blx	r4
   delay_ms (10);
  406be0:	4841      	ldr	r0, [pc, #260]	; (406ce8 <Set_SerialNumb+0x134>)
  406be2:	4b42      	ldr	r3, [pc, #264]	; (406cec <Set_SerialNumb+0x138>)
  406be4:	4798      	blx	r3
   PrintFlashString(str_enter_SN_DESC_3, NEW_LINE);
  406be6:	216e      	movs	r1, #110	; 0x6e
  406be8:	4841      	ldr	r0, [pc, #260]	; (406cf0 <Set_SerialNumb+0x13c>)
  406bea:	47a0      	blx	r4
   PrintFlashString(str_enter_SN_DESC_4, NEW_LINE);
  406bec:	216e      	movs	r1, #110	; 0x6e
  406bee:	4841      	ldr	r0, [pc, #260]	; (406cf4 <Set_SerialNumb+0x140>)
  406bf0:	47a0      	blx	r4

   Serial_println1(" ");
  406bf2:	4630      	mov	r0, r6
  406bf4:	47a8      	blx	r5
   PrintFlashString(str_enter_SN_3_Menu, NEW_LINE);
  406bf6:	216e      	movs	r1, #110	; 0x6e
  406bf8:	483f      	ldr	r0, [pc, #252]	; (406cf8 <Set_SerialNumb+0x144>)
  406bfa:	47a0      	blx	r4
   
   nb = wait_response_by_terminal();  
  406bfc:	4b3f      	ldr	r3, [pc, #252]	; (406cfc <Set_SerialNumb+0x148>)
  406bfe:	4798      	blx	r3
  406c00:	b2c0      	uxtb	r0, r0
   
   if(nb == 1)  
  406c02:	2801      	cmp	r0, #1
  406c04:	d008      	beq.n	406c18 <Set_SerialNumb+0x64>
     PrintSN();     
   else { 
      for(i=0, numSN=0; i< nb; i++)  
  406c06:	2800      	cmp	r0, #0
  406c08:	d04f      	beq.n	406caa <Set_SerialNumb+0xf6>
  406c0a:	4a3d      	ldr	r2, [pc, #244]	; (406d00 <Set_SerialNumb+0x14c>)
  406c0c:	3801      	subs	r0, #1
  406c0e:	1c54      	adds	r4, r2, #1
  406c10:	fa54 f480 	uxtab	r4, r4, r0
  406c14:	2000      	movs	r0, #0
  406c16:	e004      	b.n	406c22 <Set_SerialNumb+0x6e>
     PrintSN();     
  406c18:	4b30      	ldr	r3, [pc, #192]	; (406cdc <Set_SerialNumb+0x128>)
  406c1a:	4798      	blx	r3
  406c1c:	e042      	b.n	406ca4 <Set_SerialNumb+0xf0>
      for(i=0, numSN=0; i< nb; i++)  
  406c1e:	42a2      	cmp	r2, r4
  406c20:	d019      	beq.n	406c56 <Set_SerialNumb+0xa2>
      {
          if ((buff_RS232_rx[i] == ' ') || (buff_RS232_rx[i] == '-') || (buff_RS232_rx[i] == '.') || (buff_RS232_rx[i] == '\n')) 
  406c22:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  406c26:	2b20      	cmp	r3, #32
  406c28:	d0f9      	beq.n	406c1e <Set_SerialNumb+0x6a>
  406c2a:	f1a3 012d 	sub.w	r1, r3, #45	; 0x2d
  406c2e:	b2c9      	uxtb	r1, r1
  406c30:	2901      	cmp	r1, #1
  406c32:	d9f4      	bls.n	406c1e <Set_SerialNumb+0x6a>
  406c34:	2b0a      	cmp	r3, #10
  406c36:	d0f2      	beq.n	406c1e <Set_SerialNumb+0x6a>
             continue;
          else if ((buff_RS232_rx[i] < '0') || (buff_RS232_rx[i] > '9')) {
  406c38:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  406c3c:	b2c9      	uxtb	r1, r1
  406c3e:	2909      	cmp	r1, #9
  406c40:	d833      	bhi.n	406caa <Set_SerialNumb+0xf6>
             numSN = 0;
             break;
          }else {
             newVal[numSN] = buff_RS232_rx[i];
  406c42:	a906      	add	r1, sp, #24
  406c44:	4401      	add	r1, r0
  406c46:	f801 3c18 	strb.w	r3, [r1, #-24]
             if(++numSN >= 20)
  406c4a:	3001      	adds	r0, #1
  406c4c:	b2c0      	uxtb	r0, r0
  406c4e:	2814      	cmp	r0, #20
  406c50:	bf28      	it	cs
  406c52:	2014      	movcs	r0, #20
  406c54:	e7e3      	b.n	406c1e <Set_SerialNumb+0x6a>
               numSN = 20;
          }            
      }  
      
      if (numSN == 0)  
  406c56:	b340      	cbz	r0, 406caa <Set_SerialNumb+0xf6>
        PrintFlashString(str_error1_3_Menu, NEW_LINE); 
      else if(numSN < 18)       
  406c58:	2811      	cmp	r0, #17
  406c5a:	d92b      	bls.n	406cb4 <Set_SerialNumb+0x100>
        PrintFlashString(str_error2_3_Menu, NEW_LINE); 
      else if (numSN > 18)   
  406c5c:	2812      	cmp	r0, #18
  406c5e:	d82e      	bhi.n	406cbe <Set_SerialNumb+0x10a>
        PrintFlashString(str_error3_3_Menu, NEW_LINE); 
      else {
        newVal[18] = 0; 
  406c60:	2300      	movs	r3, #0
  406c62:	f88d 3012 	strb.w	r3, [sp, #18]
  406c66:	f10d 35ff 	add.w	r5, sp, #4294967295
  406c6a:	4c26      	ldr	r4, [pc, #152]	; (406d04 <Set_SerialNumb+0x150>)
  406c6c:	f10d 0911 	add.w	r9, sp, #17
   // aggiorniamo al eeprom e la shadow.
   if(wr_eep) {       
       addr = ADDR_EEP(SerialString[0]);
       
       for(i=0; i <18; i++) {
         eep_write_byte(addr,  newVal[i]); 
  406c70:	f1a4 080b 	sub.w	r8, r4, #11
  406c74:	4f24      	ldr	r7, [pc, #144]	; (406d08 <Set_SerialNumb+0x154>)
  406c76:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  406c7a:	4631      	mov	r1, r6
  406c7c:	eba4 0008 	sub.w	r0, r4, r8
  406c80:	47b8      	blx	r7
         Shadow_eep[addr] = newVal[i];
  406c82:	f804 6b01 	strb.w	r6, [r4], #1
       for(i=0; i <18; i++) {
  406c86:	454d      	cmp	r5, r9
  406c88:	d1f5      	bne.n	406c76 <Set_SerialNumb+0xc2>
         addr++;
       } 
       Serial_println1(" ");
  406c8a:	4811      	ldr	r0, [pc, #68]	; (406cd0 <Set_SerialNumb+0x11c>)
  406c8c:	4b11      	ldr	r3, [pc, #68]	; (406cd4 <Set_SerialNumb+0x120>)
  406c8e:	4798      	blx	r3
       PrintFlashString(str_new_SN_3_Menu, NO_NEW_LINE);
  406c90:	2100      	movs	r1, #0
  406c92:	481e      	ldr	r0, [pc, #120]	; (406d0c <Set_SerialNumb+0x158>)
  406c94:	4b0d      	ldr	r3, [pc, #52]	; (406ccc <Set_SerialNumb+0x118>)
  406c96:	4798      	blx	r3
       PrintSN(); 
  406c98:	4b10      	ldr	r3, [pc, #64]	; (406cdc <Set_SerialNumb+0x128>)
  406c9a:	4798      	blx	r3
       
       sData.size_unit = calc_size_unit();
  406c9c:	4b1c      	ldr	r3, [pc, #112]	; (406d10 <Set_SerialNumb+0x15c>)
  406c9e:	4798      	blx	r3
  406ca0:	4b1c      	ldr	r3, [pc, #112]	; (406d14 <Set_SerialNumb+0x160>)
  406ca2:	8058      	strh	r0, [r3, #2]
   }  
}  
  406ca4:	b007      	add	sp, #28
  406ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        PrintFlashString(str_error1_3_Menu, NEW_LINE); 
  406caa:	216e      	movs	r1, #110	; 0x6e
  406cac:	481a      	ldr	r0, [pc, #104]	; (406d18 <Set_SerialNumb+0x164>)
  406cae:	4b07      	ldr	r3, [pc, #28]	; (406ccc <Set_SerialNumb+0x118>)
  406cb0:	4798      	blx	r3
  406cb2:	e7f7      	b.n	406ca4 <Set_SerialNumb+0xf0>
        PrintFlashString(str_error2_3_Menu, NEW_LINE); 
  406cb4:	216e      	movs	r1, #110	; 0x6e
  406cb6:	4819      	ldr	r0, [pc, #100]	; (406d1c <Set_SerialNumb+0x168>)
  406cb8:	4b04      	ldr	r3, [pc, #16]	; (406ccc <Set_SerialNumb+0x118>)
  406cba:	4798      	blx	r3
  406cbc:	e7f2      	b.n	406ca4 <Set_SerialNumb+0xf0>
        PrintFlashString(str_error3_3_Menu, NEW_LINE); 
  406cbe:	216e      	movs	r1, #110	; 0x6e
  406cc0:	4817      	ldr	r0, [pc, #92]	; (406d20 <Set_SerialNumb+0x16c>)
  406cc2:	4b02      	ldr	r3, [pc, #8]	; (406ccc <Set_SerialNumb+0x118>)
  406cc4:	4798      	blx	r3
  406cc6:	e7ed      	b.n	406ca4 <Set_SerialNumb+0xf0>
  406cc8:	00412c74 	.word	0x00412c74
  406ccc:	0040669d 	.word	0x0040669d
  406cd0:	004126b8 	.word	0x004126b8
  406cd4:	00406051 	.word	0x00406051
  406cd8:	00412d7c 	.word	0x00412d7c
  406cdc:	00406871 	.word	0x00406871
  406ce0:	00412e5c 	.word	0x00412e5c
  406ce4:	00412e9c 	.word	0x00412e9c
  406ce8:	00011705 	.word	0x00011705
  406cec:	20000001 	.word	0x20000001
  406cf0:	00412ec4 	.word	0x00412ec4
  406cf4:	00412ee8 	.word	0x00412ee8
  406cf8:	00412e1c 	.word	0x00412e1c
  406cfc:	00406619 	.word	0x00406619
  406d00:	20001147 	.word	0x20001147
  406d04:	2000119f 	.word	0x2000119f
  406d08:	0040c005 	.word	0x0040c005
  406d0c:	00413100 	.word	0x00413100
  406d10:	0040beb5 	.word	0x0040beb5
  406d14:	200013ac 	.word	0x200013ac
  406d18:	00412f0c 	.word	0x00412f0c
  406d1c:	00412fac 	.word	0x00412fac
  406d20:	00412fdc 	.word	0x00412fdc

00406d24 <Set_dataMotors>:
//   Set Program Motors (A, S, P):
//   Set Capacity Motors(40%,..,100%):
//
//------------------------------------------------------
void Set_dataMotors()
{
  406d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d28:	b085      	sub	sp, #20
  Byte nb, buff_data_motors[12], val, wr_eep = 0;
  unsigned short addr1, addr2, i, val_16;
  
  PrintFlashString(str_Title_4_Menu, NEW_LINE);
  406d2a:	216e      	movs	r1, #110	; 0x6e
  406d2c:	4899      	ldr	r0, [pc, #612]	; (406f94 <Set_dataMotors+0x270>)
  406d2e:	4b9a      	ldr	r3, [pc, #616]	; (406f98 <Set_dataMotors+0x274>)
  406d30:	4798      	blx	r3
  Serial_println1(" ");
  406d32:	489a      	ldr	r0, [pc, #616]	; (406f9c <Set_dataMotors+0x278>)
  406d34:	4b9a      	ldr	r3, [pc, #616]	; (406fa0 <Set_dataMotors+0x27c>)
  406d36:	4798      	blx	r3
  406d38:	f10d 0503 	add.w	r5, sp, #3
  406d3c:	243b      	movs	r4, #59	; 0x3b
    
   */
  addr1 = ADDR_EEP(numMotors);     
  addr2 = ADDR_EEP(RotazioneBypass);   
  for(i=addr1; i <= addr2; i++)
      buff_data_motors[i-addr1] = eep_read_byte(i);
  406d3e:	4e99      	ldr	r6, [pc, #612]	; (406fa4 <Set_dataMotors+0x280>)
  406d40:	4620      	mov	r0, r4
  406d42:	47b0      	blx	r6
  406d44:	f805 0f01 	strb.w	r0, [r5, #1]!
  406d48:	3401      	adds	r4, #1
  for(i=addr1; i <= addr2; i++)
  406d4a:	2c43      	cmp	r4, #67	; 0x43
  406d4c:	d1f8      	bne.n	406d40 <Set_dataMotors+0x1c>
  
  //--- 1 Set numbers Motors ---
  PrintFlashString(str_NumMotors_4_Menu,  NO_NEW_LINE);
  406d4e:	2100      	movs	r1, #0
  406d50:	4895      	ldr	r0, [pc, #596]	; (406fa8 <Set_dataMotors+0x284>)
  406d52:	4b91      	ldr	r3, [pc, #580]	; (406f98 <Set_dataMotors+0x274>)
  406d54:	4798      	blx	r3
  nb = wait_response_by_terminal();
  406d56:	4b95      	ldr	r3, [pc, #596]	; (406fac <Set_dataMotors+0x288>)
  406d58:	4798      	blx	r3
  406d5a:	b2c4      	uxtb	r4, r0
  if ((nb>=1) && (buff_RS232_rx[0] != 0x0A))  {
  406d5c:	b1a4      	cbz	r4, 406d88 <Set_dataMotors+0x64>
  406d5e:	4b94      	ldr	r3, [pc, #592]	; (406fb0 <Set_dataMotors+0x28c>)
  406d60:	7818      	ldrb	r0, [r3, #0]
  406d62:	280a      	cmp	r0, #10
  406d64:	d068      	beq.n	406e38 <Set_dataMotors+0x114>
    if((buff_RS232_rx[0] != '2') && (buff_RS232_rx[0] != '4') && (buff_RS232_rx[0] != '6')) {
  406d66:	f000 03fb 	and.w	r3, r0, #251	; 0xfb
  406d6a:	2b32      	cmp	r3, #50	; 0x32
  406d6c:	d008      	beq.n	406d80 <Set_dataMotors+0x5c>
  406d6e:	2834      	cmp	r0, #52	; 0x34
  406d70:	d006      	beq.n	406d80 <Set_dataMotors+0x5c>
      Serial_print(buff_RS232_rx[0], BYTE);
  406d72:	2100      	movs	r1, #0
  406d74:	4b8f      	ldr	r3, [pc, #572]	; (406fb4 <Set_dataMotors+0x290>)
  406d76:	4798      	blx	r3
      Serial_println1(" , Error the units can have 2, 4 or 6 motors!");
  406d78:	488f      	ldr	r0, [pc, #572]	; (406fb8 <Set_dataMotors+0x294>)
  406d7a:	4b89      	ldr	r3, [pc, #548]	; (406fa0 <Set_dataMotors+0x27c>)
  406d7c:	4798      	blx	r3
      return;
  406d7e:	e058      	b.n	406e32 <Set_dataMotors+0x10e>
    }
    
    buff_data_motors[0] = buff_RS232_rx[0] - '0';  
  406d80:	3830      	subs	r0, #48	; 0x30
  406d82:	f88d 0004 	strb.w	r0, [sp, #4]
    wr_eep = 1;  
  406d86:	2401      	movs	r4, #1
  }
  Serial_println(buff_data_motors[0], DEC);  
  406d88:	210a      	movs	r1, #10
  406d8a:	f89d 0004 	ldrb.w	r0, [sp, #4]
  406d8e:	4b8b      	ldr	r3, [pc, #556]	; (406fbc <Set_dataMotors+0x298>)
  406d90:	4798      	blx	r3
  
  //--- 2  numPulseMotors ---
  PrintFlashString(str_NumPulse_4_Menu,   NO_NEW_LINE);
  406d92:	2100      	movs	r1, #0
  406d94:	488a      	ldr	r0, [pc, #552]	; (406fc0 <Set_dataMotors+0x29c>)
  406d96:	4b80      	ldr	r3, [pc, #512]	; (406f98 <Set_dataMotors+0x274>)
  406d98:	4798      	blx	r3
  nb = wait_response_by_terminal();
  406d9a:	4b84      	ldr	r3, [pc, #528]	; (406fac <Set_dataMotors+0x288>)
  406d9c:	4798      	blx	r3
  406d9e:	b2c2      	uxtb	r2, r0
  if ((nb>=1) && (buff_RS232_rx[0] != 0x0A))  
  406da0:	b332      	cbz	r2, 406df0 <Set_dataMotors+0xcc>
  406da2:	4b83      	ldr	r3, [pc, #524]	; (406fb0 <Set_dataMotors+0x28c>)
  406da4:	781b      	ldrb	r3, [r3, #0]
  406da6:	2b0a      	cmp	r3, #10
  406da8:	d022      	beq.n	406df0 <Set_dataMotors+0xcc>
  {
     // il numero può avere anche 2 cifre
    i = (nb -1)& 0x03; 
   
    if((buff_RS232_rx[0] < '0') || (buff_RS232_rx[0] > '9'))
  406daa:	3b30      	subs	r3, #48	; 0x30
  406dac:	b2d8      	uxtb	r0, r3
  406dae:	2809      	cmp	r0, #9
  406db0:	d84c      	bhi.n	406e4c <Set_dataMotors+0x128>
    i = (nb -1)& 0x03; 
  406db2:	1e53      	subs	r3, r2, #1
  406db4:	f003 0303 	and.w	r3, r3, #3
      i = 0; // errore
   
    if(nb > 2) {
  406db8:	2a02      	cmp	r2, #2
  406dba:	d905      	bls.n	406dc8 <Set_dataMotors+0xa4>
      if((buff_RS232_rx[1] < '0') || (buff_RS232_rx[1] > '9'))
  406dbc:	4a7c      	ldr	r2, [pc, #496]	; (406fb0 <Set_dataMotors+0x28c>)
  406dbe:	7852      	ldrb	r2, [r2, #1]
  406dc0:	3a30      	subs	r2, #48	; 0x30
  406dc2:	b2d2      	uxtb	r2, r2
  406dc4:	2a09      	cmp	r2, #9
  406dc6:	d841      	bhi.n	406e4c <Set_dataMotors+0x128>
        i = 0; // errore
    }  
    
    if(i) {      
  406dc8:	2b00      	cmp	r3, #0
  406dca:	d03f      	beq.n	406e4c <Set_dataMotors+0x128>
       val = buff_RS232_rx[0] - '0';
       
       if(i>1) { 
  406dcc:	2b01      	cmp	r3, #1
  406dce:	d908      	bls.n	406de2 <Set_dataMotors+0xbe>
         val *= 10;
  406dd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
         val += buff_RS232_rx[1] - '0';
  406dd4:	4b76      	ldr	r3, [pc, #472]	; (406fb0 <Set_dataMotors+0x28c>)
  406dd6:	785b      	ldrb	r3, [r3, #1]
  406dd8:	3b30      	subs	r3, #48	; 0x30
  406dda:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406dde:	f000 00ff 	and.w	r0, r0, #255	; 0xff
       }    
       
       if((val < 1) || (val > 10)) {
  406de2:	1e43      	subs	r3, r0, #1
  406de4:	b2db      	uxtb	r3, r3
  406de6:	2b09      	cmp	r3, #9
  406de8:	d828      	bhi.n	406e3c <Set_dataMotors+0x118>
    }else {
       PrintFlashString(str_error1_4_Menu,  NEW_LINE);
       return;
    }      
    
    buff_data_motors[1] = val;
  406dea:	f88d 0005 	strb.w	r0, [sp, #5]
       wr_eep = 1;
  406dee:	2401      	movs	r4, #1
  }   
  Serial_println(buff_data_motors[1], DEC); // se solo il carattere '\n' riporta il valore in eeprom 
  406df0:	210a      	movs	r1, #10
  406df2:	f89d 0005 	ldrb.w	r0, [sp, #5]
  406df6:	4b71      	ldr	r3, [pc, #452]	; (406fbc <Set_dataMotors+0x298>)
  406df8:	4798      	blx	r3
  

  //--- 3  depotMotors ---
  PrintFlashString(str_CapMotors_4_Menu,  NO_NEW_LINE);
  406dfa:	2100      	movs	r1, #0
  406dfc:	4871      	ldr	r0, [pc, #452]	; (406fc4 <Set_dataMotors+0x2a0>)
  406dfe:	4b66      	ldr	r3, [pc, #408]	; (406f98 <Set_dataMotors+0x274>)
  406e00:	4798      	blx	r3
  nb = wait_response_by_terminal();
  406e02:	4b6a      	ldr	r3, [pc, #424]	; (406fac <Set_dataMotors+0x288>)
  406e04:	4798      	blx	r3
  406e06:	b2c0      	uxtb	r0, r0
  
  if((nb>=1) && (buff_RS232_rx[0] != 0x0A))    
  406e08:	2800      	cmp	r0, #0
  406e0a:	d03e      	beq.n	406e8a <Set_dataMotors+0x166>
  406e0c:	4b68      	ldr	r3, [pc, #416]	; (406fb0 <Set_dataMotors+0x28c>)
  406e0e:	781a      	ldrb	r2, [r3, #0]
  406e10:	2a0a      	cmp	r2, #10
  406e12:	d03a      	beq.n	406e8a <Set_dataMotors+0x166>
  {
     for(i=0; i <nb; i++) {
  406e14:	b283      	uxth	r3, r0
  406e16:	2b00      	cmp	r3, #0
  406e18:	d06e      	beq.n	406ef8 <Set_dataMotors+0x1d4>
  406e1a:	2b01      	cmp	r3, #1
  406e1c:	d91b      	bls.n	406e56 <Set_dataMotors+0x132>
  406e1e:	2b02      	cmp	r3, #2
  406e20:	d919      	bls.n	406e56 <Set_dataMotors+0x132>
  406e22:	2b03      	cmp	r3, #3
  406e24:	d917      	bls.n	406e56 <Set_dataMotors+0x132>
  406e26:	2b04      	cmp	r3, #4
  406e28:	d915      	bls.n	406e56 <Set_dataMotors+0x132>
       if((buff_RS232_rx[i] < '0') && (buff_RS232_rx[i] > '9') || (i>3)) {
          PrintFlashString(str_error4_4_Menu,  NEW_LINE);  // ...Error, the value of capacity is not correct!
  406e2a:	216e      	movs	r1, #110	; 0x6e
  406e2c:	4866      	ldr	r0, [pc, #408]	; (406fc8 <Set_dataMotors+0x2a4>)
  406e2e:	4b5a      	ldr	r3, [pc, #360]	; (406f98 <Set_dataMotors+0x274>)
  406e30:	4798      	blx	r3
    eep_write_byte(i,  buff_data_motors[7]);
    Shadow_eep[i] = buff_data_motors[7];
    
    Serial_println1("  Done"); 
  }  
}  
  406e32:	b005      	add	sp, #20
  406e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Byte nb, buff_data_motors[12], val, wr_eep = 0;
  406e38:	2400      	movs	r4, #0
  406e3a:	e7a5      	b.n	406d88 <Set_dataMotors+0x64>
         Serial_print(val, DEC);
  406e3c:	210a      	movs	r1, #10
  406e3e:	4b5d      	ldr	r3, [pc, #372]	; (406fb4 <Set_dataMotors+0x290>)
  406e40:	4798      	blx	r3
         PrintFlashString(str_error1_4_Menu,  NEW_LINE);  // ...Error, the number of pulses/revolution varies from 1 to 10!
  406e42:	216e      	movs	r1, #110	; 0x6e
  406e44:	4861      	ldr	r0, [pc, #388]	; (406fcc <Set_dataMotors+0x2a8>)
  406e46:	4b54      	ldr	r3, [pc, #336]	; (406f98 <Set_dataMotors+0x274>)
  406e48:	4798      	blx	r3
         return;
  406e4a:	e7f2      	b.n	406e32 <Set_dataMotors+0x10e>
       PrintFlashString(str_error1_4_Menu,  NEW_LINE);
  406e4c:	216e      	movs	r1, #110	; 0x6e
  406e4e:	485f      	ldr	r0, [pc, #380]	; (406fcc <Set_dataMotors+0x2a8>)
  406e50:	4b51      	ldr	r3, [pc, #324]	; (406f98 <Set_dataMotors+0x274>)
  406e52:	4798      	blx	r3
       return;
  406e54:	e7ed      	b.n	406e32 <Set_dataMotors+0x10e>
     if(nb == 3) { // 2 cifre 
  406e56:	2803      	cmp	r0, #3
  406e58:	d035      	beq.n	406ec6 <Set_dataMotors+0x1a2>
     }else if(nb == 4) { // 3 cifre
  406e5a:	2804      	cmp	r0, #4
  406e5c:	d14c      	bne.n	406ef8 <Set_dataMotors+0x1d4>
        val_16 += (buff_RS232_rx[2] -'0');
  406e5e:	4954      	ldr	r1, [pc, #336]	; (406fb0 <Set_dataMotors+0x28c>)
  406e60:	788b      	ldrb	r3, [r1, #2]
  406e62:	3b30      	subs	r3, #48	; 0x30
        val_16 = (buff_RS232_rx[0] -'0') * 100;
  406e64:	3a30      	subs	r2, #48	; 0x30
  406e66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  406e6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  406e6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        val_16 += (buff_RS232_rx[1] -'0') * 10;
  406e72:	784b      	ldrb	r3, [r1, #1]
  406e74:	3b30      	subs	r3, #48	; 0x30
  406e76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        val_16 += (buff_RS232_rx[2] -'0');
  406e7a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  406e7e:	b29b      	uxth	r3, r3
        if(val_16 > 100) {
  406e80:	2b64      	cmp	r3, #100	; 0x64
  406e82:	d834      	bhi.n	406eee <Set_dataMotors+0x1ca>
        buff_data_motors[4] = (Byte)val_16;
  406e84:	f88d 3008 	strb.w	r3, [sp, #8]
        wr_eep = 1;
  406e88:	2401      	movs	r4, #1
  Serial_print(buff_data_motors[4], DEC); // se solo il carattere '\n' riporta il valore in eeprom 
  406e8a:	210a      	movs	r1, #10
  406e8c:	f89d 0008 	ldrb.w	r0, [sp, #8]
  406e90:	4b48      	ldr	r3, [pc, #288]	; (406fb4 <Set_dataMotors+0x290>)
  406e92:	4798      	blx	r3
  Serial_println1("%"); 
  406e94:	484e      	ldr	r0, [pc, #312]	; (406fd0 <Set_dataMotors+0x2ac>)
  406e96:	4b42      	ldr	r3, [pc, #264]	; (406fa0 <Set_dataMotors+0x27c>)
  406e98:	4798      	blx	r3
  PrintFlashString(str_Bypass_4_Menu,    NO_NEW_LINE);
  406e9a:	2100      	movs	r1, #0
  406e9c:	484d      	ldr	r0, [pc, #308]	; (406fd4 <Set_dataMotors+0x2b0>)
  406e9e:	4b3e      	ldr	r3, [pc, #248]	; (406f98 <Set_dataMotors+0x274>)
  406ea0:	4798      	blx	r3
  nb = wait_response_by_terminal();
  406ea2:	4b42      	ldr	r3, [pc, #264]	; (406fac <Set_dataMotors+0x288>)
  406ea4:	4798      	blx	r3
  if ((nb>=1) && (buff_RS232_rx[0] != 0x0A))  
  406ea6:	b2c0      	uxtb	r0, r0
  406ea8:	2800      	cmp	r0, #0
  406eaa:	d068      	beq.n	406f7e <Set_dataMotors+0x25a>
  406eac:	4b40      	ldr	r3, [pc, #256]	; (406fb0 <Set_dataMotors+0x28c>)
  406eae:	781b      	ldrb	r3, [r3, #0]
  406eb0:	2b0a      	cmp	r3, #10
  406eb2:	d064      	beq.n	406f7e <Set_dataMotors+0x25a>
      if((buff_RS232_rx[0] != '0') && (buff_RS232_rx[0] != '1'))
  406eb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406eb8:	b2d2      	uxtb	r2, r2
  406eba:	2a01      	cmp	r2, #1
  406ebc:	d920      	bls.n	406f00 <Set_dataMotors+0x1dc>
         Serial_println1("  Error the data set is not Correct!");
  406ebe:	4846      	ldr	r0, [pc, #280]	; (406fd8 <Set_dataMotors+0x2b4>)
  406ec0:	4b37      	ldr	r3, [pc, #220]	; (406fa0 <Set_dataMotors+0x27c>)
  406ec2:	4798      	blx	r3
         return;
  406ec4:	e7b5      	b.n	406e32 <Set_dataMotors+0x10e>
        val = (buff_RS232_rx[0] -'0') *10;
  406ec6:	3a30      	subs	r2, #48	; 0x30
  406ec8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        val += (buff_RS232_rx[1] -'0');       
  406ecc:	4b38      	ldr	r3, [pc, #224]	; (406fb0 <Set_dataMotors+0x28c>)
  406ece:	785b      	ldrb	r3, [r3, #1]
  406ed0:	3b30      	subs	r3, #48	; 0x30
  406ed2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  406ed6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
        if(val < 40) {
  406eda:	2b27      	cmp	r3, #39	; 0x27
  406edc:	d903      	bls.n	406ee6 <Set_dataMotors+0x1c2>
        buff_data_motors[4] = val;
  406ede:	f88d 3008 	strb.w	r3, [sp, #8]
        wr_eep = 1;
  406ee2:	2401      	movs	r4, #1
  406ee4:	e7d1      	b.n	406e8a <Set_dataMotors+0x166>
          Serial_println1(" Error, the minimum value is 40!"); 
  406ee6:	483d      	ldr	r0, [pc, #244]	; (406fdc <Set_dataMotors+0x2b8>)
  406ee8:	4b2d      	ldr	r3, [pc, #180]	; (406fa0 <Set_dataMotors+0x27c>)
  406eea:	4798      	blx	r3
          return; 
  406eec:	e7a1      	b.n	406e32 <Set_dataMotors+0x10e>
          Serial_println1(" Warning, the maximum value is 100!"); 
  406eee:	483c      	ldr	r0, [pc, #240]	; (406fe0 <Set_dataMotors+0x2bc>)
  406ef0:	4b2b      	ldr	r3, [pc, #172]	; (406fa0 <Set_dataMotors+0x27c>)
  406ef2:	4798      	blx	r3
          val_16 = 100;
  406ef4:	2364      	movs	r3, #100	; 0x64
  406ef6:	e7c5      	b.n	406e84 <Set_dataMotors+0x160>
        Serial_println1("  Error, the value is not correct (max=100, min=40)!");         
  406ef8:	483a      	ldr	r0, [pc, #232]	; (406fe4 <Set_dataMotors+0x2c0>)
  406efa:	4b29      	ldr	r3, [pc, #164]	; (406fa0 <Set_dataMotors+0x27c>)
  406efc:	4798      	blx	r3
        return; 
  406efe:	e798      	b.n	406e32 <Set_dataMotors+0x10e>
      if (buff_RS232_rx[0] == '0') 
  406f00:	2b30      	cmp	r3, #48	; 0x30
  406f02:	d037      	beq.n	406f74 <Set_dataMotors+0x250>
        buff_data_motors[7] = 0xFF;  // AntiOrario
  406f04:	f04f 08ff 	mov.w	r8, #255	; 0xff
  406f08:	f88d 800b 	strb.w	r8, [sp, #11]
      wr_eep = 1;  
  406f0c:	2401      	movs	r4, #1
    Serial_println1("Antiorario"); // se solo il carattere '\n' riporta il valore in eeprom 
  406f0e:	4836      	ldr	r0, [pc, #216]	; (406fe8 <Set_dataMotors+0x2c4>)
  406f10:	4b23      	ldr	r3, [pc, #140]	; (406fa0 <Set_dataMotors+0x27c>)
  406f12:	4798      	blx	r3
  if(eep_read_byte(ADDR_EEP(Type_func)))  // solo se l'unità è extra
  406f14:	2001      	movs	r0, #1
  406f16:	4b23      	ldr	r3, [pc, #140]	; (406fa4 <Set_dataMotors+0x280>)
  406f18:	4798      	blx	r3
  406f1a:	2800      	cmp	r0, #0
  406f1c:	d17a      	bne.n	407014 <Set_dataMotors+0x2f0>
  if(wr_eep) {
  406f1e:	2c00      	cmp	r4, #0
  406f20:	d087      	beq.n	406e32 <Set_dataMotors+0x10e>
    Serial_println1(" ");
  406f22:	481e      	ldr	r0, [pc, #120]	; (406f9c <Set_dataMotors+0x278>)
  406f24:	4b1e      	ldr	r3, [pc, #120]	; (406fa0 <Set_dataMotors+0x27c>)
  406f26:	4798      	blx	r3
    Serial_print1("Saving new values "); 
  406f28:	4830      	ldr	r0, [pc, #192]	; (406fec <Set_dataMotors+0x2c8>)
  406f2a:	4b31      	ldr	r3, [pc, #196]	; (406ff0 <Set_dataMotors+0x2cc>)
  406f2c:	4798      	blx	r3
  406f2e:	af01      	add	r7, sp, #4
  406f30:	4e30      	ldr	r6, [pc, #192]	; (406ff4 <Set_dataMotors+0x2d0>)
  406f32:	243b      	movs	r4, #59	; 0x3b
        eep_write_byte(i,  buff_data_motors[i-addr1]);
  406f34:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 406ffc <Set_dataMotors+0x2d8>
        delay_ms (150);
  406f38:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 40700c <Set_dataMotors+0x2e8>
  406f3c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 407010 <Set_dataMotors+0x2ec>
        eep_write_byte(i,  buff_data_motors[i-addr1]);
  406f40:	f817 5b01 	ldrb.w	r5, [r7], #1
  406f44:	4629      	mov	r1, r5
  406f46:	4620      	mov	r0, r4
  406f48:	47d8      	blx	fp
        Shadow_eep[i] = buff_data_motors[i-addr1];
  406f4a:	f806 5b01 	strb.w	r5, [r6], #1
        delay_ms (150);
  406f4e:	4650      	mov	r0, sl
  406f50:	47c8      	blx	r9
        Serial_print1("."); 
  406f52:	4829      	ldr	r0, [pc, #164]	; (406ff8 <Set_dataMotors+0x2d4>)
  406f54:	4b26      	ldr	r3, [pc, #152]	; (406ff0 <Set_dataMotors+0x2cc>)
  406f56:	4798      	blx	r3
  406f58:	3401      	adds	r4, #1
    for(i=addr1; i <= addr2; i++) {
  406f5a:	2c40      	cmp	r4, #64	; 0x40
  406f5c:	d1f0      	bne.n	406f40 <Set_dataMotors+0x21c>
    eep_write_byte(i,  buff_data_motors[7]);
  406f5e:	4641      	mov	r1, r8
  406f60:	2042      	movs	r0, #66	; 0x42
  406f62:	4b26      	ldr	r3, [pc, #152]	; (406ffc <Set_dataMotors+0x2d8>)
  406f64:	4798      	blx	r3
    Shadow_eep[i] = buff_data_motors[7];
  406f66:	4b26      	ldr	r3, [pc, #152]	; (407000 <Set_dataMotors+0x2dc>)
  406f68:	f883 8042 	strb.w	r8, [r3, #66]	; 0x42
    Serial_println1("  Done"); 
  406f6c:	4825      	ldr	r0, [pc, #148]	; (407004 <Set_dataMotors+0x2e0>)
  406f6e:	4b0c      	ldr	r3, [pc, #48]	; (406fa0 <Set_dataMotors+0x27c>)
  406f70:	4798      	blx	r3
  406f72:	e75e      	b.n	406e32 <Set_dataMotors+0x10e>
        buff_data_motors[7] = 0;     // Orario
  406f74:	2300      	movs	r3, #0
  406f76:	f88d 300b 	strb.w	r3, [sp, #11]
      wr_eep = 1;  
  406f7a:	2401      	movs	r4, #1
  406f7c:	e004      	b.n	406f88 <Set_dataMotors+0x264>
  if(buff_data_motors[7])
  406f7e:	f89d 800b 	ldrb.w	r8, [sp, #11]
  406f82:	f1b8 0f00 	cmp.w	r8, #0
  406f86:	d1c2      	bne.n	406f0e <Set_dataMotors+0x1ea>
    Serial_println1("Orario"); // se solo il carattere '\n' riporta il valore in eeprom  
  406f88:	481f      	ldr	r0, [pc, #124]	; (407008 <Set_dataMotors+0x2e4>)
  406f8a:	4b05      	ldr	r3, [pc, #20]	; (406fa0 <Set_dataMotors+0x27c>)
  406f8c:	4798      	blx	r3
  406f8e:	f04f 0800 	mov.w	r8, #0
  406f92:	e7bf      	b.n	406f14 <Set_dataMotors+0x1f0>
  406f94:	00412c98 	.word	0x00412c98
  406f98:	0040669d 	.word	0x0040669d
  406f9c:	004126b8 	.word	0x004126b8
  406fa0:	00406051 	.word	0x00406051
  406fa4:	0040bfd1 	.word	0x0040bfd1
  406fa8:	00412b78 	.word	0x00412b78
  406fac:	00406619 	.word	0x00406619
  406fb0:	20001148 	.word	0x20001148
  406fb4:	00405f65 	.word	0x00405f65
  406fb8:	0041257c 	.word	0x0041257c
  406fbc:	0040609d 	.word	0x0040609d
  406fc0:	00412bcc 	.word	0x00412bcc
  406fc4:	00412a44 	.word	0x00412a44
  406fc8:	00413010 	.word	0x00413010
  406fcc:	00412f2c 	.word	0x00412f2c
  406fd0:	0041262c 	.word	0x0041262c
  406fd4:	00412a00 	.word	0x00412a00
  406fd8:	00412630 	.word	0x00412630
  406fdc:	004125ac 	.word	0x004125ac
  406fe0:	004125d0 	.word	0x004125d0
  406fe4:	004125f4 	.word	0x004125f4
  406fe8:	00412658 	.word	0x00412658
  406fec:	0041267c 	.word	0x0041267c
  406ff0:	00405f35 	.word	0x00405f35
  406ff4:	200011cf 	.word	0x200011cf
  406ff8:	00413788 	.word	0x00413788
  406ffc:	0040c005 	.word	0x0040c005
  407000:	20001194 	.word	0x20001194
  407004:	004126e8 	.word	0x004126e8
  407008:	00412664 	.word	0x00412664
  40700c:	00105945 	.word	0x00105945
  407010:	20000001 	.word	0x20000001
      PrintFlashString(str_Enab_CAP_4_Menu,    NO_NEW_LINE);
  407014:	2100      	movs	r1, #0
  407016:	4830      	ldr	r0, [pc, #192]	; (4070d8 <Set_dataMotors+0x3b4>)
  407018:	4b30      	ldr	r3, [pc, #192]	; (4070dc <Set_dataMotors+0x3b8>)
  40701a:	4798      	blx	r3
      nb = wait_response_by_terminal();
  40701c:	4b30      	ldr	r3, [pc, #192]	; (4070e0 <Set_dataMotors+0x3bc>)
  40701e:	4798      	blx	r3
  407020:	4606      	mov	r6, r0
      buff_data_motors[8] = eep_read_byte(ADDR_EEP(msk_Enab_Fuction));   //  2 byte:  (LOW) bit[7]:CAF  | bit[6]:CAP  | bit[5]:CSF 
  407022:	2030      	movs	r0, #48	; 0x30
  407024:	4b2f      	ldr	r3, [pc, #188]	; (4070e4 <Set_dataMotors+0x3c0>)
  407026:	4798      	blx	r3
  407028:	4605      	mov	r5, r0
  40702a:	f88d 000c 	strb.w	r0, [sp, #12]
      buff_data_motors[9] = buff_data_motors[8];
  40702e:	f88d 000d 	strb.w	r0, [sp, #13]
      if ((nb>=1) && (buff_RS232_rx[0] != 0x0A))  
  407032:	f016 0fff 	tst.w	r6, #255	; 0xff
  407036:	d012      	beq.n	40705e <Set_dataMotors+0x33a>
  407038:	4b2b      	ldr	r3, [pc, #172]	; (4070e8 <Set_dataMotors+0x3c4>)
  40703a:	781b      	ldrb	r3, [r3, #0]
  40703c:	2b0a      	cmp	r3, #10
  40703e:	d00e      	beq.n	40705e <Set_dataMotors+0x33a>
          if((buff_RS232_rx[0] == 'y') || (buff_RS232_rx[0] == 'Y'))
  407040:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  407044:	2b59      	cmp	r3, #89	; 0x59
  407046:	d006      	beq.n	407056 <Set_dataMotors+0x332>
          else if ((buff_RS232_rx[0] == 'n') || (buff_RS232_rx[0] == 'N'))
  407048:	2b4e      	cmp	r3, #78	; 0x4e
  40704a:	d127      	bne.n	40709c <Set_dataMotors+0x378>
              buff_data_motors[8] &= ~(1 << ENAB_CAP);
  40704c:	f020 0340 	bic.w	r3, r0, #64	; 0x40
  407050:	f88d 300c 	strb.w	r3, [sp, #12]
  407054:	e003      	b.n	40705e <Set_dataMotors+0x33a>
              buff_data_motors[8] |= (1 << ENAB_CAP);
  407056:	f040 0340 	orr.w	r3, r0, #64	; 0x40
  40705a:	f88d 300c 	strb.w	r3, [sp, #12]
      if(buff_data_motors[8] & (1 << ENAB_CAP))
  40705e:	f89d 600c 	ldrb.w	r6, [sp, #12]
  407062:	f016 0f40 	tst.w	r6, #64	; 0x40
        Serial_println1("Enable"); // se solo il carattere '\n' riporta il valore in eeprom 
  407066:	bf14      	ite	ne
  407068:	4820      	ldrne	r0, [pc, #128]	; (4070ec <Set_dataMotors+0x3c8>)
        Serial_println1("Disable"); // se solo il carattere '\n' riporta il valore in eeprom  
  40706a:	4821      	ldreq	r0, [pc, #132]	; (4070f0 <Set_dataMotors+0x3cc>)
  40706c:	4b21      	ldr	r3, [pc, #132]	; (4070f4 <Set_dataMotors+0x3d0>)
  40706e:	4798      	blx	r3
      PrintFlashString(str_Enab_CAF_4_Menu,    NO_NEW_LINE);
  407070:	2100      	movs	r1, #0
  407072:	4821      	ldr	r0, [pc, #132]	; (4070f8 <Set_dataMotors+0x3d4>)
  407074:	4b19      	ldr	r3, [pc, #100]	; (4070dc <Set_dataMotors+0x3b8>)
  407076:	4798      	blx	r3
      nb = wait_response_by_terminal();
  407078:	4b19      	ldr	r3, [pc, #100]	; (4070e0 <Set_dataMotors+0x3bc>)
  40707a:	4798      	blx	r3
      if ((nb>=1) && (buff_RS232_rx[0] != 0x0A))  
  40707c:	b2c0      	uxtb	r0, r0
  40707e:	b1a8      	cbz	r0, 4070ac <Set_dataMotors+0x388>
  407080:	4b19      	ldr	r3, [pc, #100]	; (4070e8 <Set_dataMotors+0x3c4>)
  407082:	781b      	ldrb	r3, [r3, #0]
  407084:	2b0a      	cmp	r3, #10
  407086:	d011      	beq.n	4070ac <Set_dataMotors+0x388>
          if((buff_RS232_rx[0] == 'y') || (buff_RS232_rx[0] == 'Y'))
  407088:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40708c:	2b59      	cmp	r3, #89	; 0x59
  40708e:	d009      	beq.n	4070a4 <Set_dataMotors+0x380>
          else if ((buff_RS232_rx[0] == 'n') || (buff_RS232_rx[0] == 'N'))
  407090:	2b4e      	cmp	r3, #78	; 0x4e
  407092:	d01c      	beq.n	4070ce <Set_dataMotors+0x3aa>
             Serial_println1("  Error the data set is not Correct!");
  407094:	4819      	ldr	r0, [pc, #100]	; (4070fc <Set_dataMotors+0x3d8>)
  407096:	4b17      	ldr	r3, [pc, #92]	; (4070f4 <Set_dataMotors+0x3d0>)
  407098:	4798      	blx	r3
             return; 
  40709a:	e6ca      	b.n	406e32 <Set_dataMotors+0x10e>
             Serial_println1("  Error the data set is not Correct!");
  40709c:	4817      	ldr	r0, [pc, #92]	; (4070fc <Set_dataMotors+0x3d8>)
  40709e:	4b15      	ldr	r3, [pc, #84]	; (4070f4 <Set_dataMotors+0x3d0>)
  4070a0:	4798      	blx	r3
             return; 
  4070a2:	e6c6      	b.n	406e32 <Set_dataMotors+0x10e>
              buff_data_motors[8] |= (1 << ENAB_CAF);
  4070a4:	f066 067f 	orn	r6, r6, #127	; 0x7f
  4070a8:	f88d 600c 	strb.w	r6, [sp, #12]
      if(buff_data_motors[8] & (1 << ENAB_CAF))
  4070ac:	f89d 600c 	ldrb.w	r6, [sp, #12]
  4070b0:	f016 0f80 	tst.w	r6, #128	; 0x80
        Serial_println1("Enable"); // se solo il carattere '\n' riporta il valore in eeprom 
  4070b4:	bf14      	ite	ne
  4070b6:	480d      	ldrne	r0, [pc, #52]	; (4070ec <Set_dataMotors+0x3c8>)
        Serial_println1("Disable"); // se solo il carattere '\n' riporta il valore in eeprom 
  4070b8:	480d      	ldreq	r0, [pc, #52]	; (4070f0 <Set_dataMotors+0x3cc>)
  4070ba:	4b0e      	ldr	r3, [pc, #56]	; (4070f4 <Set_dataMotors+0x3d0>)
  4070bc:	4798      	blx	r3
      if(buff_data_motors[8] != buff_data_motors[9])
  4070be:	42b5      	cmp	r5, r6
  4070c0:	f43f af2d 	beq.w	406f1e <Set_dataMotors+0x1fa>
        eep_write_byte(ADDR_EEP(msk_Enab_Fuction),  buff_data_motors[8]);
  4070c4:	4631      	mov	r1, r6
  4070c6:	2030      	movs	r0, #48	; 0x30
  4070c8:	4b0d      	ldr	r3, [pc, #52]	; (407100 <Set_dataMotors+0x3dc>)
  4070ca:	4798      	blx	r3
  4070cc:	e727      	b.n	406f1e <Set_dataMotors+0x1fa>
              buff_data_motors[8] &= ~(1 << ENAB_CAF);
  4070ce:	f006 067f 	and.w	r6, r6, #127	; 0x7f
  4070d2:	f88d 600c 	strb.w	r6, [sp, #12]
  4070d6:	e7e9      	b.n	4070ac <Set_dataMotors+0x388>
  4070d8:	00412ad8 	.word	0x00412ad8
  4070dc:	0040669d 	.word	0x0040669d
  4070e0:	00406619 	.word	0x00406619
  4070e4:	0040bfd1 	.word	0x0040bfd1
  4070e8:	20001148 	.word	0x20001148
  4070ec:	0041266c 	.word	0x0041266c
  4070f0:	00412674 	.word	0x00412674
  4070f4:	00406051 	.word	0x00406051
  4070f8:	00412ab4 	.word	0x00412ab4
  4070fc:	00412630 	.word	0x00412630
  407100:	0040c005 	.word	0x0040c005

00407104 <SettingNTC>:
//    Example 2= 1203 -> TFresh=1, TReturn=2, TSupply=0, TExuast=3
//
//   Digit new Position NTC (TFresh,...,TExaust):
//------------------------------------------------------
void SettingNTC()
{
  407104:	b570      	push	{r4, r5, r6, lr}
  Byte nb, val, i, n;
  unsigned short addr;
  
  PrintFlashString(str_Title_5_Menu, NEW_LINE);
  407106:	216e      	movs	r1, #110	; 0x6e
  407108:	4847      	ldr	r0, [pc, #284]	; (407228 <SettingNTC+0x124>)
  40710a:	4d48      	ldr	r5, [pc, #288]	; (40722c <SettingNTC+0x128>)
  40710c:	47a8      	blx	r5
  Serial_println1(" ");  
  40710e:	4848      	ldr	r0, [pc, #288]	; (407230 <SettingNTC+0x12c>)
  407110:	4b48      	ldr	r3, [pc, #288]	; (407234 <SettingNTC+0x130>)
  407112:	4798      	blx	r3
    
  PrintFlashString(str_enter_NTC_5_Menu, NO_NEW_LINE);
  407114:	2100      	movs	r1, #0
  407116:	4848      	ldr	r0, [pc, #288]	; (407238 <SettingNTC+0x134>)
  407118:	47a8      	blx	r5
  addr = ADDR_EEP(numNTC);  
  val = eep_read_byte(addr);
  40711a:	2040      	movs	r0, #64	; 0x40
  40711c:	4b47      	ldr	r3, [pc, #284]	; (40723c <SettingNTC+0x138>)
  40711e:	4798      	blx	r3
  407120:	4604      	mov	r4, r0
  Serial_println(val,  DEC); 
  407122:	210a      	movs	r1, #10
  407124:	4b46      	ldr	r3, [pc, #280]	; (407240 <SettingNTC+0x13c>)
  407126:	4798      	blx	r3
  
  PrintFlashString(str_new_NTC_5_Menu, NO_NEW_LINE);
  407128:	2100      	movs	r1, #0
  40712a:	4846      	ldr	r0, [pc, #280]	; (407244 <SettingNTC+0x140>)
  40712c:	47a8      	blx	r5
  
  nb = wait_response_by_terminal(); 
  40712e:	4b46      	ldr	r3, [pc, #280]	; (407248 <SettingNTC+0x144>)
  407130:	4798      	blx	r3
  407132:	b2c0      	uxtb	r0, r0
  
  if(nb > 1) 
  407134:	2801      	cmp	r0, #1
  407136:	d90c      	bls.n	407152 <SettingNTC+0x4e>
  {  
    for(i=0, n=0; i <nb; i++) {
  407138:	2800      	cmp	r0, #0
  40713a:	d048      	beq.n	4071ce <SettingNTC+0xca>
      if(buff_RS232_rx[i] == ' ') 
  40713c:	4b43      	ldr	r3, [pc, #268]	; (40724c <SettingNTC+0x148>)
  40713e:	781b      	ldrb	r3, [r3, #0]
  407140:	2b20      	cmp	r3, #32
  407142:	d037      	beq.n	4071b4 <SettingNTC+0xb0>
        val = buff_RS232_rx[i];
        break;
      }      
    }  
    
    val -= '0';
  407144:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  407148:	b2e4      	uxtb	r4, r4
    
    if ((val < 2) || (val > 4)) { 
  40714a:	3b32      	subs	r3, #50	; 0x32
  40714c:	b2db      	uxtb	r3, r3
  40714e:	2b02      	cmp	r3, #2
  407150:	d83f      	bhi.n	4071d2 <SettingNTC+0xce>
       PrintFlashString(str_error1_5_Menu, NEW_LINE); // // Error, the entered data is not a number comprised between 2 and 4"
       return; 
    }
  }
  Serial_println(val,  DEC);
  407152:	210a      	movs	r1, #10
  407154:	4620      	mov	r0, r4
  407156:	4b3a      	ldr	r3, [pc, #232]	; (407240 <SettingNTC+0x13c>)
  407158:	4798      	blx	r3
  
  eep_write_byte(addr,  val);
  40715a:	4621      	mov	r1, r4
  40715c:	2040      	movs	r0, #64	; 0x40
  40715e:	4b3c      	ldr	r3, [pc, #240]	; (407250 <SettingNTC+0x14c>)
  407160:	4798      	blx	r3
  Shadow_eep[addr] = val;
  407162:	4b3c      	ldr	r3, [pc, #240]	; (407254 <SettingNTC+0x150>)
  407164:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  
  Serial_println1(" ");
  407168:	4e31      	ldr	r6, [pc, #196]	; (407230 <SettingNTC+0x12c>)
  40716a:	4630      	mov	r0, r6
  40716c:	4d31      	ldr	r5, [pc, #196]	; (407234 <SettingNTC+0x130>)
  40716e:	47a8      	blx	r5
  PrintFlashString(str_Info_cfg_NTC_5_Menu, NEW_LINE);
  407170:	216e      	movs	r1, #110	; 0x6e
  407172:	4839      	ldr	r0, [pc, #228]	; (407258 <SettingNTC+0x154>)
  407174:	4c2d      	ldr	r4, [pc, #180]	; (40722c <SettingNTC+0x128>)
  407176:	47a0      	blx	r4
  PrintFlashString(str_ex_1_cfg_NTC_5_Menu, NEW_LINE);
  407178:	216e      	movs	r1, #110	; 0x6e
  40717a:	4838      	ldr	r0, [pc, #224]	; (40725c <SettingNTC+0x158>)
  40717c:	47a0      	blx	r4
  PrintFlashString(str_ex_2_cfg_NTC_5_Menu, NEW_LINE);
  40717e:	216e      	movs	r1, #110	; 0x6e
  407180:	4837      	ldr	r0, [pc, #220]	; (407260 <SettingNTC+0x15c>)
  407182:	47a0      	blx	r4
  Serial_println1(" "); 
  407184:	4630      	mov	r0, r6
  407186:	47a8      	blx	r5
  PrintFlashString(str_set_cfg_NTC_5_Menu, NO_NEW_LINE);
  407188:	2100      	movs	r1, #0
  40718a:	4836      	ldr	r0, [pc, #216]	; (407264 <SettingNTC+0x160>)
  40718c:	47a0      	blx	r4
  
  nb   = wait_response_by_terminal(); 
  40718e:	4b2e      	ldr	r3, [pc, #184]	; (407248 <SettingNTC+0x144>)
  407190:	4798      	blx	r3
  407192:	b2c4      	uxtb	r4, r0
  
  addr = ADDR_EEP(Posiz_NTC);  
  val   = eep_read_byte(addr);
  407194:	2041      	movs	r0, #65	; 0x41
  407196:	4b29      	ldr	r3, [pc, #164]	; (40723c <SettingNTC+0x138>)
  407198:	4798      	blx	r3
  40719a:	4605      	mov	r5, r0
  
  if(nb > 1) 
  40719c:	2c01      	cmp	r4, #1
  40719e:	d934      	bls.n	40720a <SettingNTC+0x106>
  {  
      for(i=0, n=0, val=0; i <nb; i++) 
  4071a0:	2c00      	cmp	r4, #0
  4071a2:	d03d      	beq.n	407220 <SettingNTC+0x11c>
  4071a4:	4a30      	ldr	r2, [pc, #192]	; (407268 <SettingNTC+0x164>)
  4071a6:	3c01      	subs	r4, #1
  4071a8:	1c53      	adds	r3, r2, #1
  4071aa:	fa53 f484 	uxtab	r4, r3, r4
  4071ae:	2100      	movs	r1, #0
  4071b0:	460d      	mov	r5, r1
  4071b2:	e015      	b.n	4071e0 <SettingNTC+0xdc>
  4071b4:	4925      	ldr	r1, [pc, #148]	; (40724c <SettingNTC+0x148>)
  4071b6:	1e83      	subs	r3, r0, #2
  4071b8:	b2db      	uxtb	r3, r3
  4071ba:	3301      	adds	r3, #1
  4071bc:	185a      	adds	r2, r3, r1
      if(buff_RS232_rx[i] == ' ') 
  4071be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4071c2:	2b20      	cmp	r3, #32
  4071c4:	d1be      	bne.n	407144 <SettingNTC+0x40>
    for(i=0, n=0; i <nb; i++) {
  4071c6:	4291      	cmp	r1, r2
  4071c8:	d1f9      	bne.n	4071be <SettingNTC+0xba>
  val = eep_read_byte(addr);
  4071ca:	4623      	mov	r3, r4
  4071cc:	e7ba      	b.n	407144 <SettingNTC+0x40>
  4071ce:	4623      	mov	r3, r4
  4071d0:	e7b8      	b.n	407144 <SettingNTC+0x40>
       PrintFlashString(str_error1_5_Menu, NEW_LINE); // // Error, the entered data is not a number comprised between 2 and 4"
  4071d2:	216e      	movs	r1, #110	; 0x6e
  4071d4:	4825      	ldr	r0, [pc, #148]	; (40726c <SettingNTC+0x168>)
  4071d6:	4b15      	ldr	r3, [pc, #84]	; (40722c <SettingNTC+0x128>)
  4071d8:	4798      	blx	r3
       return; 
  4071da:	bd70      	pop	{r4, r5, r6, pc}
      for(i=0, n=0, val=0; i <nb; i++) 
  4071dc:	42a2      	cmp	r2, r4
  4071de:	d012      	beq.n	407206 <SettingNTC+0x102>
      {
          if((buff_RS232_rx[i] == ' ') || (buff_RS232_rx[i] == '.') || (buff_RS232_rx[i] == ','))
  4071e0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4071e4:	2b20      	cmp	r3, #32
  4071e6:	d0f9      	beq.n	4071dc <SettingNTC+0xd8>
  4071e8:	f003 00fd 	and.w	r0, r3, #253	; 0xfd
  4071ec:	282c      	cmp	r0, #44	; 0x2c
  4071ee:	d0f5      	beq.n	4071dc <SettingNTC+0xd8>
          if((buff_RS232_rx[i] < '0') && (buff_RS232_rx[i] > '3'))  {
             Serial_println1("  Error, the position of NTC is not valid (min= 0, max=3)!");
             return;
          }else {
             
             val |= (buff_RS232_rx[i] - '0') << (n *2);
  4071f0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4071f4:	004b      	lsls	r3, r1, #1
  4071f6:	4098      	lsls	r0, r3
  4071f8:	4328      	orrs	r0, r5
  4071fa:	b2c5      	uxtb	r5, r0
             n++;
  4071fc:	3101      	adds	r1, #1
  4071fe:	b2c9      	uxtb	r1, r1
          }      
          
          if(n >= 4)
  407200:	2903      	cmp	r1, #3
  407202:	d9eb      	bls.n	4071dc <SettingNTC+0xd8>
  407204:	e001      	b.n	40720a <SettingNTC+0x106>
            break; 
      }  
      
      if(n < 4) {
  407206:	2903      	cmp	r1, #3
  407208:	d90a      	bls.n	407220 <SettingNTC+0x11c>
         Serial_println1(" Error, configuration is incomplete!");
         return;
      }  
  }
  
  PrintPositionNTC(val);   
  40720a:	4628      	mov	r0, r5
  40720c:	4b18      	ldr	r3, [pc, #96]	; (407270 <SettingNTC+0x16c>)
  40720e:	4798      	blx	r3
  
  eep_write_byte(addr,  val);
  407210:	4629      	mov	r1, r5
  407212:	2041      	movs	r0, #65	; 0x41
  407214:	4b0e      	ldr	r3, [pc, #56]	; (407250 <SettingNTC+0x14c>)
  407216:	4798      	blx	r3
  Shadow_eep[addr] = val;
  407218:	4b0e      	ldr	r3, [pc, #56]	; (407254 <SettingNTC+0x150>)
  40721a:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
  40721e:	bd70      	pop	{r4, r5, r6, pc}
         Serial_println1(" Error, configuration is incomplete!");
  407220:	4814      	ldr	r0, [pc, #80]	; (407274 <SettingNTC+0x170>)
  407222:	4b04      	ldr	r3, [pc, #16]	; (407234 <SettingNTC+0x130>)
  407224:	4798      	blx	r3
         return;
  407226:	bd70      	pop	{r4, r5, r6, pc}
  407228:	00412cc0 	.word	0x00412cc0
  40722c:	0040669d 	.word	0x0040669d
  407230:	004126b8 	.word	0x004126b8
  407234:	00406051 	.word	0x00406051
  407238:	00412de8 	.word	0x00412de8
  40723c:	0040bfd1 	.word	0x0040bfd1
  407240:	0040609d 	.word	0x0040609d
  407244:	004130e8 	.word	0x004130e8
  407248:	00406619 	.word	0x00406619
  40724c:	20001148 	.word	0x20001148
  407250:	0040c005 	.word	0x0040c005
  407254:	20001194 	.word	0x20001194
  407258:	00412b20 	.word	0x00412b20
  40725c:	00413078 	.word	0x00413078
  407260:	004130b0 	.word	0x004130b0
  407264:	004131a8 	.word	0x004131a8
  407268:	20001147 	.word	0x20001147
  40726c:	00412f6c 	.word	0x00412f6c
  407270:	004068d1 	.word	0x004068d1
  407274:	00412690 	.word	0x00412690

00407278 <readWeeklyProg>:
//------------------------------------------------------
// Leggi la config. del weekly
//
//------------------------------------------------------
void readWeeklyProg()
{
  407278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40727c:	b085      	sub	sp, #20
  int range, t;
  Byte numMaxRange,  time_start, time_stop, day, temp_08, shf, StepSpeed;
  short enab_func;
  
  PrintFlashString(str_Title_8_Menu, NEW_LINE);
  40727e:	216e      	movs	r1, #110	; 0x6e
  407280:	483b      	ldr	r0, [pc, #236]	; (407370 <readWeeklyProg+0xf8>)
  407282:	4b3c      	ldr	r3, [pc, #240]	; (407374 <readWeeklyProg+0xfc>)
  407284:	4798      	blx	r3
  Serial_println1(" ");  
  407286:	483c      	ldr	r0, [pc, #240]	; (407378 <readWeeklyProg+0x100>)
  407288:	4b3c      	ldr	r3, [pc, #240]	; (40737c <readWeeklyProg+0x104>)
  40728a:	4798      	blx	r3
  
  enab_func   = read_word_eeprom(ADDR_EEP(Enab_Fuction));  
  40728c:	202e      	movs	r0, #46	; 0x2e
  40728e:	4b3c      	ldr	r3, [pc, #240]	; (407380 <readWeeklyProg+0x108>)
  407290:	4798      	blx	r3
  
  if (enab_func & (1<<ENAB_WEEKLY)) 
  407292:	f010 0f04 	tst.w	r0, #4
  407296:	d067      	beq.n	407368 <readWeeklyProg+0xf0>
     Serial_println1(" Weekly Enable:");
  407298:	483a      	ldr	r0, [pc, #232]	; (407384 <readWeeklyProg+0x10c>)
  40729a:	4b38      	ldr	r3, [pc, #224]	; (40737c <readWeeklyProg+0x104>)
  40729c:	4798      	blx	r3
{
  40729e:	2399      	movs	r3, #153	; 0x99
  4072a0:	9301      	str	r3, [sp, #4]
  4072a2:	2300      	movs	r3, #0
  4072a4:	9303      	str	r3, [sp, #12]
  else 
     Serial_println1("  Weekly NOT Enable:");   
  
  for(day= 0; day <7; day++) {
    Serial_println1(" ");
    Serial_print1("  Day ");
  4072a6:	f8df b10c 	ldr.w	fp, [pc, #268]	; 4073b4 <readWeeklyProg+0x13c>
    
    for(range=0; range <  numMaxRange; range++) {
       time_start = read_byte_eeprom(ADDR_EEP(sDayProg[day].timeON[range]));
       time_stop  = read_byte_eeprom(ADDR_EEP(sDayProg[day].timeOFF[range]));
       Serial_print1("Range(");
       Serial_print((range+1), DEC);
  4072aa:	4e37      	ldr	r6, [pc, #220]	; (407388 <readWeeklyProg+0x110>)
    Serial_println1(" ");
  4072ac:	4832      	ldr	r0, [pc, #200]	; (407378 <readWeeklyProg+0x100>)
  4072ae:	4b33      	ldr	r3, [pc, #204]	; (40737c <readWeeklyProg+0x104>)
  4072b0:	4798      	blx	r3
    Serial_print1("  Day ");
  4072b2:	4836      	ldr	r0, [pc, #216]	; (40738c <readWeeklyProg+0x114>)
  4072b4:	47d8      	blx	fp
    Serial_println(day, DEC);
  4072b6:	210a      	movs	r1, #10
  4072b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
  4072bc:	4b34      	ldr	r3, [pc, #208]	; (407390 <readWeeklyProg+0x118>)
  4072be:	4798      	blx	r3
    numMaxRange = read_byte_eeprom(ADDR_EEP(sDayProg[day].numRange));
  4072c0:	9c01      	ldr	r4, [sp, #4]
  4072c2:	4620      	mov	r0, r4
  4072c4:	4b33      	ldr	r3, [pc, #204]	; (407394 <readWeeklyProg+0x11c>)
  4072c6:	4798      	blx	r3
    for(range=0; range <  numMaxRange; range++) {
  4072c8:	9002      	str	r0, [sp, #8]
  4072ca:	2800      	cmp	r0, #0
  4072cc:	dd3f      	ble.n	40734e <readWeeklyProg+0xd6>
  4072ce:	1c65      	adds	r5, r4, #1
  4072d0:	b2ad      	uxth	r5, r5
  4072d2:	2700      	movs	r7, #0
       time_start = read_byte_eeprom(ADDR_EEP(sDayProg[day].timeON[range]));
  4072d4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 407394 <readWeeklyProg+0x11c>
  4072d8:	4628      	mov	r0, r5
  4072da:	47c0      	blx	r8
  4072dc:	4682      	mov	sl, r0
       time_stop  = read_byte_eeprom(ADDR_EEP(sDayProg[day].timeOFF[range]));
  4072de:	1d28      	adds	r0, r5, #4
  4072e0:	b280      	uxth	r0, r0
  4072e2:	47c0      	blx	r8
  4072e4:	4681      	mov	r9, r0
       Serial_print1("Range(");
  4072e6:	482c      	ldr	r0, [pc, #176]	; (407398 <readWeeklyProg+0x120>)
  4072e8:	47d8      	blx	fp
  4072ea:	b2fc      	uxtb	r4, r7
       Serial_print((range+1), DEC);
  4072ec:	1c60      	adds	r0, r4, #1
  4072ee:	210a      	movs	r1, #10
  4072f0:	b2c0      	uxtb	r0, r0
  4072f2:	47b0      	blx	r6
       
       Serial_print1(") Ton: ");
  4072f4:	4829      	ldr	r0, [pc, #164]	; (40739c <readWeeklyProg+0x124>)
  4072f6:	47d8      	blx	fp
       t = time_start / 2;       
       Serial_print(t, DEC);
  4072f8:	210a      	movs	r1, #10
  4072fa:	f3ca 0047 	ubfx	r0, sl, #1, #8
  4072fe:	47b0      	blx	r6
       if(time_start & 0x01)
  407300:	f01a 0f01 	tst.w	sl, #1
         Serial_print1(":30 ");
  407304:	bf14      	ite	ne
  407306:	4826      	ldrne	r0, [pc, #152]	; (4073a0 <readWeeklyProg+0x128>)
       else 
         Serial_print1(":00 "); 
  407308:	4826      	ldreq	r0, [pc, #152]	; (4073a4 <readWeeklyProg+0x12c>)
  40730a:	47d8      	blx	fp
       
       Serial_print1(" Toff: ");
  40730c:	4826      	ldr	r0, [pc, #152]	; (4073a8 <readWeeklyProg+0x130>)
  40730e:	47d8      	blx	fp
       
       t = time_stop / 2;       
       Serial_print(t, DEC);
  407310:	210a      	movs	r1, #10
  407312:	f3c9 0047 	ubfx	r0, r9, #1, #8
  407316:	47b0      	blx	r6
       if(time_stop & 0x01)
  407318:	f019 0f01 	tst.w	r9, #1
         Serial_print1(":30 ");
  40731c:	bf14      	ite	ne
  40731e:	4820      	ldrne	r0, [pc, #128]	; (4073a0 <readWeeklyProg+0x128>)
       else 
         Serial_print1(":00 "); 
  407320:	4820      	ldreq	r0, [pc, #128]	; (4073a4 <readWeeklyProg+0x12c>)
  407322:	47d8      	blx	fp
       
       Serial_print1(" Speed: ");
  407324:	4821      	ldr	r0, [pc, #132]	; (4073ac <readWeeklyProg+0x134>)
  407326:	47d8      	blx	fp
       //  ConfigSpeed -> bit[7,6]:Step Speed range 4 | bit[5,4]:Step Speed range 3 | bit[3,2]:Step Speed range 2 | bit[1,0]:Step Speed range 1. 
       temp_08 = read_byte_eeprom(ADDR_EEP(sDayProg[day].ConfigSpeed));
  407328:	9b01      	ldr	r3, [sp, #4]
  40732a:	f103 0009 	add.w	r0, r3, #9
  40732e:	b280      	uxth	r0, r0
  407330:	47c0      	blx	r8
       shf = (range*2);
       StepSpeed = (temp_08 >> shf) & 0x03;  
  407332:	0064      	lsls	r4, r4, #1
  407334:	b2e4      	uxtb	r4, r4
  407336:	4120      	asrs	r0, r4
       Serial_println(StepSpeed, DEC);   
  407338:	210a      	movs	r1, #10
  40733a:	f000 0003 	and.w	r0, r0, #3
  40733e:	4b14      	ldr	r3, [pc, #80]	; (407390 <readWeeklyProg+0x118>)
  407340:	4798      	blx	r3
    for(range=0; range <  numMaxRange; range++) {
  407342:	3701      	adds	r7, #1
  407344:	3501      	adds	r5, #1
  407346:	b2ad      	uxth	r5, r5
  407348:	9b02      	ldr	r3, [sp, #8]
  40734a:	429f      	cmp	r7, r3
  40734c:	d1c4      	bne.n	4072d8 <readWeeklyProg+0x60>
  40734e:	9b03      	ldr	r3, [sp, #12]
  407350:	3301      	adds	r3, #1
  407352:	461a      	mov	r2, r3
  407354:	9303      	str	r3, [sp, #12]
  407356:	9b01      	ldr	r3, [sp, #4]
  407358:	330c      	adds	r3, #12
  40735a:	b29b      	uxth	r3, r3
  40735c:	9301      	str	r3, [sp, #4]
  for(day= 0; day <7; day++) {
  40735e:	2a07      	cmp	r2, #7
  407360:	d1a4      	bne.n	4072ac <readWeeklyProg+0x34>

    }  
  }            
}  
  407362:	b005      	add	sp, #20
  407364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     Serial_println1("  Weekly NOT Enable:");   
  407368:	4811      	ldr	r0, [pc, #68]	; (4073b0 <readWeeklyProg+0x138>)
  40736a:	4b04      	ldr	r3, [pc, #16]	; (40737c <readWeeklyProg+0x104>)
  40736c:	4798      	blx	r3
  40736e:	e796      	b.n	40729e <readWeeklyProg+0x26>
  407370:	00412d04 	.word	0x00412d04
  407374:	0040669d 	.word	0x0040669d
  407378:	004126b8 	.word	0x004126b8
  40737c:	00406051 	.word	0x00406051
  407380:	0040a279 	.word	0x0040a279
  407384:	00412730 	.word	0x00412730
  407388:	00405f65 	.word	0x00405f65
  40738c:	00412758 	.word	0x00412758
  407390:	0040609d 	.word	0x0040609d
  407394:	0040a26d 	.word	0x0040a26d
  407398:	00412760 	.word	0x00412760
  40739c:	00412768 	.word	0x00412768
  4073a0:	00412770 	.word	0x00412770
  4073a4:	00412778 	.word	0x00412778
  4073a8:	00412780 	.word	0x00412780
  4073ac:	00412788 	.word	0x00412788
  4073b0:	00412740 	.word	0x00412740
  4073b4:	00405f35 	.word	0x00405f35

004073b8 <PrintMenuManTesting>:
//   [5] Test Uart 1 
//
//  Select Test(0,..,5):
//-----------------------------------------------------
void PrintMenuManTesting()
{  
  4073b8:	b510      	push	{r4, lr}
  PrintFlashString(str_Title_6_Menu,  NEW_LINE);
  4073ba:	216e      	movs	r1, #110	; 0x6e
  4073bc:	480d      	ldr	r0, [pc, #52]	; (4073f4 <PrintMenuManTesting+0x3c>)
  4073be:	4c0e      	ldr	r4, [pc, #56]	; (4073f8 <PrintMenuManTesting+0x40>)
  4073c0:	47a0      	blx	r4
  Serial_println1(" ");
  4073c2:	480e      	ldr	r0, [pc, #56]	; (4073fc <PrintMenuManTesting+0x44>)
  4073c4:	4b0e      	ldr	r3, [pc, #56]	; (407400 <PrintMenuManTesting+0x48>)
  4073c6:	4798      	blx	r3
  PrintFlashString(str_row0_6_Menu,   NEW_LINE);    
  4073c8:	216e      	movs	r1, #110	; 0x6e
  4073ca:	480e      	ldr	r0, [pc, #56]	; (407404 <PrintMenuManTesting+0x4c>)
  4073cc:	47a0      	blx	r4
  PrintFlashString(str_row1_6_Menu,   NEW_LINE);     
  4073ce:	216e      	movs	r1, #110	; 0x6e
  4073d0:	480d      	ldr	r0, [pc, #52]	; (407408 <PrintMenuManTesting+0x50>)
  4073d2:	47a0      	blx	r4
  PrintFlashString(str_row2_6_Menu,   NEW_LINE);
  4073d4:	216e      	movs	r1, #110	; 0x6e
  4073d6:	480d      	ldr	r0, [pc, #52]	; (40740c <PrintMenuManTesting+0x54>)
  4073d8:	47a0      	blx	r4
  PrintFlashString(str_row3_6_Menu,   NEW_LINE);
  4073da:	216e      	movs	r1, #110	; 0x6e
  4073dc:	480c      	ldr	r0, [pc, #48]	; (407410 <PrintMenuManTesting+0x58>)
  4073de:	47a0      	blx	r4
  PrintFlashString(str_row4_6_Menu,   NEW_LINE);
  4073e0:	216e      	movs	r1, #110	; 0x6e
  4073e2:	480c      	ldr	r0, [pc, #48]	; (407414 <PrintMenuManTesting+0x5c>)
  4073e4:	47a0      	blx	r4
  PrintFlashString(str_row5_6_Menu,   NEW_LINE);
  4073e6:	216e      	movs	r1, #110	; 0x6e
  4073e8:	480b      	ldr	r0, [pc, #44]	; (407418 <PrintMenuManTesting+0x60>)
  4073ea:	47a0      	blx	r4
  PrintFlashString(str_row6_6_Menu,   NEW_LINE);
  4073ec:	216e      	movs	r1, #110	; 0x6e
  4073ee:	480b      	ldr	r0, [pc, #44]	; (40741c <PrintMenuManTesting+0x64>)
  4073f0:	47a0      	blx	r4
  4073f2:	bd10      	pop	{r4, pc}
  4073f4:	00412cdc 	.word	0x00412cdc
  4073f8:	0040669d 	.word	0x0040669d
  4073fc:	004126b8 	.word	0x004126b8
  407400:	00406051 	.word	0x00406051
  407404:	00413114 	.word	0x00413114
  407408:	00413130 	.word	0x00413130
  40740c:	00413144 	.word	0x00413144
  407410:	00413154 	.word	0x00413154
  407414:	0041316c 	.word	0x0041316c
  407418:	00413180 	.word	0x00413180
  40741c:	00413194 	.word	0x00413194

00407420 <manualTesting>:

//-----------------------------------------------------
//
//-----------------------------------------------------
void manualTesting()
{
  407420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   Byte nb, i;
   int ret_val;
    
   Serial_println1(" ");
  407424:	4834      	ldr	r0, [pc, #208]	; (4074f8 <manualTesting+0xd8>)
  407426:	4b35      	ldr	r3, [pc, #212]	; (4074fc <manualTesting+0xdc>)
  407428:	4798      	blx	r3
   PrintMenuManTesting();
  40742a:	4b35      	ldr	r3, [pc, #212]	; (407500 <manualTesting+0xe0>)
  40742c:	4798      	blx	r3
   printPrompMenu6();
  40742e:	4b35      	ldr	r3, [pc, #212]	; (407504 <manualTesting+0xe4>)
  407430:	4798      	blx	r3
       for(i=0; i < nb; i++) {
          Serial_print(buff_RS232_rx[i], BYTE);
          Serial_print1(" ");
       }  
            
       switch (buff_RS232_rx[0]){
  407432:	f8df a108 	ldr.w	sl, [pc, #264]	; 40753c <manualTesting+0x11c>
             PrintMenuManTesting();
          break;
                       
       }
       
       printPrompMenu6();   
  407436:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 407504 <manualTesting+0xe4>
  40743a:	e017      	b.n	40746c <manualTesting+0x4c>
     if((nb==1) && (buff_RS232_rx[0] == '\n')) {
  40743c:	f89a 3000 	ldrb.w	r3, [sl]
  407440:	2b0a      	cmp	r3, #10
  407442:	d119      	bne.n	407478 <manualTesting+0x58>
       Serial_println1(" "); 
  407444:	4d2c      	ldr	r5, [pc, #176]	; (4074f8 <manualTesting+0xd8>)
  407446:	4628      	mov	r0, r5
  407448:	4c2c      	ldr	r4, [pc, #176]	; (4074fc <manualTesting+0xdc>)
  40744a:	47a0      	blx	r4
       Serial_println1(" ");
  40744c:	4628      	mov	r0, r5
  40744e:	47a0      	blx	r4
       PrintMenuManTesting();
  407450:	4b2b      	ldr	r3, [pc, #172]	; (407500 <manualTesting+0xe0>)
  407452:	4798      	blx	r3
       printPrompMenu6();
  407454:	47d8      	blx	fp
  407456:	e006      	b.n	407466 <manualTesting+0x46>
             Stampa_menu_config();
  407458:	4b2b      	ldr	r3, [pc, #172]	; (407508 <manualTesting+0xe8>)
  40745a:	4798      	blx	r3
          return;
  40745c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
             test_bypass();  
  407460:	4b2a      	ldr	r3, [pc, #168]	; (40750c <manualTesting+0xec>)
  407462:	4798      	blx	r3
       printPrompMenu6();   
  407464:	47d8      	blx	fp
     }  
              
      
     delay_ms (50);  
  407466:	482a      	ldr	r0, [pc, #168]	; (407510 <manualTesting+0xf0>)
  407468:	4b2a      	ldr	r3, [pc, #168]	; (407514 <manualTesting+0xf4>)
  40746a:	4798      	blx	r3
     nb = wait_response_by_terminal(); 
  40746c:	4b2a      	ldr	r3, [pc, #168]	; (407518 <manualTesting+0xf8>)
  40746e:	4798      	blx	r3
  407470:	b2c6      	uxtb	r6, r0
     if((nb==1) && (buff_RS232_rx[0] == '\n')) {
  407472:	2e01      	cmp	r6, #1
  407474:	d0e2      	beq.n	40743c <manualTesting+0x1c>
       for(i=0; i < nb; i++) {
  407476:	b186      	cbz	r6, 40749a <manualTesting+0x7a>
  407478:	4d28      	ldr	r5, [pc, #160]	; (40751c <manualTesting+0xfc>)
{
  40747a:	2400      	movs	r4, #0
          Serial_print(buff_RS232_rx[i], BYTE);
  40747c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 407540 <manualTesting+0x120>
          Serial_print1(" ");
  407480:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4074f8 <manualTesting+0xd8>
  407484:	4f26      	ldr	r7, [pc, #152]	; (407520 <manualTesting+0x100>)
          Serial_print(buff_RS232_rx[i], BYTE);
  407486:	2100      	movs	r1, #0
  407488:	f815 0f01 	ldrb.w	r0, [r5, #1]!
  40748c:	47c8      	blx	r9
          Serial_print1(" ");
  40748e:	4640      	mov	r0, r8
  407490:	47b8      	blx	r7
       for(i=0; i < nb; i++) {
  407492:	3401      	adds	r4, #1
  407494:	b2e4      	uxtb	r4, r4
  407496:	42a6      	cmp	r6, r4
  407498:	d8f5      	bhi.n	407486 <manualTesting+0x66>
       switch (buff_RS232_rx[0]){
  40749a:	f89a 3000 	ldrb.w	r3, [sl]
  40749e:	3b30      	subs	r3, #48	; 0x30
  4074a0:	2b06      	cmp	r3, #6
  4074a2:	d820      	bhi.n	4074e6 <manualTesting+0xc6>
  4074a4:	a201      	add	r2, pc, #4	; (adr r2, 4074ac <manualTesting+0x8c>)
  4074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4074aa:	bf00      	nop
  4074ac:	00407459 	.word	0x00407459
  4074b0:	00407461 	.word	0x00407461
  4074b4:	004074c9 	.word	0x004074c9
  4074b8:	004074cf 	.word	0x004074cf
  4074bc:	004074d5 	.word	0x004074d5
  4074c0:	004074db 	.word	0x004074db
  4074c4:	004074e1 	.word	0x004074e1
             test_IO();  
  4074c8:	4b16      	ldr	r3, [pc, #88]	; (407524 <manualTesting+0x104>)
  4074ca:	4798      	blx	r3
          break;
  4074cc:	e7ca      	b.n	407464 <manualTesting+0x44>
             testSleepMode();
  4074ce:	4b16      	ldr	r3, [pc, #88]	; (407528 <manualTesting+0x108>)
  4074d0:	4798      	blx	r3
          break;
  4074d2:	e7c7      	b.n	407464 <manualTesting+0x44>
             testMotors();
  4074d4:	4b15      	ldr	r3, [pc, #84]	; (40752c <manualTesting+0x10c>)
  4074d6:	4798      	blx	r3
          break;
  4074d8:	e7c4      	b.n	407464 <manualTesting+0x44>
             testUart1();
  4074da:	4b15      	ldr	r3, [pc, #84]	; (407530 <manualTesting+0x110>)
  4074dc:	4798      	blx	r3
          break;
  4074de:	e7c1      	b.n	407464 <manualTesting+0x44>
             testI2C();
  4074e0:	4b14      	ldr	r3, [pc, #80]	; (407534 <manualTesting+0x114>)
  4074e2:	4798      	blx	r3
          break;
  4074e4:	e7be      	b.n	407464 <manualTesting+0x44>
             Serial_print1(" Error, the number is not correct!");
  4074e6:	4814      	ldr	r0, [pc, #80]	; (407538 <manualTesting+0x118>)
  4074e8:	4b0d      	ldr	r3, [pc, #52]	; (407520 <manualTesting+0x100>)
  4074ea:	4798      	blx	r3
             Serial_println1(" ");
  4074ec:	4802      	ldr	r0, [pc, #8]	; (4074f8 <manualTesting+0xd8>)
  4074ee:	4b03      	ldr	r3, [pc, #12]	; (4074fc <manualTesting+0xdc>)
  4074f0:	4798      	blx	r3
             PrintMenuManTesting();
  4074f2:	4b03      	ldr	r3, [pc, #12]	; (407500 <manualTesting+0xe0>)
  4074f4:	4798      	blx	r3
          break;
  4074f6:	e7b5      	b.n	407464 <manualTesting+0x44>
  4074f8:	004126b8 	.word	0x004126b8
  4074fc:	00406051 	.word	0x00406051
  407500:	004073b9 	.word	0x004073b9
  407504:	004065f9 	.word	0x004065f9
  407508:	004066e5 	.word	0x004066e5
  40750c:	00407ca9 	.word	0x00407ca9
  407510:	00057317 	.word	0x00057317
  407514:	20000001 	.word	0x20000001
  407518:	00406619 	.word	0x00406619
  40751c:	20001147 	.word	0x20001147
  407520:	00405f35 	.word	0x00405f35
  407524:	00407f2d 	.word	0x00407f2d
  407528:	0040816d 	.word	0x0040816d
  40752c:	004082f5 	.word	0x004082f5
  407530:	00408721 	.word	0x00408721
  407534:	00408a5d 	.word	0x00408a5d
  407538:	004126f0 	.word	0x004126f0
  40753c:	20001148 	.word	0x20001148
  407540:	00405f65 	.word	0x00405f65

00407544 <CRC_16>:
unsigned short CRC_16 (unsigned char *buffer, unsigned int length)
{
    unsigned short i, j, temp_bit, temp_int, crc;
    crc = 0xFFFF;

     for ( i = 0; i < length; i++ ) {
  407544:	b1e1      	cbz	r1, 407580 <CRC_16+0x3c>
{
  407546:	b4f0      	push	{r4, r5, r6, r7}
  407548:	460e      	mov	r6, r1
     for ( i = 0; i < length; i++ ) {
  40754a:	4605      	mov	r5, r0
  40754c:	f64f 73ff 	movw	r3, #65535	; 0xffff
        temp_int = (unsigned char) *buffer++;
        crc ^= temp_int;
  407550:	2708      	movs	r7, #8
        for ( j = 0; j < 8; j++ ) {
            temp_bit = crc & 0x0001;
            crc >>= 1;
            if ( temp_bit != 0 )
                crc ^= 0xA001;
  407552:	f24a 0401 	movw	r4, #40961	; 0xa001
  407556:	e00e      	b.n	407576 <CRC_16+0x32>
  407558:	3a01      	subs	r2, #1
  40755a:	b292      	uxth	r2, r2
        for ( j = 0; j < 8; j++ ) {
  40755c:	b13a      	cbz	r2, 40756e <CRC_16+0x2a>
            temp_bit = crc & 0x0001;
  40755e:	f003 0101 	and.w	r1, r3, #1
            crc >>= 1;
  407562:	085b      	lsrs	r3, r3, #1
            if ( temp_bit != 0 )
  407564:	2900      	cmp	r1, #0
  407566:	d0f7      	beq.n	407558 <CRC_16+0x14>
                crc ^= 0xA001;
  407568:	4063      	eors	r3, r4
  40756a:	b29b      	uxth	r3, r3
  40756c:	e7f4      	b.n	407558 <CRC_16+0x14>
     for ( i = 0; i < length; i++ ) {
  40756e:	1a2a      	subs	r2, r5, r0
  407570:	b292      	uxth	r2, r2
  407572:	42b2      	cmp	r2, r6
  407574:	d208      	bcs.n	407588 <CRC_16+0x44>
        temp_int = (unsigned char) *buffer++;
  407576:	f815 2b01 	ldrb.w	r2, [r5], #1
        crc ^= temp_int;
  40757a:	4053      	eors	r3, r2
  40757c:	463a      	mov	r2, r7
  40757e:	e7ee      	b.n	40755e <CRC_16+0x1a>
    crc = 0xFFFF;
  407580:	f64f 73ff 	movw	r3, #65535	; 0xffff
        }
    }
    return (crc);
}
  407584:	4618      	mov	r0, r3
  407586:	4770      	bx	lr
  407588:	4618      	mov	r0, r3
  40758a:	bcf0      	pop	{r4, r5, r6, r7}
  40758c:	4770      	bx	lr
	...

00407590 <writeConfigUnit>:
//                 sm011906009302614410010;202NN0660000;4012300;00000000;;
//                 sm116994003801418140010;204YY0800100;4012300;00000000;;
//
//================================================================================
void writeConfigUnit()
{
  407590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   int i, nb;
   unsigned short crc16_send = 0xFFFF, crc16_calc = 0xFFFF, addr; 
   Byte val;
  
   nb = wait_response_by_terminal();
  407592:	4b9b      	ldr	r3, [pc, #620]	; (407800 <writeConfigUnit+0x270>)
  407594:	4798      	blx	r3
      
   //-- -- -- -- -- -- -- -- -- -- -- -- -- --
   //  Controlliamo la validità del messaggio.
   //-- -- -- -- -- -- -- -- -- -- -- -- -- --
   // 1^ Controllo:  star messagge   
   if ((buff_RS232_rx[0] != 's') || (buff_RS232_rx[1] != 'm')) {     
  407596:	4b9b      	ldr	r3, [pc, #620]	; (407804 <writeConfigUnit+0x274>)
  407598:	781b      	ldrb	r3, [r3, #0]
  40759a:	2b73      	cmp	r3, #115	; 0x73
  40759c:	d103      	bne.n	4075a6 <writeConfigUnit+0x16>
  40759e:	4b99      	ldr	r3, [pc, #612]	; (407804 <writeConfigUnit+0x274>)
  4075a0:	785b      	ldrb	r3, [r3, #1]
  4075a2:	2b6d      	cmp	r3, #109	; 0x6d
  4075a4:	d003      	beq.n	4075ae <writeConfigUnit+0x1e>
     Serial_println1("Error: Start Message");//PrintFlashString(str_Error_9_Menu,   NEW_LINE);    
  4075a6:	4898      	ldr	r0, [pc, #608]	; (407808 <writeConfigUnit+0x278>)
  4075a8:	4b98      	ldr	r3, [pc, #608]	; (40780c <writeConfigUnit+0x27c>)
  4075aa:	4798      	blx	r3
     return;
  4075ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   }  
   
   // 2^ Controllo: i 3 Byte: 23^, 36^, 44^ devono essere il carattere ';'
   if ((buff_RS232_rx[23] != ';') || (buff_RS232_rx[36] != ';') || (buff_RS232_rx[44] != ';')) { 
  4075ae:	4b95      	ldr	r3, [pc, #596]	; (407804 <writeConfigUnit+0x274>)
  4075b0:	7ddb      	ldrb	r3, [r3, #23]
  4075b2:	2b3b      	cmp	r3, #59	; 0x3b
  4075b4:	d104      	bne.n	4075c0 <writeConfigUnit+0x30>
  4075b6:	4b93      	ldr	r3, [pc, #588]	; (407804 <writeConfigUnit+0x274>)
  4075b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4075bc:	2b3b      	cmp	r3, #59	; 0x3b
  4075be:	d003      	beq.n	4075c8 <writeConfigUnit+0x38>
     Serial_println1("Error: Carattere Separatore ';'"); //PrintFlashString(str_Error_9_Menu,   NEW_LINE);    
  4075c0:	4893      	ldr	r0, [pc, #588]	; (407810 <writeConfigUnit+0x280>)
  4075c2:	4b92      	ldr	r3, [pc, #584]	; (40780c <writeConfigUnit+0x27c>)
  4075c4:	4798      	blx	r3
     return;
  4075c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if ((buff_RS232_rx[23] != ';') || (buff_RS232_rx[36] != ';') || (buff_RS232_rx[44] != ';')) { 
  4075c8:	4b8e      	ldr	r3, [pc, #568]	; (407804 <writeConfigUnit+0x274>)
  4075ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  4075ce:	2b3b      	cmp	r3, #59	; 0x3b
  4075d0:	d1f6      	bne.n	4075c0 <writeConfigUnit+0x30>
   }  
   
   // 3^ Controllo: CRC16
   if ((buff_RS232_rx[53] != ';') && (buff_RS232_rx[54] != ';')) 
  4075d2:	4b8c      	ldr	r3, [pc, #560]	; (407804 <writeConfigUnit+0x274>)
  4075d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
  4075d8:	2b3b      	cmp	r3, #59	; 0x3b
  4075da:	d00c      	beq.n	4075f6 <writeConfigUnit+0x66>
  4075dc:	4a89      	ldr	r2, [pc, #548]	; (407804 <writeConfigUnit+0x274>)
  4075de:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
  4075e2:	2c3b      	cmp	r4, #59	; 0x3b
  4075e4:	d007      	beq.n	4075f6 <writeConfigUnit+0x66>
   {
       crc16_send = (buff_RS232_rx[54] << 8) & 0xFF00;
       crc16_send |= buff_RS232_rx[53];
  4075e6:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
       
       crc16_calc = CRC_16 (&buff_RS232_rx[0], 53);
  4075ea:	2135      	movs	r1, #53	; 0x35
  4075ec:	4610      	mov	r0, r2
  4075ee:	4b89      	ldr	r3, [pc, #548]	; (407814 <writeConfigUnit+0x284>)
  4075f0:	4798      	blx	r3
       
       if(crc16_send != crc16_calc)
  4075f2:	4284      	cmp	r4, r0
  4075f4:	d13b      	bne.n	40766e <writeConfigUnit+0xde>
   
   //-- -- -- -- -- -- -- -- -- -- -- -- --
   // Iniziamo a configurare l'unità
   //-- -- -- -- -- -- -- -- -- -- -- -- --
   //--- Typer func. (1=EXTRA / 0=BASIC)---
   val = (buff_RS232_rx[3] - '0') & 0x01;
  4075f6:	4b83      	ldr	r3, [pc, #524]	; (407804 <writeConfigUnit+0x274>)
  4075f8:	78dc      	ldrb	r4, [r3, #3]
  4075fa:	f004 0401 	and.w	r4, r4, #1
   
   write_byte_eeprom(ADDR_EEP(Type_func), val);
  4075fe:	4621      	mov	r1, r4
  407600:	2001      	movs	r0, #1
  407602:	4b85      	ldr	r3, [pc, #532]	; (407818 <writeConfigUnit+0x288>)
  407604:	4798      	blx	r3
   if (val) {
  407606:	2c00      	cmp	r4, #0
  407608:	d035      	beq.n	407676 <writeConfigUnit+0xe6>
     val = ENAB_FUNC_EXTRA;
     //--- Enab. Funz. CAF & CAP ---
     if ((buff_RS232_rx[27] == 'N') || (buff_RS232_rx[27] == 'n'))  
  40760a:	4b7e      	ldr	r3, [pc, #504]	; (407804 <writeConfigUnit+0x274>)
  40760c:	7edb      	ldrb	r3, [r3, #27]
  40760e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
       val &= ~(1 << ENAB_CAF);
  407612:	2b4e      	cmp	r3, #78	; 0x4e
  407614:	bf14      	ite	ne
  407616:	21ff      	movne	r1, #255	; 0xff
  407618:	217f      	moveq	r1, #127	; 0x7f
   
     if ((buff_RS232_rx[28] == 'N') || (buff_RS232_rx[28] == 'n'))  
  40761a:	4b7a      	ldr	r3, [pc, #488]	; (407804 <writeConfigUnit+0x274>)
  40761c:	7f1b      	ldrb	r3, [r3, #28]
  40761e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  407622:	2b4e      	cmp	r3, #78	; 0x4e
       val &= ~(1 << ENAB_CAP);
  407624:	bf08      	it	eq
  407626:	f001 01bf 	andeq.w	r1, r1, #191	; 0xbf
     
     write_byte_eeprom(ADDR_EEP(msk_Enab_Fuction), val);
  40762a:	2030      	movs	r0, #48	; 0x30
  40762c:	4b7a      	ldr	r3, [pc, #488]	; (407818 <writeConfigUnit+0x288>)
  40762e:	4798      	blx	r3
     
   }else 
     write_byte_eeprom(ADDR_EEP(msk_Enab_Fuction),  ENAB_FUNC_BASIC);
     
   
   check_control_speed_func();  // verifichiamo se è corretto l'impostazione CAP/CAF in base al type_func.  
  407630:	4b7a      	ldr	r3, [pc, #488]	; (40781c <writeConfigUnit+0x28c>)
  407632:	4798      	blx	r3
  407634:	4d7a      	ldr	r5, [pc, #488]	; (407820 <writeConfigUnit+0x290>)
  407636:	f105 0712 	add.w	r7, r5, #18
  40763a:	240b      	movs	r4, #11
          
   //--- Serial number (18 caratteri) ---
   addr = ADDR_EEP(SerialString[0]);       
   for(i=0; i <18; i++)
     write_byte_eeprom((addr+i), buff_RS232_rx[4+i]);
  40763c:	4e76      	ldr	r6, [pc, #472]	; (407818 <writeConfigUnit+0x288>)
  40763e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  407642:	4620      	mov	r0, r4
  407644:	47b0      	blx	r6
  407646:	3401      	adds	r4, #1
  407648:	b2a4      	uxth	r4, r4
   for(i=0; i <18; i++)
  40764a:	42bd      	cmp	r5, r7
  40764c:	d1f7      	bne.n	40763e <writeConfigUnit+0xae>
     
   //--- Numero dei motori ---
   addr = ADDR_EEP(numMotors);
   val  = (buff_RS232_rx[24] -'0');
  40764e:	4b6d      	ldr	r3, [pc, #436]	; (407804 <writeConfigUnit+0x274>)
  407650:	7e1b      	ldrb	r3, [r3, #24]
  407652:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  407656:	b2c9      	uxtb	r1, r1
   
   if ((val != 2) && (val != 4) && (val != 6))
  407658:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
  40765c:	2b32      	cmp	r3, #50	; 0x32
  40765e:	d00f      	beq.n	407680 <writeConfigUnit+0xf0>
  407660:	2904      	cmp	r1, #4
  407662:	d00d      	beq.n	407680 <writeConfigUnit+0xf0>
   {
     PrintFlashString(str_Error_9_Menu,   NEW_LINE);    
  407664:	216e      	movs	r1, #110	; 0x6e
  407666:	486f      	ldr	r0, [pc, #444]	; (407824 <writeConfigUnit+0x294>)
  407668:	4b6f      	ldr	r3, [pc, #444]	; (407828 <writeConfigUnit+0x298>)
  40766a:	4798      	blx	r3
     return;
  40766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         Serial_println1("Error: CRC16");    
  40766e:	486f      	ldr	r0, [pc, #444]	; (40782c <writeConfigUnit+0x29c>)
  407670:	4b66      	ldr	r3, [pc, #408]	; (40780c <writeConfigUnit+0x27c>)
  407672:	4798      	blx	r3
         return;
  407674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     write_byte_eeprom(ADDR_EEP(msk_Enab_Fuction),  ENAB_FUNC_BASIC);
  407676:	2129      	movs	r1, #41	; 0x29
  407678:	2030      	movs	r0, #48	; 0x30
  40767a:	4b67      	ldr	r3, [pc, #412]	; (407818 <writeConfigUnit+0x288>)
  40767c:	4798      	blx	r3
  40767e:	e7d7      	b.n	407630 <writeConfigUnit+0xa0>
   }     
   write_byte_eeprom(addr, val);
  407680:	203b      	movs	r0, #59	; 0x3b
  407682:	4d65      	ldr	r5, [pc, #404]	; (407818 <writeConfigUnit+0x288>)
  407684:	47a8      	blx	r5

   //--- Numero di pulsazioni per giro dei motori ---
   addr = ADDR_EEP(numPulseMotors); 
   val  = (buff_RS232_rx[25] - '0')*10 + (buff_RS232_rx[26] - '0');
  407686:	4c5f      	ldr	r4, [pc, #380]	; (407804 <writeConfigUnit+0x274>)
  407688:	7e63      	ldrb	r3, [r4, #25]
  40768a:	3b30      	subs	r3, #48	; 0x30
  40768c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  407690:	7ea2      	ldrb	r2, [r4, #26]
  407692:	3a30      	subs	r2, #48	; 0x30
  407694:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   write_byte_eeprom(addr, val);
  407698:	b2d9      	uxtb	r1, r3
  40769a:	203c      	movs	r0, #60	; 0x3c
  40769c:	47a8      	blx	r5
  
   
   //--- Depotenziamento ---
   addr = ADDR_EEP(depotMotors); 
   val  = ((buff_RS232_rx[29] - '0')*100) + ((buff_RS232_rx[30] - '0') * 10) + (buff_RS232_rx[31] - '0');
  40769e:	7f61      	ldrb	r1, [r4, #29]
  4076a0:	3930      	subs	r1, #48	; 0x30
  4076a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4076a6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4076aa:	7fe1      	ldrb	r1, [r4, #31]
  4076ac:	3930      	subs	r1, #48	; 0x30
  4076ae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4076b2:	7fa3      	ldrb	r3, [r4, #30]
  4076b4:	3b30      	subs	r3, #48	; 0x30
  4076b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4076ba:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  4076be:	b2c9      	uxtb	r1, r1
  4076c0:	2928      	cmp	r1, #40	; 0x28
  4076c2:	bf38      	it	cc
  4076c4:	2128      	movcc	r1, #40	; 0x28
   if(val > 100)
     val = 100;
   else if ( val < 40)
     val = 40;  
   write_byte_eeprom(addr, val);  
  4076c6:	2964      	cmp	r1, #100	; 0x64
  4076c8:	bf28      	it	cs
  4076ca:	2164      	movcs	r1, #100	; 0x64
  4076cc:	203f      	movs	r0, #63	; 0x3f
  4076ce:	47a8      	blx	r5
 
   //--- Rotazione Bypass ---
   addr = ADDR_EEP(RotazioneBypass); 
   if(buff_RS232_rx[32] == '0')
  4076d0:	f894 3020 	ldrb.w	r3, [r4, #32]
  4076d4:	2b30      	cmp	r3, #48	; 0x30
  4076d6:	d045      	beq.n	407764 <writeConfigUnit+0x1d4>
      write_byte_eeprom(addr, 0);        // Orario
   else 
      write_byte_eeprom(addr, 0xFF);     // AntiOrario
  4076d8:	21ff      	movs	r1, #255	; 0xff
  4076da:	2042      	movs	r0, #66	; 0x42
  4076dc:	4b4e      	ldr	r3, [pc, #312]	; (407818 <writeConfigUnit+0x288>)
  4076de:	4798      	blx	r3
      
   //--- DPP v2 ---
   addr = ADDR_EEP(AccessoyHW[1]);
   if(buff_RS232_rx[33] == '0')
  4076e0:	4b48      	ldr	r3, [pc, #288]	; (407804 <writeConfigUnit+0x274>)
  4076e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  4076e6:	2b30      	cmp	r3, #48	; 0x30
  4076e8:	d040      	beq.n	40776c <writeConfigUnit+0x1dc>
      val &= ~(1<<2);
      write_byte_eeprom(addr, val);      // DPP NON PRESENTE
      }
   else 
     {
      val =  read_byte_eeprom(addr);
  4076ea:	202b      	movs	r0, #43	; 0x2b
  4076ec:	4b50      	ldr	r3, [pc, #320]	; (407830 <writeConfigUnit+0x2a0>)
  4076ee:	4798      	blx	r3
      val |= (1<<2);
  4076f0:	f040 0104 	orr.w	r1, r0, #4
      write_byte_eeprom(addr, val);      // DPP PRESENTE
  4076f4:	b2c9      	uxtb	r1, r1
  4076f6:	202b      	movs	r0, #43	; 0x2b
  4076f8:	4b47      	ldr	r3, [pc, #284]	; (407818 <writeConfigUnit+0x288>)
  4076fa:	4798      	blx	r3
      }

   
   //--- Numero NTC ---
   addr = ADDR_EEP(numNTC);
   val  = buff_RS232_rx[37] - '0';
  4076fc:	4c41      	ldr	r4, [pc, #260]	; (407804 <writeConfigUnit+0x274>)
  4076fe:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
  407702:	3930      	subs	r1, #48	; 0x30
  407704:	b2c9      	uxtb	r1, r1
  407706:	2902      	cmp	r1, #2
  407708:	bf38      	it	cc
  40770a:	2102      	movcc	r1, #2
   if(val > 4)
     val = 4;
   else if(val < 2)
     val = 2;      
   write_byte_eeprom(addr, val);  
  40770c:	2904      	cmp	r1, #4
  40770e:	bf28      	it	cs
  407710:	2104      	movcs	r1, #4
  407712:	2040      	movs	r0, #64	; 0x40
  407714:	4d40      	ldr	r5, [pc, #256]	; (407818 <writeConfigUnit+0x288>)
  407716:	47a8      	blx	r5
   //--- Posizione NTC ---
   // bit 7,6 = Exuast, bit 5,4 = Supply, bit 3,2 = Return, bit 1,0 = Fresh
   addr = ADDR_EEP(Posiz_NTC); 
   val = 0;
   // TFresh bit: 1,0
   val |= (buff_RS232_rx[38] - '0') & 0x03;
  407718:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
  40771c:	f001 0103 	and.w	r1, r1, #3
   // TReturn bit: 3,2
   val |= (((buff_RS232_rx[39] - '0') & 0x03) << 2);
   // TSupply bit: 5,4
   val |= (((buff_RS232_rx[40] - '0') & 0x03) << 4);
   // TExaust bit: 7,6
   val |= (((buff_RS232_rx[41] - '0') & 0x03) << 6);
  407720:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
  407724:	ea41 1183 	orr.w	r1, r1, r3, lsl #6
   val |= (((buff_RS232_rx[39] - '0') & 0x03) << 2);
  407728:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
  40772c:	009b      	lsls	r3, r3, #2
  40772e:	f003 030c 	and.w	r3, r3, #12
   val |= (((buff_RS232_rx[41] - '0') & 0x03) << 6);
  407732:	4319      	orrs	r1, r3
   val |= (((buff_RS232_rx[40] - '0') & 0x03) << 4);
  407734:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  407738:	011b      	lsls	r3, r3, #4
  40773a:	f003 0330 	and.w	r3, r3, #48	; 0x30
   val |= (((buff_RS232_rx[41] - '0') & 0x03) << 6);
  40773e:	4319      	orrs	r1, r3
   write_byte_eeprom(addr, val); 
  407740:	b2c9      	uxtb	r1, r1
  407742:	2041      	movs	r0, #65	; 0x41
  407744:	47a8      	blx	r5
   
   //--- Config. Sonde Analogiche RH/CO2/VOC ---
   // List AccessoyHW[2]:  P2CO2, P1CO2,  EBPD,  P2RH,  P1RH,   SSR, P1VOC, -----, (LSB) 
   addr = ADDR_EEP(AccessoyHW[2]);
   val =  read_byte_eeprom(addr); 
  407746:	202c      	movs	r0, #44	; 0x2c
  407748:	4b39      	ldr	r3, [pc, #228]	; (407830 <writeConfigUnit+0x2a0>)
  40774a:	4798      	blx	r3
   val &= 0b00100101;
  40774c:	f000 0125 	and.w	r1, r0, #37	; 0x25
   
   switch(buff_RS232_rx[42])  
  407750:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  407754:	3b31      	subs	r3, #49	; 0x31
  407756:	2b04      	cmp	r3, #4
  407758:	d813      	bhi.n	407782 <writeConfigUnit+0x1f2>
  40775a:	e8df f003 	tbb	[pc, r3]
  40775e:	2c10      	.short	0x2c10
  407760:	322f      	.short	0x322f
  407762:	35          	.byte	0x35
  407763:	00          	.byte	0x00
      write_byte_eeprom(addr, 0);        // Orario
  407764:	2100      	movs	r1, #0
  407766:	2042      	movs	r0, #66	; 0x42
  407768:	47a8      	blx	r5
  40776a:	e7b9      	b.n	4076e0 <writeConfigUnit+0x150>
      val =  read_byte_eeprom(addr);
  40776c:	202b      	movs	r0, #43	; 0x2b
  40776e:	4b30      	ldr	r3, [pc, #192]	; (407830 <writeConfigUnit+0x2a0>)
  407770:	4798      	blx	r3
      write_byte_eeprom(addr, val);      // DPP NON PRESENTE
  407772:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
  407776:	202b      	movs	r0, #43	; 0x2b
  407778:	4b27      	ldr	r3, [pc, #156]	; (407818 <writeConfigUnit+0x288>)
  40777a:	4798      	blx	r3
  40777c:	e7be      	b.n	4076fc <writeConfigUnit+0x16c>
   {
       // Sensore P1RH Abilitato 
       case '1': val |= 0b00001000; break;       
  40777e:	f041 0108 	orr.w	r1, r1, #8
       // Sensori P1RH & P1CO2  Abilitati      
       case '4': val |= 0b01001000; break; 
       // Sensori P1RH & P1VOC  Abilitati      
       case '5': val |= 0b00001010; break;
   }
   write_byte_eeprom(addr, val);    
  407782:	202c      	movs	r0, #44	; 0x2c
  407784:	4b24      	ldr	r3, [pc, #144]	; (407818 <writeConfigUnit+0x288>)
  407786:	4798      	blx	r3
   
   
   // Verifica se vi è inserito anche il IPEHD
   // List AccessoyHW[0]:    DXD,   BPD,   AWP,   CWD,   EHD,   HWD,  PHWD,  PEHD  (LSB) 
   addr = ADDR_EEP(AccessoyHW[0]);
   val =  read_byte_eeprom(addr); 
  407788:	202a      	movs	r0, #42	; 0x2a
  40778a:	4b29      	ldr	r3, [pc, #164]	; (407830 <writeConfigUnit+0x2a0>)
  40778c:	4798      	blx	r3
   val &= 0xFE;
  40778e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   
   if(buff_RS232_rx[43] == '1')  
  407792:	4b1c      	ldr	r3, [pc, #112]	; (407804 <writeConfigUnit+0x274>)
  407794:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
  407798:	2b31      	cmp	r3, #49	; 0x31
     val |= 0x01;
  40779a:	bf08      	it	eq
  40779c:	f041 0101 	orreq.w	r1, r1, #1

   write_byte_eeprom(addr, val);
  4077a0:	202a      	movs	r0, #42	; 0x2a
  4077a2:	4c1d      	ldr	r4, [pc, #116]	; (407818 <writeConfigUnit+0x288>)
  4077a4:	47a0      	blx	r4
   
   // Accessory da rilevare se connessi. Azzero il byte degli accessori
   // List AccessoyHW[3]:  -----, -----,  FLW2,  FLW1,  EXT4,  EXT3,  EXT2,  EXT1, (LSB)
   addr = ADDR_EEP(AccessoyHW[3]);  
   write_byte_eeprom(addr, 0x00);   
  4077a6:	2100      	movs	r1, #0
  4077a8:	202d      	movs	r0, #45	; 0x2d
  4077aa:	47a0      	blx	r4
  4077ac:	4e21      	ldr	r6, [pc, #132]	; (407834 <writeConfigUnit+0x2a4>)
  4077ae:	4d22      	ldr	r5, [pc, #136]	; (407838 <writeConfigUnit+0x2a8>)
   
   //---- aggiorniamo l'eeprom ----
   for(i=0; i <= 90; i++) {
  4077b0:	2400      	movs	r4, #0
      if(Shadow_eep_preview[i] != Shadow_eep[i]) {
         eep_write_byte(i,  Shadow_eep[i]); 
  4077b2:	4f22      	ldr	r7, [pc, #136]	; (40783c <writeConfigUnit+0x2ac>)
  4077b4:	e010      	b.n	4077d8 <writeConfigUnit+0x248>
       case '2': val |= 0b01000000; break;
  4077b6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4077ba:	e7e2      	b.n	407782 <writeConfigUnit+0x1f2>
       case '3': val |= 0b00000010; break;
  4077bc:	f041 0102 	orr.w	r1, r1, #2
  4077c0:	e7df      	b.n	407782 <writeConfigUnit+0x1f2>
       case '4': val |= 0b01001000; break; 
  4077c2:	f041 0148 	orr.w	r1, r1, #72	; 0x48
  4077c6:	e7dc      	b.n	407782 <writeConfigUnit+0x1f2>
       case '5': val |= 0b00001010; break;
  4077c8:	f041 010a 	orr.w	r1, r1, #10
  4077cc:	e7d9      	b.n	407782 <writeConfigUnit+0x1f2>
   for(i=0; i <= 90; i++) {
  4077ce:	3401      	adds	r4, #1
  4077d0:	3601      	adds	r6, #1
  4077d2:	3501      	adds	r5, #1
  4077d4:	2c5b      	cmp	r4, #91	; 0x5b
  4077d6:	d008      	beq.n	4077ea <writeConfigUnit+0x25a>
      if(Shadow_eep_preview[i] != Shadow_eep[i]) {
  4077d8:	7829      	ldrb	r1, [r5, #0]
  4077da:	7833      	ldrb	r3, [r6, #0]
  4077dc:	428b      	cmp	r3, r1
  4077de:	d0f6      	beq.n	4077ce <writeConfigUnit+0x23e>
         eep_write_byte(i,  Shadow_eep[i]); 
  4077e0:	4620      	mov	r0, r4
  4077e2:	47b8      	blx	r7
         Shadow_eep_preview[i]  = Shadow_eep[i];
  4077e4:	782b      	ldrb	r3, [r5, #0]
  4077e6:	7033      	strb	r3, [r6, #0]
  4077e8:	e7f1      	b.n	4077ce <writeConfigUnit+0x23e>
      }         
   }  
   
   Serial_println1("Write Config Unit is Successfull!");
  4077ea:	4815      	ldr	r0, [pc, #84]	; (407840 <writeConfigUnit+0x2b0>)
  4077ec:	4c07      	ldr	r4, [pc, #28]	; (40780c <writeConfigUnit+0x27c>)
  4077ee:	47a0      	blx	r4
   Serial_println1(" ");
  4077f0:	4814      	ldr	r0, [pc, #80]	; (407844 <writeConfigUnit+0x2b4>)
  4077f2:	47a0      	blx	r4
    
   delay_ms (250);
  4077f4:	4814      	ldr	r0, [pc, #80]	; (407848 <writeConfigUnit+0x2b8>)
  4077f6:	4b15      	ldr	r3, [pc, #84]	; (40784c <writeConfigUnit+0x2bc>)
  4077f8:	4798      	blx	r3
    
   read_cfg_data();
  4077fa:	4b15      	ldr	r3, [pc, #84]	; (407850 <writeConfigUnit+0x2c0>)
  4077fc:	4798      	blx	r3
  4077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407800:	00406619 	.word	0x00406619
  407804:	20001148 	.word	0x20001148
  407808:	004131d0 	.word	0x004131d0
  40780c:	00406051 	.word	0x00406051
  407810:	004131e8 	.word	0x004131e8
  407814:	00407545 	.word	0x00407545
  407818:	0040a1fd 	.word	0x0040a1fd
  40781c:	0040a2dd 	.word	0x0040a2dd
  407820:	2000114b 	.word	0x2000114b
  407824:	00412afc 	.word	0x00412afc
  407828:	0040669d 	.word	0x0040669d
  40782c:	00413208 	.word	0x00413208
  407830:	0040a26d 	.word	0x0040a26d
  407834:	20001294 	.word	0x20001294
  407838:	20001194 	.word	0x20001194
  40783c:	0040c005 	.word	0x0040c005
  407840:	00413218 	.word	0x00413218
  407844:	004126b8 	.word	0x004126b8
  407848:	001b3f73 	.word	0x001b3f73
  40784c:	20000001 	.word	0x20000001
  407850:	00406929 	.word	0x00406929

00407854 <shell_config_menu>:
 
  Description: La funzione serve per configurare il modulo RD ed interrogarlo  
 
 ****************************************************************************************/
void shell_config_menu(Byte dec_sec)
{
  407854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407858:	b091      	sub	sp, #68	; 0x44
  40785a:	4681      	mov	r9, r0
  40785c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  407860:	4ba1      	ldr	r3, [pc, #644]	; (407ae8 <shell_config_menu+0x294>)
  407862:	635a      	str	r2, [r3, #52]	; 0x34

   //digitalWrite(pSwitchOFF_KTS, LOW);   // KTS OFF
   ioport_set_pin_level(pSwitchOFF_KTS, IOPORT_PIN_LEVEL_LOW);
   
   // scarichiamo prima il buffer da schifezze
   press_key = Serial_available(); 
  407864:	4ba1      	ldr	r3, [pc, #644]	; (407aec <shell_config_menu+0x298>)
  407866:	4798      	blx	r3
   if(press_key){
  407868:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
  40786c:	d00a      	beq.n	407884 <shell_config_menu+0x30>
      // scarichiamo il buffer       
     for(i=0; i< press_key; i++) 
  40786e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
  407872:	d007      	beq.n	407884 <shell_config_menu+0x30>
  407874:	2400      	movs	r4, #0
        buff[0] = Serial_read();   
  407876:	4f9e      	ldr	r7, [pc, #632]	; (407af0 <shell_config_menu+0x29c>)
  407878:	47b8      	blx	r7
  40787a:	f88d 0000 	strb.w	r0, [sp]
     for(i=0; i< press_key; i++) 
  40787e:	3401      	adds	r4, #1
  407880:	42b4      	cmp	r4, r6
  407882:	d1f9      	bne.n	407878 <shell_config_menu+0x24>
   }  
   
   Serial_println1(" "); 
  407884:	489b      	ldr	r0, [pc, #620]	; (407af4 <shell_config_menu+0x2a0>)
  407886:	4b9c      	ldr	r3, [pc, #624]	; (407af8 <shell_config_menu+0x2a4>)
  407888:	4798      	blx	r3
   delay_ms (10);
  40788a:	489c      	ldr	r0, [pc, #624]	; (407afc <shell_config_menu+0x2a8>)
  40788c:	4b9c      	ldr	r3, [pc, #624]	; (407b00 <shell_config_menu+0x2ac>)
  40788e:	4798      	blx	r3
   Serial_print1("RD02 FW:");  // "RD02 FW: 2.09"
  407890:	489c      	ldr	r0, [pc, #624]	; (407b04 <shell_config_menu+0x2b0>)
  407892:	4f9d      	ldr	r7, [pc, #628]	; (407b08 <shell_config_menu+0x2b4>)
  407894:	47b8      	blx	r7
   Serial_print(VERSION_FW[0], BYTE);
  407896:	4c9d      	ldr	r4, [pc, #628]	; (407b0c <shell_config_menu+0x2b8>)
  407898:	2100      	movs	r1, #0
  40789a:	7820      	ldrb	r0, [r4, #0]
  40789c:	4e9c      	ldr	r6, [pc, #624]	; (407b10 <shell_config_menu+0x2bc>)
  40789e:	47b0      	blx	r6
   Serial_print(VERSION_FW[1], BYTE); 
  4078a0:	2100      	movs	r1, #0
  4078a2:	7860      	ldrb	r0, [r4, #1]
  4078a4:	47b0      	blx	r6
   Serial_print(VERSION_FW[2], BYTE); 
  4078a6:	2100      	movs	r1, #0
  4078a8:	78a0      	ldrb	r0, [r4, #2]
  4078aa:	47b0      	blx	r6
   Serial_print(VERSION_FW[3], BYTE); 
  4078ac:	2100      	movs	r1, #0
  4078ae:	78e0      	ldrb	r0, [r4, #3]
  4078b0:	47b0      	blx	r6
   Serial_println(VERSION_FW[4], BYTE);    
  4078b2:	2100      	movs	r1, #0
  4078b4:	7920      	ldrb	r0, [r4, #4]
  4078b6:	4b97      	ldr	r3, [pc, #604]	; (407b14 <shell_config_menu+0x2c0>)
  4078b8:	4798      	blx	r3
   Serial_print1("Press [KEY] and [SEND] to show Config Menu ");  
  4078ba:	4897      	ldr	r0, [pc, #604]	; (407b18 <shell_config_menu+0x2c4>)
  4078bc:	47b8      	blx	r7
   
   for(i=0; i < dec_sec; i++)
  4078be:	46c8      	mov	r8, r9
  4078c0:	f1b9 0f00 	cmp.w	r9, #0
  4078c4:	d03e      	beq.n	407944 <shell_config_menu+0xf0>
  4078c6:	2400      	movs	r4, #0
   { 
     delay_ms (100);
  4078c8:	4f94      	ldr	r7, [pc, #592]	; (407b1c <shell_config_menu+0x2c8>)
  4078ca:	4e8d      	ldr	r6, [pc, #564]	; (407b00 <shell_config_menu+0x2ac>)
  4078cc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 407ae8 <shell_config_menu+0x294>
  4078d0:	e00a      	b.n	4078e8 <shell_config_menu+0x94>
  4078d2:	2320      	movs	r3, #32
  4078d4:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
     
     if(i == 5)
       //digitalWrite(pBuz,  LOW);
	   ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_LOW);
     
     if(press_key) { 
  4078d8:	b995      	cbnz	r5, 407900 <shell_config_menu+0xac>
       Serial_println1(" OK");
       break;
     }else {
        if(i&0x01)
           Serial_print1(". ");
  4078da:	4891      	ldr	r0, [pc, #580]	; (407b20 <shell_config_menu+0x2cc>)
  4078dc:	4b8a      	ldr	r3, [pc, #552]	; (407b08 <shell_config_menu+0x2b4>)
  4078de:	4798      	blx	r3
   for(i=0; i < dec_sec; i++)
  4078e0:	3401      	adds	r4, #1
  4078e2:	4544      	cmp	r4, r8
  4078e4:	f000 80f8 	beq.w	407ad8 <shell_config_menu+0x284>
     delay_ms (100);
  4078e8:	4638      	mov	r0, r7
  4078ea:	47b0      	blx	r6
     press_key = Serial_available();     
  4078ec:	4b7f      	ldr	r3, [pc, #508]	; (407aec <shell_config_menu+0x298>)
  4078ee:	4798      	blx	r3
  4078f0:	b2c5      	uxtb	r5, r0
     if(i == 5)
  4078f2:	2c05      	cmp	r4, #5
  4078f4:	d0ed      	beq.n	4078d2 <shell_config_menu+0x7e>
     if(press_key) { 
  4078f6:	b91d      	cbnz	r5, 407900 <shell_config_menu+0xac>
        if(i&0x01)
  4078f8:	f014 0f01 	tst.w	r4, #1
  4078fc:	d0f0      	beq.n	4078e0 <shell_config_menu+0x8c>
  4078fe:	e7ec      	b.n	4078da <shell_config_menu+0x86>
       Serial_println1(" OK");
  407900:	4888      	ldr	r0, [pc, #544]	; (407b24 <shell_config_menu+0x2d0>)
  407902:	4b7d      	ldr	r3, [pc, #500]	; (407af8 <shell_config_menu+0x2a4>)
  407904:	4798      	blx	r3
  407906:	2220      	movs	r2, #32
  407908:	4b77      	ldr	r3, [pc, #476]	; (407ae8 <shell_config_menu+0x294>)
  40790a:	635a      	str	r2, [r3, #52]	; 0x34
   ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_LOW);
  
   if(press_key)
   {
     // E' stato premuto un tasto, andiamo a stampare il menu  
     Stampa_menu_config();      
  40790c:	4b86      	ldr	r3, [pc, #536]	; (407b28 <shell_config_menu+0x2d4>)
  40790e:	4798      	blx	r3
     Stampa_Prompt();    
  407910:	4b86      	ldr	r3, [pc, #536]	; (407b2c <shell_config_menu+0x2d8>)
  407912:	4798      	blx	r3
     
     delay_ms (100);
  407914:	4881      	ldr	r0, [pc, #516]	; (407b1c <shell_config_menu+0x2c8>)
  407916:	4b7a      	ldr	r3, [pc, #488]	; (407b00 <shell_config_menu+0x2ac>)
  407918:	4798      	blx	r3
     
     // scarichiamo il buffer       
     for(i=0; i< press_key; i++) {
  40791a:	b15d      	cbz	r5, 407934 <shell_config_menu+0xe0>
  40791c:	f10d 34ff 	add.w	r4, sp, #4294967295
  407920:	ab10      	add	r3, sp, #64	; 0x40
  407922:	441d      	add	r5, r3
  407924:	3d41      	subs	r5, #65	; 0x41
        buff[i] = Serial_read();  
  407926:	4f72      	ldr	r7, [pc, #456]	; (407af0 <shell_config_menu+0x29c>)
        buff[i] = 0;
  407928:	2600      	movs	r6, #0
        buff[i] = Serial_read();  
  40792a:	47b8      	blx	r7
        buff[i] = 0;
  40792c:	f804 6f01 	strb.w	r6, [r4, #1]!
     for(i=0; i< press_key; i++) {
  407930:	42ac      	cmp	r4, r5
  407932:	d1fa      	bne.n	40792a <shell_config_menu+0xd6>
     }   
     
	 wdt_restart(WATCH_DOG);
  407934:	487e      	ldr	r0, [pc, #504]	; (407b30 <shell_config_menu+0x2dc>)
  407936:	4b7f      	ldr	r3, [pc, #508]	; (407b34 <shell_config_menu+0x2e0>)
  407938:	4798      	blx	r3
	         
     while (!exit_menu)
     {
          
         delay_ms (50);
  40793a:	f8df b224 	ldr.w	fp, [pc, #548]	; 407b60 <shell_config_menu+0x30c>
  40793e:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 407b00 <shell_config_menu+0x2ac>
     while (!exit_menu)
  407942:	e01f      	b.n	407984 <shell_config_menu+0x130>
  407944:	2220      	movs	r2, #32
  407946:	4b68      	ldr	r3, [pc, #416]	; (407ae8 <shell_config_menu+0x294>)
  407948:	635a      	str	r2, [r3, #52]	; 0x34
   if(press_key)
  40794a:	2d00      	cmp	r5, #0
  40794c:	f000 80c7 	beq.w	407ade <shell_config_menu+0x28a>
  407950:	e7dc      	b.n	40790c <shell_config_menu+0xb8>
          
           switch(buff[0])
           {                 
             /**  0  Exit menu, and Starting Prog. **/
             case '0':  
                Serial_println1(" ");
  407952:	4868      	ldr	r0, [pc, #416]	; (407af4 <shell_config_menu+0x2a0>)
  407954:	4c68      	ldr	r4, [pc, #416]	; (407af8 <shell_config_menu+0x2a4>)
  407956:	47a0      	blx	r4
                Serial_println1("Starting program");  
  407958:	4877      	ldr	r0, [pc, #476]	; (407b38 <shell_config_menu+0x2e4>)
  40795a:	47a0      	blx	r4
     }
   }
   
   Serial_println1("Starting program");   
     
}
  40795c:	b011      	add	sp, #68	; 0x44
  40795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                WriteEepromDefault();
  407962:	4b76      	ldr	r3, [pc, #472]	; (407b3c <shell_config_menu+0x2e8>)
  407964:	4798      	blx	r3
          for(i=0; i< press_key; i++) 
  407966:	f1b9 0f00 	cmp.w	r9, #0
  40796a:	d009      	beq.n	407980 <shell_config_menu+0x12c>
  40796c:	f10d 33ff 	add.w	r3, sp, #4294967295
  407970:	aa10      	add	r2, sp, #64	; 0x40
  407972:	444a      	add	r2, r9
  407974:	3a41      	subs	r2, #65	; 0x41
             buff[i] = 0;  
  407976:	2100      	movs	r1, #0
  407978:	f803 1f01 	strb.w	r1, [r3, #1]!
          for(i=0; i< press_key; i++) 
  40797c:	4293      	cmp	r3, r2
  40797e:	d1fb      	bne.n	407978 <shell_config_menu+0x124>
            Stampa_Prompt();  
  407980:	4b6a      	ldr	r3, [pc, #424]	; (407b2c <shell_config_menu+0x2d8>)
  407982:	4798      	blx	r3
         delay_ms (50);
  407984:	4658      	mov	r0, fp
  407986:	47d0      	blx	sl
		 wdt_restart(WATCH_DOG);
  407988:	4869      	ldr	r0, [pc, #420]	; (407b30 <shell_config_menu+0x2dc>)
  40798a:	4b6a      	ldr	r3, [pc, #424]	; (407b34 <shell_config_menu+0x2e0>)
  40798c:	4798      	blx	r3
         press_key = Serial_available();  
  40798e:	4b57      	ldr	r3, [pc, #348]	; (407aec <shell_config_menu+0x298>)
  407990:	4798      	blx	r3
  407992:	4605      	mov	r5, r0
         if(press_key) {
  407994:	f010 0fff 	tst.w	r0, #255	; 0xff
  407998:	d0f4      	beq.n	407984 <shell_config_menu+0x130>
           delay_ms (50);
  40799a:	4658      	mov	r0, fp
  40799c:	47d0      	blx	sl
           for(i=0; i< press_key; i++) { 
  40799e:	f015 09ff 	ands.w	r9, r5, #255	; 0xff
  4079a2:	f000 80df 	beq.w	407b64 <shell_config_menu+0x310>
  4079a6:	f10d 34ff 	add.w	r4, sp, #4294967295
  4079aa:	ab10      	add	r3, sp, #64	; 0x40
  4079ac:	eb03 0609 	add.w	r6, r3, r9
  4079b0:	3e41      	subs	r6, #65	; 0x41
              buff[i] = Serial_read();  
  4079b2:	4d4f      	ldr	r5, [pc, #316]	; (407af0 <shell_config_menu+0x29c>)
              Serial_print(buff[i], BYTE); 
  4079b4:	f04f 0800 	mov.w	r8, #0
  4079b8:	4f55      	ldr	r7, [pc, #340]	; (407b10 <shell_config_menu+0x2bc>)
              buff[i] = Serial_read();  
  4079ba:	47a8      	blx	r5
  4079bc:	b2c0      	uxtb	r0, r0
  4079be:	f804 0f01 	strb.w	r0, [r4, #1]!
              Serial_print(buff[i], BYTE); 
  4079c2:	4641      	mov	r1, r8
  4079c4:	47b8      	blx	r7
           for(i=0; i< press_key; i++) { 
  4079c6:	42a6      	cmp	r6, r4
  4079c8:	d1f7      	bne.n	4079ba <shell_config_menu+0x166>
           Serial_println1(" ");           
  4079ca:	484a      	ldr	r0, [pc, #296]	; (407af4 <shell_config_menu+0x2a0>)
  4079cc:	4b4a      	ldr	r3, [pc, #296]	; (407af8 <shell_config_menu+0x2a4>)
  4079ce:	4798      	blx	r3
           switch(buff[0])
  4079d0:	f89d 3000 	ldrb.w	r3, [sp]
  4079d4:	3b0a      	subs	r3, #10
  4079d6:	2b2f      	cmp	r3, #47	; 0x2f
  4079d8:	d87a      	bhi.n	407ad0 <shell_config_menu+0x27c>
  4079da:	a201      	add	r2, pc, #4	; (adr r2, 4079e0 <shell_config_menu+0x18c>)
  4079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4079e0:	00407acb 	.word	0x00407acb
  4079e4:	00407ad1 	.word	0x00407ad1
  4079e8:	00407ad1 	.word	0x00407ad1
  4079ec:	00407ad1 	.word	0x00407ad1
  4079f0:	00407ad1 	.word	0x00407ad1
  4079f4:	00407ad1 	.word	0x00407ad1
  4079f8:	00407ad1 	.word	0x00407ad1
  4079fc:	00407ad1 	.word	0x00407ad1
  407a00:	00407ad1 	.word	0x00407ad1
  407a04:	00407ad1 	.word	0x00407ad1
  407a08:	00407ad1 	.word	0x00407ad1
  407a0c:	00407ad1 	.word	0x00407ad1
  407a10:	00407ad1 	.word	0x00407ad1
  407a14:	00407ad1 	.word	0x00407ad1
  407a18:	00407ad1 	.word	0x00407ad1
  407a1c:	00407ad1 	.word	0x00407ad1
  407a20:	00407ad1 	.word	0x00407ad1
  407a24:	00407ad1 	.word	0x00407ad1
  407a28:	00407ad1 	.word	0x00407ad1
  407a2c:	00407ad1 	.word	0x00407ad1
  407a30:	00407ad1 	.word	0x00407ad1
  407a34:	00407ad1 	.word	0x00407ad1
  407a38:	00407ad1 	.word	0x00407ad1
  407a3c:	00407ad1 	.word	0x00407ad1
  407a40:	00407ad1 	.word	0x00407ad1
  407a44:	00407ad1 	.word	0x00407ad1
  407a48:	00407ad1 	.word	0x00407ad1
  407a4c:	00407ad1 	.word	0x00407ad1
  407a50:	00407ad1 	.word	0x00407ad1
  407a54:	00407ad1 	.word	0x00407ad1
  407a58:	00407ad1 	.word	0x00407ad1
  407a5c:	00407ad1 	.word	0x00407ad1
  407a60:	00407ad1 	.word	0x00407ad1
  407a64:	00407ad1 	.word	0x00407ad1
  407a68:	00407ad1 	.word	0x00407ad1
  407a6c:	00407ad1 	.word	0x00407ad1
  407a70:	00407ad1 	.word	0x00407ad1
  407a74:	00407ad1 	.word	0x00407ad1
  407a78:	00407953 	.word	0x00407953
  407a7c:	00407963 	.word	0x00407963
  407a80:	00407aa1 	.word	0x00407aa1
  407a84:	00407aa7 	.word	0x00407aa7
  407a88:	00407aad 	.word	0x00407aad
  407a8c:	00407ab3 	.word	0x00407ab3
  407a90:	00407ab9 	.word	0x00407ab9
  407a94:	0040796d 	.word	0x0040796d
  407a98:	00407abf 	.word	0x00407abf
  407a9c:	00407ac5 	.word	0x00407ac5
                read_cfg_data();           
  407aa0:	4b27      	ldr	r3, [pc, #156]	; (407b40 <shell_config_menu+0x2ec>)
  407aa2:	4798      	blx	r3
             break;
  407aa4:	e75f      	b.n	407966 <shell_config_menu+0x112>
                Set_SerialNumb();              
  407aa6:	4b27      	ldr	r3, [pc, #156]	; (407b44 <shell_config_menu+0x2f0>)
  407aa8:	4798      	blx	r3
             break;
  407aaa:	e75c      	b.n	407966 <shell_config_menu+0x112>
                Set_dataMotors();
  407aac:	4b26      	ldr	r3, [pc, #152]	; (407b48 <shell_config_menu+0x2f4>)
  407aae:	4798      	blx	r3
             break;
  407ab0:	e759      	b.n	407966 <shell_config_menu+0x112>
                SettingNTC();
  407ab2:	4b26      	ldr	r3, [pc, #152]	; (407b4c <shell_config_menu+0x2f8>)
  407ab4:	4798      	blx	r3
             break;  
  407ab6:	e756      	b.n	407966 <shell_config_menu+0x112>
                manualTesting(); 
  407ab8:	4b25      	ldr	r3, [pc, #148]	; (407b50 <shell_config_menu+0x2fc>)
  407aba:	4798      	blx	r3
             break;        
  407abc:	e753      	b.n	407966 <shell_config_menu+0x112>
                readWeeklyProg();
  407abe:	4b25      	ldr	r3, [pc, #148]	; (407b54 <shell_config_menu+0x300>)
  407ac0:	4798      	blx	r3
             break;
  407ac2:	e750      	b.n	407966 <shell_config_menu+0x112>
                writeConfigUnit();
  407ac4:	4b24      	ldr	r3, [pc, #144]	; (407b58 <shell_config_menu+0x304>)
  407ac6:	4798      	blx	r3
             break;
  407ac8:	e74d      	b.n	407966 <shell_config_menu+0x112>
                Stampa_menu_config(); 
  407aca:	4b17      	ldr	r3, [pc, #92]	; (407b28 <shell_config_menu+0x2d4>)
  407acc:	4798      	blx	r3
             break;
  407ace:	e74a      	b.n	407966 <shell_config_menu+0x112>
                Serial_println1("Sorry, the function Select is not present");  
  407ad0:	4822      	ldr	r0, [pc, #136]	; (407b5c <shell_config_menu+0x308>)
  407ad2:	4b09      	ldr	r3, [pc, #36]	; (407af8 <shell_config_menu+0x2a4>)
  407ad4:	4798      	blx	r3
             break;
  407ad6:	e746      	b.n	407966 <shell_config_menu+0x112>
  407ad8:	2220      	movs	r2, #32
  407ada:	4b03      	ldr	r3, [pc, #12]	; (407ae8 <shell_config_menu+0x294>)
  407adc:	635a      	str	r2, [r3, #52]	; 0x34
   Serial_println1("Starting program");   
  407ade:	4816      	ldr	r0, [pc, #88]	; (407b38 <shell_config_menu+0x2e4>)
  407ae0:	4b05      	ldr	r3, [pc, #20]	; (407af8 <shell_config_menu+0x2a4>)
  407ae2:	4798      	blx	r3
  407ae4:	e73a      	b.n	40795c <shell_config_menu+0x108>
  407ae6:	bf00      	nop
  407ae8:	400e0e00 	.word	0x400e0e00
  407aec:	00405e81 	.word	0x00405e81
  407af0:	00405efd 	.word	0x00405efd
  407af4:	004126b8 	.word	0x004126b8
  407af8:	00406051 	.word	0x00406051
  407afc:	00011705 	.word	0x00011705
  407b00:	20000001 	.word	0x20000001
  407b04:	00412820 	.word	0x00412820
  407b08:	00405f35 	.word	0x00405f35
  407b0c:	004138a8 	.word	0x004138a8
  407b10:	00405f65 	.word	0x00405f65
  407b14:	0040609d 	.word	0x0040609d
  407b18:	0041282c 	.word	0x0041282c
  407b1c:	000ae62e 	.word	0x000ae62e
  407b20:	0041285c 	.word	0x0041285c
  407b24:	00412858 	.word	0x00412858
  407b28:	004066e5 	.word	0x004066e5
  407b2c:	004065d9 	.word	0x004065d9
  407b30:	400e1450 	.word	0x400e1450
  407b34:	00403a89 	.word	0x00403a89
  407b38:	00412860 	.word	0x00412860
  407b3c:	0040678d 	.word	0x0040678d
  407b40:	00406929 	.word	0x00406929
  407b44:	00406bb5 	.word	0x00406bb5
  407b48:	00406d25 	.word	0x00406d25
  407b4c:	00407105 	.word	0x00407105
  407b50:	00407421 	.word	0x00407421
  407b54:	00407279 	.word	0x00407279
  407b58:	00407591 	.word	0x00407591
  407b5c:	00412874 	.word	0x00412874
  407b60:	00057317 	.word	0x00057317
           Serial_println1(" ");           
  407b64:	4835      	ldr	r0, [pc, #212]	; (407c3c <shell_config_menu+0x3e8>)
  407b66:	4b36      	ldr	r3, [pc, #216]	; (407c40 <shell_config_menu+0x3ec>)
  407b68:	4798      	blx	r3
           switch(buff[0])
  407b6a:	f89d 3000 	ldrb.w	r3, [sp]
  407b6e:	3b0a      	subs	r3, #10
  407b70:	2b2f      	cmp	r3, #47	; 0x2f
  407b72:	d8ad      	bhi.n	407ad0 <shell_config_menu+0x27c>
  407b74:	a201      	add	r2, pc, #4	; (adr r2, 407b7c <shell_config_menu+0x328>)
  407b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407b7a:	bf00      	nop
  407b7c:	00407acb 	.word	0x00407acb
  407b80:	00407ad1 	.word	0x00407ad1
  407b84:	00407ad1 	.word	0x00407ad1
  407b88:	00407ad1 	.word	0x00407ad1
  407b8c:	00407ad1 	.word	0x00407ad1
  407b90:	00407ad1 	.word	0x00407ad1
  407b94:	00407ad1 	.word	0x00407ad1
  407b98:	00407ad1 	.word	0x00407ad1
  407b9c:	00407ad1 	.word	0x00407ad1
  407ba0:	00407ad1 	.word	0x00407ad1
  407ba4:	00407ad1 	.word	0x00407ad1
  407ba8:	00407ad1 	.word	0x00407ad1
  407bac:	00407ad1 	.word	0x00407ad1
  407bb0:	00407ad1 	.word	0x00407ad1
  407bb4:	00407ad1 	.word	0x00407ad1
  407bb8:	00407ad1 	.word	0x00407ad1
  407bbc:	00407ad1 	.word	0x00407ad1
  407bc0:	00407ad1 	.word	0x00407ad1
  407bc4:	00407ad1 	.word	0x00407ad1
  407bc8:	00407ad1 	.word	0x00407ad1
  407bcc:	00407ad1 	.word	0x00407ad1
  407bd0:	00407ad1 	.word	0x00407ad1
  407bd4:	00407ad1 	.word	0x00407ad1
  407bd8:	00407ad1 	.word	0x00407ad1
  407bdc:	00407ad1 	.word	0x00407ad1
  407be0:	00407ad1 	.word	0x00407ad1
  407be4:	00407ad1 	.word	0x00407ad1
  407be8:	00407ad1 	.word	0x00407ad1
  407bec:	00407ad1 	.word	0x00407ad1
  407bf0:	00407ad1 	.word	0x00407ad1
  407bf4:	00407ad1 	.word	0x00407ad1
  407bf8:	00407ad1 	.word	0x00407ad1
  407bfc:	00407ad1 	.word	0x00407ad1
  407c00:	00407ad1 	.word	0x00407ad1
  407c04:	00407ad1 	.word	0x00407ad1
  407c08:	00407ad1 	.word	0x00407ad1
  407c0c:	00407ad1 	.word	0x00407ad1
  407c10:	00407ad1 	.word	0x00407ad1
  407c14:	00407953 	.word	0x00407953
  407c18:	00407963 	.word	0x00407963
  407c1c:	00407aa1 	.word	0x00407aa1
  407c20:	00407aa7 	.word	0x00407aa7
  407c24:	00407aad 	.word	0x00407aad
  407c28:	00407ab3 	.word	0x00407ab3
  407c2c:	00407ab9 	.word	0x00407ab9
  407c30:	00407981 	.word	0x00407981
  407c34:	00407abf 	.word	0x00407abf
  407c38:	00407ac5 	.word	0x00407ac5
  407c3c:	004126b8 	.word	0x004126b8
  407c40:	00406051 	.word	0x00406051

00407c44 <print_result_test>:

//-----------------------------------------------------
//    Stampa risultato test
//-----------------------------------------------------
void print_result_test(Byte esito)
{
  407c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407c48:	4680      	mov	r8, r0
	Serial_print1("Result Test ");
  407c4a:	480e      	ldr	r0, [pc, #56]	; (407c84 <print_result_test+0x40>)
  407c4c:	4e0e      	ldr	r6, [pc, #56]	; (407c88 <print_result_test+0x44>)
  407c4e:	47b0      	blx	r6
	delay_ms (150);
  407c50:	4d0e      	ldr	r5, [pc, #56]	; (407c8c <print_result_test+0x48>)
  407c52:	4628      	mov	r0, r5
  407c54:	4c0e      	ldr	r4, [pc, #56]	; (407c90 <print_result_test+0x4c>)
  407c56:	47a0      	blx	r4
	Serial_print1(".");
  407c58:	4f0e      	ldr	r7, [pc, #56]	; (407c94 <print_result_test+0x50>)
  407c5a:	4638      	mov	r0, r7
  407c5c:	47b0      	blx	r6
	delay_ms(150);
  407c5e:	4628      	mov	r0, r5
  407c60:	47a0      	blx	r4
	Serial_print1(".");
  407c62:	4638      	mov	r0, r7
  407c64:	47b0      	blx	r6
	delay_ms(150);
  407c66:	4628      	mov	r0, r5
  407c68:	47a0      	blx	r4
	
	if(esito == 'F')
  407c6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
	Serial_println1(".FAILED!");
  407c6e:	bf0c      	ite	eq
  407c70:	4809      	ldreq	r0, [pc, #36]	; (407c98 <print_result_test+0x54>)
	else
	Serial_println1(".PASSED");
  407c72:	480a      	ldrne	r0, [pc, #40]	; (407c9c <print_result_test+0x58>)
  407c74:	4b0a      	ldr	r3, [pc, #40]	; (407ca0 <print_result_test+0x5c>)
  407c76:	4798      	blx	r3
	
	delay_ms(750);
  407c78:	480a      	ldr	r0, [pc, #40]	; (407ca4 <print_result_test+0x60>)
  407c7a:	4b05      	ldr	r3, [pc, #20]	; (407c90 <print_result_test+0x4c>)
  407c7c:	4798      	blx	r3
  407c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c82:	bf00      	nop
  407c84:	00413274 	.word	0x00413274
  407c88:	00405f35 	.word	0x00405f35
  407c8c:	00105945 	.word	0x00105945
  407c90:	20000001 	.word	0x20000001
  407c94:	00413788 	.word	0x00413788
  407c98:	00413284 	.word	0x00413284
  407c9c:	00413290 	.word	0x00413290
  407ca0:	00406051 	.word	0x00406051
  407ca4:	0051be57 	.word	0x0051be57

00407ca8 <test_bypass>:
// Viene richiamata dalla shell, si compone in 2 fasi:
//   1: Apre il bypass e verifica l'assorbimento
//   2: Chiude il bypass e verifica l'assorbimento
//-----------------------------------------------------
void test_bypass()
{
  407ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Byte nTest = 1;
	
	//-------------------------------
	//---- step 1: open Bypass   ----
	//-------------------------------
	Serial_println1(" ");
  407cac:	4880      	ldr	r0, [pc, #512]	; (407eb0 <test_bypass+0x208>)
  407cae:	4b81      	ldr	r3, [pc, #516]	; (407eb4 <test_bypass+0x20c>)
  407cb0:	4798      	blx	r3
	PrintFlashString(str_1_test_BDP,  NEW_LINE);
  407cb2:	216e      	movs	r1, #110	; 0x6e
  407cb4:	4880      	ldr	r0, [pc, #512]	; (407eb8 <test_bypass+0x210>)
  407cb6:	4b81      	ldr	r3, [pc, #516]	; (407ebc <test_bypass+0x214>)
  407cb8:	4798      	blx	r3
	
	for(nTest = 1; nTest < 6; nTest++)
  407cba:	f04f 0a01 	mov.w	sl, #1
	{
		PrintFlashString(str_2_test_BDP,  NO_NEW_LINE);
		Serial_print(nTest, DEC);
  407cbe:	f8df b260 	ldr.w	fp, [pc, #608]	; 407f20 <test_bypass+0x278>
		Serial_print1(" ");
  407cc2:	4f7f      	ldr	r7, [pc, #508]	; (407ec0 <test_bypass+0x218>)
		
		PositionBypass = OPEN_BPD;
		numStepBypass  = 0;
  407cc4:	4d7f      	ldr	r5, [pc, #508]	; (407ec4 <test_bypass+0x21c>)
		RotaBypass = ORARIO;
		
		// segnaliamo che il bypass sta iniziando il cambiamento di stato (OPEN->CLOSE 0 CLOSE->OPEN).
		// quindi il regolatore portera' la velocita' al minimo.
		sData.status_unit &= MSK_STS_BYPASS;
		sData.status_unit |= (1 << POS_BIT_BYPASS_RUN);
  407cc6:	4c80      	ldr	r4, [pc, #512]	; (407ec8 <test_bypass+0x220>)
		startMotorBPD();
		
		do {
			Ctrl_FunzionamentoBPD();
			
			if((numStepBypass % 300)==0) {
  407cc8:	4e80      	ldr	r6, [pc, #512]	; (407ecc <test_bypass+0x224>)
  407cca:	e0b0      	b.n	407e2e <test_bypass+0x186>
		RotaBypass = ORARIO;
  407ccc:	2200      	movs	r2, #0
  407cce:	4b80      	ldr	r3, [pc, #512]	; (407ed0 <test_bypass+0x228>)
  407cd0:	701a      	strb	r2, [r3, #0]
  407cd2:	e0c2      	b.n	407e5a <test_bypass+0x1b2>
				Serial_print1(".");
				delay_ms (10);
			}else
			delay_ms (5);
  407cd4:	f648 3083 	movw	r0, #35715	; 0x8b83
  407cd8:	4b7e      	ldr	r3, [pc, #504]	; (407ed4 <test_bypass+0x22c>)
  407cda:	4798      	blx	r3
			
			wdt_restart(WATCH_DOG);
  407cdc:	4640      	mov	r0, r8
  407cde:	4b7e      	ldr	r3, [pc, #504]	; (407ed8 <test_bypass+0x230>)
  407ce0:	4798      	blx	r3
			#ifdef WORK_WDT
			//ClearWDT();  // teniamo vivo il WacthDog
			#endif
			
		}while(sData.status_unit & (1 << POS_BIT_BYPASS_RUN));
  407ce2:	f8b4 31eb 	ldrh.w	r3, [r4, #491]	; 0x1eb
  407ce6:	f013 0f40 	tst.w	r3, #64	; 0x40
  407cea:	d010      	beq.n	407d0e <test_bypass+0x66>
			Ctrl_FunzionamentoBPD();
  407cec:	47c8      	blx	r9
			if((numStepBypass % 300)==0) {
  407cee:	682a      	ldr	r2, [r5, #0]
  407cf0:	fba6 1302 	umull	r1, r3, r6, r2
  407cf4:	095b      	lsrs	r3, r3, #5
  407cf6:	f44f 7196 	mov.w	r1, #300	; 0x12c
  407cfa:	fb01 2313 	mls	r3, r1, r3, r2
  407cfe:	2b00      	cmp	r3, #0
  407d00:	d1e8      	bne.n	407cd4 <test_bypass+0x2c>
				Serial_print1(".");
  407d02:	4876      	ldr	r0, [pc, #472]	; (407edc <test_bypass+0x234>)
  407d04:	47b8      	blx	r7
				delay_ms (10);
  407d06:	4876      	ldr	r0, [pc, #472]	; (407ee0 <test_bypass+0x238>)
  407d08:	4b72      	ldr	r3, [pc, #456]	; (407ed4 <test_bypass+0x22c>)
  407d0a:	4798      	blx	r3
  407d0c:	e7e6      	b.n	407cdc <test_bypass+0x34>
		
		Serial_print1(" Imin= ");
  407d0e:	4875      	ldr	r0, [pc, #468]	; (407ee4 <test_bypass+0x23c>)
  407d10:	47b8      	blx	r7
		Serial_print(sData.absorption_bypass_min, DEC);
  407d12:	f9b4 01e7 	ldrsh.w	r0, [r4, #487]	; 0x1e7
  407d16:	210a      	movs	r1, #10
  407d18:	b2c0      	uxtb	r0, r0
  407d1a:	47d8      	blx	fp
		Serial_print1("mA,  Imax= ");
  407d1c:	4872      	ldr	r0, [pc, #456]	; (407ee8 <test_bypass+0x240>)
  407d1e:	47b8      	blx	r7
		Serial_print(sData.absorption_bypass_max, DEC);
  407d20:	f9b4 01e9 	ldrsh.w	r0, [r4, #489]	; 0x1e9
  407d24:	210a      	movs	r1, #10
  407d26:	b2c0      	uxtb	r0, r0
  407d28:	47d8      	blx	fp
		Serial_print1("mA");
  407d2a:	4870      	ldr	r0, [pc, #448]	; (407eec <test_bypass+0x244>)
  407d2c:	47b8      	blx	r7

		if(sData.absorption_bypass_min < 30) {
  407d2e:	f9b4 31e7 	ldrsh.w	r3, [r4, #487]	; 0x1e7
  407d32:	2b1d      	cmp	r3, #29
  407d34:	dd29      	ble.n	407d8a <test_bypass+0xe2>
			//digitalWrite(pBuz,  LOW);
			ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_LOW);
			break; // esci dalla loop
		}
		
		delay_ms (2500);
  407d36:	486e      	ldr	r0, [pc, #440]	; (407ef0 <test_bypass+0x248>)
  407d38:	4b66      	ldr	r3, [pc, #408]	; (407ed4 <test_bypass+0x22c>)
  407d3a:	4798      	blx	r3
		
		//-------------------------------
		//---- step 2: Close Bypass  ----
		//-------------------------------
		Serial_println1(" ");
  407d3c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 407eb0 <test_bypass+0x208>
  407d40:	4640      	mov	r0, r8
  407d42:	4b5c      	ldr	r3, [pc, #368]	; (407eb4 <test_bypass+0x20c>)
  407d44:	4798      	blx	r3
		PrintFlashString(str_3_test_BDP,  NO_NEW_LINE);
  407d46:	2100      	movs	r1, #0
  407d48:	486a      	ldr	r0, [pc, #424]	; (407ef4 <test_bypass+0x24c>)
  407d4a:	4b5c      	ldr	r3, [pc, #368]	; (407ebc <test_bypass+0x214>)
  407d4c:	4798      	blx	r3
		Serial_print(nTest, DEC);
  407d4e:	210a      	movs	r1, #10
  407d50:	4650      	mov	r0, sl
  407d52:	47d8      	blx	fp
		Serial_print1(" ");
  407d54:	4640      	mov	r0, r8
  407d56:	47b8      	blx	r7
		
		PositionBypass = CLOSE_BPD;
  407d58:	2201      	movs	r2, #1
  407d5a:	4b67      	ldr	r3, [pc, #412]	; (407ef8 <test_bypass+0x250>)
  407d5c:	701a      	strb	r2, [r3, #0]
		numStepBypass  = 0;
  407d5e:	2300      	movs	r3, #0
  407d60:	602b      	str	r3, [r5, #0]
		
		if(read_byte_eeprom(ADDR_EEP(RotazioneBypass)) == ORARIO)
  407d62:	2042      	movs	r0, #66	; 0x42
  407d64:	4b65      	ldr	r3, [pc, #404]	; (407efc <test_bypass+0x254>)
  407d66:	4798      	blx	r3
  407d68:	bb10      	cbnz	r0, 407db0 <test_bypass+0x108>
		RotaBypass = ORARIO;
  407d6a:	2200      	movs	r2, #0
  407d6c:	4b58      	ldr	r3, [pc, #352]	; (407ed0 <test_bypass+0x228>)
  407d6e:	701a      	strb	r2, [r3, #0]
		else
		RotaBypass = ANTIORARIO;
		
		// segnaliamo che il bypass sta iniziando il cambiamento di stato (OPEN->CLOSE 0 CLOSE->OPEN).
		// quindi il regolatore portera' la velocita' al minimo.
		sData.status_unit &= MSK_STS_BYPASS;
  407d70:	f8b4 31eb 	ldrh.w	r3, [r4, #491]	; 0x1eb
  407d74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		sData.status_unit |= (1 << POS_BIT_BYPASS_RUN);
  407d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407d7c:	f8a4 31eb 	strh.w	r3, [r4, #491]	; 0x1eb
		startMotorBPD();
  407d80:	4b5f      	ldr	r3, [pc, #380]	; (407f00 <test_bypass+0x258>)
  407d82:	4798      	blx	r3
		
		valueBypass = 0;
		do {
			Ctrl_FunzionamentoBPD();
  407d84:	f8df 819c 	ldr.w	r8, [pc, #412]	; 407f24 <test_bypass+0x27c>
  407d88:	e01f      	b.n	407dca <test_bypass+0x122>
			Serial_print1(" ,ERROR!");
  407d8a:	485e      	ldr	r0, [pc, #376]	; (407f04 <test_bypass+0x25c>)
  407d8c:	4b4c      	ldr	r3, [pc, #304]	; (407ec0 <test_bypass+0x218>)
  407d8e:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407d90:	4c5d      	ldr	r4, [pc, #372]	; (407f08 <test_bypass+0x260>)
  407d92:	2520      	movs	r5, #32
  407d94:	6325      	str	r5, [r4, #48]	; 0x30
			delay_ms (400);
  407d96:	4f5d      	ldr	r7, [pc, #372]	; (407f0c <test_bypass+0x264>)
  407d98:	4638      	mov	r0, r7
  407d9a:	4e4e      	ldr	r6, [pc, #312]	; (407ed4 <test_bypass+0x22c>)
  407d9c:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407d9e:	6365      	str	r5, [r4, #52]	; 0x34
			delay_ms (400);
  407da0:	4638      	mov	r0, r7
  407da2:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407da4:	6325      	str	r5, [r4, #48]	; 0x30
			delay_ms (400);
  407da6:	4638      	mov	r0, r7
  407da8:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407daa:	6365      	str	r5, [r4, #52]	; 0x34
			esito = 'F';
  407dac:	2446      	movs	r4, #70	; 0x46
  407dae:	e077      	b.n	407ea0 <test_bypass+0x1f8>
		RotaBypass = ANTIORARIO;
  407db0:	22ff      	movs	r2, #255	; 0xff
  407db2:	4b47      	ldr	r3, [pc, #284]	; (407ed0 <test_bypass+0x228>)
  407db4:	701a      	strb	r2, [r3, #0]
  407db6:	e7db      	b.n	407d70 <test_bypass+0xc8>
			
			if((numStepBypass % 300)==0) {
				Serial_print1(".");
				delay_ms (10);
			}else
			delay_ms (2);
  407db8:	f243 70ce 	movw	r0, #14286	; 0x37ce
  407dbc:	4b45      	ldr	r3, [pc, #276]	; (407ed4 <test_bypass+0x22c>)
  407dbe:	4798      	blx	r3
			
		}while(sData.status_unit & (1 << POS_BIT_BYPASS_RUN));
  407dc0:	f8b4 31eb 	ldrh.w	r3, [r4, #491]	; 0x1eb
  407dc4:	f013 0f40 	tst.w	r3, #64	; 0x40
  407dc8:	d010      	beq.n	407dec <test_bypass+0x144>
			Ctrl_FunzionamentoBPD();
  407dca:	47c0      	blx	r8
			if((numStepBypass % 300)==0) {
  407dcc:	682a      	ldr	r2, [r5, #0]
  407dce:	fba6 1302 	umull	r1, r3, r6, r2
  407dd2:	095b      	lsrs	r3, r3, #5
  407dd4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  407dd8:	fb01 2313 	mls	r3, r1, r3, r2
  407ddc:	2b00      	cmp	r3, #0
  407dde:	d1eb      	bne.n	407db8 <test_bypass+0x110>
				Serial_print1(".");
  407de0:	483e      	ldr	r0, [pc, #248]	; (407edc <test_bypass+0x234>)
  407de2:	47b8      	blx	r7
				delay_ms (10);
  407de4:	483e      	ldr	r0, [pc, #248]	; (407ee0 <test_bypass+0x238>)
  407de6:	4b3b      	ldr	r3, [pc, #236]	; (407ed4 <test_bypass+0x22c>)
  407de8:	4798      	blx	r3
  407dea:	e7e9      	b.n	407dc0 <test_bypass+0x118>
		
		Serial_print1(" Imin= ");
  407dec:	483d      	ldr	r0, [pc, #244]	; (407ee4 <test_bypass+0x23c>)
  407dee:	47b8      	blx	r7
		Serial_print(sData.absorption_bypass_min, DEC);
  407df0:	f9b4 01e7 	ldrsh.w	r0, [r4, #487]	; 0x1e7
  407df4:	210a      	movs	r1, #10
  407df6:	b2c0      	uxtb	r0, r0
  407df8:	47d8      	blx	fp
		Serial_print1("mA,  Imax= ");
  407dfa:	483b      	ldr	r0, [pc, #236]	; (407ee8 <test_bypass+0x240>)
  407dfc:	47b8      	blx	r7
		Serial_print(sData.absorption_bypass_max, DEC);
  407dfe:	f9b4 01e9 	ldrsh.w	r0, [r4, #489]	; 0x1e9
  407e02:	210a      	movs	r1, #10
  407e04:	b2c0      	uxtb	r0, r0
  407e06:	47d8      	blx	fp
		Serial_print1("mA");
  407e08:	4838      	ldr	r0, [pc, #224]	; (407eec <test_bypass+0x244>)
  407e0a:	47b8      	blx	r7
		
		// absorption_bypass = (805 * 3)/11 = 220mA;
		if(sData.absorption_bypass_max >= 220) {
  407e0c:	f9b4 31e9 	ldrsh.w	r3, [r4, #489]	; 0x1e9
  407e10:	2bdb      	cmp	r3, #219	; 0xdb
  407e12:	dc31      	bgt.n	407e78 <test_bypass+0x1d0>
			//digitalWrite(pBuz,  LOW);
			ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_LOW);
			break;
		}
		
		Serial_println1(" ");
  407e14:	4826      	ldr	r0, [pc, #152]	; (407eb0 <test_bypass+0x208>)
  407e16:	4b27      	ldr	r3, [pc, #156]	; (407eb4 <test_bypass+0x20c>)
  407e18:	4798      	blx	r3
		delay_ms (3000);
  407e1a:	483d      	ldr	r0, [pc, #244]	; (407f10 <test_bypass+0x268>)
  407e1c:	4b2d      	ldr	r3, [pc, #180]	; (407ed4 <test_bypass+0x22c>)
  407e1e:	4798      	blx	r3
	for(nTest = 1; nTest < 6; nTest++)
  407e20:	f10a 0a01 	add.w	sl, sl, #1
  407e24:	fa5f fa8a 	uxtb.w	sl, sl
  407e28:	f1ba 0f06 	cmp.w	sl, #6
  407e2c:	d037      	beq.n	407e9e <test_bypass+0x1f6>
		PrintFlashString(str_2_test_BDP,  NO_NEW_LINE);
  407e2e:	2100      	movs	r1, #0
  407e30:	4838      	ldr	r0, [pc, #224]	; (407f14 <test_bypass+0x26c>)
  407e32:	4b22      	ldr	r3, [pc, #136]	; (407ebc <test_bypass+0x214>)
  407e34:	4798      	blx	r3
		Serial_print(nTest, DEC);
  407e36:	210a      	movs	r1, #10
  407e38:	4650      	mov	r0, sl
  407e3a:	47d8      	blx	fp
		Serial_print1(" ");
  407e3c:	481c      	ldr	r0, [pc, #112]	; (407eb0 <test_bypass+0x208>)
  407e3e:	47b8      	blx	r7
		PositionBypass = OPEN_BPD;
  407e40:	2300      	movs	r3, #0
  407e42:	4a2d      	ldr	r2, [pc, #180]	; (407ef8 <test_bypass+0x250>)
  407e44:	7013      	strb	r3, [r2, #0]
		numStepBypass  = 0;
  407e46:	602b      	str	r3, [r5, #0]
		if(read_byte_eeprom(ADDR_EEP(RotazioneBypass)) == ORARIO)
  407e48:	2042      	movs	r0, #66	; 0x42
  407e4a:	4b2c      	ldr	r3, [pc, #176]	; (407efc <test_bypass+0x254>)
  407e4c:	4798      	blx	r3
  407e4e:	2800      	cmp	r0, #0
  407e50:	f47f af3c 	bne.w	407ccc <test_bypass+0x24>
		RotaBypass = ANTIORARIO;
  407e54:	22ff      	movs	r2, #255	; 0xff
  407e56:	4b1e      	ldr	r3, [pc, #120]	; (407ed0 <test_bypass+0x228>)
  407e58:	701a      	strb	r2, [r3, #0]
		sData.status_unit &= MSK_STS_BYPASS;
  407e5a:	f8b4 31eb 	ldrh.w	r3, [r4, #491]	; 0x1eb
  407e5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		sData.status_unit |= (1 << POS_BIT_BYPASS_RUN);
  407e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e66:	f8a4 31eb 	strh.w	r3, [r4, #491]	; 0x1eb
		startMotorBPD();
  407e6a:	4b25      	ldr	r3, [pc, #148]	; (407f00 <test_bypass+0x258>)
  407e6c:	4798      	blx	r3
			Ctrl_FunzionamentoBPD();
  407e6e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 407f24 <test_bypass+0x27c>
			wdt_restart(WATCH_DOG);
  407e72:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 407f28 <test_bypass+0x280>
  407e76:	e739      	b.n	407cec <test_bypass+0x44>
			Serial_print1(" ,ERROR!");
  407e78:	4822      	ldr	r0, [pc, #136]	; (407f04 <test_bypass+0x25c>)
  407e7a:	4b11      	ldr	r3, [pc, #68]	; (407ec0 <test_bypass+0x218>)
  407e7c:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407e7e:	4c22      	ldr	r4, [pc, #136]	; (407f08 <test_bypass+0x260>)
  407e80:	2520      	movs	r5, #32
  407e82:	6325      	str	r5, [r4, #48]	; 0x30
			delay_ms (400);
  407e84:	4f21      	ldr	r7, [pc, #132]	; (407f0c <test_bypass+0x264>)
  407e86:	4638      	mov	r0, r7
  407e88:	4e12      	ldr	r6, [pc, #72]	; (407ed4 <test_bypass+0x22c>)
  407e8a:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407e8c:	6365      	str	r5, [r4, #52]	; 0x34
			delay_ms (400);
  407e8e:	4638      	mov	r0, r7
  407e90:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407e92:	6325      	str	r5, [r4, #48]	; 0x30
			delay_ms (400);
  407e94:	4638      	mov	r0, r7
  407e96:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407e98:	6365      	str	r5, [r4, #52]	; 0x34
			esito = 'F';
  407e9a:	2446      	movs	r4, #70	; 0x46
  407e9c:	e000      	b.n	407ea0 <test_bypass+0x1f8>
	int esito =0;
  407e9e:	2400      	movs	r4, #0
	}
	
	
	delay_ms (100);
  407ea0:	481d      	ldr	r0, [pc, #116]	; (407f18 <test_bypass+0x270>)
  407ea2:	4b0c      	ldr	r3, [pc, #48]	; (407ed4 <test_bypass+0x22c>)
  407ea4:	4798      	blx	r3
	print_result_test(esito);
  407ea6:	4620      	mov	r0, r4
  407ea8:	4b1c      	ldr	r3, [pc, #112]	; (407f1c <test_bypass+0x274>)
  407eaa:	4798      	blx	r3
  407eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407eb0:	004126b8 	.word	0x004126b8
  407eb4:	00406051 	.word	0x00406051
  407eb8:	00413298 	.word	0x00413298
  407ebc:	0040669d 	.word	0x0040669d
  407ec0:	00405f35 	.word	0x00405f35
  407ec4:	20000e10 	.word	0x20000e10
  407ec8:	200013ac 	.word	0x200013ac
  407ecc:	1b4e81b5 	.word	0x1b4e81b5
  407ed0:	20000038 	.word	0x20000038
  407ed4:	20000001 	.word	0x20000001
  407ed8:	00403a89 	.word	0x00403a89
  407edc:	00413788 	.word	0x00413788
  407ee0:	00011705 	.word	0x00011705
  407ee4:	00413724 	.word	0x00413724
  407ee8:	0041372c 	.word	0x0041372c
  407eec:	00413738 	.word	0x00413738
  407ef0:	01107a77 	.word	0x01107a77
  407ef4:	004133d4 	.word	0x004133d4
  407ef8:	20000e05 	.word	0x20000e05
  407efc:	0040a26d 	.word	0x0040a26d
  407f00:	0040b415 	.word	0x0040b415
  407f04:	0041373c 	.word	0x0041373c
  407f08:	400e0e00 	.word	0x400e0e00
  407f0c:	002b98b7 	.word	0x002b98b7
  407f10:	0146f95c 	.word	0x0146f95c
  407f14:	00413334 	.word	0x00413334
  407f18:	000ae62e 	.word	0x000ae62e
  407f1c:	00407c45 	.word	0x00407c45
  407f20:	00405f65 	.word	0x00405f65
  407f24:	0040b8b9 	.word	0x0040b8b9
  407f28:	400e1450 	.word	0x400e1450

00407f2c <test_IO>:
//  1/2-Relay off: INP_1= 0.0V   INP_2= 0.0V
//  2/2-Relay on:  INP_1=11.5V   INP_2=11.4V
//  Result Test  ...OK/FAILED!
//-----------------------------------------------------
void test_IO()
{
  407f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Byte nb, esito = 'O';
	float fval[2];
	
	Serial_println1(" ");
  407f30:	f8df 8210 	ldr.w	r8, [pc, #528]	; 408144 <test_IO+0x218>
  407f34:	4640      	mov	r0, r8
  407f36:	4f68      	ldr	r7, [pc, #416]	; (4080d8 <test_IO+0x1ac>)
  407f38:	47b8      	blx	r7
	PrintFlashString(str_1_test_IO,  NEW_LINE);
  407f3a:	216e      	movs	r1, #110	; 0x6e
  407f3c:	4867      	ldr	r0, [pc, #412]	; (4080dc <test_IO+0x1b0>)
  407f3e:	4c68      	ldr	r4, [pc, #416]	; (4080e0 <test_IO+0x1b4>)
  407f40:	47a0      	blx	r4
	PrintFlashString(str_2_test_IO,  NEW_LINE);
  407f42:	216e      	movs	r1, #110	; 0x6e
  407f44:	4867      	ldr	r0, [pc, #412]	; (4080e4 <test_IO+0x1b8>)
  407f46:	47a0      	blx	r4
	PrintFlashString(str_3_test_IO,  NEW_LINE);
  407f48:	216e      	movs	r1, #110	; 0x6e
  407f4a:	4867      	ldr	r0, [pc, #412]	; (4080e8 <test_IO+0x1bc>)
  407f4c:	47a0      	blx	r4
	PrintFlashString(str_4_test_IO,  NEW_LINE);
  407f4e:	216e      	movs	r1, #110	; 0x6e
  407f50:	4866      	ldr	r0, [pc, #408]	; (4080ec <test_IO+0x1c0>)
  407f52:	47a0      	blx	r4
	PrintFlashString(str_5_test_IO,  NEW_LINE);
  407f54:	216e      	movs	r1, #110	; 0x6e
  407f56:	4866      	ldr	r0, [pc, #408]	; (4080f0 <test_IO+0x1c4>)
  407f58:	47a0      	blx	r4
	PrintFlashString(str_6_test_IO,  NEW_LINE);
  407f5a:	216e      	movs	r1, #110	; 0x6e
  407f5c:	4865      	ldr	r0, [pc, #404]	; (4080f4 <test_IO+0x1c8>)
  407f5e:	47a0      	blx	r4
	delay_ms (100);
  407f60:	4865      	ldr	r0, [pc, #404]	; (4080f8 <test_IO+0x1cc>)
  407f62:	4e66      	ldr	r6, [pc, #408]	; (4080fc <test_IO+0x1d0>)
  407f64:	47b0      	blx	r6
	Serial_println1(" ");
  407f66:	4640      	mov	r0, r8
  407f68:	47b8      	blx	r7
	PrintFlashString(str_7_test_IO,  NEW_LINE);  // press enter when ready.
  407f6a:	216e      	movs	r1, #110	; 0x6e
  407f6c:	4864      	ldr	r0, [pc, #400]	; (408100 <test_IO+0x1d4>)
  407f6e:	47a0      	blx	r4
	
	nb = wait_response_by_terminal();
  407f70:	4b64      	ldr	r3, [pc, #400]	; (408104 <test_IO+0x1d8>)
  407f72:	4798      	blx	r3
  407f74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  407f78:	4b63      	ldr	r3, [pc, #396]	; (408108 <test_IO+0x1dc>)
  407f7a:	635a      	str	r2, [r3, #52]	; 0x34
  407f7c:	2501      	movs	r5, #1
  407f7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  407f82:	635d      	str	r5, [r3, #52]	; 0x34
	
	//digitalWrite(pOut1,  LOW);
	ioport_set_pin_level(pOut1, IOPORT_PIN_LEVEL_LOW);
	//digitalWrite(pOut2,  LOW);
	ioport_set_pin_level(pOut2, IOPORT_PIN_LEVEL_LOW);
	delay_ms (50);
  407f84:	4861      	ldr	r0, [pc, #388]	; (40810c <test_IO+0x1e0>)
  407f86:	47b0      	blx	r6
	Serial_println1(" ");
  407f88:	4640      	mov	r0, r8
  407f8a:	47b8      	blx	r7
	PrintFlashString(str_8_test_IO,  NO_NEW_LINE); // 1/2-Relay off:
  407f8c:	2100      	movs	r1, #0
  407f8e:	4860      	ldr	r0, [pc, #384]	; (408110 <test_IO+0x1e4>)
  407f90:	47a0      	blx	r4
	delay_ms (700);
  407f92:	4860      	ldr	r0, [pc, #384]	; (408114 <test_IO+0x1e8>)
  407f94:	47b0      	blx	r6
	fval[0] = analogRead(pAnInp1);
  407f96:	4b60      	ldr	r3, [pc, #384]	; (408118 <test_IO+0x1ec>)
  407f98:	781f      	ldrb	r7, [r3, #0]
  407f9a:	4638      	mov	r0, r7
  407f9c:	4c5f      	ldr	r4, [pc, #380]	; (40811c <test_IO+0x1f0>)
  407f9e:	47a0      	blx	r4
  407fa0:	4680      	mov	r8, r0
	fval[1] = analogRead(pAnInp2);
  407fa2:	4b5f      	ldr	r3, [pc, #380]	; (408120 <test_IO+0x1f4>)
  407fa4:	781e      	ldrb	r6, [r3, #0]
  407fa6:	4630      	mov	r0, r6
  407fa8:	47a0      	blx	r4
  407faa:	4682      	mov	sl, r0
	fval[0] = analogRead(pAnInp1);
  407fac:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 408150 <test_IO+0x224>
  407fb0:	4640      	mov	r0, r8
  407fb2:	47c8      	blx	r9
	fval[0] /= 100;
  407fb4:	4c5b      	ldr	r4, [pc, #364]	; (408124 <test_IO+0x1f8>)
  407fb6:	495c      	ldr	r1, [pc, #368]	; (408128 <test_IO+0x1fc>)
  407fb8:	47a0      	blx	r4
  407fba:	4680      	mov	r8, r0
	fval[1] = analogRead(pAnInp2);
  407fbc:	4650      	mov	r0, sl
  407fbe:	47c8      	blx	r9
	fval[1] /= 100;
  407fc0:	4959      	ldr	r1, [pc, #356]	; (408128 <test_IO+0x1fc>)
  407fc2:	47a0      	blx	r4
  407fc4:	4683      	mov	fp, r0
	
	Serial_print1(" INP1= ");
  407fc6:	4859      	ldr	r0, [pc, #356]	; (40812c <test_IO+0x200>)
  407fc8:	4c59      	ldr	r4, [pc, #356]	; (408130 <test_IO+0x204>)
  407fca:	47a0      	blx	r4
	Serial_print(fval[0], 1);
  407fcc:	f8df a184 	ldr.w	sl, [pc, #388]	; 408154 <test_IO+0x228>
  407fd0:	4640      	mov	r0, r8
  407fd2:	47d0      	blx	sl
  407fd4:	4629      	mov	r1, r5
  407fd6:	b2c0      	uxtb	r0, r0
  407fd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 408158 <test_IO+0x22c>
  407fdc:	47c8      	blx	r9
	Serial_print1("V INP2= ");
  407fde:	4855      	ldr	r0, [pc, #340]	; (408134 <test_IO+0x208>)
  407fe0:	47a0      	blx	r4
	Serial_print(fval[1], 1);
  407fe2:	4658      	mov	r0, fp
  407fe4:	47d0      	blx	sl
  407fe6:	4629      	mov	r1, r5
  407fe8:	b2c0      	uxtb	r0, r0
  407fea:	47c8      	blx	r9
	Serial_print1("V");
  407fec:	4852      	ldr	r0, [pc, #328]	; (408138 <test_IO+0x20c>)
  407fee:	47a0      	blx	r4
	
	if((fval[0] > 1.0) || (fval[1] > 1.0)) {
  407ff0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  407ff4:	4640      	mov	r0, r8
  407ff6:	4b51      	ldr	r3, [pc, #324]	; (40813c <test_IO+0x210>)
  407ff8:	4798      	blx	r3
  407ffa:	2800      	cmp	r0, #0
  407ffc:	d062      	beq.n	4080c4 <test_IO+0x198>
		Serial_print1("  ,ERROR!");
  407ffe:	4850      	ldr	r0, [pc, #320]	; (408140 <test_IO+0x214>)
  408000:	4b4b      	ldr	r3, [pc, #300]	; (408130 <test_IO+0x204>)
  408002:	4798      	blx	r3
		esito = 'F';
  408004:	f04f 0946 	mov.w	r9, #70	; 0x46
	}
	
	Serial_println1(" ");
  408008:	484e      	ldr	r0, [pc, #312]	; (408144 <test_IO+0x218>)
  40800a:	4b33      	ldr	r3, [pc, #204]	; (4080d8 <test_IO+0x1ac>)
  40800c:	4798      	blx	r3
	delay_ms (700);
  40800e:	4841      	ldr	r0, [pc, #260]	; (408114 <test_IO+0x1e8>)
  408010:	4c3a      	ldr	r4, [pc, #232]	; (4080fc <test_IO+0x1d0>)
  408012:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408014:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  408018:	4b3b      	ldr	r3, [pc, #236]	; (408108 <test_IO+0x1dc>)
  40801a:	631a      	str	r2, [r3, #48]	; 0x30
  40801c:	2501      	movs	r5, #1
  40801e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408022:	631d      	str	r5, [r3, #48]	; 0x30
	//digitalWrite(pOut1,   HIGH);
	ioport_set_pin_level(pOut1, IOPORT_PIN_LEVEL_HIGH);
	//digitalWrite(pOut2,   HIGH);
	ioport_set_pin_level(pOut2, IOPORT_PIN_LEVEL_HIGH);
	delay_ms (50);
  408024:	4839      	ldr	r0, [pc, #228]	; (40810c <test_IO+0x1e0>)
  408026:	47a0      	blx	r4
	PrintFlashString(str_9_test_IO,  NO_NEW_LINE); // 1/2-Relay off:
  408028:	2100      	movs	r1, #0
  40802a:	4847      	ldr	r0, [pc, #284]	; (408148 <test_IO+0x21c>)
  40802c:	4b2c      	ldr	r3, [pc, #176]	; (4080e0 <test_IO+0x1b4>)
  40802e:	4798      	blx	r3
	
	delay_ms (2300);
  408030:	4846      	ldr	r0, [pc, #280]	; (40814c <test_IO+0x220>)
  408032:	47a0      	blx	r4
	fval[0] = analogRead(pAnInp1);
  408034:	4638      	mov	r0, r7
  408036:	4c39      	ldr	r4, [pc, #228]	; (40811c <test_IO+0x1f0>)
  408038:	47a0      	blx	r4
  40803a:	4682      	mov	sl, r0
	fval[1] = analogRead(pAnInp2);
  40803c:	4630      	mov	r0, r6
  40803e:	47a0      	blx	r4
  408040:	4680      	mov	r8, r0
	fval[0] = analogRead(pAnInp1);
  408042:	4f43      	ldr	r7, [pc, #268]	; (408150 <test_IO+0x224>)
  408044:	4650      	mov	r0, sl
  408046:	47b8      	blx	r7
	fval[0] /= 100;
  408048:	4c36      	ldr	r4, [pc, #216]	; (408124 <test_IO+0x1f8>)
  40804a:	4937      	ldr	r1, [pc, #220]	; (408128 <test_IO+0x1fc>)
  40804c:	47a0      	blx	r4
  40804e:	4683      	mov	fp, r0
	fval[1] = analogRead(pAnInp2);
  408050:	4640      	mov	r0, r8
  408052:	47b8      	blx	r7
	fval[1] /= 100;
  408054:	4934      	ldr	r1, [pc, #208]	; (408128 <test_IO+0x1fc>)
  408056:	47a0      	blx	r4
  408058:	4682      	mov	sl, r0
	
	Serial_print1(" INP1= ");
  40805a:	4834      	ldr	r0, [pc, #208]	; (40812c <test_IO+0x200>)
  40805c:	4c34      	ldr	r4, [pc, #208]	; (408130 <test_IO+0x204>)
  40805e:	47a0      	blx	r4
	Serial_print(fval[0], 1);
  408060:	4e3c      	ldr	r6, [pc, #240]	; (408154 <test_IO+0x228>)
  408062:	4658      	mov	r0, fp
  408064:	47b0      	blx	r6
  408066:	4629      	mov	r1, r5
  408068:	b2c0      	uxtb	r0, r0
  40806a:	4f3b      	ldr	r7, [pc, #236]	; (408158 <test_IO+0x22c>)
  40806c:	47b8      	blx	r7
	Serial_print1("V INP2= ");
  40806e:	4831      	ldr	r0, [pc, #196]	; (408134 <test_IO+0x208>)
  408070:	47a0      	blx	r4
	Serial_print(fval[1], 1);
  408072:	4650      	mov	r0, sl
  408074:	47b0      	blx	r6
  408076:	4629      	mov	r1, r5
  408078:	b2c0      	uxtb	r0, r0
  40807a:	47b8      	blx	r7
	Serial_print1("V");
  40807c:	482e      	ldr	r0, [pc, #184]	; (408138 <test_IO+0x20c>)
  40807e:	47a0      	blx	r4
	
	if((fval[0] < 9.5) || (fval[1] < 9.5)) {
  408080:	4936      	ldr	r1, [pc, #216]	; (40815c <test_IO+0x230>)
  408082:	4658      	mov	r0, fp
  408084:	4b36      	ldr	r3, [pc, #216]	; (408160 <test_IO+0x234>)
  408086:	4798      	blx	r3
  408088:	b920      	cbnz	r0, 408094 <test_IO+0x168>
  40808a:	4934      	ldr	r1, [pc, #208]	; (40815c <test_IO+0x230>)
  40808c:	4650      	mov	r0, sl
  40808e:	4b34      	ldr	r3, [pc, #208]	; (408160 <test_IO+0x234>)
  408090:	4798      	blx	r3
  408092:	b120      	cbz	r0, 40809e <test_IO+0x172>
		Serial_print1("  ,ERROR!");
  408094:	482a      	ldr	r0, [pc, #168]	; (408140 <test_IO+0x214>)
  408096:	4b26      	ldr	r3, [pc, #152]	; (408130 <test_IO+0x204>)
  408098:	4798      	blx	r3
		esito = 'F';
  40809a:	f04f 0946 	mov.w	r9, #70	; 0x46
	}
	
	Serial_println1(" ");
  40809e:	4829      	ldr	r0, [pc, #164]	; (408144 <test_IO+0x218>)
  4080a0:	4b0d      	ldr	r3, [pc, #52]	; (4080d8 <test_IO+0x1ac>)
  4080a2:	4798      	blx	r3
	delay_ms (500);
  4080a4:	482f      	ldr	r0, [pc, #188]	; (408164 <test_IO+0x238>)
  4080a6:	4b15      	ldr	r3, [pc, #84]	; (4080fc <test_IO+0x1d0>)
  4080a8:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4080aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4080ae:	4b16      	ldr	r3, [pc, #88]	; (408108 <test_IO+0x1dc>)
  4080b0:	635a      	str	r2, [r3, #52]	; 0x34
  4080b2:	2201      	movs	r2, #1
  4080b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4080b8:	635a      	str	r2, [r3, #52]	; 0x34
	//digitalWrite(pOut1,   LOW);
	ioport_set_pin_level(pOut1, IOPORT_PIN_LEVEL_LOW);
	//digitalWrite(pOut2,   LOW);
	ioport_set_pin_level(pOut2, IOPORT_PIN_LEVEL_LOW);
	
	print_result_test(esito);
  4080ba:	4648      	mov	r0, r9
  4080bc:	4b2a      	ldr	r3, [pc, #168]	; (408168 <test_IO+0x23c>)
  4080be:	4798      	blx	r3
  4080c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if((fval[0] > 1.0) || (fval[1] > 1.0)) {
  4080c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4080c8:	4658      	mov	r0, fp
  4080ca:	4b1c      	ldr	r3, [pc, #112]	; (40813c <test_IO+0x210>)
  4080cc:	4798      	blx	r3
  4080ce:	2800      	cmp	r0, #0
  4080d0:	d195      	bne.n	407ffe <test_IO+0xd2>
	Byte nb, esito = 'O';
  4080d2:	f04f 094f 	mov.w	r9, #79	; 0x4f
  4080d6:	e797      	b.n	408008 <test_IO+0xdc>
  4080d8:	00406051 	.word	0x00406051
  4080dc:	004132c8 	.word	0x004132c8
  4080e0:	0040669d 	.word	0x0040669d
  4080e4:	00413354 	.word	0x00413354
  4080e8:	004133f4 	.word	0x004133f4
  4080ec:	00413474 	.word	0x00413474
  4080f0:	004134c0 	.word	0x004134c0
  4080f4:	0041350c 	.word	0x0041350c
  4080f8:	000ae62e 	.word	0x000ae62e
  4080fc:	20000001 	.word	0x20000001
  408100:	00413528 	.word	0x00413528
  408104:	00406619 	.word	0x00406619
  408108:	400e0e00 	.word	0x400e0e00
  40810c:	00057317 	.word	0x00057317
  408110:	00413544 	.word	0x00413544
  408114:	004c4b40 	.word	0x004c4b40
  408118:	004138b8 	.word	0x004138b8
  40811c:	0040c5d9 	.word	0x0040c5d9
  408120:	004138bc 	.word	0x004138bc
  408124:	0040d95d 	.word	0x0040d95d
  408128:	42c80000 	.word	0x42c80000
  40812c:	00413700 	.word	0x00413700
  408130:	00405f35 	.word	0x00405f35
  408134:	00413708 	.word	0x00413708
  408138:	00413714 	.word	0x00413714
  40813c:	0040db6d 	.word	0x0040db6d
  408140:	00413718 	.word	0x00413718
  408144:	004126b8 	.word	0x004126b8
  408148:	00413558 	.word	0x00413558
  40814c:	00faae1c 	.word	0x00faae1c
  408150:	0040d745 	.word	0x0040d745
  408154:	0040dbcd 	.word	0x0040dbcd
  408158:	00405f65 	.word	0x00405f65
  40815c:	41180000 	.word	0x41180000
  408160:	0040db31 	.word	0x0040db31
  408164:	00367ee5 	.word	0x00367ee5
  408168:	00407c45 	.word	0x00407c45

0040816c <testSleepMode>:
// 1/3-IDLE MODE,  Relay Power ON, Read status Motors
// 2/3-SLEEP MODE, Relay Power OFF, Read status Motors
// 3/3-Relay Power ON
//-----------------------------------------------------
void testSleepMode()
{
  40816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int ret_val, i, esito =0;
	
	Serial_println1(" ");
  408170:	4846      	ldr	r0, [pc, #280]	; (40828c <testSleepMode+0x120>)
  408172:	4b47      	ldr	r3, [pc, #284]	; (408290 <testSleepMode+0x124>)
  408174:	4798      	blx	r3
	PrintFlashString(str_1_test_SM,  NEW_LINE);
  408176:	216e      	movs	r1, #110	; 0x6e
  408178:	4846      	ldr	r0, [pc, #280]	; (408294 <testSleepMode+0x128>)
  40817a:	4d47      	ldr	r5, [pc, #284]	; (408298 <testSleepMode+0x12c>)
  40817c:	47a8      	blx	r5
	delay_ms (500);
  40817e:	4847      	ldr	r0, [pc, #284]	; (40829c <testSleepMode+0x130>)
  408180:	4c47      	ldr	r4, [pc, #284]	; (4082a0 <testSleepMode+0x134>)
  408182:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408184:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  408188:	4b46      	ldr	r3, [pc, #280]	; (4082a4 <testSleepMode+0x138>)
  40818a:	631a      	str	r2, [r3, #48]	; 0x30
	//digitalWrite(pPowerMotors, HIGH); // Diseccita il rele' e metti 'elettronica in SLEEP NO SW
	ioport_set_pin_level(pPowerMotors, IOPORT_PIN_LEVEL_HIGH);
	delay_ms (100);
  40818c:	4846      	ldr	r0, [pc, #280]	; (4082a8 <testSleepMode+0x13c>)
  40818e:	47a0      	blx	r4
	
	PrintFlashString(str_2_test_SM,  NO_NEW_LINE);  // IDLE MODE
  408190:	2100      	movs	r1, #0
  408192:	4846      	ldr	r0, [pc, #280]	; (4082ac <testSleepMode+0x140>)
  408194:	47a8      	blx	r5
	delay_ms (1500);
  408196:	4846      	ldr	r0, [pc, #280]	; (4082b0 <testSleepMode+0x144>)
  408198:	47a0      	blx	r4
	
	sData.speed_motors_R = 0;
  40819a:	4b46      	ldr	r3, [pc, #280]	; (4082b4 <testSleepMode+0x148>)
  40819c:	2200      	movs	r2, #0
  40819e:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
	sData.speed_motors_F = 0;
  4081a2:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	//  [1,0] LED BYPASS    (00 = OFF, 01=Toggle, 10= ON, 11= none)
	//  [3,2] LED ALARM     (00 = OFF, 01=Toggle, 10= ON, 11= none)
	//  [5,4] LED MOTORS R  (00 = OFF, 01=Toggle, 10= ON, 11= none)
	//  [7,6] LED MOTORS F  (00 = OFF, 01=Toggle, 10= ON, 11= none)
	sData.status_Leds_ctrlFan = 0;
  4081a6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
  4081aa:	2405      	movs	r4, #5
	
	// Attendiamo la risposta CTRL_FAN
	for(i=0; i < 5; i++) {
		// inviamo il comando alla CTRL_FAN
		polling_CTRL_FAN();
  4081ac:	f8df 813c 	ldr.w	r8, [pc, #316]	; 4082ec <testSleepMode+0x180>
		delay_ms (50);
  4081b0:	4f41      	ldr	r7, [pc, #260]	; (4082b8 <testSleepMode+0x14c>)
		ret_val = intercepts_messages_serial_2();
		delay_ms (20);
		ret_val = intercepts_messages_serial_2();
		if(ret_val)
		break;
		delay_ms (300);
  4081b2:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4082f0 <testSleepMode+0x184>
		polling_CTRL_FAN();
  4081b6:	47c0      	blx	r8
		delay_ms (50);
  4081b8:	4638      	mov	r0, r7
  4081ba:	4e39      	ldr	r6, [pc, #228]	; (4082a0 <testSleepMode+0x134>)
  4081bc:	47b0      	blx	r6
		ret_val = intercepts_messages_serial_2();
  4081be:	4d3f      	ldr	r5, [pc, #252]	; (4082bc <testSleepMode+0x150>)
  4081c0:	47a8      	blx	r5
		delay_ms (20);
  4081c2:	483f      	ldr	r0, [pc, #252]	; (4082c0 <testSleepMode+0x154>)
  4081c4:	47b0      	blx	r6
		ret_val = intercepts_messages_serial_2();
  4081c6:	47a8      	blx	r5
		if(ret_val)
  4081c8:	b9c8      	cbnz	r0, 4081fe <testSleepMode+0x92>
		delay_ms (300);
  4081ca:	4648      	mov	r0, r9
  4081cc:	47b0      	blx	r6
	for(i=0; i < 5; i++) {
  4081ce:	3c01      	subs	r4, #1
  4081d0:	d1f1      	bne.n	4081b6 <testSleepMode+0x4a>
	}
	
	if(ret_val == 0)
	{
		Serial_println1(" ");
  4081d2:	482e      	ldr	r0, [pc, #184]	; (40828c <testSleepMode+0x120>)
  4081d4:	4c2e      	ldr	r4, [pc, #184]	; (408290 <testSleepMode+0x124>)
  4081d6:	47a0      	blx	r4
		Serial_println1("Error, Link KO CTRL_FAN!");
  4081d8:	483a      	ldr	r0, [pc, #232]	; (4082c4 <testSleepMode+0x158>)
  4081da:	47a0      	blx	r4
		delay_ms (800);
  4081dc:	483a      	ldr	r0, [pc, #232]	; (4082c8 <testSleepMode+0x15c>)
  4081de:	4b30      	ldr	r3, [pc, #192]	; (4082a0 <testSleepMode+0x134>)
  4081e0:	4798      	blx	r3
  4081e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	
	
	// Status Motors R & F,
	// bit: 7.none | 6.AlarmM3 | 5.AlarmM2 | 4.AlarmM1 | 3.none | 2.PowerON_M3 | 1.PowerON_M2 | 0.PowerON_M1
	if(((sData.speed_motors_R & 0x07) == 0) && ((sData.speed_motors_R & 0x07) == 0)) {
		Serial_print1("  ,ERROR NO Power!");
  4081e6:	4839      	ldr	r0, [pc, #228]	; (4082cc <testSleepMode+0x160>)
  4081e8:	4b39      	ldr	r3, [pc, #228]	; (4082d0 <testSleepMode+0x164>)
  4081ea:	4798      	blx	r3
		esito = 'F';
  4081ec:	f04f 0a46 	mov.w	sl, #70	; 0x46
  4081f0:	e00d      	b.n	40820e <testSleepMode+0xa2>
		delay_ms (300);
	}
	
	// Status Motors R & F:  bit.. 7.none | 6.AlarmM3 | 5.AlarmM2 | 4.AlarmM1 | 3.none | 2.PowerON_M3 | 1.PowerON_M2 | 0.PowerON_M1
	if(((sData.speed_motors_R & 0x07) != 0) || ((sData.speed_motors_R & 0x07) != 0)){
		Serial_print1("  ,ERROR The Relay Not Open!");
  4081f2:	4838      	ldr	r0, [pc, #224]	; (4082d4 <testSleepMode+0x168>)
  4081f4:	4b36      	ldr	r3, [pc, #216]	; (4082d0 <testSleepMode+0x164>)
  4081f6:	4798      	blx	r3
		esito = 'F';
  4081f8:	f04f 0a46 	mov.w	sl, #70	; 0x46
  4081fc:	e033      	b.n	408266 <testSleepMode+0xfa>
	if(((sData.speed_motors_R & 0x07) == 0) && ((sData.speed_motors_R & 0x07) == 0)) {
  4081fe:	4b2d      	ldr	r3, [pc, #180]	; (4082b4 <testSleepMode+0x148>)
  408200:	f893 31af 	ldrb.w	r3, [r3, #431]	; 0x1af
  408204:	f013 0f07 	tst.w	r3, #7
  408208:	d0ed      	beq.n	4081e6 <testSleepMode+0x7a>
	int ret_val, i, esito =0;
  40820a:	f04f 0a00 	mov.w	sl, #0
	Serial_println1(" ");
  40820e:	481f      	ldr	r0, [pc, #124]	; (40828c <testSleepMode+0x120>)
  408210:	4b1f      	ldr	r3, [pc, #124]	; (408290 <testSleepMode+0x124>)
  408212:	4798      	blx	r3
	delay_ms (400);
  408214:	4830      	ldr	r0, [pc, #192]	; (4082d8 <testSleepMode+0x16c>)
  408216:	4c22      	ldr	r4, [pc, #136]	; (4082a0 <testSleepMode+0x134>)
  408218:	47a0      	blx	r4
  40821a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40821e:	4b21      	ldr	r3, [pc, #132]	; (4082a4 <testSleepMode+0x138>)
  408220:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms (100);
  408222:	4821      	ldr	r0, [pc, #132]	; (4082a8 <testSleepMode+0x13c>)
  408224:	47a0      	blx	r4
	PrintFlashString(str_3_test_SM,  NO_NEW_LINE);  // SLEEP MODE
  408226:	2100      	movs	r1, #0
  408228:	482c      	ldr	r0, [pc, #176]	; (4082dc <testSleepMode+0x170>)
  40822a:	4b1b      	ldr	r3, [pc, #108]	; (408298 <testSleepMode+0x12c>)
  40822c:	4798      	blx	r3
	delay_ms (3000);
  40822e:	482c      	ldr	r0, [pc, #176]	; (4082e0 <testSleepMode+0x174>)
  408230:	47a0      	blx	r4
  408232:	2404      	movs	r4, #4
		polling_CTRL_FAN();
  408234:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4082ec <testSleepMode+0x180>
		delay_ms (60);
  408238:	4f2a      	ldr	r7, [pc, #168]	; (4082e4 <testSleepMode+0x178>)
		delay_ms (300);
  40823a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 4082f0 <testSleepMode+0x184>
		polling_CTRL_FAN();
  40823e:	47c0      	blx	r8
		delay_ms (60);
  408240:	4638      	mov	r0, r7
  408242:	4e17      	ldr	r6, [pc, #92]	; (4082a0 <testSleepMode+0x134>)
  408244:	47b0      	blx	r6
		ret_val = intercepts_messages_serial_2();
  408246:	4d1d      	ldr	r5, [pc, #116]	; (4082bc <testSleepMode+0x150>)
  408248:	47a8      	blx	r5
		delay_ms (20);
  40824a:	481d      	ldr	r0, [pc, #116]	; (4082c0 <testSleepMode+0x154>)
  40824c:	47b0      	blx	r6
		ret_val = intercepts_messages_serial_2();
  40824e:	47a8      	blx	r5
		if(ret_val)
  408250:	b918      	cbnz	r0, 40825a <testSleepMode+0xee>
		delay_ms (300);
  408252:	4648      	mov	r0, r9
  408254:	47b0      	blx	r6
	for(i=0; i < 4; i++) {
  408256:	3c01      	subs	r4, #1
  408258:	d1f1      	bne.n	40823e <testSleepMode+0xd2>
	if(((sData.speed_motors_R & 0x07) != 0) || ((sData.speed_motors_R & 0x07) != 0)){
  40825a:	4b16      	ldr	r3, [pc, #88]	; (4082b4 <testSleepMode+0x148>)
  40825c:	f893 31af 	ldrb.w	r3, [r3, #431]	; 0x1af
  408260:	f013 0f07 	tst.w	r3, #7
  408264:	d1c5      	bne.n	4081f2 <testSleepMode+0x86>
	}
	
	Serial_println1(" ");
  408266:	4809      	ldr	r0, [pc, #36]	; (40828c <testSleepMode+0x120>)
  408268:	4b09      	ldr	r3, [pc, #36]	; (408290 <testSleepMode+0x124>)
  40826a:	4798      	blx	r3
	delay_ms (100);
  40826c:	4d0e      	ldr	r5, [pc, #56]	; (4082a8 <testSleepMode+0x13c>)
  40826e:	4628      	mov	r0, r5
  408270:	4c0b      	ldr	r4, [pc, #44]	; (4082a0 <testSleepMode+0x134>)
  408272:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408274:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  408278:	4b0a      	ldr	r3, [pc, #40]	; (4082a4 <testSleepMode+0x138>)
  40827a:	635a      	str	r2, [r3, #52]	; 0x34
	//digitalWrite(pPowerMotors, LOW); // Diseccita il rele' e metti 'elettronica in SLEEP NO SW
	ioport_set_pin_level(pPowerMotors, IOPORT_PIN_LEVEL_LOW);
	delay_ms (100);
  40827c:	4628      	mov	r0, r5
  40827e:	47a0      	blx	r4
	
	print_result_test(esito);
  408280:	4650      	mov	r0, sl
  408282:	4b19      	ldr	r3, [pc, #100]	; (4082e8 <testSleepMode+0x17c>)
  408284:	4798      	blx	r3
  408286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40828a:	bf00      	nop
  40828c:	004126b8 	.word	0x004126b8
  408290:	00406051 	.word	0x00406051
  408294:	004132e8 	.word	0x004132e8
  408298:	0040669d 	.word	0x0040669d
  40829c:	00367ee5 	.word	0x00367ee5
  4082a0:	20000001 	.word	0x20000001
  4082a4:	400e0e00 	.word	0x400e0e00
  4082a8:	000ae62e 	.word	0x000ae62e
  4082ac:	00413380 	.word	0x00413380
  4082b0:	00a37cae 	.word	0x00a37cae
  4082b4:	200013ac 	.word	0x200013ac
  4082b8:	00057317 	.word	0x00057317
  4082bc:	004026e9 	.word	0x004026e9
  4082c0:	00022e0a 	.word	0x00022e0a
  4082c4:	0041369c 	.word	0x0041369c
  4082c8:	0057316e 	.word	0x0057316e
  4082cc:	00413668 	.word	0x00413668
  4082d0:	00405f35 	.word	0x00405f35
  4082d4:	0041367c 	.word	0x0041367c
  4082d8:	002b98b7 	.word	0x002b98b7
  4082dc:	00413414 	.word	0x00413414
  4082e0:	0146f95c 	.word	0x0146f95c
  4082e4:	00068a1c 	.word	0x00068a1c
  4082e8:	00407c45 	.word	0x00407c45
  4082ec:	00402b6d 	.word	0x00402b6d
  4082f0:	0020b28a 	.word	0x0020b28a

004082f4 <testMotors>:
//--------------------------------------------------------------
//           [4]  test Motors
//
//--------------------------------------------------------------
void testMotors(void)
{
  4082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4082f8:	b083      	sub	sp, #12
	Byte esito = 0, sec_wait, nMotorsCfg, ckMotorsOn, rpmFail[6];
	int i, step_test =0, ret_val, ret_val_1, sglVF, sglVR;
	
	Serial_println1(" ");
  4082fa:	4821      	ldr	r0, [pc, #132]	; (408380 <testMotors+0x8c>)
  4082fc:	4b21      	ldr	r3, [pc, #132]	; (408384 <testMotors+0x90>)
  4082fe:	4798      	blx	r3
	PrintFlashString(str_1_test_motors,   NEW_LINE);
  408300:	216e      	movs	r1, #110	; 0x6e
  408302:	4821      	ldr	r0, [pc, #132]	; (408388 <testMotors+0x94>)
  408304:	4c21      	ldr	r4, [pc, #132]	; (40838c <testMotors+0x98>)
  408306:	47a0      	blx	r4
	
	nMotorsCfg = eep_read_byte(ADDR_EEP(numMotors));
  408308:	203b      	movs	r0, #59	; 0x3b
  40830a:	4b21      	ldr	r3, [pc, #132]	; (408390 <testMotors+0x9c>)
  40830c:	4798      	blx	r3
  40830e:	4605      	mov	r5, r0
  408310:	9000      	str	r0, [sp, #0]
	PrintFlashString(str_2_test_motors,   NO_NEW_LINE);
  408312:	2100      	movs	r1, #0
  408314:	481f      	ldr	r0, [pc, #124]	; (408394 <testMotors+0xa0>)
  408316:	47a0      	blx	r4
	Serial_println(nMotorsCfg, DEC);
  408318:	210a      	movs	r1, #10
  40831a:	4628      	mov	r0, r5
  40831c:	4b1e      	ldr	r3, [pc, #120]	; (408398 <testMotors+0xa4>)
  40831e:	4798      	blx	r3
  408320:	f04f 0b00 	mov.w	fp, #0
  408324:	46d9      	mov	r9, fp
			sData.speed_motors_R = 255;
			sData.speed_motors_F = 255;
			sec_wait = 15;
		}
		
		Serial_print1(" waiting .");
  408326:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4083b0 <testMotors+0xbc>
			sData.speed_motors_R = 255;
  40832a:	4f1c      	ldr	r7, [pc, #112]	; (40839c <testMotors+0xa8>)
  40832c:	e132      	b.n	408594 <testMotors+0x2a0>
			PrintFlashString(str_3_test_motors,   NO_NEW_LINE);
  40832e:	2100      	movs	r1, #0
  408330:	481b      	ldr	r0, [pc, #108]	; (4083a0 <testMotors+0xac>)
  408332:	4b16      	ldr	r3, [pc, #88]	; (40838c <testMotors+0x98>)
  408334:	4798      	blx	r3
			sData.speed_motors_R = 52;
  408336:	2334      	movs	r3, #52	; 0x34
  408338:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			sData.speed_motors_F = 52;
  40833c:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
			sec_wait = 20;
  408340:	2314      	movs	r3, #20
  408342:	9301      	str	r3, [sp, #4]
		Serial_print1(" waiting .");
  408344:	4817      	ldr	r0, [pc, #92]	; (4083a4 <testMotors+0xb0>)
  408346:	47c0      	blx	r8
		
		for(i=0; i< sec_wait; i++) {
  408348:	f8dd a004 	ldr.w	sl, [sp, #4]
  40834c:	e135      	b.n	4085ba <testMotors+0x2c6>
			PrintFlashString(str_4_test_motors,   NO_NEW_LINE);
  40834e:	2100      	movs	r1, #0
  408350:	4815      	ldr	r0, [pc, #84]	; (4083a8 <testMotors+0xb4>)
  408352:	4b0e      	ldr	r3, [pc, #56]	; (40838c <testMotors+0x98>)
  408354:	4798      	blx	r3
			sData.speed_motors_R = 127;
  408356:	237f      	movs	r3, #127	; 0x7f
  408358:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			sData.speed_motors_F = 127;
  40835c:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
			sec_wait = 15;
  408360:	230f      	movs	r3, #15
  408362:	9301      	str	r3, [sp, #4]
  408364:	e7ee      	b.n	408344 <testMotors+0x50>
			PrintFlashString(str_5_test_motors,   NO_NEW_LINE);
  408366:	2100      	movs	r1, #0
  408368:	4810      	ldr	r0, [pc, #64]	; (4083ac <testMotors+0xb8>)
  40836a:	4b08      	ldr	r3, [pc, #32]	; (40838c <testMotors+0x98>)
  40836c:	4798      	blx	r3
			sData.speed_motors_R = 255;
  40836e:	23ff      	movs	r3, #255	; 0xff
  408370:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			sData.speed_motors_F = 255;
  408374:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
			sec_wait = 15;
  408378:	230f      	movs	r3, #15
  40837a:	9301      	str	r3, [sp, #4]
  40837c:	e7e2      	b.n	408344 <testMotors+0x50>
  40837e:	bf00      	nop
  408380:	004126b8 	.word	0x004126b8
  408384:	00406051 	.word	0x00406051
  408388:	00413304 	.word	0x00413304
  40838c:	0040669d 	.word	0x0040669d
  408390:	0040bfd1 	.word	0x0040bfd1
  408394:	004133b4 	.word	0x004133b4
  408398:	0040609d 	.word	0x0040609d
  40839c:	200013ac 	.word	0x200013ac
  4083a0:	00413448 	.word	0x00413448
  4083a4:	004135dc 	.word	0x004135dc
  4083a8:	00413490 	.word	0x00413490
  4083ac:	004134dc 	.word	0x004134dc
  4083b0:	00405f35 	.word	0x00405f35
			}
		}
		
		//--- stampa gli stati e le misure ---
		ckMotorsOn = 0;
		sglVR = sData.speed_motors_R * 4;
  4083b4:	f897 41af 	ldrb.w	r4, [r7, #431]	; 0x1af
  4083b8:	00a4      	lsls	r4, r4, #2
		sglVF = sData.speed_motors_F * 4;
  4083ba:	f897 51b0 	ldrb.w	r5, [r7, #432]	; 0x1b0
  4083be:	00ad      	lsls	r5, r5, #2
		
		//------- Return -------------
		Serial_println1(" ");
  4083c0:	48a3      	ldr	r0, [pc, #652]	; (408650 <testMotors+0x35c>)
  4083c2:	4ba4      	ldr	r3, [pc, #656]	; (408654 <testMotors+0x360>)
  4083c4:	4798      	blx	r3
		Serial_print1(" FANS R, Cmd_10V: ");
  4083c6:	48a4      	ldr	r0, [pc, #656]	; (408658 <testMotors+0x364>)
  4083c8:	47c0      	blx	r8
		// tensione letta sul comando dei motori ramo RETURN (0.00V a 11.00V) il valore e' moltipl. per 100, quindi 1100 = 11.00V
		Serial_print((float)sData.feedbk_v_speed_motors_R/100, 2);
  4083ca:	f9b7 01b7 	ldrsh.w	r0, [r7, #439]	; 0x1b7
  4083ce:	4ba3      	ldr	r3, [pc, #652]	; (40865c <testMotors+0x368>)
  4083d0:	4798      	blx	r3
  4083d2:	49a3      	ldr	r1, [pc, #652]	; (408660 <testMotors+0x36c>)
  4083d4:	4ba3      	ldr	r3, [pc, #652]	; (408664 <testMotors+0x370>)
  4083d6:	4798      	blx	r3
  4083d8:	4ba3      	ldr	r3, [pc, #652]	; (408668 <testMotors+0x374>)
  4083da:	4798      	blx	r3
  4083dc:	2102      	movs	r1, #2
  4083de:	b2c0      	uxtb	r0, r0
  4083e0:	4ba2      	ldr	r3, [pc, #648]	; (40866c <testMotors+0x378>)
  4083e2:	4798      	blx	r3
		Serial_print1("V ");
  4083e4:	48a2      	ldr	r0, [pc, #648]	; (408670 <testMotors+0x37c>)
  4083e6:	47c0      	blx	r8
		// StatusMotors:   bit: 7.none | 6.AlarmM3 | 5.AlarmM2 | 4.AlarmM1 | 3.none | 2.PowerON_M3 | 1.PowerON_M2 | 0.PowerON_M1
		Serial_print1(" R1:");
  4083e8:	48a2      	ldr	r0, [pc, #648]	; (408674 <testMotors+0x380>)
  4083ea:	47c0      	blx	r8
		if(sData.StatusMotorsR &0x01) {
  4083ec:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
  4083f0:	f013 0f01 	tst.w	r3, #1
  4083f4:	f000 8119 	beq.w	40862a <testMotors+0x336>
			Serial_print(sData.rpm_motors_R[0], DEC);
  4083f8:	f9b7 01db 	ldrsh.w	r0, [r7, #475]	; 0x1db
  4083fc:	210a      	movs	r1, #10
  4083fe:	b2c0      	uxtb	r0, r0
  408400:	4b9a      	ldr	r3, [pc, #616]	; (40866c <testMotors+0x378>)
  408402:	4798      	blx	r3
			Serial_print1(" rpm");
  408404:	489c      	ldr	r0, [pc, #624]	; (408678 <testMotors+0x384>)
  408406:	47c0      	blx	r8
			ckMotorsOn++;
			
			if(sData.rpm_motors_R[0] < sglVR) {
  408408:	f9b7 31db 	ldrsh.w	r3, [r7, #475]	; 0x1db
			ckMotorsOn++;
  40840c:	2601      	movs	r6, #1
  40840e:	429c      	cmp	r4, r3
  408410:	bfc8      	it	gt
  408412:	f04f 0946 	movgt.w	r9, #70	; 0x46
				esito = 'F';
			}
		}else
		Serial_print1("OFF");
		
		Serial_print1("  R2:");
  408416:	4899      	ldr	r0, [pc, #612]	; (40867c <testMotors+0x388>)
  408418:	47c0      	blx	r8
		if(sData.StatusMotorsR &0x02) {
  40841a:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
  40841e:	f013 0f02 	tst.w	r3, #2
  408422:	f000 8106 	beq.w	408632 <testMotors+0x33e>
			Serial_print(sData.rpm_motors_R[1], DEC);
  408426:	f9b7 01dd 	ldrsh.w	r0, [r7, #477]	; 0x1dd
  40842a:	210a      	movs	r1, #10
  40842c:	b2c0      	uxtb	r0, r0
  40842e:	4b8f      	ldr	r3, [pc, #572]	; (40866c <testMotors+0x378>)
  408430:	4798      	blx	r3
			Serial_print1(" rpm");
  408432:	4891      	ldr	r0, [pc, #580]	; (408678 <testMotors+0x384>)
  408434:	47c0      	blx	r8
			ckMotorsOn++;
  408436:	3601      	adds	r6, #1
  408438:	b2f6      	uxtb	r6, r6
			
			if(sData.rpm_motors_R[1] < sglVR) {
  40843a:	f9b7 31dd 	ldrsh.w	r3, [r7, #477]	; 0x1dd
				rpmFail[1] = 1;
				esito = 'F';
  40843e:	429c      	cmp	r4, r3
  408440:	bfc8      	it	gt
  408442:	f04f 0946 	movgt.w	r9, #70	; 0x46
			}
		}else
		Serial_print1("OFF");
		
		Serial_print1("  R3:");
  408446:	488e      	ldr	r0, [pc, #568]	; (408680 <testMotors+0x38c>)
  408448:	47c0      	blx	r8
		if(sData.StatusMotorsR &0x04) {
  40844a:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
  40844e:	f013 0f04 	tst.w	r3, #4
  408452:	f000 80f1 	beq.w	408638 <testMotors+0x344>
			Serial_print(sData.rpm_motors_R[2], DEC);
  408456:	f9b7 01df 	ldrsh.w	r0, [r7, #479]	; 0x1df
  40845a:	210a      	movs	r1, #10
  40845c:	b2c0      	uxtb	r0, r0
  40845e:	4b83      	ldr	r3, [pc, #524]	; (40866c <testMotors+0x378>)
  408460:	4798      	blx	r3
			Serial_print1(" rpm");
  408462:	4885      	ldr	r0, [pc, #532]	; (408678 <testMotors+0x384>)
  408464:	47c0      	blx	r8
			ckMotorsOn++;
  408466:	3601      	adds	r6, #1
  408468:	b2f6      	uxtb	r6, r6
			
			if(sData.rpm_motors_R[2] < sglVR) {
  40846a:	f9b7 31df 	ldrsh.w	r3, [r7, #479]	; 0x1df
				rpmFail[2] = 1;
				esito = 'F';
  40846e:	429c      	cmp	r4, r3
  408470:	bfc8      	it	gt
  408472:	f04f 0946 	movgt.w	r9, #70	; 0x46
		Serial_print1("OFF");
		
		
		
		//------- Fresh -------------
		Serial_println1(" ");
  408476:	4876      	ldr	r0, [pc, #472]	; (408650 <testMotors+0x35c>)
  408478:	4b76      	ldr	r3, [pc, #472]	; (408654 <testMotors+0x360>)
  40847a:	4798      	blx	r3
		Serial_print1(" FANS F, Cmd_10V: ");
  40847c:	4881      	ldr	r0, [pc, #516]	; (408684 <testMotors+0x390>)
  40847e:	47c0      	blx	r8
		// Tensione letta sul comando dei motori ramo Fresh (0.00V a 11.00V) il valore e' moltipl. per 100, quindi 1100 = 11.00V
		Serial_print((float)sData.feedbk_v_speed_motors_F/100, 2);
  408480:	f9b7 01b9 	ldrsh.w	r0, [r7, #441]	; 0x1b9
  408484:	4b75      	ldr	r3, [pc, #468]	; (40865c <testMotors+0x368>)
  408486:	4798      	blx	r3
  408488:	4975      	ldr	r1, [pc, #468]	; (408660 <testMotors+0x36c>)
  40848a:	4b76      	ldr	r3, [pc, #472]	; (408664 <testMotors+0x370>)
  40848c:	4798      	blx	r3
  40848e:	4b76      	ldr	r3, [pc, #472]	; (408668 <testMotors+0x374>)
  408490:	4798      	blx	r3
  408492:	2102      	movs	r1, #2
  408494:	b2c0      	uxtb	r0, r0
  408496:	4b75      	ldr	r3, [pc, #468]	; (40866c <testMotors+0x378>)
  408498:	4798      	blx	r3
		Serial_print1("V ");
  40849a:	4875      	ldr	r0, [pc, #468]	; (408670 <testMotors+0x37c>)
  40849c:	47c0      	blx	r8
		// StatusMotors:   bit: 7.none | 6.AlarmM3 | 5.AlarmM2 | 4.AlarmM1 | 3.none | 2.PowerON_M3 | 1.PowerON_M2 | 0.PowerON_M1
		Serial_print1(" F1:");
  40849e:	487a      	ldr	r0, [pc, #488]	; (408688 <testMotors+0x394>)
  4084a0:	47c0      	blx	r8
		if(sData.StatusMotorsF &0x01) {
  4084a2:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
  4084a6:	f013 0f01 	tst.w	r3, #1
  4084aa:	f000 80c8 	beq.w	40863e <testMotors+0x34a>
			Serial_print(sData.rpm_motors_F[0], DEC);
  4084ae:	f9b7 01e1 	ldrsh.w	r0, [r7, #481]	; 0x1e1
  4084b2:	210a      	movs	r1, #10
  4084b4:	b2c0      	uxtb	r0, r0
  4084b6:	4b6d      	ldr	r3, [pc, #436]	; (40866c <testMotors+0x378>)
  4084b8:	4798      	blx	r3
			Serial_print1(" rpm");
  4084ba:	486f      	ldr	r0, [pc, #444]	; (408678 <testMotors+0x384>)
  4084bc:	47c0      	blx	r8
			ckMotorsOn++;
  4084be:	3601      	adds	r6, #1
  4084c0:	b2f6      	uxtb	r6, r6
			
			if(sData.rpm_motors_F[0] < sglVF) {
  4084c2:	f9b7 31e1 	ldrsh.w	r3, [r7, #481]	; 0x1e1
				rpmFail[3] = 1;
				esito = 'F';
  4084c6:	429d      	cmp	r5, r3
  4084c8:	bfc8      	it	gt
  4084ca:	f04f 0946 	movgt.w	r9, #70	; 0x46
			}
		}else
		Serial_print1("OFF");
		
		Serial_print1("  F2:");
  4084ce:	486f      	ldr	r0, [pc, #444]	; (40868c <testMotors+0x398>)
  4084d0:	47c0      	blx	r8
		if(sData.StatusMotorsF &0x02) {
  4084d2:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
  4084d6:	f013 0f02 	tst.w	r3, #2
  4084da:	f000 80b3 	beq.w	408644 <testMotors+0x350>
			Serial_print(sData.rpm_motors_F[1], DEC);
  4084de:	f9b7 01e3 	ldrsh.w	r0, [r7, #483]	; 0x1e3
  4084e2:	210a      	movs	r1, #10
  4084e4:	b2c0      	uxtb	r0, r0
  4084e6:	4b61      	ldr	r3, [pc, #388]	; (40866c <testMotors+0x378>)
  4084e8:	4798      	blx	r3
			Serial_print1(" rpm");
  4084ea:	4863      	ldr	r0, [pc, #396]	; (408678 <testMotors+0x384>)
  4084ec:	47c0      	blx	r8
			ckMotorsOn++;
  4084ee:	3601      	adds	r6, #1
  4084f0:	b2f6      	uxtb	r6, r6
			
			if(sData.rpm_motors_F[1] < sglVF) {
  4084f2:	f9b7 31e3 	ldrsh.w	r3, [r7, #483]	; 0x1e3
				rpmFail[4] = 1;
				esito = 'F';
  4084f6:	429d      	cmp	r5, r3
  4084f8:	bfc8      	it	gt
  4084fa:	f04f 0946 	movgt.w	r9, #70	; 0x46
			}
		}else
		Serial_print1("OFF");
		
		Serial_print1("  F3:");
  4084fe:	4864      	ldr	r0, [pc, #400]	; (408690 <testMotors+0x39c>)
  408500:	47c0      	blx	r8
		if(sData.StatusMotorsF &0x04) {
  408502:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
  408506:	f013 0f04 	tst.w	r3, #4
  40850a:	f000 809e 	beq.w	40864a <testMotors+0x356>
			Serial_print(sData.rpm_motors_F[2], DEC);
  40850e:	f9b7 01e5 	ldrsh.w	r0, [r7, #485]	; 0x1e5
  408512:	210a      	movs	r1, #10
  408514:	b2c0      	uxtb	r0, r0
  408516:	4b55      	ldr	r3, [pc, #340]	; (40866c <testMotors+0x378>)
  408518:	4798      	blx	r3
			Serial_print1(" rpm");
  40851a:	4857      	ldr	r0, [pc, #348]	; (408678 <testMotors+0x384>)
  40851c:	47c0      	blx	r8
			ckMotorsOn++;
  40851e:	3601      	adds	r6, #1
  408520:	b2f6      	uxtb	r6, r6
			
			if(sData.rpm_motors_F[2] < sglVF) {
  408522:	f9b7 31e5 	ldrsh.w	r3, [r7, #485]	; 0x1e5
				rpmFail[5] = 1;
				esito = 'F';
  408526:	429d      	cmp	r5, r3
  408528:	bfc8      	it	gt
  40852a:	f04f 0946 	movgt.w	r9, #70	; 0x46
			}
		}else
		Serial_print1("OFF");
		
		Serial_println1(" ");
  40852e:	4848      	ldr	r0, [pc, #288]	; (408650 <testMotors+0x35c>)
  408530:	4b48      	ldr	r3, [pc, #288]	; (408654 <testMotors+0x360>)
  408532:	4798      	blx	r3
		Serial_print1(" Link CTRL_FAN: ");
  408534:	4857      	ldr	r0, [pc, #348]	; (408694 <testMotors+0x3a0>)
  408536:	47c0      	blx	r8
		Serial_print(sData.level_link_CTRLFAN, DEC);
  408538:	210a      	movs	r1, #10
  40853a:	7878      	ldrb	r0, [r7, #1]
  40853c:	4b4b      	ldr	r3, [pc, #300]	; (40866c <testMotors+0x378>)
  40853e:	4798      	blx	r3
		Serial_println1("/10");
  408540:	4855      	ldr	r0, [pc, #340]	; (408698 <testMotors+0x3a4>)
  408542:	4b44      	ldr	r3, [pc, #272]	; (408654 <testMotors+0x360>)
  408544:	4798      	blx	r3
		
		if(ckMotorsOn != nMotorsCfg)
		esito = 'F';
  408546:	9b00      	ldr	r3, [sp, #0]
  408548:	429e      	cmp	r6, r3
  40854a:	bf18      	it	ne
  40854c:	f04f 0946 	movne.w	r9, #70	; 0x46
		
		if(sData.feedbk_v_speed_motors_F  <  ((sglVF * 9) /10))
  408550:	f9b7 21b9 	ldrsh.w	r2, [r7, #441]	; 0x1b9
  408554:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
  408558:	4b50      	ldr	r3, [pc, #320]	; (40869c <testMotors+0x3a8>)
  40855a:	fb83 1305 	smull	r1, r3, r3, r5
  40855e:	17ed      	asrs	r5, r5, #31
  408560:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
		esito = 'F';
  408564:	42aa      	cmp	r2, r5
  408566:	bfb8      	it	lt
  408568:	f04f 0946 	movlt.w	r9, #70	; 0x46
		
		if(sData.feedbk_v_speed_motors_R  <  ((sglVR * 9) /10))
  40856c:	f9b7 21b7 	ldrsh.w	r2, [r7, #439]	; 0x1b7
  408570:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
  408574:	4b49      	ldr	r3, [pc, #292]	; (40869c <testMotors+0x3a8>)
  408576:	fb83 1304 	smull	r1, r3, r3, r4
  40857a:	17e4      	asrs	r4, r4, #31
  40857c:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
		esito = 'F';
  408580:	42a2      	cmp	r2, r4
  408582:	bfb8      	it	lt
  408584:	f04f 0946 	movlt.w	r9, #70	; 0x46
	for(step_test =0;  step_test < 3; step_test++)
  408588:	f10b 0b01 	add.w	fp, fp, #1
  40858c:	f1bb 0f03 	cmp.w	fp, #3
  408590:	f000 809e 	beq.w	4086d0 <testMotors+0x3dc>
		Serial_println1(" ");
  408594:	482e      	ldr	r0, [pc, #184]	; (408650 <testMotors+0x35c>)
  408596:	4b2f      	ldr	r3, [pc, #188]	; (408654 <testMotors+0x360>)
  408598:	4798      	blx	r3
		if(step_test == 0) {
  40859a:	f1bb 0f00 	cmp.w	fp, #0
  40859e:	f43f aec6 	beq.w	40832e <testMotors+0x3a>
			}else if (step_test == 1) {
  4085a2:	f1bb 0f01 	cmp.w	fp, #1
  4085a6:	f43f aed2 	beq.w	40834e <testMotors+0x5a>
			}else if (step_test == 2) {
  4085aa:	f1bb 0f02 	cmp.w	fp, #2
  4085ae:	f43f aeda 	beq.w	408366 <testMotors+0x72>
		Serial_print1(" waiting .");
  4085b2:	483b      	ldr	r0, [pc, #236]	; (4086a0 <testMotors+0x3ac>)
  4085b4:	47c0      	blx	r8
		for(i=0; i< sec_wait; i++) {
  4085b6:	f8dd a004 	ldr.w	sl, [sp, #4]
	Serial_println(nMotorsCfg, DEC);
  4085ba:	2500      	movs	r5, #0
			delay_ms (930);
  4085bc:	4c39      	ldr	r4, [pc, #228]	; (4086a4 <testMotors+0x3b0>)
  4085be:	483a      	ldr	r0, [pc, #232]	; (4086a8 <testMotors+0x3b4>)
  4085c0:	47a0      	blx	r4
			sData.status_Leds_ctrlFan = 0xA0;
  4085c2:	23a0      	movs	r3, #160	; 0xa0
  4085c4:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
			polling_CTRL_FAN();
  4085c8:	4b38      	ldr	r3, [pc, #224]	; (4086ac <testMotors+0x3b8>)
  4085ca:	4798      	blx	r3
			delay_ms (60);
  4085cc:	4838      	ldr	r0, [pc, #224]	; (4086b0 <testMotors+0x3bc>)
  4085ce:	47a0      	blx	r4
			ret_val = intercepts_messages_serial_2();
  4085d0:	4e38      	ldr	r6, [pc, #224]	; (4086b4 <testMotors+0x3c0>)
  4085d2:	47b0      	blx	r6
			delay_ms (20);
  4085d4:	4838      	ldr	r0, [pc, #224]	; (4086b8 <testMotors+0x3c4>)
  4085d6:	47a0      	blx	r4
			ret_val = intercepts_messages_serial_2();
  4085d8:	47b0      	blx	r6
  4085da:	4606      	mov	r6, r0
			Serial_print1(".");
  4085dc:	4837      	ldr	r0, [pc, #220]	; (4086bc <testMotors+0x3c8>)
  4085de:	47c0      	blx	r8
		for(i=0; i< sec_wait; i++) {
  4085e0:	3501      	adds	r5, #1
  4085e2:	4555      	cmp	r5, sl
  4085e4:	dbeb      	blt.n	4085be <testMotors+0x2ca>
		if(ret_val == 0)
  4085e6:	2e00      	cmp	r6, #0
  4085e8:	f47f aee4 	bne.w	4083b4 <testMotors+0xc0>
			polling_CTRL_FAN();
  4085ec:	4b2f      	ldr	r3, [pc, #188]	; (4086ac <testMotors+0x3b8>)
  4085ee:	4798      	blx	r3
			delay_ms (60);
  4085f0:	482f      	ldr	r0, [pc, #188]	; (4086b0 <testMotors+0x3bc>)
  4085f2:	4d2c      	ldr	r5, [pc, #176]	; (4086a4 <testMotors+0x3b0>)
  4085f4:	47a8      	blx	r5
			ret_val_1 = intercepts_messages_serial_2();
  4085f6:	4c2f      	ldr	r4, [pc, #188]	; (4086b4 <testMotors+0x3c0>)
  4085f8:	47a0      	blx	r4
			delay_ms (20);
  4085fa:	482f      	ldr	r0, [pc, #188]	; (4086b8 <testMotors+0x3c4>)
  4085fc:	47a8      	blx	r5
			ret_val_1 = intercepts_messages_serial_2();
  4085fe:	47a0      	blx	r4
			if(ret_val_1) {
  408600:	2800      	cmp	r0, #0
  408602:	f43f aed7 	beq.w	4083b4 <testMotors+0xc0>
				Serial_println1(" ");
  408606:	4812      	ldr	r0, [pc, #72]	; (408650 <testMotors+0x35c>)
  408608:	4c12      	ldr	r4, [pc, #72]	; (408654 <testMotors+0x360>)
  40860a:	47a0      	blx	r4
				Serial_println1("Error, Link KO CTRL_FAN!");
  40860c:	482c      	ldr	r0, [pc, #176]	; (4086c0 <testMotors+0x3cc>)
  40860e:	47a0      	blx	r4
				sData.status_Leds_ctrlFan = 0x00;
  408610:	4b2c      	ldr	r3, [pc, #176]	; (4086c4 <testMotors+0x3d0>)
  408612:	2200      	movs	r2, #0
  408614:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
				sData.speed_motors_R = 0;
  408618:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
				sData.speed_motors_F = 0;
  40861c:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				polling_CTRL_FAN();
  408620:	4b22      	ldr	r3, [pc, #136]	; (4086ac <testMotors+0x3b8>)
  408622:	4798      	blx	r3
				delay_ms (500);
  408624:	4828      	ldr	r0, [pc, #160]	; (4086c8 <testMotors+0x3d4>)
  408626:	47a8      	blx	r5
  408628:	e069      	b.n	4086fe <testMotors+0x40a>
		Serial_print1("OFF");
  40862a:	4828      	ldr	r0, [pc, #160]	; (4086cc <testMotors+0x3d8>)
  40862c:	47c0      	blx	r8
		ckMotorsOn = 0;
  40862e:	2600      	movs	r6, #0
  408630:	e6f1      	b.n	408416 <testMotors+0x122>
		Serial_print1("OFF");
  408632:	4826      	ldr	r0, [pc, #152]	; (4086cc <testMotors+0x3d8>)
  408634:	47c0      	blx	r8
  408636:	e706      	b.n	408446 <testMotors+0x152>
		Serial_print1("OFF");
  408638:	4824      	ldr	r0, [pc, #144]	; (4086cc <testMotors+0x3d8>)
  40863a:	47c0      	blx	r8
  40863c:	e71b      	b.n	408476 <testMotors+0x182>
		Serial_print1("OFF");
  40863e:	4823      	ldr	r0, [pc, #140]	; (4086cc <testMotors+0x3d8>)
  408640:	47c0      	blx	r8
  408642:	e744      	b.n	4084ce <testMotors+0x1da>
		Serial_print1("OFF");
  408644:	4821      	ldr	r0, [pc, #132]	; (4086cc <testMotors+0x3d8>)
  408646:	47c0      	blx	r8
  408648:	e759      	b.n	4084fe <testMotors+0x20a>
		Serial_print1("OFF");
  40864a:	4820      	ldr	r0, [pc, #128]	; (4086cc <testMotors+0x3d8>)
  40864c:	47c0      	blx	r8
  40864e:	e76e      	b.n	40852e <testMotors+0x23a>
  408650:	004126b8 	.word	0x004126b8
  408654:	00406051 	.word	0x00406051
  408658:	004135e8 	.word	0x004135e8
  40865c:	0040d74d 	.word	0x0040d74d
  408660:	42c80000 	.word	0x42c80000
  408664:	0040d95d 	.word	0x0040d95d
  408668:	0040dbcd 	.word	0x0040dbcd
  40866c:	00405f65 	.word	0x00405f65
  408670:	004135fc 	.word	0x004135fc
  408674:	00413600 	.word	0x00413600
  408678:	00413608 	.word	0x00413608
  40867c:	00413614 	.word	0x00413614
  408680:	0041361c 	.word	0x0041361c
  408684:	00413624 	.word	0x00413624
  408688:	00413638 	.word	0x00413638
  40868c:	00413640 	.word	0x00413640
  408690:	00413648 	.word	0x00413648
  408694:	00413650 	.word	0x00413650
  408698:	00413664 	.word	0x00413664
  40869c:	66666667 	.word	0x66666667
  4086a0:	004135dc 	.word	0x004135dc
  4086a4:	20000001 	.word	0x20000001
  4086a8:	00655caa 	.word	0x00655caa
  4086ac:	00402b6d 	.word	0x00402b6d
  4086b0:	00068a1c 	.word	0x00068a1c
  4086b4:	004026e9 	.word	0x004026e9
  4086b8:	00022e0a 	.word	0x00022e0a
  4086bc:	00413788 	.word	0x00413788
  4086c0:	0041369c 	.word	0x0041369c
  4086c4:	200013ac 	.word	0x200013ac
  4086c8:	00367ee5 	.word	0x00367ee5
  4086cc:	00413610 	.word	0x00413610
		
	}
	
	// Spegniamo le ventole...
	sData.status_Leds_ctrlFan = 0x00;
  4086d0:	4b0c      	ldr	r3, [pc, #48]	; (408704 <testMotors+0x410>)
  4086d2:	2200      	movs	r2, #0
  4086d4:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
	sData.speed_motors_R = 0;
  4086d8:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
	sData.speed_motors_F = 0;
  4086dc:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	polling_CTRL_FAN();
  4086e0:	4e09      	ldr	r6, [pc, #36]	; (408708 <testMotors+0x414>)
  4086e2:	47b0      	blx	r6
	delay_ms (200);
  4086e4:	4d09      	ldr	r5, [pc, #36]	; (40870c <testMotors+0x418>)
  4086e6:	4628      	mov	r0, r5
  4086e8:	4c09      	ldr	r4, [pc, #36]	; (408710 <testMotors+0x41c>)
  4086ea:	47a0      	blx	r4
	polling_CTRL_FAN();
  4086ec:	47b0      	blx	r6
	
	delay_ms (200);
  4086ee:	4628      	mov	r0, r5
  4086f0:	47a0      	blx	r4
	
	// 9. stampo esito
	Serial_println1(" ");
  4086f2:	4808      	ldr	r0, [pc, #32]	; (408714 <testMotors+0x420>)
  4086f4:	4b08      	ldr	r3, [pc, #32]	; (408718 <testMotors+0x424>)
  4086f6:	4798      	blx	r3
	print_result_test(esito);
  4086f8:	4648      	mov	r0, r9
  4086fa:	4b08      	ldr	r3, [pc, #32]	; (40871c <testMotors+0x428>)
  4086fc:	4798      	blx	r3
}
  4086fe:	b003      	add	sp, #12
  408700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408704:	200013ac 	.word	0x200013ac
  408708:	00402b6d 	.word	0x00402b6d
  40870c:	0015cc5c 	.word	0x0015cc5c
  408710:	20000001 	.word	0x20000001
  408714:	004126b8 	.word	0x004126b8
  408718:	00406051 	.word	0x00406051
  40871c:	00407c45 	.word	0x00407c45

00408720 <testUart1>:
//         [5]  test Uart1
// Il test, si può fase solo con un piccolo
// HW che mette in cc RX con TX solo dopo aver
//-----------------------------------------------------
void testUart1(void)
{
  408720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408724:	b091      	sub	sp, #68	; 0x44
  408726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40872a:	4b66      	ldr	r3, [pc, #408]	; (4088c4 <testUart1+0x1a4>)
  40872c:	635a      	str	r2, [r3, #52]	; 0x34
	char buff_test[60];
	float fval_16 = 0;
	
	//digitalWrite(pSwitchOFF_KTS, LOW);   // KTS OFF
	ioport_set_pin_level(pSwitchOFF_KTS, IOPORT_PIN_LEVEL_LOW);
	Serial_println1(" ");
  40872e:	4d66      	ldr	r5, [pc, #408]	; (4088c8 <testUart1+0x1a8>)
  408730:	4628      	mov	r0, r5
  408732:	4c66      	ldr	r4, [pc, #408]	; (4088cc <testUart1+0x1ac>)
  408734:	47a0      	blx	r4
	PrintFlashString(str_1_test_uart1,   NEW_LINE);
  408736:	216e      	movs	r1, #110	; 0x6e
  408738:	4865      	ldr	r0, [pc, #404]	; (4088d0 <testUart1+0x1b0>)
  40873a:	4e66      	ldr	r6, [pc, #408]	; (4088d4 <testUart1+0x1b4>)
  40873c:	47b0      	blx	r6
	PrintFlashString(str_HW_Testing,   NEW_LINE);
  40873e:	216e      	movs	r1, #110	; 0x6e
  408740:	4865      	ldr	r0, [pc, #404]	; (4088d8 <testUart1+0x1b8>)
  408742:	47b0      	blx	r6
	Serial_println1(" ");
  408744:	4628      	mov	r0, r5
  408746:	47a0      	blx	r4
	
	delay_ms (2000);
  408748:	4864      	ldr	r0, [pc, #400]	; (4088dc <testUart1+0x1bc>)
  40874a:	4b65      	ldr	r3, [pc, #404]	; (4088e0 <testUart1+0x1c0>)
  40874c:	4798      	blx	r3

	// scarichiamo prima il buffer
	nb = Serial_available();
  40874e:	4b65      	ldr	r3, [pc, #404]	; (4088e4 <testUart1+0x1c4>)
  408750:	4798      	blx	r3
  408752:	b2c5      	uxtb	r5, r0
	if(nb) {
  408754:	b145      	cbz	r5, 408768 <testUart1+0x48>
  408756:	2400      	movs	r4, #0
		for(i=0; i< nb; i++)
		buff_test[0] = Serial_read();
  408758:	4e63      	ldr	r6, [pc, #396]	; (4088e8 <testUart1+0x1c8>)
  40875a:	47b0      	blx	r6
  40875c:	f88d 0004 	strb.w	r0, [sp, #4]
  408760:	3401      	adds	r4, #1
		for(i=0; i< nb; i++)
  408762:	b2e3      	uxtb	r3, r4
  408764:	429d      	cmp	r5, r3
  408766:	d8f8      	bhi.n	40875a <testUart1+0x3a>
	}
	Serial_print1("TX: ");
  408768:	4860      	ldr	r0, [pc, #384]	; (4088ec <testUart1+0x1cc>)
  40876a:	4b61      	ldr	r3, [pc, #388]	; (4088f0 <testUart1+0x1d0>)
  40876c:	4798      	blx	r3
	delay_ms (50);
  40876e:	4861      	ldr	r0, [pc, #388]	; (4088f4 <testUart1+0x1d4>)
  408770:	4c5b      	ldr	r4, [pc, #364]	; (4088e0 <testUart1+0x1c0>)
  408772:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  408778:	4b52      	ldr	r3, [pc, #328]	; (4088c4 <testUart1+0x1a4>)
  40877a:	631a      	str	r2, [r3, #48]	; 0x30
	
	//digitalWrite(pSwitchOFF_KTS, HIGH);   // KTS ON
	ioport_set_pin_level(pSwitchOFF_KTS, IOPORT_PIN_LEVEL_HIGH);
	delay_ms (100);
  40877c:	4d5e      	ldr	r5, [pc, #376]	; (4088f8 <testUart1+0x1d8>)
  40877e:	4628      	mov	r0, r5
  408780:	47a0      	blx	r4
	fval_16 += analogRead(pAnAssorb_KTS);
  408782:	4b5e      	ldr	r3, [pc, #376]	; (4088fc <testUart1+0x1dc>)
  408784:	f893 9000 	ldrb.w	r9, [r3]
  408788:	4648      	mov	r0, r9
  40878a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 408940 <testUart1+0x220>
  40878e:	47c0      	blx	r8
  408790:	4f5b      	ldr	r7, [pc, #364]	; (408900 <testUart1+0x1e0>)
  408792:	47b8      	blx	r7
  408794:	4e5b      	ldr	r6, [pc, #364]	; (408904 <testUart1+0x1e4>)
  408796:	2100      	movs	r1, #0
  408798:	47b0      	blx	r6
  40879a:	4682      	mov	sl, r0
	delay_ms (100);
  40879c:	4628      	mov	r0, r5
  40879e:	47a0      	blx	r4
	fval_16 += analogRead(pAnAssorb_KTS);
  4087a0:	4648      	mov	r0, r9
  4087a2:	47c0      	blx	r8
  4087a4:	47b8      	blx	r7
  4087a6:	4651      	mov	r1, sl
  4087a8:	47b0      	blx	r6
  4087aa:	4682      	mov	sl, r0
	delay_ms (100);
  4087ac:	4628      	mov	r0, r5
  4087ae:	47a0      	blx	r4
	
	PrintFlashString(str_msg_uart1,   NO_NEW_LINE); //spariamo la stringa
  4087b0:	2100      	movs	r1, #0
  4087b2:	4855      	ldr	r0, [pc, #340]	; (408908 <testUart1+0x1e8>)
  4087b4:	4b47      	ldr	r3, [pc, #284]	; (4088d4 <testUart1+0x1b4>)
  4087b6:	4798      	blx	r3
	
	delay_ms (100);
  4087b8:	4628      	mov	r0, r5
  4087ba:	47a0      	blx	r4
	fval_16 += analogRead(pAnAssorb_KTS);
  4087bc:	4648      	mov	r0, r9
  4087be:	47c0      	blx	r8
  4087c0:	47b8      	blx	r7
  4087c2:	4651      	mov	r1, sl
  4087c4:	47b0      	blx	r6
  4087c6:	4682      	mov	sl, r0
	delay_ms (100);
  4087c8:	4628      	mov	r0, r5
  4087ca:	47a0      	blx	r4
	fval_16 += analogRead(pAnAssorb_KTS);
  4087cc:	4648      	mov	r0, r9
  4087ce:	47c0      	blx	r8
  4087d0:	47b8      	blx	r7
  4087d2:	4651      	mov	r1, sl
  4087d4:	47b0      	blx	r6
  4087d6:	4683      	mov	fp, r0
	delay_ms (100);
  4087d8:	4628      	mov	r0, r5
  4087da:	47a0      	blx	r4
  4087dc:	f10d 0403 	add.w	r4, sp, #3
  4087e0:	f10d 0135 	add.w	r1, sp, #53	; 0x35
  4087e4:	4623      	mov	r3, r4

	// puliamo e scarichiamo prima il buffer
	for(i=0; i <50; i++)
	buff_test[i] = 0;
  4087e6:	2200      	movs	r2, #0
  4087e8:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(i=0; i <50; i++)
  4087ec:	428b      	cmp	r3, r1
  4087ee:	d1fb      	bne.n	4087e8 <testUart1+0xc8>
	
	nb = Serial_available();
  4087f0:	4b3c      	ldr	r3, [pc, #240]	; (4088e4 <testUart1+0x1c4>)
  4087f2:	4798      	blx	r3
  4087f4:	fa5f f880 	uxtb.w	r8, r0
	if(nb) {
  4087f8:	f1b8 0f00 	cmp.w	r8, #0
  4087fc:	d058      	beq.n	4088b0 <testUart1+0x190>
  4087fe:	f108 35ff 	add.w	r5, r8, #4294967295
  408802:	ab01      	add	r3, sp, #4
  408804:	fa53 f585 	uxtab	r5, r3, r5
  408808:	4626      	mov	r6, r4
		for(i=0; i<nb; i++)
		buff_test[i] = Serial_read();
  40880a:	4f37      	ldr	r7, [pc, #220]	; (4088e8 <testUart1+0x1c8>)
  40880c:	47b8      	blx	r7
  40880e:	f806 0f01 	strb.w	r0, [r6, #1]!
		for(i=0; i<nb; i++)
  408812:	42ae      	cmp	r6, r5
  408814:	d1fa      	bne.n	40880c <testUart1+0xec>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40881a:	4b2a      	ldr	r3, [pc, #168]	; (4088c4 <testUart1+0x1a4>)
  40881c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//digitalWrite(pSwitchOFF_KTS, LOW);   // KTS OFF
	ioport_set_pin_level(pSwitchOFF_KTS, IOPORT_PIN_LEVEL_LOW);
	delay_ms (400);
  40881e:	483b      	ldr	r0, [pc, #236]	; (40890c <testUart1+0x1ec>)
  408820:	4b2f      	ldr	r3, [pc, #188]	; (4088e0 <testUart1+0x1c0>)
  408822:	4798      	blx	r3
  408824:	4b3a      	ldr	r3, [pc, #232]	; (408910 <testUart1+0x1f0>)
  408826:	2500      	movs	r5, #0
	
	for(i=0, flag =0; i <nb; i++)
	{
		if(buff_test[i] != str_msg_uart1[i])
  408828:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  40882c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  408830:	4291      	cmp	r1, r2
		flag++;
  408832:	bf1c      	itt	ne
  408834:	3501      	addne	r5, #1
  408836:	b2ed      	uxtbne	r5, r5
	for(i=0, flag =0; i <nb; i++)
  408838:	42b4      	cmp	r4, r6
  40883a:	d1f5      	bne.n	408828 <testUart1+0x108>
  40883c:	4643      	mov	r3, r8
	}
	buff_test[i] = 0;
  40883e:	aa10      	add	r2, sp, #64	; 0x40
  408840:	4413      	add	r3, r2
  408842:	2200      	movs	r2, #0
  408844:	f803 2c3c 	strb.w	r2, [r3, #-60]
	
	Serial_println1(" ");
  408848:	f8df 907c 	ldr.w	r9, [pc, #124]	; 4088c8 <testUart1+0x1a8>
  40884c:	4648      	mov	r0, r9
  40884e:	4c1f      	ldr	r4, [pc, #124]	; (4088cc <testUart1+0x1ac>)
  408850:	47a0      	blx	r4
	Serial_print1("RX: ");
  408852:	4830      	ldr	r0, [pc, #192]	; (408914 <testUart1+0x1f4>)
  408854:	4e26      	ldr	r6, [pc, #152]	; (4088f0 <testUart1+0x1d0>)
  408856:	47b0      	blx	r6
	delay_ms (250);
  408858:	482f      	ldr	r0, [pc, #188]	; (408918 <testUart1+0x1f8>)
  40885a:	f8df a084 	ldr.w	sl, [pc, #132]	; 4088e0 <testUart1+0x1c0>
  40885e:	47d0      	blx	sl
	Serial_println1(buff_test);
  408860:	a801      	add	r0, sp, #4
  408862:	47a0      	blx	r4
	
	delay_ms (1000);
  408864:	482d      	ldr	r0, [pc, #180]	; (40891c <testUart1+0x1fc>)
  408866:	47d0      	blx	sl
	
	Serial_println1(" ");
  408868:	4648      	mov	r0, r9
  40886a:	47a0      	blx	r4
	Serial_print1("Len RX Message: ");
  40886c:	482c      	ldr	r0, [pc, #176]	; (408920 <testUart1+0x200>)
  40886e:	47b0      	blx	r6
	Serial_println(nb, DEC);
  408870:	210a      	movs	r1, #10
  408872:	4640      	mov	r0, r8
  408874:	4b2b      	ldr	r3, [pc, #172]	; (408924 <testUart1+0x204>)
  408876:	4798      	blx	r3
	Serial_print1("Absorption current HW on RJ45: ");
  408878:	482b      	ldr	r0, [pc, #172]	; (408928 <testUart1+0x208>)
  40887a:	47b0      	blx	r6
	Serial_print((fval_16/16), 1);
  40887c:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
  408880:	4658      	mov	r0, fp
  408882:	4b2a      	ldr	r3, [pc, #168]	; (40892c <testUart1+0x20c>)
  408884:	4798      	blx	r3
  408886:	4b2a      	ldr	r3, [pc, #168]	; (408930 <testUart1+0x210>)
  408888:	4798      	blx	r3
  40888a:	2101      	movs	r1, #1
  40888c:	b2c0      	uxtb	r0, r0
  40888e:	4b29      	ldr	r3, [pc, #164]	; (408934 <testUart1+0x214>)
  408890:	4798      	blx	r3
	Serial_println1(" mA");
  408892:	4829      	ldr	r0, [pc, #164]	; (408938 <testUart1+0x218>)
  408894:	47a0      	blx	r4
	
	if(flag || (nb < 3))
  408896:	b94d      	cbnz	r5, 4088ac <testUart1+0x18c>
	esito = 'F';
  408898:	f1b8 0f02 	cmp.w	r8, #2
  40889c:	bf98      	it	ls
  40889e:	2546      	movls	r5, #70	; 0x46
	
	print_result_test(esito);
  4088a0:	4628      	mov	r0, r5
  4088a2:	4b26      	ldr	r3, [pc, #152]	; (40893c <testUart1+0x21c>)
  4088a4:	4798      	blx	r3
	
}
  4088a6:	b011      	add	sp, #68	; 0x44
  4088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	esito = 'F';
  4088ac:	2546      	movs	r5, #70	; 0x46
  4088ae:	e7f7      	b.n	4088a0 <testUart1+0x180>
  4088b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4088b4:	4b03      	ldr	r3, [pc, #12]	; (4088c4 <testUart1+0x1a4>)
  4088b6:	635a      	str	r2, [r3, #52]	; 0x34
	delay_ms (400);
  4088b8:	4814      	ldr	r0, [pc, #80]	; (40890c <testUart1+0x1ec>)
  4088ba:	4b09      	ldr	r3, [pc, #36]	; (4088e0 <testUart1+0x1c0>)
  4088bc:	4798      	blx	r3
	for(i=0, flag =0; i <nb; i++)
  4088be:	4645      	mov	r5, r8
  4088c0:	4643      	mov	r3, r8
  4088c2:	e7bc      	b.n	40883e <testUart1+0x11e>
  4088c4:	400e0e00 	.word	0x400e0e00
  4088c8:	004126b8 	.word	0x004126b8
  4088cc:	00406051 	.word	0x00406051
  4088d0:	0041331c 	.word	0x0041331c
  4088d4:	0040669d 	.word	0x0040669d
  4088d8:	0041356c 	.word	0x0041356c
  4088dc:	00d9fb93 	.word	0x00d9fb93
  4088e0:	20000001 	.word	0x20000001
  4088e4:	00405e81 	.word	0x00405e81
  4088e8:	00405efd 	.word	0x00405efd
  4088ec:	004136b8 	.word	0x004136b8
  4088f0:	00405f35 	.word	0x00405f35
  4088f4:	00057317 	.word	0x00057317
  4088f8:	000ae62e 	.word	0x000ae62e
  4088fc:	004138b4 	.word	0x004138b4
  408900:	0040d745 	.word	0x0040d745
  408904:	0040d5e5 	.word	0x0040d5e5
  408908:	004135a4 	.word	0x004135a4
  40890c:	002b98b7 	.word	0x002b98b7
  408910:	004135a3 	.word	0x004135a3
  408914:	004136c0 	.word	0x004136c0
  408918:	001b3f73 	.word	0x001b3f73
  40891c:	006cfdca 	.word	0x006cfdca
  408920:	004136c8 	.word	0x004136c8
  408924:	0040609d 	.word	0x0040609d
  408928:	004136dc 	.word	0x004136dc
  40892c:	0040d7f5 	.word	0x0040d7f5
  408930:	0040dbcd 	.word	0x0040dbcd
  408934:	00405f65 	.word	0x00405f65
  408938:	004136fc 	.word	0x004136fc
  40893c:	00407c45 	.word	0x00407c45
  408940:	0040c5d9 	.word	0x0040c5d9

00408944 <print_bit_I2C>:

//-----------------------------------------------------
//
//-----------------------------------------------------
void print_bit_I2C(Byte *sda, Byte *scl, Byte versus)
{
  408944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408948:	4604      	mov	r4, r0
  40894a:	460d      	mov	r5, r1
  40894c:	4616      	mov	r6, r2
	int i;
	
	delay_ms (50);
  40894e:	4838      	ldr	r0, [pc, #224]	; (408a30 <print_bit_I2C+0xec>)
  408950:	4b38      	ldr	r3, [pc, #224]	; (408a34 <print_bit_I2C+0xf0>)
  408952:	4798      	blx	r3
	if(versus == 0) {
  408954:	2e00      	cmp	r6, #0
  408956:	d135      	bne.n	4089c4 <print_bit_I2C+0x80>
		Serial_println1(" ");
  408958:	4837      	ldr	r0, [pc, #220]	; (408a38 <print_bit_I2C+0xf4>)
  40895a:	4b38      	ldr	r3, [pc, #224]	; (408a3c <print_bit_I2C+0xf8>)
  40895c:	4798      	blx	r3
		Serial_print1("SDA_OUT:  ");
  40895e:	4838      	ldr	r0, [pc, #224]	; (408a40 <print_bit_I2C+0xfc>)
  408960:	4b38      	ldr	r3, [pc, #224]	; (408a44 <print_bit_I2C+0x100>)
  408962:	4798      	blx	r3
  408964:	f104 060a 	add.w	r6, r4, #10
		
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
			if(*sda++)
			Serial_print1("1 ");
			else
			Serial_print1("0 ");
  408968:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 408a58 <print_bit_I2C+0x114>
  40896c:	4f35      	ldr	r7, [pc, #212]	; (408a44 <print_bit_I2C+0x100>)
			Serial_print1("1 ");
  40896e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 408a4c <print_bit_I2C+0x108>
  408972:	e003      	b.n	40897c <print_bit_I2C+0x38>
			Serial_print1("0 ");
  408974:	4648      	mov	r0, r9
  408976:	47b8      	blx	r7
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  408978:	42a6      	cmp	r6, r4
  40897a:	d006      	beq.n	40898a <print_bit_I2C+0x46>
			if(*sda++)
  40897c:	f814 3b01 	ldrb.w	r3, [r4], #1
  408980:	2b00      	cmp	r3, #0
  408982:	d0f7      	beq.n	408974 <print_bit_I2C+0x30>
			Serial_print1("1 ");
  408984:	4640      	mov	r0, r8
  408986:	47b8      	blx	r7
  408988:	e7f6      	b.n	408978 <print_bit_I2C+0x34>
			
		}
		
		delay_ms (50);
  40898a:	4829      	ldr	r0, [pc, #164]	; (408a30 <print_bit_I2C+0xec>)
  40898c:	4b29      	ldr	r3, [pc, #164]	; (408a34 <print_bit_I2C+0xf0>)
  40898e:	4798      	blx	r3
		Serial_println1(" ");
  408990:	4829      	ldr	r0, [pc, #164]	; (408a38 <print_bit_I2C+0xf4>)
  408992:	4b2a      	ldr	r3, [pc, #168]	; (408a3c <print_bit_I2C+0xf8>)
  408994:	4798      	blx	r3
		Serial_print1("SCL_IN :  ");
  408996:	482c      	ldr	r0, [pc, #176]	; (408a48 <print_bit_I2C+0x104>)
  408998:	4b2a      	ldr	r3, [pc, #168]	; (408a44 <print_bit_I2C+0x100>)
  40899a:	4798      	blx	r3
  40899c:	f105 040a 	add.w	r4, r5, #10
		
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
			if(*scl++)
			Serial_print1("1 ");
			else
			Serial_print1("0 ");
  4089a0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 408a58 <print_bit_I2C+0x114>
  4089a4:	4e27      	ldr	r6, [pc, #156]	; (408a44 <print_bit_I2C+0x100>)
			Serial_print1("1 ");
  4089a6:	4f29      	ldr	r7, [pc, #164]	; (408a4c <print_bit_I2C+0x108>)
  4089a8:	e003      	b.n	4089b2 <print_bit_I2C+0x6e>
			Serial_print1("0 ");
  4089aa:	4640      	mov	r0, r8
  4089ac:	47b0      	blx	r6
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  4089ae:	42ac      	cmp	r4, r5
  4089b0:	d006      	beq.n	4089c0 <print_bit_I2C+0x7c>
			if(*scl++)
  4089b2:	f815 3b01 	ldrb.w	r3, [r5], #1
  4089b6:	2b00      	cmp	r3, #0
  4089b8:	d0f7      	beq.n	4089aa <print_bit_I2C+0x66>
			Serial_print1("1 ");
  4089ba:	4638      	mov	r0, r7
  4089bc:	47b0      	blx	r6
  4089be:	e7f6      	b.n	4089ae <print_bit_I2C+0x6a>
  4089c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
		}else {
		Serial_println1(" ");
  4089c4:	481c      	ldr	r0, [pc, #112]	; (408a38 <print_bit_I2C+0xf4>)
  4089c6:	4b1d      	ldr	r3, [pc, #116]	; (408a3c <print_bit_I2C+0xf8>)
  4089c8:	4798      	blx	r3
		Serial_print1("SCL_OUT:  ");
  4089ca:	4821      	ldr	r0, [pc, #132]	; (408a50 <print_bit_I2C+0x10c>)
  4089cc:	4b1d      	ldr	r3, [pc, #116]	; (408a44 <print_bit_I2C+0x100>)
  4089ce:	4798      	blx	r3
  4089d0:	f105 060a 	add.w	r6, r5, #10
		
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
			if(*scl++)
			Serial_print1("1 ");
			else
			Serial_print1("0 ");
  4089d4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 408a58 <print_bit_I2C+0x114>
  4089d8:	4f1a      	ldr	r7, [pc, #104]	; (408a44 <print_bit_I2C+0x100>)
			Serial_print1("1 ");
  4089da:	f8df 8070 	ldr.w	r8, [pc, #112]	; 408a4c <print_bit_I2C+0x108>
  4089de:	e003      	b.n	4089e8 <print_bit_I2C+0xa4>
			Serial_print1("0 ");
  4089e0:	4648      	mov	r0, r9
  4089e2:	47b8      	blx	r7
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  4089e4:	42b5      	cmp	r5, r6
  4089e6:	d006      	beq.n	4089f6 <print_bit_I2C+0xb2>
			if(*scl++)
  4089e8:	f815 3b01 	ldrb.w	r3, [r5], #1
  4089ec:	2b00      	cmp	r3, #0
  4089ee:	d0f7      	beq.n	4089e0 <print_bit_I2C+0x9c>
			Serial_print1("1 ");
  4089f0:	4640      	mov	r0, r8
  4089f2:	47b8      	blx	r7
  4089f4:	e7f6      	b.n	4089e4 <print_bit_I2C+0xa0>
			
		}
		
		delay_ms (50);
  4089f6:	480e      	ldr	r0, [pc, #56]	; (408a30 <print_bit_I2C+0xec>)
  4089f8:	4b0e      	ldr	r3, [pc, #56]	; (408a34 <print_bit_I2C+0xf0>)
  4089fa:	4798      	blx	r3
		Serial_println1(" ");
  4089fc:	480e      	ldr	r0, [pc, #56]	; (408a38 <print_bit_I2C+0xf4>)
  4089fe:	4b0f      	ldr	r3, [pc, #60]	; (408a3c <print_bit_I2C+0xf8>)
  408a00:	4798      	blx	r3
		Serial_print1("SDA_IN :  ");
  408a02:	4814      	ldr	r0, [pc, #80]	; (408a54 <print_bit_I2C+0x110>)
  408a04:	4b0f      	ldr	r3, [pc, #60]	; (408a44 <print_bit_I2C+0x100>)
  408a06:	4798      	blx	r3
  408a08:	f104 050a 	add.w	r5, r4, #10
		
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
			if(*sda++)
			Serial_print1("1 ");
			else
			Serial_print1("0 ");
  408a0c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 408a58 <print_bit_I2C+0x114>
  408a10:	4e0c      	ldr	r6, [pc, #48]	; (408a44 <print_bit_I2C+0x100>)
			Serial_print1("1 ");
  408a12:	4f0e      	ldr	r7, [pc, #56]	; (408a4c <print_bit_I2C+0x108>)
  408a14:	e003      	b.n	408a1e <print_bit_I2C+0xda>
			Serial_print1("0 ");
  408a16:	4640      	mov	r0, r8
  408a18:	47b0      	blx	r6
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  408a1a:	42a5      	cmp	r5, r4
  408a1c:	d006      	beq.n	408a2c <print_bit_I2C+0xe8>
			if(*sda++)
  408a1e:	f814 3b01 	ldrb.w	r3, [r4], #1
  408a22:	2b00      	cmp	r3, #0
  408a24:	d0f7      	beq.n	408a16 <print_bit_I2C+0xd2>
			Serial_print1("1 ");
  408a26:	4638      	mov	r0, r7
  408a28:	47b0      	blx	r6
  408a2a:	e7f6      	b.n	408a1a <print_bit_I2C+0xd6>
  408a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408a30:	00057317 	.word	0x00057317
  408a34:	20000001 	.word	0x20000001
  408a38:	004126b8 	.word	0x004126b8
  408a3c:	00406051 	.word	0x00406051
  408a40:	0041323c 	.word	0x0041323c
  408a44:	00405f35 	.word	0x00405f35
  408a48:	00413250 	.word	0x00413250
  408a4c:	00413248 	.word	0x00413248
  408a50:	0041325c 	.word	0x0041325c
  408a54:	00413268 	.word	0x00413268
  408a58:	0041324c 	.word	0x0041324c

00408a5c <testI2C>:
//  2 campioni di frequenza, 1 KHz e 50 KHz.
//  Per far ciò come il Test Uart1 dobbiamo utilizzare
//  un piccolo HW che cc i 2 PIN.
//-----------------------------------------------------
void testI2C()
{
  408a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a60:	b08d      	sub	sp, #52	; 0x34
	Byte status_pSCL[N_TOOGLE_BIT_I2C];
	Byte status_pSDA[N_TOOGLE_BIT_I2C];
	Byte i, n, j, esito = 0;
	int pTestSDA = 10, pTestSCL= 11;
	
	Serial_println1(" ");
  408a62:	4887      	ldr	r0, [pc, #540]	; (408c80 <testI2C+0x224>)
  408a64:	4b87      	ldr	r3, [pc, #540]	; (408c84 <testI2C+0x228>)
  408a66:	4798      	blx	r3
	PrintFlashString(str_1_test_I2C,   NEW_LINE);
  408a68:	216e      	movs	r1, #110	; 0x6e
  408a6a:	4887      	ldr	r0, [pc, #540]	; (408c88 <testI2C+0x22c>)
  408a6c:	4c87      	ldr	r4, [pc, #540]	; (408c8c <testI2C+0x230>)
  408a6e:	47a0      	blx	r4
	PrintFlashString(str_HW_Testing,   NEW_LINE);
  408a70:	216e      	movs	r1, #110	; 0x6e
  408a72:	4887      	ldr	r0, [pc, #540]	; (408c90 <testI2C+0x234>)
  408a74:	47a0      	blx	r4
	delay_ms (1300);
  408a76:	4887      	ldr	r0, [pc, #540]	; (408c94 <testI2C+0x238>)
  408a78:	4b87      	ldr	r3, [pc, #540]	; (408c98 <testI2C+0x23c>)
  408a7a:	4798      	blx	r3
  408a7c:	2300      	movs	r3, #0
  408a7e:	9301      	str	r3, [sp, #4]
	
	esito = 0;
  408a80:	4699      	mov	r9, r3
  408a82:	4c86      	ldr	r4, [pc, #536]	; (408c9c <testI2C+0x240>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
  408a88:	9303      	str	r3, [sp, #12]
  408a8a:	e096      	b.n	408bba <testI2C+0x15e>
	
	for(n=0; n <2; n++){
		Serial_println1(" ");
		if(n==0)
		PrintFlashString(str_2_test_I2C,   NO_NEW_LINE);
  408a8c:	2100      	movs	r1, #0
  408a8e:	4884      	ldr	r0, [pc, #528]	; (408ca0 <testI2C+0x244>)
  408a90:	4b7e      	ldr	r3, [pc, #504]	; (408c8c <testI2C+0x230>)
  408a92:	4798      	blx	r3
  408a94:	e0a1      	b.n	408bda <testI2C+0x17e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408a96:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
				ioport_set_pin_level(SDA, IOPORT_PIN_LEVEL_HIGH);
				status_pSDA[i] = 1;
				}else {
				//digitalWrite(pTestSDA,     LOW);
				ioport_set_pin_level(SDA, IOPORT_PIN_LEVEL_LOW);
				status_pSDA[i] = 0;
  408a9a:	2300      	movs	r3, #0
  408a9c:	f88a 3000 	strb.w	r3, [sl]
			}
			
			asm ("nop");
  408aa0:	bf00      	nop
			asm ("nop");
  408aa2:	bf00      	nop
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  408aa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  408aa6:	f3c3 0340 	ubfx	r3, r3, #1, #1
			//status_pSCL[i]  = digitalRead(pTestSCL);
			status_pSCL[i]  = ioport_get_pin_level(SCL);
  408aaa:	f806 3b01 	strb.w	r3, [r6], #1
  408aae:	2350      	movs	r3, #80	; 0x50
			
			if(n==0)
  408ab0:	b1ad      	cbz	r5, 408ade <testI2C+0x82>
			delay_ms (1);
			else {
				for(j=0; j<80; j++) {
					asm ("nop");
  408ab2:	bf00      	nop
					asm ("nop");
  408ab4:	bf00      	nop
  408ab6:	3b01      	subs	r3, #1
				for(j=0; j<80; j++) {
  408ab8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  408abc:	d1f9      	bne.n	408ab2 <testI2C+0x56>
  408abe:	f10a 0a01 	add.w	sl, sl, #1
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  408ac2:	42be      	cmp	r6, r7
  408ac4:	d010      	beq.n	408ae8 <testI2C+0x8c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408ac6:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
			if(i&0x01) {
  408aca:	eba6 0308 	sub.w	r3, r6, r8
  408ace:	f013 0f01 	tst.w	r3, #1
  408ad2:	d0e0      	beq.n	408a96 <testI2C+0x3a>
  408ad4:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
				status_pSDA[i] = 1;
  408ad8:	f88a b000 	strb.w	fp, [sl]
  408adc:	e7e0      	b.n	408aa0 <testI2C+0x44>
			delay_ms (1);
  408ade:	f641 30e7 	movw	r0, #7143	; 0x1be7
  408ae2:	4b6d      	ldr	r3, [pc, #436]	; (408c98 <testI2C+0x23c>)
  408ae4:	4798      	blx	r3
  408ae6:	e7ea      	b.n	408abe <testI2C+0x62>
  408ae8:	9d04      	ldr	r5, [sp, #16]
  408aea:	f8dd 9014 	ldr.w	r9, [sp, #20]
  408aee:	f10d 0022 	add.w	r0, sp, #34	; 0x22
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  408af2:	4643      	mov	r3, r8
  408af4:	462f      	mov	r7, r5
				
			}
		}
		
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
			if(status_pSDA[i] != status_pSCL[i])
  408af6:	f817 1b01 	ldrb.w	r1, [r7], #1
  408afa:	f813 2b01 	ldrb.w	r2, [r3], #1
			esito = 'F';
  408afe:	4291      	cmp	r1, r2
  408b00:	bf18      	it	ne
  408b02:	f04f 0946 	movne.w	r9, #70	; 0x46
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  408b06:	4287      	cmp	r7, r0
  408b08:	d1f5      	bne.n	408af6 <testI2C+0x9a>
		}
		
		if(n==0)
  408b0a:	9b02      	ldr	r3, [sp, #8]
  408b0c:	2b00      	cmp	r3, #0
  408b0e:	f000 8092 	beq.w	408c36 <testI2C+0x1da>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
  408b16:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408b18:	2301      	movs	r3, #1
  408b1a:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408b1c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408b20:	2302      	movs	r3, #2
  408b22:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408b24:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408b28:	6323      	str	r3, [r4, #48]	; 0x30
		ioport_set_pin_dir(SDA, IOPORT_DIR_INPUT);
		//pinMode(pTestSCL,          OUTPUT);
		//digitalWrite(pTestSCL,     HIGH);
		ioport_set_pin_dir(SCL, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(SCL, IOPORT_PIN_LEVEL_HIGH);
		delay_ms (20);
  408b2a:	485e      	ldr	r0, [pc, #376]	; (408ca4 <testI2C+0x248>)
  408b2c:	4b5a      	ldr	r3, [pc, #360]	; (408c98 <testI2C+0x23c>)
  408b2e:	4798      	blx	r3
  408b30:	46c2      	mov	sl, r8
  408b32:	462e      	mov	r6, r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408b34:	f04f 0b02 	mov.w	fp, #2
  408b38:	f8cd 8010 	str.w	r8, [sp, #16]
  408b3c:	f8cd 9014 	str.w	r9, [sp, #20]
  408b40:	f8dd 8008 	ldr.w	r8, [sp, #8]
  408b44:	f8dd 900c 	ldr.w	r9, [sp, #12]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408b48:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
			//digitalWrite(pStatusLedI2C,  HIGH);
			ioport_set_pin_level(pStatusLedI2C, IOPORT_PIN_LEVEL_HIGH);
			
			if(i&0x01) {
  408b4c:	1b73      	subs	r3, r6, r5
  408b4e:	f013 0f01 	tst.w	r3, #1
  408b52:	bf19      	ittee	ne
  408b54:	f8c4 b030 	strne.w	fp, [r4, #48]	; 0x30
				//digitalWrite(pTestSCL,     HIGH);
				ioport_set_pin_level(SCL, IOPORT_PIN_LEVEL_HIGH);
				status_pSCL[i] = 1;
  408b58:	2301      	movne	r3, #1
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408b5a:	f8c4 b034 	streq.w	fp, [r4, #52]	; 0x34
				}else {
				//digitalWrite(pTestSCL,     LOW);
				ioport_set_pin_level(SCL, IOPORT_PIN_LEVEL_LOW);
				status_pSCL[i] = 0;
  408b5e:	2300      	moveq	r3, #0
  408b60:	f88a 3000 	strb.w	r3, [sl]
			}
			
			asm ("nop");
  408b64:	bf00      	nop
			asm ("nop");
  408b66:	bf00      	nop
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  408b68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  408b6a:	f003 0301 	and.w	r3, r3, #1
			
			//status_pSDA[i] = digitalRead(pTestSDA);
			status_pSDA[i] = ioport_get_pin_level(SDA);
  408b6e:	f806 3b01 	strb.w	r3, [r6], #1
  408b72:	2350      	movs	r3, #80	; 0x50
			
			if(n==0)
  408b74:	f1b8 0f00 	cmp.w	r8, #0
  408b78:	d063      	beq.n	408c42 <testI2C+0x1e6>
			delay_ms (1);
			else {
				for(j=0; j<80; j++) {
					asm ("nop");
  408b7a:	bf00      	nop
					asm ("nop");
  408b7c:	bf00      	nop
  408b7e:	3b01      	subs	r3, #1
				for(j=0; j<80; j++) {
  408b80:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  408b84:	d1f9      	bne.n	408b7a <testI2C+0x11e>
  408b86:	f10a 0a01 	add.w	sl, sl, #1
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  408b8a:	42be      	cmp	r6, r7
  408b8c:	d1dc      	bne.n	408b48 <testI2C+0xec>
  408b8e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  408b92:	f8dd 9014 	ldr.w	r9, [sp, #20]
				}
			}
		}
		
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
			if(status_pSDA[i] != status_pSCL[i])
  408b96:	f815 2b01 	ldrb.w	r2, [r5], #1
  408b9a:	f818 3b01 	ldrb.w	r3, [r8], #1
			esito = 'F';
  408b9e:	429a      	cmp	r2, r3
  408ba0:	bf18      	it	ne
  408ba2:	f04f 0946 	movne.w	r9, #70	; 0x46
		for(i=0; i <N_TOOGLE_BIT_I2C; i++) {
  408ba6:	42ae      	cmp	r6, r5
  408ba8:	d1f5      	bne.n	408b96 <testI2C+0x13a>
		}
		delay_ms (100);
  408baa:	483f      	ldr	r0, [pc, #252]	; (408ca8 <testI2C+0x24c>)
  408bac:	4b3a      	ldr	r3, [pc, #232]	; (408c98 <testI2C+0x23c>)
  408bae:	4798      	blx	r3
  408bb0:	9b01      	ldr	r3, [sp, #4]
  408bb2:	3301      	adds	r3, #1
  408bb4:	9301      	str	r3, [sp, #4]
	for(n=0; n <2; n++){
  408bb6:	2b02      	cmp	r3, #2
  408bb8:	d048      	beq.n	408c4c <testI2C+0x1f0>
		Serial_println1(" ");
  408bba:	4831      	ldr	r0, [pc, #196]	; (408c80 <testI2C+0x224>)
  408bbc:	4b31      	ldr	r3, [pc, #196]	; (408c84 <testI2C+0x228>)
  408bbe:	4798      	blx	r3
		if(n==0)
  408bc0:	9b01      	ldr	r3, [sp, #4]
  408bc2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  408bc6:	9302      	str	r3, [sp, #8]
  408bc8:	f43f af60 	beq.w	408a8c <testI2C+0x30>
			Serial_println1(" ");
  408bcc:	482c      	ldr	r0, [pc, #176]	; (408c80 <testI2C+0x224>)
  408bce:	4b2d      	ldr	r3, [pc, #180]	; (408c84 <testI2C+0x228>)
  408bd0:	4798      	blx	r3
			PrintFlashString(str_3_test_I2C,   NO_NEW_LINE);
  408bd2:	2100      	movs	r1, #0
  408bd4:	4835      	ldr	r0, [pc, #212]	; (408cac <testI2C+0x250>)
  408bd6:	4b2d      	ldr	r3, [pc, #180]	; (408c8c <testI2C+0x230>)
  408bd8:	4798      	blx	r3
		delay_ms (400);
  408bda:	4835      	ldr	r0, [pc, #212]	; (408cb0 <testI2C+0x254>)
  408bdc:	4b2e      	ldr	r3, [pc, #184]	; (408c98 <testI2C+0x23c>)
  408bde:	4798      	blx	r3
		wdt_restart(WATCH_DOG);
  408be0:	4834      	ldr	r0, [pc, #208]	; (408cb4 <testI2C+0x258>)
  408be2:	4b35      	ldr	r3, [pc, #212]	; (408cb8 <testI2C+0x25c>)
  408be4:	4798      	blx	r3
  408be6:	f10d 0824 	add.w	r8, sp, #36	; 0x24
  408bea:	ad06      	add	r5, sp, #24
  408bec:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
  408bf0:	462a      	mov	r2, r5
  408bf2:	4647      	mov	r7, r8
			status_pSCL[i] = 0;
  408bf4:	2300      	movs	r3, #0
  408bf6:	f807 3b01 	strb.w	r3, [r7], #1
			status_pSDA[i] = 0;
  408bfa:	f802 3b01 	strb.w	r3, [r2], #1
		for(i=0; i < N_TOOGLE_BIT_I2C; i++) {
  408bfe:	428f      	cmp	r7, r1
  408c00:	d1f9      	bne.n	408bf6 <testI2C+0x19a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
  408c06:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408c08:	2301      	movs	r3, #1
  408c0a:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408c0c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408c10:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408c12:	2302      	movs	r3, #2
  408c14:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408c16:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		delay_ms (20);
  408c1a:	4822      	ldr	r0, [pc, #136]	; (408ca4 <testI2C+0x248>)
  408c1c:	4b1e      	ldr	r3, [pc, #120]	; (408c98 <testI2C+0x23c>)
  408c1e:	4798      	blx	r3
  408c20:	46aa      	mov	sl, r5
  408c22:	4646      	mov	r6, r8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408c24:	f04f 0b01 	mov.w	fp, #1
  408c28:	9504      	str	r5, [sp, #16]
  408c2a:	f8cd 9014 	str.w	r9, [sp, #20]
  408c2e:	9d02      	ldr	r5, [sp, #8]
  408c30:	f8dd 900c 	ldr.w	r9, [sp, #12]
  408c34:	e747      	b.n	408ac6 <testI2C+0x6a>
		print_bit_I2C(&status_pSDA[0], &status_pSCL[0], 0);
  408c36:	2200      	movs	r2, #0
  408c38:	a909      	add	r1, sp, #36	; 0x24
  408c3a:	a806      	add	r0, sp, #24
  408c3c:	4b1f      	ldr	r3, [pc, #124]	; (408cbc <testI2C+0x260>)
  408c3e:	4798      	blx	r3
  408c40:	e767      	b.n	408b12 <testI2C+0xb6>
			delay_ms (1);
  408c42:	f641 30e7 	movw	r0, #7143	; 0x1be7
  408c46:	4b14      	ldr	r3, [pc, #80]	; (408c98 <testI2C+0x23c>)
  408c48:	4798      	blx	r3
  408c4a:	e79c      	b.n	408b86 <testI2C+0x12a>
	}
	
	print_bit_I2C(&status_pSDA[0], &status_pSCL[0], 1);
  408c4c:	2201      	movs	r2, #1
  408c4e:	a909      	add	r1, sp, #36	; 0x24
  408c50:	a806      	add	r0, sp, #24
  408c52:	4b1a      	ldr	r3, [pc, #104]	; (408cbc <testI2C+0x260>)
  408c54:	4798      	blx	r3
	
	delay_ms (100);
  408c56:	4814      	ldr	r0, [pc, #80]	; (408ca8 <testI2C+0x24c>)
  408c58:	4b0f      	ldr	r3, [pc, #60]	; (408c98 <testI2C+0x23c>)
  408c5a:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408c5c:	4b0f      	ldr	r3, [pc, #60]	; (408c9c <testI2C+0x240>)
  408c5e:	2201      	movs	r2, #1
  408c60:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408c62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408c66:	f44f 6200 	mov.w	r2, #2048	; 0x800
  408c6a:	635a      	str	r2, [r3, #52]	; 0x34
	//pinMode(pTestSDA,         OUTPUT);
	ioport_set_pin_dir(SDA, IOPORT_DIR_OUTPUT);
	//digitalWrite(pStatusLedI2C,  LOW);
	ioport_set_pin_level(pStatusLedI2C, IOPORT_PIN_LEVEL_LOW);
	
	Serial_println1(" ");
  408c6c:	4804      	ldr	r0, [pc, #16]	; (408c80 <testI2C+0x224>)
  408c6e:	4b05      	ldr	r3, [pc, #20]	; (408c84 <testI2C+0x228>)
  408c70:	4798      	blx	r3
	print_result_test(esito);
  408c72:	4648      	mov	r0, r9
  408c74:	4b12      	ldr	r3, [pc, #72]	; (408cc0 <testI2C+0x264>)
  408c76:	4798      	blx	r3
}
  408c78:	b00d      	add	sp, #52	; 0x34
  408c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c7e:	bf00      	nop
  408c80:	004126b8 	.word	0x004126b8
  408c84:	00406051 	.word	0x00406051
  408c88:	004132b0 	.word	0x004132b0
  408c8c:	0040669d 	.word	0x0040669d
  408c90:	0041356c 	.word	0x0041356c
  408c94:	008db053 	.word	0x008db053
  408c98:	20000001 	.word	0x20000001
  408c9c:	400e0e00 	.word	0x400e0e00
  408ca0:	00413344 	.word	0x00413344
  408ca4:	00022e0a 	.word	0x00022e0a
  408ca8:	000ae62e 	.word	0x000ae62e
  408cac:	004133e4 	.word	0x004133e4
  408cb0:	002b98b7 	.word	0x002b98b7
  408cb4:	400e1450 	.word	0x400e1450
  408cb8:	00403a89 	.word	0x00403a89
  408cbc:	00408945 	.word	0x00408945
  408cc0:	00407c45 	.word	0x00407c45

00408cc4 <IPEHD_test>:

int IPEHD_test()
{
  408cc4:	b510      	push	{r4, lr}
	Byte test;
	Byte cntUpdate_SetTemp;
	test = read_byte_eeprom(ADDR_EEP(Ref_T_setting));
  408cc6:	2094      	movs	r0, #148	; 0x94
  408cc8:	4b1d      	ldr	r3, [pc, #116]	; (408d40 <IPEHD_test+0x7c>)
  408cca:	4798      	blx	r3
	
	
	if( (bitRead(test,6)==1) && (flag_ipehd == 0) && (counter_ipehd == 0))
  408ccc:	f010 0f40 	tst.w	r0, #64	; 0x40
  408cd0:	d00a      	beq.n	408ce8 <IPEHD_test+0x24>
  408cd2:	4b1c      	ldr	r3, [pc, #112]	; (408d44 <IPEHD_test+0x80>)
  408cd4:	781b      	ldrb	r3, [r3, #0]
  408cd6:	bb53      	cbnz	r3, 408d2e <IPEHD_test+0x6a>
  408cd8:	4a1b      	ldr	r2, [pc, #108]	; (408d48 <IPEHD_test+0x84>)
  408cda:	6812      	ldr	r2, [r2, #0]
  408cdc:	b132      	cbz	r2, 408cec <IPEHD_test+0x28>
	{
		counter_ipehd--;
		return 1;
		
	}else
	if ((bitRead(test,6)==1) && (flag_ipehd == 1) && (counter_ipehd == 1))
  408cde:	b11b      	cbz	r3, 408ce8 <IPEHD_test+0x24>
  408ce0:	4b19      	ldr	r3, [pc, #100]	; (408d48 <IPEHD_test+0x84>)
  408ce2:	681b      	ldr	r3, [r3, #0]
  408ce4:	2b01      	cmp	r3, #1
  408ce6:	d00c      	beq.n	408d02 <IPEHD_test+0x3e>
		return 1;
	}
	
	return 1;
	
}
  408ce8:	2001      	movs	r0, #1
  408cea:	bd10      	pop	{r4, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408cec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  408cf0:	4b16      	ldr	r3, [pc, #88]	; (408d4c <IPEHD_test+0x88>)
  408cf2:	631a      	str	r2, [r3, #48]	; 0x30
		flag_ipehd = 1;
  408cf4:	2201      	movs	r2, #1
  408cf6:	4b13      	ldr	r3, [pc, #76]	; (408d44 <IPEHD_test+0x80>)
  408cf8:	701a      	strb	r2, [r3, #0]
		counter_ipehd = 10;
  408cfa:	220a      	movs	r2, #10
  408cfc:	4b12      	ldr	r3, [pc, #72]	; (408d48 <IPEHD_test+0x84>)
  408cfe:	601a      	str	r2, [r3, #0]
		return 1;
  408d00:	e7f2      	b.n	408ce8 <IPEHD_test+0x24>
		write_byte_eeprom(ADDR_EEP(Ref_T_setting), test);
  408d02:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
  408d06:	2094      	movs	r0, #148	; 0x94
  408d08:	4c11      	ldr	r4, [pc, #68]	; (408d50 <IPEHD_test+0x8c>)
  408d0a:	47a0      	blx	r4
		cntUpdate_SetTemp = read_byte_eeprom( ADDR_EEP( cntUpdate_SetTemp ) );
  408d0c:	2098      	movs	r0, #152	; 0x98
  408d0e:	4b0c      	ldr	r3, [pc, #48]	; (408d40 <IPEHD_test+0x7c>)
  408d10:	4798      	blx	r3
		cntUpdate_SetTemp++;
  408d12:	1c41      	adds	r1, r0, #1
		write_byte_eeprom( ADDR_EEP( cntUpdate_SetTemp ), cntUpdate_SetTemp );
  408d14:	b2c9      	uxtb	r1, r1
  408d16:	2098      	movs	r0, #152	; 0x98
  408d18:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408d1a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  408d1e:	4b0b      	ldr	r3, [pc, #44]	; (408d4c <IPEHD_test+0x88>)
  408d20:	635a      	str	r2, [r3, #52]	; 0x34
		counter_ipehd =  0;
  408d22:	2300      	movs	r3, #0
  408d24:	4a08      	ldr	r2, [pc, #32]	; (408d48 <IPEHD_test+0x84>)
  408d26:	6013      	str	r3, [r2, #0]
		flag_ipehd = 0;
  408d28:	4a06      	ldr	r2, [pc, #24]	; (408d44 <IPEHD_test+0x80>)
  408d2a:	7013      	strb	r3, [r2, #0]
		return 1;
  408d2c:	e7dc      	b.n	408ce8 <IPEHD_test+0x24>
	if ((bitRead(test,6)==1) && (flag_ipehd == 1) && (counter_ipehd > 1))
  408d2e:	4b06      	ldr	r3, [pc, #24]	; (408d48 <IPEHD_test+0x84>)
  408d30:	681b      	ldr	r3, [r3, #0]
  408d32:	2b01      	cmp	r3, #1
  408d34:	ddd4      	ble.n	408ce0 <IPEHD_test+0x1c>
		counter_ipehd--;
  408d36:	3b01      	subs	r3, #1
  408d38:	4a03      	ldr	r2, [pc, #12]	; (408d48 <IPEHD_test+0x84>)
  408d3a:	6013      	str	r3, [r2, #0]
		return 1;
  408d3c:	e7d4      	b.n	408ce8 <IPEHD_test+0x24>
  408d3e:	bf00      	nop
  408d40:	0040a26d 	.word	0x0040a26d
  408d44:	20000e84 	.word	0x20000e84
  408d48:	20000e80 	.word	0x20000e80
  408d4c:	400e0e00 	.word	0x400e0e00
  408d50:	0040a1fd 	.word	0x0040a1fd

00408d54 <weekly_program>:
//---------------------------------------------------------------------
// Funzione che gira nello scheduler Sample: 1 sec.
// Aggiona l'orologio dell'unitÃ . Se vi Ã¨ un KTS si sincronizza con questo
//---------------------------------------------------------------------
int weekly_program()
{
  408d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int range, realtime_step_30min;
	Byte set_cfg =0, SetPowerOn, numMaxRange, time_start, time_stop, temp_08, shf;
	unsigned short enab_func, msk_enab_func;
	
	// aggiorna l'orologio per il weekly.
	sClockWeek.seconds++;
  408d58:	4b6f      	ldr	r3, [pc, #444]	; (408f18 <weekly_program+0x1c4>)
  408d5a:	781b      	ldrb	r3, [r3, #0]
  408d5c:	3301      	adds	r3, #1
  408d5e:	b2db      	uxtb	r3, r3
	
	if(sClockWeek.seconds >= 60)
  408d60:	2b3b      	cmp	r3, #59	; 0x3b
  408d62:	d80a      	bhi.n	408d7a <weekly_program+0x26>
	sClockWeek.seconds++;
  408d64:	4a6c      	ldr	r2, [pc, #432]	; (408f18 <weekly_program+0x1c4>)
  408d66:	7013      	strb	r3, [r2, #0]
				sClockWeek.weekday = 0;
			}
		}
	}
	
	msk_enab_func = read_word_eeprom(ADDR_EEP(msk_Enab_Fuction));
  408d68:	2030      	movs	r0, #48	; 0x30
  408d6a:	4b6c      	ldr	r3, [pc, #432]	; (408f1c <weekly_program+0x1c8>)
  408d6c:	4798      	blx	r3
	
	if ((msk_enab_func & (1<<ENAB_WEEKLY)) == 0)
  408d6e:	f010 0f04 	tst.w	r0, #4
  408d72:	d127      	bne.n	408dc4 <weekly_program+0x70>
	sData.status_weekly = 0;
	
	
	return 1; // tieni attiva la funzione nello sheduler
	
}
  408d74:	2001      	movs	r0, #1
  408d76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sClockWeek.seconds = 0;
  408d7a:	4b67      	ldr	r3, [pc, #412]	; (408f18 <weekly_program+0x1c4>)
  408d7c:	2200      	movs	r2, #0
  408d7e:	701a      	strb	r2, [r3, #0]
		sClockWeek.minutes++;
  408d80:	785b      	ldrb	r3, [r3, #1]
  408d82:	3301      	adds	r3, #1
  408d84:	b2db      	uxtb	r3, r3
		if(sClockWeek.minutes >= 60) {
  408d86:	2b3b      	cmp	r3, #59	; 0x3b
  408d88:	d802      	bhi.n	408d90 <weekly_program+0x3c>
		sClockWeek.minutes++;
  408d8a:	4a63      	ldr	r2, [pc, #396]	; (408f18 <weekly_program+0x1c4>)
  408d8c:	7053      	strb	r3, [r2, #1]
  408d8e:	e7eb      	b.n	408d68 <weekly_program+0x14>
			sClockWeek.minutes = 0;
  408d90:	4b61      	ldr	r3, [pc, #388]	; (408f18 <weekly_program+0x1c4>)
  408d92:	2200      	movs	r2, #0
  408d94:	705a      	strb	r2, [r3, #1]
			sClockWeek.hours++;
  408d96:	789b      	ldrb	r3, [r3, #2]
  408d98:	3301      	adds	r3, #1
  408d9a:	b2db      	uxtb	r3, r3
			if(sClockWeek.hours >= 24)
  408d9c:	2b17      	cmp	r3, #23
  408d9e:	d802      	bhi.n	408da6 <weekly_program+0x52>
			sClockWeek.hours++;
  408da0:	4a5d      	ldr	r2, [pc, #372]	; (408f18 <weekly_program+0x1c4>)
  408da2:	7093      	strb	r3, [r2, #2]
  408da4:	e7e0      	b.n	408d68 <weekly_program+0x14>
				sClockWeek.hours = 0;
  408da6:	4b5c      	ldr	r3, [pc, #368]	; (408f18 <weekly_program+0x1c4>)
  408da8:	2200      	movs	r2, #0
  408daa:	709a      	strb	r2, [r3, #2]
				sClockWeek.weekday++; // 0=lunedÃ¬, ... , 6=Domenica
  408dac:	78db      	ldrb	r3, [r3, #3]
  408dae:	3301      	adds	r3, #1
  408db0:	b2db      	uxtb	r3, r3
				if(sClockWeek.weekday >= 7)
  408db2:	2b06      	cmp	r3, #6
  408db4:	d802      	bhi.n	408dbc <weekly_program+0x68>
				sClockWeek.weekday++; // 0=lunedÃ¬, ... , 6=Domenica
  408db6:	4a58      	ldr	r2, [pc, #352]	; (408f18 <weekly_program+0x1c4>)
  408db8:	70d3      	strb	r3, [r2, #3]
  408dba:	e7d5      	b.n	408d68 <weekly_program+0x14>
				sClockWeek.weekday = 0;
  408dbc:	2200      	movs	r2, #0
  408dbe:	4b56      	ldr	r3, [pc, #344]	; (408f18 <weekly_program+0x1c4>)
  408dc0:	70da      	strb	r2, [r3, #3]
  408dc2:	e7d1      	b.n	408d68 <weekly_program+0x14>
	enab_func  = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  408dc4:	202e      	movs	r0, #46	; 0x2e
  408dc6:	4b55      	ldr	r3, [pc, #340]	; (408f1c <weekly_program+0x1c8>)
  408dc8:	4798      	blx	r3
	if (enab_func & (1<<ENAB_WEEKLY))
  408dca:	f010 0f04 	tst.w	r0, #4
  408dce:	d104      	bne.n	408dda <weekly_program+0x86>
	sData.status_weekly = 0;
  408dd0:	2200      	movs	r2, #0
  408dd2:	4b53      	ldr	r3, [pc, #332]	; (408f20 <weekly_program+0x1cc>)
  408dd4:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
  408dd8:	e7cc      	b.n	408d74 <weekly_program+0x20>
		sData.status_weekly = MSK_BIT_WEEKLY_ENAB;
  408dda:	2201      	movs	r2, #1
  408ddc:	4b50      	ldr	r3, [pc, #320]	; (408f20 <weekly_program+0x1cc>)
  408dde:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
		realtime_step_30min = (sClockWeek.hours << 1) + (sClockWeek.minutes / 30); // gli step di programmazione sono di 30min in 30min.
  408de2:	4b4d      	ldr	r3, [pc, #308]	; (408f18 <weekly_program+0x1c4>)
  408de4:	789d      	ldrb	r5, [r3, #2]
  408de6:	785c      	ldrb	r4, [r3, #1]
		numMaxRange = read_byte_eeprom(ADDR_EEP(sDayProg[sClockWeek.weekday].numRange));
  408de8:	78db      	ldrb	r3, [r3, #3]
  408dea:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  408dee:	0080      	lsls	r0, r0, #2
  408df0:	3099      	adds	r0, #153	; 0x99
  408df2:	b280      	uxth	r0, r0
  408df4:	4b4b      	ldr	r3, [pc, #300]	; (408f24 <weekly_program+0x1d0>)
  408df6:	4798      	blx	r3
		if(numMaxRange)
  408df8:	4681      	mov	r9, r0
  408dfa:	2800      	cmp	r0, #0
  408dfc:	d0ba      	beq.n	408d74 <weekly_program+0x20>
		realtime_step_30min = (sClockWeek.hours << 1) + (sClockWeek.minutes / 30); // gli step di programmazione sono di 30min in 30min.
  408dfe:	4e4a      	ldr	r6, [pc, #296]	; (408f28 <weekly_program+0x1d4>)
  408e00:	fba6 3604 	umull	r3, r6, r6, r4
  408e04:	0936      	lsrs	r6, r6, #4
  408e06:	eb06 0645 	add.w	r6, r6, r5, lsl #1
  408e0a:	2400      	movs	r4, #0
				time_start = read_byte_eeprom(ADDR_EEP(sDayProg[sClockWeek.weekday].timeON[range]));
  408e0c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 408f18 <weekly_program+0x1c4>
  408e10:	4f44      	ldr	r7, [pc, #272]	; (408f24 <weekly_program+0x1d0>)
				if((sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_CONNECT) && (sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ELECT)==0)
  408e12:	f8df a10c 	ldr.w	sl, [pc, #268]	; 408f20 <weekly_program+0x1cc>
  408e16:	e060      	b.n	408eda <weekly_program+0x186>
						time_start = 1;
  408e18:	2d00      	cmp	r5, #0
  408e1a:	bf08      	it	eq
  408e1c:	2501      	moveq	r5, #1
					if((realtime_step_30min  >= (time_start - 1)) && (realtime_step_30min  < time_stop))
  408e1e:	1e6a      	subs	r2, r5, #1
  408e20:	4296      	cmp	r6, r2
  408e22:	db50      	blt.n	408ec6 <weekly_program+0x172>
  408e24:	4286      	cmp	r6, r0
  408e26:	da4e      	bge.n	408ec6 <weekly_program+0x172>
						if((sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ELECT)==0)
  408e28:	f013 0f08 	tst.w	r3, #8
  408e2c:	d14f      	bne.n	408ece <weekly_program+0x17a>
							if((realtime_step_30min  >= (time_start - 1)) && (realtime_step_30min  < time_start))
  408e2e:	42ae      	cmp	r6, r5
  408e30:	db45      	blt.n	408ebe <weekly_program+0x16a>
								if (sData.AccI2C[ACC_I2C_PREHEATER].measure1 > 70)
  408e32:	4b3b      	ldr	r3, [pc, #236]	; (408f20 <weekly_program+0x1cc>)
  408e34:	f9b3 302d 	ldrsh.w	r3, [r3, #45]	; 0x2d
  408e38:	2b46      	cmp	r3, #70	; 0x46
									TAG_DigitAccessoryOff(ACC_I2C_PREHEATER);
  408e3a:	f04f 0002 	mov.w	r0, #2
  408e3e:	bfcc      	ite	gt
  408e40:	4b3a      	ldrgt	r3, [pc, #232]	; (408f2c <weekly_program+0x1d8>)
								TAG_DigitAccessoryOn(ACC_I2C_PREHEATER);
  408e42:	4b3b      	ldrle	r3, [pc, #236]	; (408f30 <weekly_program+0x1dc>)
  408e44:	4798      	blx	r3
					sData.status_weekly |= MSK_BIT_WEEKLY_RUN;
  408e46:	4d36      	ldr	r5, [pc, #216]	; (408f20 <weekly_program+0x1cc>)
  408e48:	f895 31ed 	ldrb.w	r3, [r5, #493]	; 0x1ed
  408e4c:	f043 0302 	orr.w	r3, r3, #2
  408e50:	f885 31ed 	strb.w	r3, [r5, #493]	; 0x1ed
					temp_08 = read_byte_eeprom(ADDR_EEP(sDayProg[sClockWeek.weekday].ConfigTemp));
  408e54:	4f30      	ldr	r7, [pc, #192]	; (408f18 <weekly_program+0x1c4>)
  408e56:	78fb      	ldrb	r3, [r7, #3]
  408e58:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  408e5c:	0080      	lsls	r0, r0, #2
  408e5e:	30a4      	adds	r0, #164	; 0xa4
  408e60:	b280      	uxth	r0, r0
  408e62:	4e30      	ldr	r6, [pc, #192]	; (408f24 <weekly_program+0x1d0>)
  408e64:	47b0      	blx	r6
					shf = (range*2);
  408e66:	0064      	lsls	r4, r4, #1
					set_cfg = (temp_08 >> shf) & 0x01; // gestiamo solo 2 soglie di temperatura
  408e68:	b2e4      	uxtb	r4, r4
  408e6a:	4120      	asrs	r0, r4
					sData.status_weekly |= (set_cfg << POS_BIT_RIF_TEMP);   // bit[3,2]: 1,1=---/ 1,0=---/ 0,1=RIF_TEMP2/ 0,0=RIF_TEMP1
  408e6c:	f000 0001 	and.w	r0, r0, #1
  408e70:	f895 31ed 	ldrb.w	r3, [r5, #493]	; 0x1ed
  408e74:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  408e78:	f885 31ed 	strb.w	r3, [r5, #493]	; 0x1ed
					temp_08 = read_byte_eeprom(ADDR_EEP(sDayProg[sClockWeek.weekday].ConfigImbal));
  408e7c:	78fb      	ldrb	r3, [r7, #3]
  408e7e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  408e82:	0080      	lsls	r0, r0, #2
  408e84:	30a3      	adds	r0, #163	; 0xa3
  408e86:	b280      	uxth	r0, r0
  408e88:	47b0      	blx	r6
					set_cfg = (temp_08 >> shf) & 0x01;  // gestiamo solo 2 soglie di temperatura
  408e8a:	4120      	asrs	r0, r4
					sData.status_weekly |= (set_cfg << POS_BIT_SET_IMBAL);  // bit[5,4]: 1,1=---/ 1,0=---/ 0,1=IMBAL_1_ON/ 0,0=IMBAL_OFF
  408e8c:	f000 0001 	and.w	r0, r0, #1
  408e90:	f895 31ed 	ldrb.w	r3, [r5, #493]	; 0x1ed
  408e94:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  408e98:	f885 31ed 	strb.w	r3, [r5, #493]	; 0x1ed
					temp_08 = read_byte_eeprom(ADDR_EEP(sDayProg[sClockWeek.weekday].ConfigSpeed));
  408e9c:	78fb      	ldrb	r3, [r7, #3]
  408e9e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  408ea2:	0080      	lsls	r0, r0, #2
  408ea4:	30a2      	adds	r0, #162	; 0xa2
  408ea6:	b280      	uxth	r0, r0
  408ea8:	47b0      	blx	r6
					set_cfg = (temp_08 >> shf) & 0x03;
  408eaa:	4120      	asrs	r0, r4
					sData.status_weekly |= (set_cfg << POS_STEP_SPEED);     // bit[7,6]: 1,1=---/ 1,0=SPEED_3/ 0,1=SPEED_2/ 0,0=SPEED_1
  408eac:	f000 0003 	and.w	r0, r0, #3
  408eb0:	f895 31ed 	ldrb.w	r3, [r5, #493]	; 0x1ed
  408eb4:	ea43 1080 	orr.w	r0, r3, r0, lsl #6
  408eb8:	f885 01ed 	strb.w	r0, [r5, #493]	; 0x1ed
					break;
  408ebc:	e75a      	b.n	408d74 <weekly_program+0x20>
							TAG_DigitAccessoryOn(ACC_I2C_PREHEATER);
  408ebe:	2002      	movs	r0, #2
  408ec0:	4b1b      	ldr	r3, [pc, #108]	; (408f30 <weekly_program+0x1dc>)
  408ec2:	4798      	blx	r3
  408ec4:	e005      	b.n	408ed2 <weekly_program+0x17e>
						TAG_DigitAccessoryOff(ACC_I2C_PREHEATER);
  408ec6:	2002      	movs	r0, #2
  408ec8:	4b18      	ldr	r3, [pc, #96]	; (408f2c <weekly_program+0x1d8>)
  408eca:	4798      	blx	r3
  408ecc:	e01f      	b.n	408f0e <weekly_program+0x1ba>
				if((realtime_step_30min  >= time_start) && (realtime_step_30min  < time_stop))
  408ece:	42ae      	cmp	r6, r5
  408ed0:	dab9      	bge.n	408e46 <weekly_program+0xf2>
			for(range=0; range < numMaxRange; range++)
  408ed2:	3401      	adds	r4, #1
  408ed4:	454c      	cmp	r4, r9
  408ed6:	f43f af4d 	beq.w	408d74 <weekly_program+0x20>
				time_start = read_byte_eeprom(ADDR_EEP(sDayProg[sClockWeek.weekday].timeON[range]));
  408eda:	f898 0003 	ldrb.w	r0, [r8, #3]
  408ede:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  408ee2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  408ee6:	309a      	adds	r0, #154	; 0x9a
  408ee8:	b280      	uxth	r0, r0
  408eea:	47b8      	blx	r7
  408eec:	4605      	mov	r5, r0
				time_stop  = read_byte_eeprom(ADDR_EEP(sDayProg[sClockWeek.weekday].timeOFF[range]));
  408eee:	f898 3003 	ldrb.w	r3, [r8, #3]
  408ef2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  408ef6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  408efa:	309e      	adds	r0, #158	; 0x9e
  408efc:	b280      	uxth	r0, r0
  408efe:	47b8      	blx	r7
  408f00:	4683      	mov	fp, r0
				if((sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_CONNECT) && (sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ELECT)==0)
  408f02:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
  408f06:	f003 0209 	and.w	r2, r3, #9
  408f0a:	2a01      	cmp	r2, #1
  408f0c:	d084      	beq.n	408e18 <weekly_program+0xc4>
				if((realtime_step_30min  >= time_start) && (realtime_step_30min  < time_stop))
  408f0e:	42ae      	cmp	r6, r5
  408f10:	dbdf      	blt.n	408ed2 <weekly_program+0x17e>
  408f12:	455e      	cmp	r6, fp
  408f14:	dadd      	bge.n	408ed2 <weekly_program+0x17e>
  408f16:	e796      	b.n	408e46 <weekly_program+0xf2>
  408f18:	2000173c 	.word	0x2000173c
  408f1c:	0040a279 	.word	0x0040a279
  408f20:	200013ac 	.word	0x200013ac
  408f24:	0040a26d 	.word	0x0040a26d
  408f28:	88888889 	.word	0x88888889
  408f2c:	004001d9 	.word	0x004001d9
  408f30:	0040019d 	.word	0x0040019d

00408f34 <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  408f34:	2a00      	cmp	r2, #0
  408f36:	d04b      	beq.n	408fd0 <usart_serial_write_packet+0x9c>
{
  408f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f3c:	4692      	mov	sl, r2
  408f3e:	4606      	mov	r6, r0
  408f40:	460f      	mov	r7, r1
  408f42:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  408f44:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 408fe8 <usart_serial_write_packet+0xb4>
		while (uart_write((Uart*)p_usart, c)!=0);
  408f48:	4d22      	ldr	r5, [pc, #136]	; (408fd4 <usart_serial_write_packet+0xa0>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  408f4a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 408fec <usart_serial_write_packet+0xb8>
  408f4e:	e006      	b.n	408f5e <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  408f50:	4621      	mov	r1, r4
  408f52:	4640      	mov	r0, r8
  408f54:	47a8      	blx	r5
  408f56:	2800      	cmp	r0, #0
  408f58:	d1fa      	bne.n	408f50 <usart_serial_write_packet+0x1c>
	while (len) {
  408f5a:	45ba      	cmp	sl, r7
  408f5c:	d035      	beq.n	408fca <usart_serial_write_packet+0x96>
		usart_serial_putchar(usart, *data);
  408f5e:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  408f62:	4546      	cmp	r6, r8
  408f64:	d0f4      	beq.n	408f50 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  408f66:	454e      	cmp	r6, r9
  408f68:	d013      	beq.n	408f92 <usart_serial_write_packet+0x5e>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  408f6a:	4b1b      	ldr	r3, [pc, #108]	; (408fd8 <usart_serial_write_packet+0xa4>)
  408f6c:	429e      	cmp	r6, r3
  408f6e:	d016      	beq.n	408f9e <usart_serial_write_packet+0x6a>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  408f70:	4b1a      	ldr	r3, [pc, #104]	; (408fdc <usart_serial_write_packet+0xa8>)
  408f72:	429e      	cmp	r6, r3
  408f74:	d01a      	beq.n	408fac <usart_serial_write_packet+0x78>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  408f76:	4b1a      	ldr	r3, [pc, #104]	; (408fe0 <usart_serial_write_packet+0xac>)
  408f78:	429e      	cmp	r6, r3
  408f7a:	d01e      	beq.n	408fba <usart_serial_write_packet+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  408f7c:	4b19      	ldr	r3, [pc, #100]	; (408fe4 <usart_serial_write_packet+0xb0>)
  408f7e:	429e      	cmp	r6, r3
  408f80:	d1eb      	bne.n	408f5a <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  408f82:	f8df b06c 	ldr.w	fp, [pc, #108]	; 408ff0 <usart_serial_write_packet+0xbc>
  408f86:	4621      	mov	r1, r4
  408f88:	4816      	ldr	r0, [pc, #88]	; (408fe4 <usart_serial_write_packet+0xb0>)
  408f8a:	47d8      	blx	fp
  408f8c:	2800      	cmp	r0, #0
  408f8e:	d1fa      	bne.n	408f86 <usart_serial_write_packet+0x52>
  408f90:	e7e3      	b.n	408f5a <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  408f92:	4621      	mov	r1, r4
  408f94:	4648      	mov	r0, r9
  408f96:	47a8      	blx	r5
  408f98:	2800      	cmp	r0, #0
  408f9a:	d1fa      	bne.n	408f92 <usart_serial_write_packet+0x5e>
  408f9c:	e7dd      	b.n	408f5a <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  408f9e:	469b      	mov	fp, r3
  408fa0:	4621      	mov	r1, r4
  408fa2:	4658      	mov	r0, fp
  408fa4:	47a8      	blx	r5
  408fa6:	2800      	cmp	r0, #0
  408fa8:	d1fa      	bne.n	408fa0 <usart_serial_write_packet+0x6c>
  408faa:	e7d6      	b.n	408f5a <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  408fac:	469b      	mov	fp, r3
  408fae:	4621      	mov	r1, r4
  408fb0:	4658      	mov	r0, fp
  408fb2:	47a8      	blx	r5
  408fb4:	2800      	cmp	r0, #0
  408fb6:	d1fa      	bne.n	408fae <usart_serial_write_packet+0x7a>
  408fb8:	e7cf      	b.n	408f5a <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  408fba:	f8df b034 	ldr.w	fp, [pc, #52]	; 408ff0 <usart_serial_write_packet+0xbc>
  408fbe:	4621      	mov	r1, r4
  408fc0:	4807      	ldr	r0, [pc, #28]	; (408fe0 <usart_serial_write_packet+0xac>)
  408fc2:	47d8      	blx	fp
  408fc4:	2800      	cmp	r0, #0
  408fc6:	d1fa      	bne.n	408fbe <usart_serial_write_packet+0x8a>
  408fc8:	e7c7      	b.n	408f5a <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  408fca:	2000      	movs	r0, #0
  408fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fd0:	2000      	movs	r0, #0
  408fd2:	4770      	bx	lr
  408fd4:	00409243 	.word	0x00409243
  408fd8:	40044000 	.word	0x40044000
  408fdc:	40048000 	.word	0x40048000
  408fe0:	40024000 	.word	0x40024000
  408fe4:	40028000 	.word	0x40028000
  408fe8:	400e0600 	.word	0x400e0600
  408fec:	400e0800 	.word	0x400e0800
  408ff0:	00403a41 	.word	0x00403a41

00408ff4 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  408ff4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  408ff6:	480e      	ldr	r0, [pc, #56]	; (409030 <sysclk_init+0x3c>)
  408ff8:	4b0e      	ldr	r3, [pc, #56]	; (409034 <sysclk_init+0x40>)
  408ffa:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  408ffc:	213e      	movs	r1, #62	; 0x3e
  408ffe:	2000      	movs	r0, #0
  409000:	4b0d      	ldr	r3, [pc, #52]	; (409038 <sysclk_init+0x44>)
  409002:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  409004:	4c0d      	ldr	r4, [pc, #52]	; (40903c <sysclk_init+0x48>)
  409006:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  409008:	2800      	cmp	r0, #0
  40900a:	d0fc      	beq.n	409006 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40900c:	4b0c      	ldr	r3, [pc, #48]	; (409040 <sysclk_init+0x4c>)
  40900e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  409010:	4a0c      	ldr	r2, [pc, #48]	; (409044 <sysclk_init+0x50>)
  409012:	4b0d      	ldr	r3, [pc, #52]	; (409048 <sysclk_init+0x54>)
  409014:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  409016:	4c0d      	ldr	r4, [pc, #52]	; (40904c <sysclk_init+0x58>)
  409018:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40901a:	2800      	cmp	r0, #0
  40901c:	d0fc      	beq.n	409018 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40901e:	2010      	movs	r0, #16
  409020:	4b0b      	ldr	r3, [pc, #44]	; (409050 <sysclk_init+0x5c>)
  409022:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  409024:	4b0b      	ldr	r3, [pc, #44]	; (409054 <sysclk_init+0x60>)
  409026:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  409028:	4801      	ldr	r0, [pc, #4]	; (409030 <sysclk_init+0x3c>)
  40902a:	4b02      	ldr	r3, [pc, #8]	; (409034 <sysclk_init+0x40>)
  40902c:	4798      	blx	r3
  40902e:	bd10      	pop	{r4, pc}
  409030:	05f5e100 	.word	0x05f5e100
  409034:	004095d1 	.word	0x004095d1
  409038:	00409101 	.word	0x00409101
  40903c:	00409155 	.word	0x00409155
  409040:	00409165 	.word	0x00409165
  409044:	20313f03 	.word	0x20313f03
  409048:	400e0400 	.word	0x400e0400
  40904c:	00409175 	.word	0x00409175
  409050:	00409059 	.word	0x00409059
  409054:	004094c5 	.word	0x004094c5

00409058 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  409058:	4a17      	ldr	r2, [pc, #92]	; (4090b8 <pmc_switch_mck_to_pllack+0x60>)
  40905a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40905c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  409060:	4318      	orrs	r0, r3
  409062:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  409064:	6e93      	ldr	r3, [r2, #104]	; 0x68
  409066:	f013 0f08 	tst.w	r3, #8
  40906a:	d10a      	bne.n	409082 <pmc_switch_mck_to_pllack+0x2a>
  40906c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  409070:	4911      	ldr	r1, [pc, #68]	; (4090b8 <pmc_switch_mck_to_pllack+0x60>)
  409072:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  409074:	f012 0f08 	tst.w	r2, #8
  409078:	d103      	bne.n	409082 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40907a:	3b01      	subs	r3, #1
  40907c:	d1f9      	bne.n	409072 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40907e:	2001      	movs	r0, #1
  409080:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  409082:	4a0d      	ldr	r2, [pc, #52]	; (4090b8 <pmc_switch_mck_to_pllack+0x60>)
  409084:	6b13      	ldr	r3, [r2, #48]	; 0x30
  409086:	f023 0303 	bic.w	r3, r3, #3
  40908a:	f043 0302 	orr.w	r3, r3, #2
  40908e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  409090:	6e93      	ldr	r3, [r2, #104]	; 0x68
  409092:	f013 0f08 	tst.w	r3, #8
  409096:	d10a      	bne.n	4090ae <pmc_switch_mck_to_pllack+0x56>
  409098:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40909c:	4906      	ldr	r1, [pc, #24]	; (4090b8 <pmc_switch_mck_to_pllack+0x60>)
  40909e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4090a0:	f012 0f08 	tst.w	r2, #8
  4090a4:	d105      	bne.n	4090b2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4090a6:	3b01      	subs	r3, #1
  4090a8:	d1f9      	bne.n	40909e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4090aa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4090ac:	4770      	bx	lr
	return 0;
  4090ae:	2000      	movs	r0, #0
  4090b0:	4770      	bx	lr
  4090b2:	2000      	movs	r0, #0
  4090b4:	4770      	bx	lr
  4090b6:	bf00      	nop
  4090b8:	400e0400 	.word	0x400e0400

004090bc <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4090bc:	2801      	cmp	r0, #1
  4090be:	d003      	beq.n	4090c8 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4090c0:	4a05      	ldr	r2, [pc, #20]	; (4090d8 <pmc_switch_sclk_to_32kxtal+0x1c>)
  4090c2:	4b06      	ldr	r3, [pc, #24]	; (4090dc <pmc_switch_sclk_to_32kxtal+0x20>)
  4090c4:	601a      	str	r2, [r3, #0]
  4090c6:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4090c8:	4a04      	ldr	r2, [pc, #16]	; (4090dc <pmc_switch_sclk_to_32kxtal+0x20>)
  4090ca:	6893      	ldr	r3, [r2, #8]
  4090cc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4090d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4090d4:	6093      	str	r3, [r2, #8]
  4090d6:	e7f3      	b.n	4090c0 <pmc_switch_sclk_to_32kxtal+0x4>
  4090d8:	a5000008 	.word	0xa5000008
  4090dc:	400e1410 	.word	0x400e1410

004090e0 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4090e0:	4b05      	ldr	r3, [pc, #20]	; (4090f8 <pmc_osc_is_ready_32kxtal+0x18>)
  4090e2:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4090e4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4090e8:	bf1d      	ittte	ne
  4090ea:	4b04      	ldrne	r3, [pc, #16]	; (4090fc <pmc_osc_is_ready_32kxtal+0x1c>)
  4090ec:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  4090ee:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  4090f2:	2000      	moveq	r0, #0
}
  4090f4:	4770      	bx	lr
  4090f6:	bf00      	nop
  4090f8:	400e1410 	.word	0x400e1410
  4090fc:	400e0400 	.word	0x400e0400

00409100 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  409100:	b9c8      	cbnz	r0, 409136 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  409102:	4a11      	ldr	r2, [pc, #68]	; (409148 <pmc_switch_mainck_to_xtal+0x48>)
  409104:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  409106:	0209      	lsls	r1, r1, #8
  409108:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40910a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40910e:	f023 0303 	bic.w	r3, r3, #3
  409112:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  409116:	f043 0301 	orr.w	r3, r3, #1
  40911a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40911c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40911e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  409120:	f013 0f01 	tst.w	r3, #1
  409124:	d0fb      	beq.n	40911e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  409126:	4a08      	ldr	r2, [pc, #32]	; (409148 <pmc_switch_mainck_to_xtal+0x48>)
  409128:	6a13      	ldr	r3, [r2, #32]
  40912a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40912e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  409132:	6213      	str	r3, [r2, #32]
  409134:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  409136:	4904      	ldr	r1, [pc, #16]	; (409148 <pmc_switch_mainck_to_xtal+0x48>)
  409138:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40913a:	4a04      	ldr	r2, [pc, #16]	; (40914c <pmc_switch_mainck_to_xtal+0x4c>)
  40913c:	401a      	ands	r2, r3
  40913e:	4b04      	ldr	r3, [pc, #16]	; (409150 <pmc_switch_mainck_to_xtal+0x50>)
  409140:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  409142:	620b      	str	r3, [r1, #32]
  409144:	4770      	bx	lr
  409146:	bf00      	nop
  409148:	400e0400 	.word	0x400e0400
  40914c:	fec8fffc 	.word	0xfec8fffc
  409150:	01370002 	.word	0x01370002

00409154 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  409154:	4b02      	ldr	r3, [pc, #8]	; (409160 <pmc_osc_is_ready_mainck+0xc>)
  409156:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  409158:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40915c:	4770      	bx	lr
  40915e:	bf00      	nop
  409160:	400e0400 	.word	0x400e0400

00409164 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  409164:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  409168:	4b01      	ldr	r3, [pc, #4]	; (409170 <pmc_disable_pllack+0xc>)
  40916a:	629a      	str	r2, [r3, #40]	; 0x28
  40916c:	4770      	bx	lr
  40916e:	bf00      	nop
  409170:	400e0400 	.word	0x400e0400

00409174 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  409174:	4b02      	ldr	r3, [pc, #8]	; (409180 <pmc_is_locked_pllack+0xc>)
  409176:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  409178:	f000 0002 	and.w	r0, r0, #2
  40917c:	4770      	bx	lr
  40917e:	bf00      	nop
  409180:	400e0400 	.word	0x400e0400

00409184 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  409184:	281f      	cmp	r0, #31
  409186:	d80c      	bhi.n	4091a2 <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  409188:	4b08      	ldr	r3, [pc, #32]	; (4091ac <pmc_enable_periph_clk+0x28>)
  40918a:	699a      	ldr	r2, [r3, #24]
  40918c:	2301      	movs	r3, #1
  40918e:	4083      	lsls	r3, r0
  409190:	4393      	bics	r3, r2
  409192:	d008      	beq.n	4091a6 <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
  409194:	2301      	movs	r3, #1
  409196:	fa03 f000 	lsl.w	r0, r3, r0
  40919a:	4b04      	ldr	r3, [pc, #16]	; (4091ac <pmc_enable_periph_clk+0x28>)
  40919c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40919e:	2000      	movs	r0, #0
  4091a0:	4770      	bx	lr
		return 1;
  4091a2:	2001      	movs	r0, #1
  4091a4:	4770      	bx	lr
	return 0;
  4091a6:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4091a8:	4770      	bx	lr
  4091aa:	bf00      	nop
  4091ac:	400e0400 	.word	0x400e0400

004091b0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4091b0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4091b2:	0189      	lsls	r1, r1, #6
  4091b4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4091b6:	2402      	movs	r4, #2
  4091b8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4091ba:	f04f 31ff 	mov.w	r1, #4294967295
  4091be:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4091c0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4091c2:	605a      	str	r2, [r3, #4]
}
  4091c4:	bc10      	pop	{r4}
  4091c6:	4770      	bx	lr

004091c8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4091c8:	0189      	lsls	r1, r1, #6
  4091ca:	2305      	movs	r3, #5
  4091cc:	5043      	str	r3, [r0, r1]
  4091ce:	4770      	bx	lr

004091d0 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  4091d0:	0189      	lsls	r1, r1, #6
  4091d2:	2302      	movs	r3, #2
  4091d4:	5043      	str	r3, [r0, r1]
  4091d6:	4770      	bx	lr

004091d8 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4091d8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4091dc:	61ca      	str	r2, [r1, #28]
  4091de:	4770      	bx	lr

004091e0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4091e0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4091e4:	624a      	str	r2, [r1, #36]	; 0x24
  4091e6:	4770      	bx	lr

004091e8 <tc_disable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4091e8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IDR = ul_sources;
  4091ec:	628a      	str	r2, [r1, #40]	; 0x28
  4091ee:	4770      	bx	lr

004091f0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4091f0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4091f4:	6a08      	ldr	r0, [r1, #32]
}
  4091f6:	4770      	bx	lr

004091f8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4091f8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4091fa:	23ac      	movs	r3, #172	; 0xac
  4091fc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4091fe:	680b      	ldr	r3, [r1, #0]
  409200:	684a      	ldr	r2, [r1, #4]
  409202:	fbb3 f3f2 	udiv	r3, r3, r2
  409206:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  409208:	1e5c      	subs	r4, r3, #1
  40920a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40920e:	4294      	cmp	r4, r2
  409210:	d80b      	bhi.n	40922a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  409212:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  409214:	688b      	ldr	r3, [r1, #8]
  409216:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  409218:	f240 2302 	movw	r3, #514	; 0x202
  40921c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  409220:	2350      	movs	r3, #80	; 0x50
  409222:	6003      	str	r3, [r0, #0]

	return 0;
  409224:	2000      	movs	r0, #0
}
  409226:	bc10      	pop	{r4}
  409228:	4770      	bx	lr
		return 1;
  40922a:	2001      	movs	r0, #1
  40922c:	e7fb      	b.n	409226 <uart_init+0x2e>

0040922e <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  40922e:	6940      	ldr	r0, [r0, #20]
}
  409230:	4770      	bx	lr

00409232 <uart_reset_status>:
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_reset_status(Uart *p_uart)
{
	p_uart->UART_CR = UART_CR_RSTSTA;
  409232:	f44f 7380 	mov.w	r3, #256	; 0x100
  409236:	6003      	str	r3, [r0, #0]
  409238:	4770      	bx	lr

0040923a <uart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  40923a:	6940      	ldr	r0, [r0, #20]
}
  40923c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  409240:	4770      	bx	lr

00409242 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  409242:	6943      	ldr	r3, [r0, #20]
  409244:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  409248:	bf1a      	itte	ne
  40924a:	61c1      	strne	r1, [r0, #28]
	return 0;
  40924c:	2000      	movne	r0, #0
		return 1;
  40924e:	2001      	moveq	r0, #1
}
  409250:	4770      	bx	lr
	...

00409254 <uart_get_pdc_base>:
#else
#error "Unsupported device"
#endif

#if (SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART1)
  409254:	4b06      	ldr	r3, [pc, #24]	; (409270 <uart_get_pdc_base+0x1c>)
  409256:	4298      	cmp	r0, r3
  409258:	d008      	beq.n	40926c <uart_get_pdc_base+0x18>
		p_pdc_base = PDC_UART1;
#endif

#if (SAM4N)
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
  40925a:	4a06      	ldr	r2, [pc, #24]	; (409274 <uart_get_pdc_base+0x20>)
  40925c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
  409260:	4905      	ldr	r1, [pc, #20]	; (409278 <uart_get_pdc_base+0x24>)
  409262:	4288      	cmp	r0, r1
  409264:	bf14      	ite	ne
  409266:	4618      	movne	r0, r3
  409268:	4610      	moveq	r0, r2
  40926a:	4770      	bx	lr
		p_pdc_base = PDC_UART1;
  40926c:	4803      	ldr	r0, [pc, #12]	; (40927c <uart_get_pdc_base+0x28>)
#endif

	return p_pdc_base;
}
  40926e:	4770      	bx	lr
  409270:	400e0800 	.word	0x400e0800
  409274:	40044100 	.word	0x40044100
  409278:	40044000 	.word	0x40044000
  40927c:	400e0900 	.word	0x400e0900

00409280 <board_init>:

uint32_t test1;
uint32_t test2;
	
void board_init(void)
{
  409280:	b538      	push	{r3, r4, r5, lr}
	//WDT->WDT_MR = WDT_MR_WDDIS;
	//wdt_disable( WATCH_DOG );
	#endif
	
	//WDT->WDT_MR = WDT_MR_WDDIS; // Disable the watchdog
	wdt_disable( WATCH_DOG );
  409282:	4c63      	ldr	r4, [pc, #396]	; (409410 <board_init+0x190>)
  409284:	4620      	mov	r0, r4
  409286:	4b63      	ldr	r3, [pc, #396]	; (409414 <board_init+0x194>)
  409288:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40928a:	200b      	movs	r0, #11
  40928c:	4d62      	ldr	r5, [pc, #392]	; (409418 <board_init+0x198>)
  40928e:	47a8      	blx	r5
  409290:	200c      	movs	r0, #12
  409292:	47a8      	blx	r5
	
	/* Initialize IOPORT */
	ioport_init();
	
	REG_CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  409294:	4a61      	ldr	r2, [pc, #388]	; (40941c <board_init+0x19c>)
  409296:	6813      	ldr	r3, [r2, #0]
  409298:	f043 0310 	orr.w	r3, r3, #16
  40929c:	6013      	str	r3, [r2, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40929e:	4b60      	ldr	r3, [pc, #384]	; (409420 <board_init+0x1a0>)
  4092a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4092a4:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4092a6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4092aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4092ae:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4092b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4092b4:	6319      	str	r1, [r3, #48]	; 0x30
  4092b6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4092b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4092bc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4092be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4092c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4092c6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4092c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4092cc:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4092ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4092d2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4092d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4092d8:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4092da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4092de:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4092e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4092e4:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4092e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4092ea:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4092ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4092f0:	2220      	movs	r2, #32
  4092f2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4092f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4092f8:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4092fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4092fe:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409300:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409304:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409306:	4847      	ldr	r0, [pc, #284]	; (409424 <board_init+0x1a4>)
  409308:	2101      	movs	r1, #1
  40930a:	6101      	str	r1, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40930c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409310:	6341      	str	r1, [r0, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  409316:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409318:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40931c:	2210      	movs	r2, #16
  40931e:	6102      	str	r2, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409320:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409324:	6342      	str	r2, [r0, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409326:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  40932a:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40932c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409330:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409332:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  409336:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409338:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40933c:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40933e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  409342:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409344:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409348:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40934a:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40934c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  409350:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409352:	2102      	movs	r1, #2
  409354:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409356:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40935a:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40935c:	2140      	movs	r1, #64	; 0x40
  40935e:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409360:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  409364:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_PUDR = mask;
  409366:	2108      	movs	r1, #8
  409368:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40936a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40936e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409370:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409372:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409376:	6f18      	ldr	r0, [r3, #112]	; 0x70
  409378:	f020 0008 	bic.w	r0, r0, #8
  40937c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40937e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  409380:	f020 0008 	bic.w	r0, r0, #8
  409384:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  409386:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  409388:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40938a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40938e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409390:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409396:	6f19      	ldr	r1, [r3, #112]	; 0x70
  409398:	f021 0110 	bic.w	r1, r1, #16
  40939c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40939e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4093a0:	f021 0110 	bic.w	r1, r1, #16
  4093a4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4093a6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4093a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4093ac:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4093ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4093b2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4093b4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4093b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4093ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4093bc:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4093c0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4093c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4093c4:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4093c8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4093ca:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4093cc:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4093d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4093d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4093d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4093d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4093da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4093de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4093e0:	f421 31c0 	bic.w	r1, r1, #98304	; 0x18000
  4093e4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4093e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4093e8:	f421 31c0 	bic.w	r1, r1, #98304	; 0x18000
  4093ec:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4093ee:	605a      	str	r2, [r3, #4]
	PINS_UART2_FLAGS);
	#endif
	
	#if defined (WATCH_DOG)
	/* Configure Watchdog */
	test1 = wdt_get_timeout_value(5000000, 32768);
  4093f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4093f4:	480c      	ldr	r0, [pc, #48]	; (409428 <board_init+0x1a8>)
  4093f6:	4b0d      	ldr	r3, [pc, #52]	; (40942c <board_init+0x1ac>)
  4093f8:	4798      	blx	r3
  4093fa:	4b0d      	ldr	r3, [pc, #52]	; (409430 <board_init+0x1b0>)
  4093fc:	6018      	str	r0, [r3, #0]
	//wdt_init(WATCH_DOG , WDT_MR_WDRSTEN | WDT_MR_WDRPROC, test1, test1 ); // 2s watchdog
	test2 = wdt_get_us_timeout_period(WATCH_DOG, 32768);
  4093fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  409402:	4620      	mov	r0, r4
  409404:	4b0b      	ldr	r3, [pc, #44]	; (409434 <board_init+0x1b4>)
  409406:	4798      	blx	r3
  409408:	4b0b      	ldr	r3, [pc, #44]	; (409438 <board_init+0x1b8>)
  40940a:	6018      	str	r0, [r3, #0]
  40940c:	bd38      	pop	{r3, r4, r5, pc}
  40940e:	bf00      	nop
  409410:	400e1450 	.word	0x400e1450
  409414:	00403a81 	.word	0x00403a81
  409418:	00409185 	.word	0x00409185
  40941c:	400e0314 	.word	0x400e0314
  409420:	400e0e00 	.word	0x400e0e00
  409424:	400e1000 	.word	0x400e1000
  409428:	004c4b40 	.word	0x004c4b40
  40942c:	00403a55 	.word	0x00403a55
  409430:	20001188 	.word	0x20001188
  409434:	00403a9d 	.word	0x00403a9d
  409438:	2000118c 	.word	0x2000118c

0040943c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40943c:	e7fe      	b.n	40943c <Dummy_Handler>
	...

00409440 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  409440:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  409442:	4b17      	ldr	r3, [pc, #92]	; (4094a0 <Reset_Handler+0x60>)
  409444:	4a17      	ldr	r2, [pc, #92]	; (4094a4 <Reset_Handler+0x64>)
  409446:	429a      	cmp	r2, r3
  409448:	d010      	beq.n	40946c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
  40944a:	4b17      	ldr	r3, [pc, #92]	; (4094a8 <Reset_Handler+0x68>)
  40944c:	4a14      	ldr	r2, [pc, #80]	; (4094a0 <Reset_Handler+0x60>)
  40944e:	429a      	cmp	r2, r3
  409450:	d20c      	bcs.n	40946c <Reset_Handler+0x2c>
  409452:	3b01      	subs	r3, #1
  409454:	1a9b      	subs	r3, r3, r2
  409456:	f023 0303 	bic.w	r3, r3, #3
  40945a:	3304      	adds	r3, #4
  40945c:	4413      	add	r3, r2
  40945e:	4911      	ldr	r1, [pc, #68]	; (4094a4 <Reset_Handler+0x64>)
			*pDest++ = *pSrc++;
  409460:	f851 0b04 	ldr.w	r0, [r1], #4
  409464:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  409468:	429a      	cmp	r2, r3
  40946a:	d1f9      	bne.n	409460 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40946c:	4b0f      	ldr	r3, [pc, #60]	; (4094ac <Reset_Handler+0x6c>)
  40946e:	4a10      	ldr	r2, [pc, #64]	; (4094b0 <Reset_Handler+0x70>)
  409470:	429a      	cmp	r2, r3
  409472:	d20a      	bcs.n	40948a <Reset_Handler+0x4a>
  409474:	3b01      	subs	r3, #1
  409476:	1a9b      	subs	r3, r3, r2
  409478:	f023 0303 	bic.w	r3, r3, #3
  40947c:	3304      	adds	r3, #4
  40947e:	4413      	add	r3, r2
		*pDest++ = 0;
  409480:	2100      	movs	r1, #0
  409482:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  409486:	4293      	cmp	r3, r2
  409488:	d1fb      	bne.n	409482 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40948a:	4a0a      	ldr	r2, [pc, #40]	; (4094b4 <Reset_Handler+0x74>)
  40948c:	4b0a      	ldr	r3, [pc, #40]	; (4094b8 <Reset_Handler+0x78>)
  40948e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  409492:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  409494:	4b09      	ldr	r3, [pc, #36]	; (4094bc <Reset_Handler+0x7c>)
  409496:	4798      	blx	r3

	/* Branch to main function */
	main();
  409498:	4b09      	ldr	r3, [pc, #36]	; (4094c0 <Reset_Handler+0x80>)
  40949a:	4798      	blx	r3
  40949c:	e7fe      	b.n	40949c <Reset_Handler+0x5c>
  40949e:	bf00      	nop
  4094a0:	20000000 	.word	0x20000000
  4094a4:	00413b74 	.word	0x00413b74
  4094a8:	200009f8 	.word	0x200009f8
  4094ac:	200017f4 	.word	0x200017f4
  4094b0:	200009f8 	.word	0x200009f8
  4094b4:	e000ed00 	.word	0xe000ed00
  4094b8:	00400000 	.word	0x00400000
  4094bc:	0040dc19 	.word	0x0040dc19
  4094c0:	0040c389 	.word	0x0040c389

004094c4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4094c4:	4b3b      	ldr	r3, [pc, #236]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  4094c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4094c8:	f003 0303 	and.w	r3, r3, #3
  4094cc:	2b01      	cmp	r3, #1
  4094ce:	d01d      	beq.n	40950c <SystemCoreClockUpdate+0x48>
  4094d0:	b183      	cbz	r3, 4094f4 <SystemCoreClockUpdate+0x30>
  4094d2:	2b02      	cmp	r3, #2
  4094d4:	d036      	beq.n	409544 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4094d6:	4b37      	ldr	r3, [pc, #220]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  4094d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4094da:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4094de:	2b70      	cmp	r3, #112	; 0x70
  4094e0:	d05f      	beq.n	4095a2 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4094e2:	4b34      	ldr	r3, [pc, #208]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  4094e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4094e6:	4934      	ldr	r1, [pc, #208]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  4094e8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4094ec:	680b      	ldr	r3, [r1, #0]
  4094ee:	40d3      	lsrs	r3, r2
  4094f0:	600b      	str	r3, [r1, #0]
  4094f2:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4094f4:	4b31      	ldr	r3, [pc, #196]	; (4095bc <SystemCoreClockUpdate+0xf8>)
  4094f6:	695b      	ldr	r3, [r3, #20]
  4094f8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4094fc:	bf14      	ite	ne
  4094fe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  409502:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  409506:	4b2c      	ldr	r3, [pc, #176]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  409508:	601a      	str	r2, [r3, #0]
  40950a:	e7e4      	b.n	4094d6 <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40950c:	4b29      	ldr	r3, [pc, #164]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  40950e:	6a1b      	ldr	r3, [r3, #32]
  409510:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  409514:	d003      	beq.n	40951e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  409516:	4a2a      	ldr	r2, [pc, #168]	; (4095c0 <SystemCoreClockUpdate+0xfc>)
  409518:	4b27      	ldr	r3, [pc, #156]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  40951a:	601a      	str	r2, [r3, #0]
  40951c:	e7db      	b.n	4094d6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40951e:	4a29      	ldr	r2, [pc, #164]	; (4095c4 <SystemCoreClockUpdate+0x100>)
  409520:	4b25      	ldr	r3, [pc, #148]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  409522:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  409524:	4b23      	ldr	r3, [pc, #140]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  409526:	6a1b      	ldr	r3, [r3, #32]
  409528:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40952c:	2b10      	cmp	r3, #16
  40952e:	d005      	beq.n	40953c <SystemCoreClockUpdate+0x78>
  409530:	2b20      	cmp	r3, #32
  409532:	d1d0      	bne.n	4094d6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  409534:	4a22      	ldr	r2, [pc, #136]	; (4095c0 <SystemCoreClockUpdate+0xfc>)
  409536:	4b20      	ldr	r3, [pc, #128]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  409538:	601a      	str	r2, [r3, #0]
				break;
  40953a:	e7cc      	b.n	4094d6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40953c:	4a22      	ldr	r2, [pc, #136]	; (4095c8 <SystemCoreClockUpdate+0x104>)
  40953e:	4b1e      	ldr	r3, [pc, #120]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  409540:	601a      	str	r2, [r3, #0]
				break;
  409542:	e7c8      	b.n	4094d6 <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  409544:	4b1b      	ldr	r3, [pc, #108]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  409546:	6a1b      	ldr	r3, [r3, #32]
  409548:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40954c:	d016      	beq.n	40957c <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40954e:	4a1c      	ldr	r2, [pc, #112]	; (4095c0 <SystemCoreClockUpdate+0xfc>)
  409550:	4b19      	ldr	r3, [pc, #100]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  409552:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  409554:	4b17      	ldr	r3, [pc, #92]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  409556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409558:	f003 0303 	and.w	r3, r3, #3
  40955c:	2b02      	cmp	r3, #2
  40955e:	d1ba      	bne.n	4094d6 <SystemCoreClockUpdate+0x12>
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  409560:	4a14      	ldr	r2, [pc, #80]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  409562:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  409564:	6a92      	ldr	r2, [r2, #40]	; 0x28
  409566:	4814      	ldr	r0, [pc, #80]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
					>> CKGR_PLLAR_MULA_Pos) + 1U);
  409568:	f3c1 410a 	ubfx	r1, r1, #16, #11
			SystemCoreClock *=
  40956c:	6803      	ldr	r3, [r0, #0]
  40956e:	fb01 3303 	mla	r3, r1, r3, r3
					>> CKGR_PLLAR_DIVA_Pos));
  409572:	b2d2      	uxtb	r2, r2
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  409574:	fbb3 f3f2 	udiv	r3, r3, r2
  409578:	6003      	str	r3, [r0, #0]
  40957a:	e7ac      	b.n	4094d6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40957c:	4a11      	ldr	r2, [pc, #68]	; (4095c4 <SystemCoreClockUpdate+0x100>)
  40957e:	4b0e      	ldr	r3, [pc, #56]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  409580:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  409582:	4b0c      	ldr	r3, [pc, #48]	; (4095b4 <SystemCoreClockUpdate+0xf0>)
  409584:	6a1b      	ldr	r3, [r3, #32]
  409586:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40958a:	2b10      	cmp	r3, #16
  40958c:	d005      	beq.n	40959a <SystemCoreClockUpdate+0xd6>
  40958e:	2b20      	cmp	r3, #32
  409590:	d1e0      	bne.n	409554 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  409592:	4a0b      	ldr	r2, [pc, #44]	; (4095c0 <SystemCoreClockUpdate+0xfc>)
  409594:	4b08      	ldr	r3, [pc, #32]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  409596:	601a      	str	r2, [r3, #0]
				break;
  409598:	e7dc      	b.n	409554 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  40959a:	4a0b      	ldr	r2, [pc, #44]	; (4095c8 <SystemCoreClockUpdate+0x104>)
  40959c:	4b06      	ldr	r3, [pc, #24]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  40959e:	601a      	str	r2, [r3, #0]
				break;
  4095a0:	e7d8      	b.n	409554 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4095a2:	4a05      	ldr	r2, [pc, #20]	; (4095b8 <SystemCoreClockUpdate+0xf4>)
  4095a4:	6813      	ldr	r3, [r2, #0]
  4095a6:	4909      	ldr	r1, [pc, #36]	; (4095cc <SystemCoreClockUpdate+0x108>)
  4095a8:	fba1 1303 	umull	r1, r3, r1, r3
  4095ac:	085b      	lsrs	r3, r3, #1
  4095ae:	6013      	str	r3, [r2, #0]
  4095b0:	4770      	bx	lr
  4095b2:	bf00      	nop
  4095b4:	400e0400 	.word	0x400e0400
  4095b8:	20000034 	.word	0x20000034
  4095bc:	400e1410 	.word	0x400e1410
  4095c0:	00b71b00 	.word	0x00b71b00
  4095c4:	003d0900 	.word	0x003d0900
  4095c8:	007a1200 	.word	0x007a1200
  4095cc:	aaaaaaab 	.word	0xaaaaaaab

004095d0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  4095d0:	4b0f      	ldr	r3, [pc, #60]	; (409610 <system_init_flash+0x40>)
  4095d2:	4298      	cmp	r0, r3
  4095d4:	d90e      	bls.n	4095f4 <system_init_flash+0x24>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4095d6:	4b0f      	ldr	r3, [pc, #60]	; (409614 <system_init_flash+0x44>)
  4095d8:	4298      	cmp	r0, r3
  4095da:	d910      	bls.n	4095fe <system_init_flash+0x2e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4095dc:	4b0e      	ldr	r3, [pc, #56]	; (409618 <system_init_flash+0x48>)
  4095de:	4298      	cmp	r0, r3
  4095e0:	d911      	bls.n	409606 <system_init_flash+0x36>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  4095e2:	4b0e      	ldr	r3, [pc, #56]	; (40961c <system_init_flash+0x4c>)
  4095e4:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4095e6:	bf94      	ite	ls
  4095e8:	4a0d      	ldrls	r2, [pc, #52]	; (409620 <system_init_flash+0x50>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4095ea:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  4095ee:	4b0d      	ldr	r3, [pc, #52]	; (409624 <system_init_flash+0x54>)
  4095f0:	601a      	str	r2, [r3, #0]
  4095f2:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4095f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4095f8:	4b0a      	ldr	r3, [pc, #40]	; (409624 <system_init_flash+0x54>)
  4095fa:	601a      	str	r2, [r3, #0]
  4095fc:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4095fe:	4a0a      	ldr	r2, [pc, #40]	; (409628 <system_init_flash+0x58>)
  409600:	4b08      	ldr	r3, [pc, #32]	; (409624 <system_init_flash+0x54>)
  409602:	601a      	str	r2, [r3, #0]
  409604:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  409606:	4a09      	ldr	r2, [pc, #36]	; (40962c <system_init_flash+0x5c>)
  409608:	4b06      	ldr	r3, [pc, #24]	; (409624 <system_init_flash+0x54>)
  40960a:	601a      	str	r2, [r3, #0]
  40960c:	4770      	bx	lr
  40960e:	bf00      	nop
  409610:	01312cff 	.word	0x01312cff
  409614:	026259ff 	.word	0x026259ff
  409618:	039386ff 	.word	0x039386ff
  40961c:	04c4b3ff 	.word	0x04c4b3ff
  409620:	04000300 	.word	0x04000300
  409624:	400e0a00 	.word	0x400e0a00
  409628:	04000100 	.word	0x04000100
  40962c:	04000200 	.word	0x04000200

00409630 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  409630:	4b0a      	ldr	r3, [pc, #40]	; (40965c <_sbrk+0x2c>)
  409632:	681b      	ldr	r3, [r3, #0]
  409634:	b153      	cbz	r3, 40964c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  409636:	4b09      	ldr	r3, [pc, #36]	; (40965c <_sbrk+0x2c>)
  409638:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40963a:	181a      	adds	r2, r3, r0
  40963c:	4908      	ldr	r1, [pc, #32]	; (409660 <_sbrk+0x30>)
  40963e:	4291      	cmp	r1, r2
  409640:	db08      	blt.n	409654 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  409642:	4610      	mov	r0, r2
  409644:	4a05      	ldr	r2, [pc, #20]	; (40965c <_sbrk+0x2c>)
  409646:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  409648:	4618      	mov	r0, r3
  40964a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40964c:	4a05      	ldr	r2, [pc, #20]	; (409664 <_sbrk+0x34>)
  40964e:	4b03      	ldr	r3, [pc, #12]	; (40965c <_sbrk+0x2c>)
  409650:	601a      	str	r2, [r3, #0]
  409652:	e7f0      	b.n	409636 <_sbrk+0x6>
		return (caddr_t) -1;	
  409654:	f04f 30ff 	mov.w	r0, #4294967295
}
  409658:	4770      	bx	lr
  40965a:	bf00      	nop
  40965c:	20000de0 	.word	0x20000de0
  409660:	20013ffc 	.word	0x20013ffc
  409664:	200047f8 	.word	0x200047f8

00409668 <managementBypass>:
//
// NB: Bypass CLOSE, l'aria passa dallo Scambiatore
//     Bypass OPEN, l'aria passa dal canale Bypass 
//------------------------------------------------------------------------
void managementBypass(unsigned short enab_func)
{
  409668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  short SetPointTemp, Bypass_minTemp, rif_temp_interna;
  Bool  cmd_bypass_open = false, cmd_bypass_close = false;
  
  
  // per prima cosa verifichiamo se è in test
  if( (sData.status_test & MSK_TEST_BYPASS) )
  40966a:	4b9f      	ldr	r3, [pc, #636]	; (4098e8 <managementBypass+0x280>)
  40966c:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  409670:	f013 0f02 	tst.w	r3, #2
  409674:	d000      	beq.n	409678 <managementBypass+0x10>
  409676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409678:	4604      	mov	r4, r0
    return;

      
  cfg_bypass = read_byte_eeprom(ADDR_EEP(Config_Bypass));  
  40967a:	204d      	movs	r0, #77	; 0x4d
  40967c:	4b9b      	ldr	r3, [pc, #620]	; (4098ec <managementBypass+0x284>)
  40967e:	4798      	blx	r3
#endif       
//''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg  
  
  mskBPD_Close |= (1 << POS_BIT_BYPASS_CLOSE);
  
  switch (cfg_bypass)
  409680:	2804      	cmp	r0, #4
  409682:	d8f8      	bhi.n	409676 <managementBypass+0xe>
  409684:	e8df f010 	tbh	[pc, r0, lsl #1]
  409688:	01110095 	.word	0x01110095
  40968c:	0076009c 	.word	0x0076009c
  409690:	0005      	.short	0x0005
        cmd_bypass_close = false;  
    break;
    
    case BPD_AUTO_ON_OFF:
    
         if(!CkAlarm(ALM_PTFRESH_KO) && !CkAlarm(ALM_PTRET_KO))
  409692:	2058      	movs	r0, #88	; 0x58
  409694:	4b96      	ldr	r3, [pc, #600]	; (4098f0 <managementBypass+0x288>)
  409696:	4798      	blx	r3
  409698:	2800      	cmp	r0, #0
  40969a:	d1ec      	bne.n	409676 <managementBypass+0xe>
  40969c:	2059      	movs	r0, #89	; 0x59
  40969e:	4b94      	ldr	r3, [pc, #592]	; (4098f0 <managementBypass+0x288>)
  4096a0:	4798      	blx	r3
  4096a2:	4604      	mov	r4, r0
  4096a4:	2800      	cmp	r0, #0
  4096a6:	d1e6      	bne.n	409676 <managementBypass+0xe>
        {     
          
           if( (count_active_freecooling_on > 0) && (count_active_freecooling_on < 60)) {
  4096a8:	4b92      	ldr	r3, [pc, #584]	; (4098f4 <managementBypass+0x28c>)
  4096aa:	681b      	ldr	r3, [r3, #0]
  4096ac:	3b01      	subs	r3, #1
  4096ae:	2b3a      	cmp	r3, #58	; 0x3a
  4096b0:	d921      	bls.n	4096f6 <managementBypass+0x8e>
              }
              count_active_freecooling_on++;
              count_active_freecooling_off = 0;
           }else
             {              
              count_active_freecooling_on = 0;
  4096b2:	2200      	movs	r2, #0
  4096b4:	4b8f      	ldr	r3, [pc, #572]	; (4098f4 <managementBypass+0x28c>)
  4096b6:	601a      	str	r2, [r3, #0]
              cmd_bypass_close = true;  //chiudo il bypass
              cmd_bypass_open  = false;  
              if (standby_before == 1 && count_active_freecooling_off == 0)  //se ero spento....
  4096b8:	4b8f      	ldr	r3, [pc, #572]	; (4098f8 <managementBypass+0x290>)
  4096ba:	681b      	ldr	r3, [r3, #0]
  4096bc:	2b01      	cmp	r3, #1
  4096be:	d038      	beq.n	409732 <managementBypass+0xca>
                cntUpdate_SettingPar++;
                write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
                PowerMode(POWER_SAVE);
                standby_before = 0;
                }
              count_active_freecooling_off++;
  4096c0:	4a8e      	ldr	r2, [pc, #568]	; (4098fc <managementBypass+0x294>)
  4096c2:	6813      	ldr	r3, [r2, #0]
  4096c4:	3301      	adds	r3, #1
  4096c6:	6013      	str	r3, [r2, #0]
             // Sono spento, attendo 30 minuti (360 cicli), prima di verificare le condizione di una nuova riaccensione.
             cmd_bypass_open = false;
             cmd_bypass_close = true;
             //count_active_freecooling_off++;       solo per velocizzare in caso di debug
             }
        if (count_active_freecooling_off > 360)
  4096c8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
  4096cc:	f340 8150 	ble.w	409970 <managementBypass+0x308>
            {
            if((sData.measure_Temp[I_PROBE_RETURN] >= SetPointTemp) &&     
  4096d0:	4b85      	ldr	r3, [pc, #532]	; (4098e8 <managementBypass+0x280>)
  4096d2:	f9b3 31cf 	ldrsh.w	r3, [r3, #463]	; 0x1cf
  4096d6:	2b00      	cmp	r3, #0
  4096d8:	db07      	blt.n	4096ea <managementBypass+0x82>
              (sData.measure_Temp[I_PROBE_FRESH] > Bypass_minTemp) &&                    
  4096da:	4a83      	ldr	r2, [pc, #524]	; (4098e8 <managementBypass+0x280>)
  4096dc:	f9b2 21cd 	ldrsh.w	r2, [r2, #461]	; 0x1cd
            if((sData.measure_Temp[I_PROBE_RETURN] >= SetPointTemp) &&     
  4096e0:	2a00      	cmp	r2, #0
  4096e2:	dd02      	ble.n	4096ea <managementBypass+0x82>
              (sData.measure_Temp[I_PROBE_FRESH] <= (sData.measure_Temp[I_PROBE_RETURN] + 5)))   // se ci sono le condizioni.....                                          
  4096e4:	3305      	adds	r3, #5
              (sData.measure_Temp[I_PROBE_FRESH] > Bypass_minTemp) &&                    
  4096e6:	429a      	cmp	r2, r3
  4096e8:	dd39      	ble.n	40975e <managementBypass+0xf6>
              count_active_freecooling_on++; 
              count_active_freecooling_off = 0; 
             }
           else 
             {
             count_active_freecooling_off = 1; 
  4096ea:	2401      	movs	r4, #1
  4096ec:	4b83      	ldr	r3, [pc, #524]	; (4098fc <managementBypass+0x294>)
  4096ee:	601c      	str	r4, [r3, #0]
  else                                  i = 23;   
  
  
  if(cmd_bypass_open && ((sData.status_unit & MSK_STS_BYPASS) == mskBPD_Close))  
    Active_Procedure_Bypass_OpCl(OPEN_BPD, 9);  
  else if(cmd_bypass_close && ((sData.status_unit & MSK_STS_BYPASS) == !mskBPD_Close)) 
  4096f0:	2c00      	cmp	r4, #0
  4096f2:	d165      	bne.n	4097c0 <managementBypass+0x158>
  4096f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              if (read_byte_eeprom(ADDR_EEP(Set_Power_ON)) == 0)  //se ero spento mi accendo
  4096f6:	204c      	movs	r0, #76	; 0x4c
  4096f8:	4b7c      	ldr	r3, [pc, #496]	; (4098ec <managementBypass+0x284>)
  4096fa:	4798      	blx	r3
  4096fc:	b138      	cbz	r0, 40970e <managementBypass+0xa6>
              count_active_freecooling_on++;
  4096fe:	4a7d      	ldr	r2, [pc, #500]	; (4098f4 <managementBypass+0x28c>)
  409700:	6813      	ldr	r3, [r2, #0]
  409702:	3301      	adds	r3, #1
  409704:	6013      	str	r3, [r2, #0]
              count_active_freecooling_off = 0;
  409706:	2200      	movs	r2, #0
  409708:	4b7c      	ldr	r3, [pc, #496]	; (4098fc <managementBypass+0x294>)
  40970a:	601a      	str	r2, [r3, #0]
  40970c:	e7f0      	b.n	4096f0 <managementBypass+0x88>
              write_byte_eeprom(ADDR_EEP(Set_Power_ON), 1);
  40970e:	2101      	movs	r1, #1
  409710:	204c      	movs	r0, #76	; 0x4c
  409712:	4d7b      	ldr	r5, [pc, #492]	; (409900 <managementBypass+0x298>)
  409714:	47a8      	blx	r5
              cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  409716:	207e      	movs	r0, #126	; 0x7e
  409718:	4b74      	ldr	r3, [pc, #464]	; (4098ec <managementBypass+0x284>)
  40971a:	4798      	blx	r3
              cntUpdate_SettingPar++;
  40971c:	1c41      	adds	r1, r0, #1
              write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40971e:	b2c9      	uxtb	r1, r1
  409720:	207e      	movs	r0, #126	; 0x7e
  409722:	47a8      	blx	r5
              PowerMode(POWER_ON);
  409724:	204f      	movs	r0, #79	; 0x4f
  409726:	4b77      	ldr	r3, [pc, #476]	; (409904 <managementBypass+0x29c>)
  409728:	4798      	blx	r3
              standby_before = 1;  // devo ricordarmi che ero spento
  40972a:	2201      	movs	r2, #1
  40972c:	4b72      	ldr	r3, [pc, #456]	; (4098f8 <managementBypass+0x290>)
  40972e:	601a      	str	r2, [r3, #0]
  409730:	e7e5      	b.n	4096fe <managementBypass+0x96>
              if (standby_before == 1 && count_active_freecooling_off == 0)  //se ero spento....
  409732:	4b72      	ldr	r3, [pc, #456]	; (4098fc <managementBypass+0x294>)
  409734:	681b      	ldr	r3, [r3, #0]
  409736:	2b00      	cmp	r3, #0
  409738:	d1c2      	bne.n	4096c0 <managementBypass+0x58>
                write_byte_eeprom(ADDR_EEP(Set_Power_ON), 0);  //....mi rispengo
  40973a:	4611      	mov	r1, r2
  40973c:	204c      	movs	r0, #76	; 0x4c
  40973e:	4c70      	ldr	r4, [pc, #448]	; (409900 <managementBypass+0x298>)
  409740:	47a0      	blx	r4
                cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  409742:	207e      	movs	r0, #126	; 0x7e
  409744:	4b69      	ldr	r3, [pc, #420]	; (4098ec <managementBypass+0x284>)
  409746:	4798      	blx	r3
                cntUpdate_SettingPar++;
  409748:	1c41      	adds	r1, r0, #1
                write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40974a:	b2c9      	uxtb	r1, r1
  40974c:	207e      	movs	r0, #126	; 0x7e
  40974e:	47a0      	blx	r4
                PowerMode(POWER_SAVE);
  409750:	2000      	movs	r0, #0
  409752:	4b6c      	ldr	r3, [pc, #432]	; (409904 <managementBypass+0x29c>)
  409754:	4798      	blx	r3
                standby_before = 0;
  409756:	2200      	movs	r2, #0
  409758:	4b67      	ldr	r3, [pc, #412]	; (4098f8 <managementBypass+0x290>)
  40975a:	601a      	str	r2, [r3, #0]
  40975c:	e7b0      	b.n	4096c0 <managementBypass+0x58>
             if (read_byte_eeprom(ADDR_EEP(Set_Power_ON)) == 0)  //se ero spento mi accendo
  40975e:	204c      	movs	r0, #76	; 0x4c
  409760:	4b62      	ldr	r3, [pc, #392]	; (4098ec <managementBypass+0x284>)
  409762:	4798      	blx	r3
  409764:	b198      	cbz	r0, 40978e <managementBypass+0x126>
              count_active_freecooling_on++; 
  409766:	4a63      	ldr	r2, [pc, #396]	; (4098f4 <managementBypass+0x28c>)
  409768:	6813      	ldr	r3, [r2, #0]
  40976a:	3301      	adds	r3, #1
  40976c:	6013      	str	r3, [r2, #0]
              count_active_freecooling_off = 0; 
  40976e:	2200      	movs	r2, #0
  409770:	4b62      	ldr	r3, [pc, #392]	; (4098fc <managementBypass+0x294>)
  409772:	601a      	str	r2, [r3, #0]
  if(cmd_bypass_open && ((sData.status_unit & MSK_STS_BYPASS) == mskBPD_Close))  
  409774:	4b5c      	ldr	r3, [pc, #368]	; (4098e8 <managementBypass+0x280>)
  409776:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  40977a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40977e:	2b80      	cmp	r3, #128	; 0x80
  409780:	f47f af79 	bne.w	409676 <managementBypass+0xe>
    Active_Procedure_Bypass_OpCl(OPEN_BPD, 9);  
  409784:	2109      	movs	r1, #9
  409786:	2000      	movs	r0, #0
  409788:	4b5f      	ldr	r3, [pc, #380]	; (409908 <managementBypass+0x2a0>)
  40978a:	4798      	blx	r3
  40978c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              write_byte_eeprom(ADDR_EEP(Set_Power_ON), 1);
  40978e:	2101      	movs	r1, #1
  409790:	204c      	movs	r0, #76	; 0x4c
  409792:	4c5b      	ldr	r4, [pc, #364]	; (409900 <managementBypass+0x298>)
  409794:	47a0      	blx	r4
              cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  409796:	207e      	movs	r0, #126	; 0x7e
  409798:	4b54      	ldr	r3, [pc, #336]	; (4098ec <managementBypass+0x284>)
  40979a:	4798      	blx	r3
              cntUpdate_SettingPar++;
  40979c:	1c41      	adds	r1, r0, #1
              write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40979e:	b2c9      	uxtb	r1, r1
  4097a0:	207e      	movs	r0, #126	; 0x7e
  4097a2:	47a0      	blx	r4
              PowerMode(POWER_ON);
  4097a4:	204f      	movs	r0, #79	; 0x4f
  4097a6:	4b57      	ldr	r3, [pc, #348]	; (409904 <managementBypass+0x29c>)
  4097a8:	4798      	blx	r3
              standby_before = 1;  // devo ricordarmi che ero spento
  4097aa:	2201      	movs	r2, #1
  4097ac:	4b52      	ldr	r3, [pc, #328]	; (4098f8 <managementBypass+0x290>)
  4097ae:	601a      	str	r2, [r3, #0]
  4097b0:	e7d9      	b.n	409766 <managementBypass+0xfe>
        if(DigitAccessoryOn(ACC_I2C_DXD)){
  4097b2:	200c      	movs	r0, #12
  4097b4:	4b55      	ldr	r3, [pc, #340]	; (40990c <managementBypass+0x2a4>)
  4097b6:	4798      	blx	r3
  4097b8:	b170      	cbz	r0, 4097d8 <managementBypass+0x170>
          persist_temp_bypass_on = 0; 
  4097ba:	2200      	movs	r2, #0
  4097bc:	4b54      	ldr	r3, [pc, #336]	; (409910 <managementBypass+0x2a8>)
  4097be:	601a      	str	r2, [r3, #0]
  else if(cmd_bypass_close && ((sData.status_unit & MSK_STS_BYPASS) == !mskBPD_Close)) 
  4097c0:	4b49      	ldr	r3, [pc, #292]	; (4098e8 <managementBypass+0x280>)
  4097c2:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  4097c6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4097ca:	f47f af54 	bne.w	409676 <managementBypass+0xe>
    Active_Procedure_Bypass_OpCl(CLOSE_BPD, 9);  
  4097ce:	2109      	movs	r1, #9
  4097d0:	2001      	movs	r0, #1
  4097d2:	4b4d      	ldr	r3, [pc, #308]	; (409908 <managementBypass+0x2a0>)
  4097d4:	4798      	blx	r3
  4097d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          i_rifTemp        = read_byte_eeprom(ADDR_EEP(idxSetPointT)) & 0x01;
  4097d8:	208b      	movs	r0, #139	; 0x8b
  4097da:	4b44      	ldr	r3, [pc, #272]	; (4098ec <managementBypass+0x284>)
  4097dc:	4798      	blx	r3
          rif_temp_interna = read_word_eeprom(ADDR_EEP(SetPointTemp[i_rifTemp])); 
  4097de:	f000 0001 	and.w	r0, r0, #1
  4097e2:	0040      	lsls	r0, r0, #1
  4097e4:	3087      	adds	r0, #135	; 0x87
  4097e6:	4d4b      	ldr	r5, [pc, #300]	; (409914 <managementBypass+0x2ac>)
  4097e8:	47a8      	blx	r5
  4097ea:	4606      	mov	r6, r0
  4097ec:	b207      	sxth	r7, r0
          Bypass_minTemp   = read_word_eeprom(ADDR_EEP(Bypass_minTempExt));
  4097ee:	2085      	movs	r0, #133	; 0x85
  4097f0:	47a8      	blx	r5
  4097f2:	4605      	mov	r5, r0
          if(DigitAccessoryOperating(ACC_I2C_HEATER)  && (enab_func &  (1 << ENAB_WINTER)))  {
  4097f4:	2000      	movs	r0, #0
  4097f6:	4b48      	ldr	r3, [pc, #288]	; (409918 <managementBypass+0x2b0>)
  4097f8:	4798      	blx	r3
  4097fa:	b150      	cbz	r0, 409812 <managementBypass+0x1aa>
  4097fc:	f414 6f80 	tst.w	r4, #1024	; 0x400
  409800:	d101      	bne.n	409806 <managementBypass+0x19e>
              SetPointTemp = rif_temp_interna;
  409802:	463c      	mov	r4, r7
  409804:	e006      	b.n	409814 <managementBypass+0x1ac>
              SetPointTemp = rif_temp_interna + (short)read_byte_eeprom(ADDR_EEP(hister_Temp_Hot[0]));
  409806:	2090      	movs	r0, #144	; 0x90
  409808:	4b38      	ldr	r3, [pc, #224]	; (4098ec <managementBypass+0x284>)
  40980a:	4798      	blx	r3
  40980c:	4430      	add	r0, r6
  40980e:	b204      	sxth	r4, r0
  409810:	e000      	b.n	409814 <managementBypass+0x1ac>
              SetPointTemp = rif_temp_interna;
  409812:	463c      	mov	r4, r7
          if(!CkAlarm(ALM_PTFRESH_KO) && !CkAlarm(ALM_PTRET_KO))
  409814:	2058      	movs	r0, #88	; 0x58
  409816:	4b36      	ldr	r3, [pc, #216]	; (4098f0 <managementBypass+0x288>)
  409818:	4798      	blx	r3
  40981a:	2800      	cmp	r0, #0
  40981c:	d1d0      	bne.n	4097c0 <managementBypass+0x158>
  40981e:	2059      	movs	r0, #89	; 0x59
  409820:	4b33      	ldr	r3, [pc, #204]	; (4098f0 <managementBypass+0x288>)
  409822:	4798      	blx	r3
  409824:	4606      	mov	r6, r0
  409826:	2800      	cmp	r0, #0
  409828:	d1ca      	bne.n	4097c0 <managementBypass+0x158>
          Bypass_minTemp   = read_word_eeprom(ADDR_EEP(Bypass_minTempExt));
  40982a:	b22d      	sxth	r5, r5
              if((sData.measure_Temp[I_PROBE_RETURN] >= (SetPointTemp + 10)) &&     
  40982c:	4b2e      	ldr	r3, [pc, #184]	; (4098e8 <managementBypass+0x280>)
  40982e:	f9b3 31cf 	ldrsh.w	r3, [r3, #463]	; 0x1cf
  409832:	340a      	adds	r4, #10
  409834:	42a3      	cmp	r3, r4
  409836:	db07      	blt.n	409848 <managementBypass+0x1e0>
                 (sData.measure_Temp[I_PROBE_FRESH] > Bypass_minTemp) &&                    
  409838:	4a2b      	ldr	r2, [pc, #172]	; (4098e8 <managementBypass+0x280>)
  40983a:	f9b2 21cd 	ldrsh.w	r2, [r2, #461]	; 0x1cd
              if((sData.measure_Temp[I_PROBE_RETURN] >= (SetPointTemp + 10)) &&     
  40983e:	4295      	cmp	r5, r2
  409840:	da02      	bge.n	409848 <managementBypass+0x1e0>
                 (sData.measure_Temp[I_PROBE_FRESH] <  (sData.measure_Temp[I_PROBE_RETURN]-20)) &&  
  409842:	3b14      	subs	r3, #20
                 (sData.measure_Temp[I_PROBE_FRESH] > Bypass_minTemp) &&                    
  409844:	429a      	cmp	r2, r3
  409846:	db12      	blt.n	40986e <managementBypass+0x206>
                 persist_temp_bypass_on = 0; 
  409848:	2200      	movs	r2, #0
  40984a:	4b31      	ldr	r3, [pc, #196]	; (409910 <managementBypass+0x2a8>)
  40984c:	601a      	str	r2, [r3, #0]
               if((sData.measure_Temp[I_PROBE_FRESH] >= sData.measure_Temp[I_PROBE_RETURN]) ||    
  40984e:	4b26      	ldr	r3, [pc, #152]	; (4098e8 <managementBypass+0x280>)
  409850:	f9b3 21cd 	ldrsh.w	r2, [r3, #461]	; 0x1cd
  409854:	f9b3 31cf 	ldrsh.w	r3, [r3, #463]	; 0x1cf
  409858:	429a      	cmp	r2, r3
  40985a:	da04      	bge.n	409866 <managementBypass+0x1fe>
  40985c:	4295      	cmp	r5, r2
  40985e:	dc02      	bgt.n	409866 <managementBypass+0x1fe>
                  (sData.measure_Temp[I_PROBE_RETURN] <= (rif_temp_interna - 20)) ||  
  409860:	3f14      	subs	r7, #20
                  (sData.measure_Temp[I_PROBE_FRESH] < Bypass_minTemp) ||                 
  409862:	42bb      	cmp	r3, r7
  409864:	dc13      	bgt.n	40988e <managementBypass+0x226>
                 persist_temp_bypass_on = 0; 
  409866:	2200      	movs	r2, #0
  409868:	4b29      	ldr	r3, [pc, #164]	; (409910 <managementBypass+0x2a8>)
  40986a:	601a      	str	r2, [r3, #0]
  40986c:	e7a8      	b.n	4097c0 <managementBypass+0x158>
                 !DigitAccessoryOn(ACC_I2C_COOLER))                                                
  40986e:	2001      	movs	r0, #1
  409870:	4b26      	ldr	r3, [pc, #152]	; (40990c <managementBypass+0x2a4>)
  409872:	4798      	blx	r3
                 (sData.measure_Temp[I_PROBE_FRESH] <  (sData.measure_Temp[I_PROBE_RETURN]-20)) &&  
  409874:	2800      	cmp	r0, #0
  409876:	d1e7      	bne.n	409848 <managementBypass+0x1e0>
                 if(persist_temp_bypass_on++ > 3) {               
  409878:	4a25      	ldr	r2, [pc, #148]	; (409910 <managementBypass+0x2a8>)
  40987a:	6813      	ldr	r3, [r2, #0]
  40987c:	1c59      	adds	r1, r3, #1
  40987e:	6011      	str	r1, [r2, #0]
  409880:	2b03      	cmp	r3, #3
  409882:	dde4      	ble.n	40984e <managementBypass+0x1e6>
                   persist_temp_bypass_on = 4;
  409884:	2204      	movs	r2, #4
  409886:	4b22      	ldr	r3, [pc, #136]	; (409910 <managementBypass+0x2a8>)
  409888:	601a      	str	r2, [r3, #0]
                   cmd_bypass_open = true;
  40988a:	2601      	movs	r6, #1
  40988c:	e7df      	b.n	40984e <managementBypass+0x1e6>
                   DigitAccessoryOn(ACC_I2C_HEATER)  ||                                          
  40988e:	2000      	movs	r0, #0
  409890:	4b1e      	ldr	r3, [pc, #120]	; (40990c <managementBypass+0x2a4>)
  409892:	4798      	blx	r3
                  (sData.measure_Temp[I_PROBE_RETURN] <= (rif_temp_interna - 20)) ||  
  409894:	2800      	cmp	r0, #0
  409896:	d1e6      	bne.n	409866 <managementBypass+0x1fe>
                   DigitAccessoryOn(ACC_I2C_COOLER))                                              
  409898:	2001      	movs	r0, #1
  40989a:	4b1c      	ldr	r3, [pc, #112]	; (40990c <managementBypass+0x2a4>)
  40989c:	4798      	blx	r3
                   DigitAccessoryOn(ACC_I2C_HEATER)  ||                                          
  40989e:	2800      	cmp	r0, #0
  4098a0:	d1e1      	bne.n	409866 <managementBypass+0x1fe>
  if(cmd_bypass_open && ((sData.status_unit & MSK_STS_BYPASS) == mskBPD_Close))  
  4098a2:	2e00      	cmp	r6, #0
  4098a4:	f47f af66 	bne.w	409774 <managementBypass+0x10c>
  4098a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cfg_inp = read_byte_eeprom(ADDR_EEP(Set_Input[0]));  
  4098aa:	204e      	movs	r0, #78	; 0x4e
  4098ac:	4b0f      	ldr	r3, [pc, #60]	; (4098ec <managementBypass+0x284>)
  4098ae:	4798      	blx	r3
        if ((cfg_inp != INP_12V_BYPASS_OPEN) && (cfg_inp != INP_0V_BYPASS_OPEN))
  4098b0:	1f03      	subs	r3, r0, #4
  4098b2:	b2db      	uxtb	r3, r3
  4098b4:	2b01      	cmp	r3, #1
  4098b6:	d902      	bls.n	4098be <managementBypass+0x256>
            cfg_inp = read_byte_eeprom(ADDR_EEP(Set_Input[1]));  // passa a verificare l'input 2
  4098b8:	204f      	movs	r0, #79	; 0x4f
  4098ba:	4b0c      	ldr	r3, [pc, #48]	; (4098ec <managementBypass+0x284>)
  4098bc:	4798      	blx	r3
        if(cfg_inp == INP_12V_BYPASS_OPEN) 
  4098be:	2804      	cmp	r0, #4
  4098c0:	d02e      	beq.n	409920 <managementBypass+0x2b8>
        }else if (cfg_inp == INP_0V_BYPASS_OPEN) 
  4098c2:	2805      	cmp	r0, #5
  4098c4:	f47f aed7 	bne.w	409676 <managementBypass+0xe>
            if (((sData.status_unit & MSK_STS_BYPASS) == 0) && (sData.measure_ADC_input[i] > 610)) 
  4098c8:	4b07      	ldr	r3, [pc, #28]	; (4098e8 <managementBypass+0x280>)
  4098ca:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  4098ce:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  4098d2:	d142      	bne.n	40995a <managementBypass+0x2f2>
  4098d4:	4b11      	ldr	r3, [pc, #68]	; (40991c <managementBypass+0x2b4>)
  4098d6:	f9b3 2005 	ldrsh.w	r2, [r3, #5]
  4098da:	f240 2362 	movw	r3, #610	; 0x262
  4098de:	429a      	cmp	r2, r3
  4098e0:	f73f af6e 	bgt.w	4097c0 <managementBypass+0x158>
  4098e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4098e6:	bf00      	nop
  4098e8:	200013ac 	.word	0x200013ac
  4098ec:	0040a26d 	.word	0x0040a26d
  4098f0:	00403535 	.word	0x00403535
  4098f4:	20000de8 	.word	0x20000de8
  4098f8:	20001190 	.word	0x20001190
  4098fc:	20000de4 	.word	0x20000de4
  409900:	0040a1fd 	.word	0x0040a1fd
  409904:	0040b471 	.word	0x0040b471
  409908:	0040b77d 	.word	0x0040b77d
  40990c:	00400151 	.word	0x00400151
  409910:	20000df4 	.word	0x20000df4
  409914:	0040a279 	.word	0x0040a279
  409918:	0040012d 	.word	0x0040012d
  40991c:	2000157c 	.word	0x2000157c
            if (((sData.status_unit & MSK_STS_BYPASS) == 0) && (sData.measure_ADC_input[i] < 250)) 
  409920:	4b14      	ldr	r3, [pc, #80]	; (409974 <managementBypass+0x30c>)
  409922:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  409926:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  40992a:	d106      	bne.n	40993a <managementBypass+0x2d2>
  40992c:	4b12      	ldr	r3, [pc, #72]	; (409978 <managementBypass+0x310>)
  40992e:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  409932:	2bf9      	cmp	r3, #249	; 0xf9
  409934:	f77f af44 	ble.w	4097c0 <managementBypass+0x158>
  409938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (((sData.status_unit & MSK_STS_BYPASS) == mskBPD_Close) &&  (sData.measure_ADC_input[i] > 610)) 
  40993a:	2b80      	cmp	r3, #128	; 0x80
  40993c:	f47f ae9b 	bne.w	409676 <managementBypass+0xe>
  409940:	4b0d      	ldr	r3, [pc, #52]	; (409978 <managementBypass+0x310>)
  409942:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  Bool  cmd_bypass_open = false, cmd_bypass_close = false;
  409946:	f240 2262 	movw	r2, #610	; 0x262
  40994a:	4293      	cmp	r3, r2
  40994c:	bfd4      	ite	le
  40994e:	2300      	movle	r3, #0
  409950:	2301      	movgt	r3, #1
  if(cmd_bypass_open && ((sData.status_unit & MSK_STS_BYPASS) == mskBPD_Close))  
  409952:	2b00      	cmp	r3, #0
  409954:	f47f af16 	bne.w	409784 <managementBypass+0x11c>
  409958:	e68d      	b.n	409676 <managementBypass+0xe>
            else if (((sData.status_unit & MSK_STS_BYPASS) == mskBPD_Close) &&  (sData.measure_ADC_input[i] < 250)) 
  40995a:	2b80      	cmp	r3, #128	; 0x80
  40995c:	f47f ae8b 	bne.w	409676 <managementBypass+0xe>
  409960:	4b05      	ldr	r3, [pc, #20]	; (409978 <managementBypass+0x310>)
  409962:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  Bool  cmd_bypass_open = false, cmd_bypass_close = false;
  409966:	2bf9      	cmp	r3, #249	; 0xf9
  409968:	bfcc      	ite	gt
  40996a:	2300      	movgt	r3, #0
  40996c:	2301      	movle	r3, #1
  40996e:	e7f0      	b.n	409952 <managementBypass+0x2ea>
              cmd_bypass_close = true;  //chiudo il bypass
  409970:	2401      	movs	r4, #1
  409972:	e6bd      	b.n	4096f0 <managementBypass+0x88>
  409974:	200013ac 	.word	0x200013ac
  409978:	2000157c 	.word	0x2000157c

0040997c <TemperatureRegulate>:
// pilota il bypass. la funzione gira nello scheduler (sample = 5 sec.)
//
//  Funzione Modificata dalla 2.16: introdotto Acc. DXD
//------------------------------------------------------------------------
int TemperatureRegulate()
{
  40997c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int i; 
  short TempRif, Temp_off_Heater_immediately = 0, TempAmbient = 250, soglia_Off_Heater, soglia_On_Heater, soglia_Off_Cooler, soglia_On_Cooler;
  unsigned short enab_func = 0, SetPointTemp;
  Byte msk_bit = 0, nbyte, ref_T_setting;
  Byte i_rifTemp, stato_heater, stato_cooler, cfg_bypass;
  enab_func  = read_word_eeprom(ADDR_EEP(Enab_Fuction)); 
  409980:	202e      	movs	r0, #46	; 0x2e
  409982:	4b96      	ldr	r3, [pc, #600]	; (409bdc <TemperatureRegulate+0x260>)
  409984:	4798      	blx	r3
  409986:	4604      	mov	r4, r0
  cfg_bypass = read_byte_eeprom(ADDR_EEP(Config_Bypass));
  409988:	204d      	movs	r0, #77	; 0x4d
  40998a:	4b95      	ldr	r3, [pc, #596]	; (409be0 <TemperatureRegulate+0x264>)
  40998c:	4798      	blx	r3
  Serial_println1("T. Regulate:");
#endif
//''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' x_dbg   

  //---- (1) Se l'unità non è in funzione esci dalla funzione ----
  if((sData.status_unit & (1 << POS_BIT_UNIT_RUN)) == 0  &&  ( cfg_bypass != BPD_AUTO_ON_OFF ) && !(enab_func & (1 << ENAB_MBF))  )  {
  40998e:	4b95      	ldr	r3, [pc, #596]	; (409be4 <TemperatureRegulate+0x268>)
  409990:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  409994:	f013 0f01 	tst.w	r3, #1
  409998:	d143      	bne.n	409a22 <TemperatureRegulate+0xa6>
  40999a:	2804      	cmp	r0, #4
  40999c:	d02b      	beq.n	4099f6 <TemperatureRegulate+0x7a>
  40999e:	f414 4f80 	tst.w	r4, #16384	; 0x4000
  4099a2:	d13e      	bne.n	409a22 <TemperatureRegulate+0xa6>
    // Se il bypass era aperto chiudilo
    if((sData.status_unit & MSK_STS_BYPASS) == 0) 
  4099a4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4099a8:	d014      	beq.n	4099d4 <TemperatureRegulate+0x58>
       Active_Procedure_Bypass_OpCl(CLOSE_BPD, 2);
    
    // spengo gli accesori se attivi
    if(DigitAccessoryOn(ACC_I2C_COOLER))
  4099aa:	2001      	movs	r0, #1
  4099ac:	4b8e      	ldr	r3, [pc, #568]	; (409be8 <TemperatureRegulate+0x26c>)
  4099ae:	4798      	blx	r3
  4099b0:	b9a8      	cbnz	r0, 4099de <TemperatureRegulate+0x62>
       TAG_DigitAccessoryOff(ACC_I2C_COOLER);
    
    if(DigitAccessoryOn(ACC_I2C_HEATER)) 
  4099b2:	2000      	movs	r0, #0
  4099b4:	4b8c      	ldr	r3, [pc, #560]	; (409be8 <TemperatureRegulate+0x26c>)
  4099b6:	4798      	blx	r3
  4099b8:	b9a8      	cbnz	r0, 4099e6 <TemperatureRegulate+0x6a>
       TAG_DigitAccessoryOff(ACC_I2C_HEATER); 
       
    if(DigitAccessoryOn(ACC_I2C_DXD)) 
  4099ba:	200c      	movs	r0, #12
  4099bc:	4b8a      	ldr	r3, [pc, #552]	; (409be8 <TemperatureRegulate+0x26c>)
  4099be:	4798      	blx	r3
  4099c0:	b9a8      	cbnz	r0, 4099ee <TemperatureRegulate+0x72>
       TAG_DigitAccessoryOff(ACC_I2C_DXD); 
   
    if( info_SSR > 0)
  4099c2:	4b8a      	ldr	r3, [pc, #552]	; (409bec <TemperatureRegulate+0x270>)
  4099c4:	781b      	ldrb	r3, [r3, #0]
  4099c6:	2b00      	cmp	r3, #0
  4099c8:	d057      	beq.n	409a7a <TemperatureRegulate+0xfe>
	  write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 0);	
  4099ca:	2100      	movs	r1, #0
  4099cc:	2096      	movs	r0, #150	; 0x96
  4099ce:	4b88      	ldr	r3, [pc, #544]	; (409bf0 <TemperatureRegulate+0x274>)
  4099d0:	4798      	blx	r3
  4099d2:	e052      	b.n	409a7a <TemperatureRegulate+0xfe>
       Active_Procedure_Bypass_OpCl(CLOSE_BPD, 2);
  4099d4:	2102      	movs	r1, #2
  4099d6:	2001      	movs	r0, #1
  4099d8:	4b86      	ldr	r3, [pc, #536]	; (409bf4 <TemperatureRegulate+0x278>)
  4099da:	4798      	blx	r3
  4099dc:	e7e5      	b.n	4099aa <TemperatureRegulate+0x2e>
       TAG_DigitAccessoryOff(ACC_I2C_COOLER);
  4099de:	2001      	movs	r0, #1
  4099e0:	4b85      	ldr	r3, [pc, #532]	; (409bf8 <TemperatureRegulate+0x27c>)
  4099e2:	4798      	blx	r3
  4099e4:	e7e5      	b.n	4099b2 <TemperatureRegulate+0x36>
       TAG_DigitAccessoryOff(ACC_I2C_HEATER); 
  4099e6:	2000      	movs	r0, #0
  4099e8:	4b83      	ldr	r3, [pc, #524]	; (409bf8 <TemperatureRegulate+0x27c>)
  4099ea:	4798      	blx	r3
  4099ec:	e7e5      	b.n	4099ba <TemperatureRegulate+0x3e>
       TAG_DigitAccessoryOff(ACC_I2C_DXD); 
  4099ee:	200c      	movs	r0, #12
  4099f0:	4b81      	ldr	r3, [pc, #516]	; (409bf8 <TemperatureRegulate+0x27c>)
  4099f2:	4798      	blx	r3
  4099f4:	e7e5      	b.n	4099c2 <TemperatureRegulate+0x46>
      
    return 1;  
    
  } else
  if(((sData.status_unit & (1 << POS_BIT_UNIT_RUN)) == 0)  && !(enab_func & (1 << ENAB_MBF)))
  4099f6:	f414 4f80 	tst.w	r4, #16384	; 0x4000
  4099fa:	d112      	bne.n	409a22 <TemperatureRegulate+0xa6>
  {
     // spengo gli accessori se attivi
    if(DigitAccessoryOn(ACC_I2C_COOLER))
  4099fc:	2001      	movs	r0, #1
  4099fe:	4b7a      	ldr	r3, [pc, #488]	; (409be8 <TemperatureRegulate+0x26c>)
  409a00:	4798      	blx	r3
  409a02:	2800      	cmp	r0, #0
  409a04:	d13c      	bne.n	409a80 <TemperatureRegulate+0x104>
       TAG_DigitAccessoryOff(ACC_I2C_COOLER);
    
    if(DigitAccessoryOn(ACC_I2C_HEATER)) 
  409a06:	2000      	movs	r0, #0
  409a08:	4b77      	ldr	r3, [pc, #476]	; (409be8 <TemperatureRegulate+0x26c>)
  409a0a:	4798      	blx	r3
  409a0c:	2800      	cmp	r0, #0
  409a0e:	d13b      	bne.n	409a88 <TemperatureRegulate+0x10c>
       TAG_DigitAccessoryOff(ACC_I2C_HEATER); 
       
    if(DigitAccessoryOn(ACC_I2C_DXD)) 
  409a10:	200c      	movs	r0, #12
  409a12:	4b75      	ldr	r3, [pc, #468]	; (409be8 <TemperatureRegulate+0x26c>)
  409a14:	4798      	blx	r3
  409a16:	2800      	cmp	r0, #0
  409a18:	d13a      	bne.n	409a90 <TemperatureRegulate+0x114>
       TAG_DigitAccessoryOff(ACC_I2C_DXD); 
      
    if ( info_SSR > 0)
  409a1a:	4b74      	ldr	r3, [pc, #464]	; (409bec <TemperatureRegulate+0x270>)
  409a1c:	781b      	ldrb	r3, [r3, #0]
  409a1e:	2b00      	cmp	r3, #0
  409a20:	d13a      	bne.n	409a98 <TemperatureRegulate+0x11c>
  
  }
 
  
  //---- (2) Gestione ByPass ----
  managementBypass(enab_func);
  409a22:	4620      	mov	r0, r4
  409a24:	4b75      	ldr	r3, [pc, #468]	; (409bfc <TemperatureRegulate+0x280>)
  409a26:	4798      	blx	r3

  //---- (3)  Se è attivo almeno un accessorio di Riscaldamento o raffreddamento procedi ----
  if(!DigitAccessoryOperating(ACC_I2C_HEATER) && !DigitAccessoryOperating(ACC_I2C_COOLER) && !DigitAccessoryOperating(ACC_I2C_PREHEATER) && !AccessoryPresent_EepList(ACC_EEP_DXD) && !AccessoryPresent_EepList(ACC_EEP_SSR))
  409a28:	2000      	movs	r0, #0
  409a2a:	4b75      	ldr	r3, [pc, #468]	; (409c00 <TemperatureRegulate+0x284>)
  409a2c:	4798      	blx	r3
  409a2e:	2800      	cmp	r0, #0
  409a30:	d037      	beq.n	409aa2 <TemperatureRegulate+0x126>
    return 1;       // se non vi è nessuno sistema per riscaldare o raffreddare, che ci sto a fà qui ??? Esco.

  //---- (4) In caso di guasto di uno dei motori spegni subito gli accessori clima a meno che non sia il MODBUS a comandare i motori   
  if ((sData.StatusMotorsR & 0xF0) || (sData.StatusMotorsF &0xF0) || CkAlarm(ALM_EB_CTRL_FAN) && !(enab_func & (1 << ENAB_MBF))) {
  409a32:	4b6c      	ldr	r3, [pc, #432]	; (409be4 <TemperatureRegulate+0x268>)
  409a34:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
  409a38:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  409a3c:	d105      	bne.n	409a4a <TemperatureRegulate+0xce>
  409a3e:	4b69      	ldr	r3, [pc, #420]	; (409be4 <TemperatureRegulate+0x268>)
  409a40:	f893 31f0 	ldrb.w	r3, [r3, #496]	; 0x1f0
  409a44:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  409a48:	d040      	beq.n	409acc <TemperatureRegulate+0x150>
      if(DigitAccessoryOn(ACC_I2C_PREHEATER))  
  409a4a:	2002      	movs	r0, #2
  409a4c:	4b66      	ldr	r3, [pc, #408]	; (409be8 <TemperatureRegulate+0x26c>)
  409a4e:	4798      	blx	r3
  409a50:	2800      	cmp	r0, #0
  409a52:	d17a      	bne.n	409b4a <TemperatureRegulate+0x1ce>
         TAG_DigitAccessoryOff(ACC_I2C_PREHEATER);   
         
      if(DigitAccessoryOn(ACC_I2C_HEATER))  
  409a54:	2000      	movs	r0, #0
  409a56:	4b64      	ldr	r3, [pc, #400]	; (409be8 <TemperatureRegulate+0x26c>)
  409a58:	4798      	blx	r3
  409a5a:	2800      	cmp	r0, #0
  409a5c:	d179      	bne.n	409b52 <TemperatureRegulate+0x1d6>
         TAG_DigitAccessoryOff(ACC_I2C_HEATER);     
        
      if(DigitAccessoryOn(ACC_I2C_COOLER))
  409a5e:	2001      	movs	r0, #1
  409a60:	4b61      	ldr	r3, [pc, #388]	; (409be8 <TemperatureRegulate+0x26c>)
  409a62:	4798      	blx	r3
  409a64:	2800      	cmp	r0, #0
  409a66:	d178      	bne.n	409b5a <TemperatureRegulate+0x1de>
         TAG_DigitAccessoryOff(ACC_I2C_COOLER);    
         
      if(DigitAccessoryOn(ACC_I2C_DXD))
  409a68:	200c      	movs	r0, #12
  409a6a:	4b5f      	ldr	r3, [pc, #380]	; (409be8 <TemperatureRegulate+0x26c>)
  409a6c:	4798      	blx	r3
  409a6e:	2800      	cmp	r0, #0
  409a70:	d177      	bne.n	409b62 <TemperatureRegulate+0x1e6>
         TAG_DigitAccessoryOff(ACC_I2C_DXD);   
      
	  if ( info_SSR > 0)
  409a72:	4b5e      	ldr	r3, [pc, #376]	; (409bec <TemperatureRegulate+0x270>)
  409a74:	781b      	ldrb	r3, [r3, #0]
  409a76:	2b00      	cmp	r3, #0
  409a78:	d177      	bne.n	409b6a <TemperatureRegulate+0x1ee>
*/         
//------------------------------------ x_dbg          

   return 1;
   
}
  409a7a:	2001      	movs	r0, #1
  409a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       TAG_DigitAccessoryOff(ACC_I2C_COOLER);
  409a80:	2001      	movs	r0, #1
  409a82:	4b5d      	ldr	r3, [pc, #372]	; (409bf8 <TemperatureRegulate+0x27c>)
  409a84:	4798      	blx	r3
  409a86:	e7be      	b.n	409a06 <TemperatureRegulate+0x8a>
       TAG_DigitAccessoryOff(ACC_I2C_HEATER); 
  409a88:	2000      	movs	r0, #0
  409a8a:	4b5b      	ldr	r3, [pc, #364]	; (409bf8 <TemperatureRegulate+0x27c>)
  409a8c:	4798      	blx	r3
  409a8e:	e7bf      	b.n	409a10 <TemperatureRegulate+0x94>
       TAG_DigitAccessoryOff(ACC_I2C_DXD); 
  409a90:	200c      	movs	r0, #12
  409a92:	4b59      	ldr	r3, [pc, #356]	; (409bf8 <TemperatureRegulate+0x27c>)
  409a94:	4798      	blx	r3
  409a96:	e7c0      	b.n	409a1a <TemperatureRegulate+0x9e>
	  write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 0);	  
  409a98:	2100      	movs	r1, #0
  409a9a:	2096      	movs	r0, #150	; 0x96
  409a9c:	4b54      	ldr	r3, [pc, #336]	; (409bf0 <TemperatureRegulate+0x274>)
  409a9e:	4798      	blx	r3
  409aa0:	e7bf      	b.n	409a22 <TemperatureRegulate+0xa6>
  if(!DigitAccessoryOperating(ACC_I2C_HEATER) && !DigitAccessoryOperating(ACC_I2C_COOLER) && !DigitAccessoryOperating(ACC_I2C_PREHEATER) && !AccessoryPresent_EepList(ACC_EEP_DXD) && !AccessoryPresent_EepList(ACC_EEP_SSR))
  409aa2:	2001      	movs	r0, #1
  409aa4:	4b56      	ldr	r3, [pc, #344]	; (409c00 <TemperatureRegulate+0x284>)
  409aa6:	4798      	blx	r3
  409aa8:	2800      	cmp	r0, #0
  409aaa:	d1c2      	bne.n	409a32 <TemperatureRegulate+0xb6>
  409aac:	2002      	movs	r0, #2
  409aae:	4b54      	ldr	r3, [pc, #336]	; (409c00 <TemperatureRegulate+0x284>)
  409ab0:	4798      	blx	r3
  409ab2:	2800      	cmp	r0, #0
  409ab4:	d1bd      	bne.n	409a32 <TemperatureRegulate+0xb6>
  409ab6:	2007      	movs	r0, #7
  409ab8:	4b52      	ldr	r3, [pc, #328]	; (409c04 <TemperatureRegulate+0x288>)
  409aba:	4798      	blx	r3
  409abc:	2800      	cmp	r0, #0
  409abe:	d1b8      	bne.n	409a32 <TemperatureRegulate+0xb6>
  409ac0:	2012      	movs	r0, #18
  409ac2:	4b50      	ldr	r3, [pc, #320]	; (409c04 <TemperatureRegulate+0x288>)
  409ac4:	4798      	blx	r3
  409ac6:	2800      	cmp	r0, #0
  409ac8:	d1b3      	bne.n	409a32 <TemperatureRegulate+0xb6>
  409aca:	e7d6      	b.n	409a7a <TemperatureRegulate+0xfe>
  if ((sData.StatusMotorsR & 0xF0) || (sData.StatusMotorsF &0xF0) || CkAlarm(ALM_EB_CTRL_FAN) && !(enab_func & (1 << ENAB_MBF))) {
  409acc:	2050      	movs	r0, #80	; 0x50
  409ace:	4b4e      	ldr	r3, [pc, #312]	; (409c08 <TemperatureRegulate+0x28c>)
  409ad0:	4798      	blx	r3
  409ad2:	b110      	cbz	r0, 409ada <TemperatureRegulate+0x15e>
  409ad4:	f414 4f80 	tst.w	r4, #16384	; 0x4000
  409ad8:	d0b7      	beq.n	409a4a <TemperatureRegulate+0xce>
  if((sData.status_test  & MSK_TEST_IPEHD) == 0) {
  409ada:	4b42      	ldr	r3, [pc, #264]	; (409be4 <TemperatureRegulate+0x268>)
  409adc:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  409ae0:	f013 0f10 	tst.w	r3, #16
  409ae4:	d046      	beq.n	409b74 <TemperatureRegulate+0x1f8>
  i_rifTemp    = read_byte_eeprom(ADDR_EEP(idxSetPointT)) & 0x01;
  409ae6:	208b      	movs	r0, #139	; 0x8b
  409ae8:	4d3d      	ldr	r5, [pc, #244]	; (409be0 <TemperatureRegulate+0x264>)
  409aea:	47a8      	blx	r5
  SetPointTemp = read_word_eeprom(ADDR_EEP(SetPointTemp[i_rifTemp]));   
  409aec:	f000 0001 	and.w	r0, r0, #1
  409af0:	0040      	lsls	r0, r0, #1
  409af2:	3087      	adds	r0, #135	; 0x87
  409af4:	4b39      	ldr	r3, [pc, #228]	; (409bdc <TemperatureRegulate+0x260>)
  409af6:	4798      	blx	r3
  409af8:	4606      	mov	r6, r0
  ref_T_setting = read_byte_eeprom(ADDR_EEP(Ref_T_setting));
  409afa:	2094      	movs	r0, #148	; 0x94
  409afc:	47a8      	blx	r5
  409afe:	4605      	mov	r5, r0
  if(ref_T_setting & 0x02) {
  409b00:	f010 0802 	ands.w	r8, r0, #2
  409b04:	f040 80a3 	bne.w	409c4e <TemperatureRegulate+0x2d2>
	TempRif = sData.measure_Temp[I_PROBE_SUPPLY];
  409b08:	4b36      	ldr	r3, [pc, #216]	; (409be4 <TemperatureRegulate+0x268>)
  409b0a:	f9b3 71d1 	ldrsh.w	r7, [r3, #465]	; 0x1d1
  if(AccessoryPresent_EepList(ACC_EEP_DXD)) 
  409b0e:	2007      	movs	r0, #7
  409b10:	4b3c      	ldr	r3, [pc, #240]	; (409c04 <TemperatureRegulate+0x288>)
  409b12:	4798      	blx	r3
  409b14:	2800      	cmp	r0, #0
  409b16:	f000 8259 	beq.w	409fcc <TemperatureRegulate+0x650>
     if(enab_func & (1 << ENAB_SUMMER))
  409b1a:	f414 6f00 	tst.w	r4, #2048	; 0x800
       sData.RegDXD.func_compressor = 'S'; // raffredda
  409b1e:	bf14      	ite	ne
  409b20:	2253      	movne	r2, #83	; 0x53
       sData.RegDXD.func_compressor = 'W'; // riscalda
  409b22:	2257      	moveq	r2, #87	; 0x57
  409b24:	4b2f      	ldr	r3, [pc, #188]	; (409be4 <TemperatureRegulate+0x268>)
  409b26:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
     if(sData.RegDXD.func_compressor != sData.AccI2C[ACC_I2C_DXD].info) {
  409b2a:	4b2e      	ldr	r3, [pc, #184]	; (409be4 <TemperatureRegulate+0x268>)
  409b2c:	f893 21a7 	ldrb.w	r2, [r3, #423]	; 0x1a7
  409b30:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
  409b34:	4293      	cmp	r3, r2
  409b36:	f000 8096 	beq.w	409c66 <TemperatureRegulate+0x2ea>
        sData.RegDXD.processor_I2C |= CHANGE_FUNC_COMPRESS;
  409b3a:	4a2a      	ldr	r2, [pc, #168]	; (409be4 <TemperatureRegulate+0x268>)
  409b3c:	f892 31a4 	ldrb.w	r3, [r2, #420]	; 0x1a4
  409b40:	f043 0301 	orr.w	r3, r3, #1
  409b44:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
        return 1;
  409b48:	e797      	b.n	409a7a <TemperatureRegulate+0xfe>
         TAG_DigitAccessoryOff(ACC_I2C_PREHEATER);   
  409b4a:	2002      	movs	r0, #2
  409b4c:	4b2a      	ldr	r3, [pc, #168]	; (409bf8 <TemperatureRegulate+0x27c>)
  409b4e:	4798      	blx	r3
  409b50:	e780      	b.n	409a54 <TemperatureRegulate+0xd8>
         TAG_DigitAccessoryOff(ACC_I2C_HEATER);     
  409b52:	2000      	movs	r0, #0
  409b54:	4b28      	ldr	r3, [pc, #160]	; (409bf8 <TemperatureRegulate+0x27c>)
  409b56:	4798      	blx	r3
  409b58:	e781      	b.n	409a5e <TemperatureRegulate+0xe2>
         TAG_DigitAccessoryOff(ACC_I2C_COOLER);    
  409b5a:	2001      	movs	r0, #1
  409b5c:	4b26      	ldr	r3, [pc, #152]	; (409bf8 <TemperatureRegulate+0x27c>)
  409b5e:	4798      	blx	r3
  409b60:	e782      	b.n	409a68 <TemperatureRegulate+0xec>
         TAG_DigitAccessoryOff(ACC_I2C_DXD);   
  409b62:	200c      	movs	r0, #12
  409b64:	4b24      	ldr	r3, [pc, #144]	; (409bf8 <TemperatureRegulate+0x27c>)
  409b66:	4798      	blx	r3
  409b68:	e783      	b.n	409a72 <TemperatureRegulate+0xf6>
	  write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 0);	  
  409b6a:	2100      	movs	r1, #0
  409b6c:	2096      	movs	r0, #150	; 0x96
  409b6e:	4b20      	ldr	r3, [pc, #128]	; (409bf0 <TemperatureRegulate+0x274>)
  409b70:	4798      	blx	r3
  409b72:	e782      	b.n	409a7a <TemperatureRegulate+0xfe>
    if(DigitAccessoryOperating(ACC_I2C_PREHEATER) && (enab_func & (1 << ENAB_PREHEATING)) ) 
  409b74:	2002      	movs	r0, #2
  409b76:	4b22      	ldr	r3, [pc, #136]	; (409c00 <TemperatureRegulate+0x284>)
  409b78:	4798      	blx	r3
  409b7a:	2800      	cmp	r0, #0
  409b7c:	d05a      	beq.n	409c34 <TemperatureRegulate+0x2b8>
  409b7e:	f414 5f80 	tst.w	r4, #4096	; 0x1000
  409b82:	d057      	beq.n	409c34 <TemperatureRegulate+0x2b8>
      if(sData.AccI2C[ACC_I2C_PREHEATER].sts & STS_ACC_ELECT)  // se l'accessorio è elettrico non mi preoccupo della formazione di ghiaccio sullo stesso
  409b84:	4b17      	ldr	r3, [pc, #92]	; (409be4 <TemperatureRegulate+0x268>)
  409b86:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
  409b8a:	f013 0f08 	tst.w	r3, #8
  409b8e:	d041      	beq.n	409c14 <TemperatureRegulate+0x298>
        if( (sData.measure_Temp[I_PROBE_EXHAUST] < 30) && (count_preHeaterOn == 0) ) // se si forma condensa può ghiacciare, accendo il preheater per 3 min e tengo acceso se T_EX non è > 3°C
  409b90:	4b14      	ldr	r3, [pc, #80]	; (409be4 <TemperatureRegulate+0x268>)
  409b92:	f9b3 31d3 	ldrsh.w	r3, [r3, #467]	; 0x1d3
  409b96:	2b1d      	cmp	r3, #29
  409b98:	dc13      	bgt.n	409bc2 <TemperatureRegulate+0x246>
  409b9a:	4b1c      	ldr	r3, [pc, #112]	; (409c0c <TemperatureRegulate+0x290>)
  409b9c:	681b      	ldr	r3, [r3, #0]
  409b9e:	b13b      	cbz	r3, 409bb0 <TemperatureRegulate+0x234>
         if(count_preHeaterOn > 0)  //decremento il timer fino a 0
  409ba0:	4b1a      	ldr	r3, [pc, #104]	; (409c0c <TemperatureRegulate+0x290>)
  409ba2:	681b      	ldr	r3, [r3, #0]
  409ba4:	2b00      	cmp	r3, #0
  409ba6:	dd9e      	ble.n	409ae6 <TemperatureRegulate+0x16a>
         count_preHeaterOn--; 
  409ba8:	3b01      	subs	r3, #1
  409baa:	4a18      	ldr	r2, [pc, #96]	; (409c0c <TemperatureRegulate+0x290>)
  409bac:	6013      	str	r3, [r2, #0]
  409bae:	e79a      	b.n	409ae6 <TemperatureRegulate+0x16a>
           TAG_DigitAccessoryOn(ACC_I2C_PREHEATER); //accendo l'accessorio
  409bb0:	2002      	movs	r0, #2
  409bb2:	4b17      	ldr	r3, [pc, #92]	; (409c10 <TemperatureRegulate+0x294>)
  409bb4:	4798      	blx	r3
           count_preHeaterOn = ton_preheater; //carico il timer (ON)
  409bb6:	2278      	movs	r2, #120	; 0x78
  409bb8:	4b14      	ldr	r3, [pc, #80]	; (409c0c <TemperatureRegulate+0x290>)
  409bba:	601a      	str	r2, [r3, #0]
         if(count_preHeaterOn > 0)  //decremento il timer fino a 0
  409bbc:	4b13      	ldr	r3, [pc, #76]	; (409c0c <TemperatureRegulate+0x290>)
  409bbe:	681b      	ldr	r3, [r3, #0]
  409bc0:	e7f2      	b.n	409ba8 <TemperatureRegulate+0x22c>
        }else if ((sData.measure_Temp[I_PROBE_EXHAUST] > 30) && (count_preHeaterOn == 0)) // se si è scaldato abbastanza spengo e inserisco una pausa di 3 min prima del prossimo controllo
  409bc2:	2b1e      	cmp	r3, #30
  409bc4:	ddec      	ble.n	409ba0 <TemperatureRegulate+0x224>
  409bc6:	4b11      	ldr	r3, [pc, #68]	; (409c0c <TemperatureRegulate+0x290>)
  409bc8:	681b      	ldr	r3, [r3, #0]
  409bca:	2b00      	cmp	r3, #0
  409bcc:	d1e8      	bne.n	409ba0 <TemperatureRegulate+0x224>
           TAG_DigitAccessoryOff(ACC_I2C_PREHEATER);
  409bce:	2002      	movs	r0, #2
  409bd0:	4b09      	ldr	r3, [pc, #36]	; (409bf8 <TemperatureRegulate+0x27c>)
  409bd2:	4798      	blx	r3
           count_preHeaterOn = toff_preheater; //carico il timer (OFF)
  409bd4:	2224      	movs	r2, #36	; 0x24
  409bd6:	4b0d      	ldr	r3, [pc, #52]	; (409c0c <TemperatureRegulate+0x290>)
  409bd8:	601a      	str	r2, [r3, #0]
  409bda:	e7ef      	b.n	409bbc <TemperatureRegulate+0x240>
  409bdc:	0040a279 	.word	0x0040a279
  409be0:	0040a26d 	.word	0x0040a26d
  409be4:	200013ac 	.word	0x200013ac
  409be8:	00400151 	.word	0x00400151
  409bec:	20000e8b 	.word	0x20000e8b
  409bf0:	0040a1fd 	.word	0x0040a1fd
  409bf4:	0040b77d 	.word	0x0040b77d
  409bf8:	004001d9 	.word	0x004001d9
  409bfc:	00409669 	.word	0x00409669
  409c00:	0040012d 	.word	0x0040012d
  409c04:	00400175 	.word	0x00400175
  409c08:	00403535 	.word	0x00403535
  409c0c:	20000dec 	.word	0x20000dec
  409c10:	0040019d 	.word	0x0040019d
       if(sData.AccI2C[ACC_I2C_PREHEATER].measure1 <= 50) 
  409c14:	4bbd      	ldr	r3, [pc, #756]	; (409f0c <TemperatureRegulate+0x590>)
  409c16:	f9b3 302d 	ldrsh.w	r3, [r3, #45]	; 0x2d
  409c1a:	2b32      	cmp	r3, #50	; 0x32
  409c1c:	dd06      	ble.n	409c2c <TemperatureRegulate+0x2b0>
       }else if (sData.AccI2C[ACC_I2C_PREHEATER].measure1 > 70) //sopra i 7 posso spegnere
  409c1e:	2b46      	cmp	r3, #70	; 0x46
  409c20:	f77f af61 	ble.w	409ae6 <TemperatureRegulate+0x16a>
            TAG_DigitAccessoryOff(ACC_I2C_PREHEATER);
  409c24:	2002      	movs	r0, #2
  409c26:	4bba      	ldr	r3, [pc, #744]	; (409f10 <TemperatureRegulate+0x594>)
  409c28:	4798      	blx	r3
  409c2a:	e75c      	b.n	409ae6 <TemperatureRegulate+0x16a>
          TAG_DigitAccessoryOn(ACC_I2C_PREHEATER); 
  409c2c:	2002      	movs	r0, #2
  409c2e:	4bb9      	ldr	r3, [pc, #740]	; (409f14 <TemperatureRegulate+0x598>)
  409c30:	4798      	blx	r3
  409c32:	e758      	b.n	409ae6 <TemperatureRegulate+0x16a>
       if(DigitAccessoryOn(ACC_I2C_PREHEATER) == 1) {
  409c34:	2002      	movs	r0, #2
  409c36:	4bb8      	ldr	r3, [pc, #736]	; (409f18 <TemperatureRegulate+0x59c>)
  409c38:	4798      	blx	r3
  409c3a:	2801      	cmp	r0, #1
  409c3c:	f47f af53 	bne.w	409ae6 <TemperatureRegulate+0x16a>
          TAG_DigitAccessoryOff(ACC_I2C_PREHEATER);    
  409c40:	2002      	movs	r0, #2
  409c42:	4bb3      	ldr	r3, [pc, #716]	; (409f10 <TemperatureRegulate+0x594>)
  409c44:	4798      	blx	r3
          count_preHeaterOn = 0;
  409c46:	2200      	movs	r2, #0
  409c48:	4bb4      	ldr	r3, [pc, #720]	; (409f1c <TemperatureRegulate+0x5a0>)
  409c4a:	601a      	str	r2, [r3, #0]
  409c4c:	e74b      	b.n	409ae6 <TemperatureRegulate+0x16a>
     if(DigitAccessoryOperating(ACC_I2C_AWP)) 
  409c4e:	2008      	movs	r0, #8
  409c50:	4bb3      	ldr	r3, [pc, #716]	; (409f20 <TemperatureRegulate+0x5a4>)
  409c52:	4798      	blx	r3
  409c54:	b118      	cbz	r0, 409c5e <TemperatureRegulate+0x2e2>
        TempRif = sData.AccI2C[ACC_I2C_AWP].measure2;
  409c56:	4bad      	ldr	r3, [pc, #692]	; (409f0c <TemperatureRegulate+0x590>)
  409c58:	f9b3 709b 	ldrsh.w	r7, [r3, #155]	; 0x9b
  409c5c:	e757      	b.n	409b0e <TemperatureRegulate+0x192>
        TempRif = sData.measure_Temp[I_PROBE_RETURN];  // se c'è l'AWP, la Treturn diventa quella dell'accessorio.
  409c5e:	4bab      	ldr	r3, [pc, #684]	; (409f0c <TemperatureRegulate+0x590>)
  409c60:	f9b3 71cf 	ldrsh.w	r7, [r3, #463]	; 0x1cf
  409c64:	e753      	b.n	409b0e <TemperatureRegulate+0x192>
     if (((enab_func & (1 << ENAB_SUMMER)) == 0) && ((enab_func & (1 << ENAB_WINTER)) == 0))
  409c66:	f414 6f40 	tst.w	r4, #3072	; 0xc00
  409c6a:	d059      	beq.n	409d20 <TemperatureRegulate+0x3a4>
     if((ref_T_setting & 0x02) == 0)
  409c6c:	f1b8 0f00 	cmp.w	r8, #0
  409c70:	d10a      	bne.n	409c88 <TemperatureRegulate+0x30c>
        if(sData.RegDXD.func_compressor == 'W') {
  409c72:	2a57      	cmp	r2, #87	; 0x57
  409c74:	d06f      	beq.n	409d56 <TemperatureRegulate+0x3da>
          hist_T = read_byte_eeprom(ADDR_EEP(DeltaTemp_Supply)); // default 120 = 12.0
  409c76:	2095      	movs	r0, #149	; 0x95
  409c78:	4baa      	ldr	r3, [pc, #680]	; (409f24 <TemperatureRegulate+0x5a8>)
  409c7a:	4798      	blx	r3
          if(SetPointTemp > hist_T)
  409c7c:	b280      	uxth	r0, r0
  409c7e:	4286      	cmp	r6, r0
            SetPointTemp -= hist_T; // es: 22.0 - 12.0 => 10.0 è la temperature in uscita per raffreddare l'ambiente e portare la temperatura interna a 22.0 
  409c80:	bf86      	itte	hi
  409c82:	1a36      	subhi	r6, r6, r0
  409c84:	b2b6      	uxthhi	r6, r6
            SetPointTemp = 0;  
  409c86:	2600      	movls	r6, #0
     if(CkAlarm(ALM_DXD_COMPRESS)) {
  409c88:	202e      	movs	r0, #46	; 0x2e
  409c8a:	4ba7      	ldr	r3, [pc, #668]	; (409f28 <TemperatureRegulate+0x5ac>)
  409c8c:	4798      	blx	r3
  409c8e:	2800      	cmp	r0, #0
  409c90:	d167      	bne.n	409d62 <TemperatureRegulate+0x3e6>
     if(++sData.RegDXD.count > time_regulator)
  409c92:	4b9e      	ldr	r3, [pc, #632]	; (409f0c <TemperatureRegulate+0x590>)
  409c94:	f8d3 21aa 	ldr.w	r2, [r3, #426]	; 0x1aa
  409c98:	3201      	adds	r2, #1
     time_regulator = ((ref_T_setting >> 2) * 2); 
  409c9a:	f3c5 0387 	ubfx	r3, r5, #2, #8
  409c9e:	005b      	lsls	r3, r3, #1
     time_regulator += 6; 
  409ca0:	3306      	adds	r3, #6
     if(++sData.RegDXD.count > time_regulator)
  409ca2:	4293      	cmp	r3, r2
  409ca4:	f280 8084 	bge.w	409db0 <TemperatureRegulate+0x434>
       sData.RegDXD.count  = 0;
  409ca8:	4b98      	ldr	r3, [pc, #608]	; (409f0c <TemperatureRegulate+0x590>)
  409caa:	2200      	movs	r2, #0
  409cac:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409cb0:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409cb4:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409cb8:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
       if (sData.RegDXD.func_compressor == 'W'){
  409cbc:	f893 31a7 	ldrb.w	r3, [r3, #423]	; 0x1a7
  409cc0:	2b57      	cmp	r3, #87	; 0x57
  409cc2:	d079      	beq.n	409db8 <TemperatureRegulate+0x43c>
       }else if (sData.RegDXD.func_compressor == 'S') { 
  409cc4:	2b53      	cmp	r3, #83	; 0x53
  409cc6:	f47f aed8 	bne.w	409a7a <TemperatureRegulate+0xfe>
          if ((TempRif >= (SetPointTemp + 8)) && (sData.measure_Temp[I_PROBE_SUPPLY] <= (SetPointTemp + 190))) 
  409cca:	463a      	mov	r2, r7
  409ccc:	4633      	mov	r3, r6
  409cce:	f106 0108 	add.w	r1, r6, #8
  409cd2:	428f      	cmp	r7, r1
  409cd4:	db06      	blt.n	409ce4 <TemperatureRegulate+0x368>
  409cd6:	498d      	ldr	r1, [pc, #564]	; (409f0c <TemperatureRegulate+0x590>)
  409cd8:	f9b1 11d1 	ldrsh.w	r1, [r1, #465]	; 0x1d1
  409cdc:	36be      	adds	r6, #190	; 0xbe
  409cde:	42b1      	cmp	r1, r6
  409ce0:	f340 80fa 	ble.w	409ed8 <TemperatureRegulate+0x55c>
          }else if (TempRif < (SetPointTemp - 25)) {  
  409ce4:	f1a3 0119 	sub.w	r1, r3, #25
  409ce8:	428a      	cmp	r2, r1
  409cea:	f2c0 8133 	blt.w	409f54 <TemperatureRegulate+0x5d8>
          }else if ((TempRif <= (SetPointTemp - 8)) && sData.RegDXD.val_0_10V) { 
  409cee:	3b08      	subs	r3, #8
  409cf0:	429a      	cmp	r2, r3
  409cf2:	f73f aec2 	bgt.w	409a7a <TemperatureRegulate+0xfe>
  409cf6:	4b85      	ldr	r3, [pc, #532]	; (409f0c <TemperatureRegulate+0x590>)
  409cf8:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
  409cfc:	2b00      	cmp	r3, #0
  409cfe:	f43f aebc 	beq.w	409a7a <TemperatureRegulate+0xfe>
            if(sData.RegDXD.val_0_10V > STEP_REG_DXD)
  409d02:	2b05      	cmp	r3, #5
  409d04:	f240 8147 	bls.w	409f96 <TemperatureRegulate+0x61a>
              sData.RegDXD.val_0_10V -= STEP_REG_DXD;
  409d08:	3b05      	subs	r3, #5
  409d0a:	4a80      	ldr	r2, [pc, #512]	; (409f0c <TemperatureRegulate+0x590>)
  409d0c:	f882 31a5 	strb.w	r3, [r2, #421]	; 0x1a5
            sData.RegDXD.processor_I2C |= CHANGE_VAL_0_10V;
  409d10:	4a7e      	ldr	r2, [pc, #504]	; (409f0c <TemperatureRegulate+0x590>)
  409d12:	f892 31a4 	ldrb.w	r3, [r2, #420]	; 0x1a4
  409d16:	f043 0302 	orr.w	r3, r3, #2
  409d1a:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
  409d1e:	e6ac      	b.n	409a7a <TemperatureRegulate+0xfe>
        if(DigitAccessoryOn(ACC_I2C_DXD)) 
  409d20:	200c      	movs	r0, #12
  409d22:	4b7d      	ldr	r3, [pc, #500]	; (409f18 <TemperatureRegulate+0x59c>)
  409d24:	4798      	blx	r3
  409d26:	b990      	cbnz	r0, 409d4e <TemperatureRegulate+0x3d2>
        sData.RegDXD.processor_I2C = 0;
  409d28:	4b78      	ldr	r3, [pc, #480]	; (409f0c <TemperatureRegulate+0x590>)
  409d2a:	2200      	movs	r2, #0
  409d2c:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
        sData.RegDXD.val_0_10V     = 0;
  409d30:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
        sData.RegDXD.count         = -6; 
  409d34:	f06f 0205 	mvn.w	r2, #5
  409d38:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409d3c:	f04f 32ff 	mov.w	r2, #4294967295
  409d40:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409d44:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409d48:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        return 1;
  409d4c:	e695      	b.n	409a7a <TemperatureRegulate+0xfe>
           TAG_DigitAccessoryOff(ACC_I2C_DXD); 
  409d4e:	200c      	movs	r0, #12
  409d50:	4b6f      	ldr	r3, [pc, #444]	; (409f10 <TemperatureRegulate+0x594>)
  409d52:	4798      	blx	r3
  409d54:	e7e8      	b.n	409d28 <TemperatureRegulate+0x3ac>
          hist_T = read_byte_eeprom(ADDR_EEP(DeltaTemp_Supply)); // default 120 = 12.0
  409d56:	2095      	movs	r0, #149	; 0x95
  409d58:	4b72      	ldr	r3, [pc, #456]	; (409f24 <TemperatureRegulate+0x5a8>)
  409d5a:	4798      	blx	r3
          SetPointTemp += hist_T; // es: 22.0 + 12.0 => 34.0 è la temperature in uscita per scadare l'ambiente e portare la temperatura interna a 22.0 
  409d5c:	4406      	add	r6, r0
  409d5e:	b2b6      	uxth	r6, r6
  409d60:	e792      	b.n	409c88 <TemperatureRegulate+0x30c>
        if(DigitAccessoryOn(ACC_I2C_DXD) && (sData.RegDXD.count != -30)) {   // intile tenere acceso il compressore
  409d62:	200c      	movs	r0, #12
  409d64:	4b6c      	ldr	r3, [pc, #432]	; (409f18 <TemperatureRegulate+0x59c>)
  409d66:	4798      	blx	r3
  409d68:	2800      	cmp	r0, #0
  409d6a:	f43f ae86 	beq.w	409a7a <TemperatureRegulate+0xfe>
  409d6e:	4b67      	ldr	r3, [pc, #412]	; (409f0c <TemperatureRegulate+0x590>)
  409d70:	f8d3 31aa 	ldr.w	r3, [r3, #426]	; 0x1aa
  409d74:	f113 0f1e 	cmn.w	r3, #30
  409d78:	f43f ae7f 	beq.w	409a7a <TemperatureRegulate+0xfe>
           TAG_DigitAccessoryOff(ACC_I2C_DXD); 
  409d7c:	200c      	movs	r0, #12
  409d7e:	4b64      	ldr	r3, [pc, #400]	; (409f10 <TemperatureRegulate+0x594>)
  409d80:	4798      	blx	r3
           sData.RegDXD.count = -30;
  409d82:	4b62      	ldr	r3, [pc, #392]	; (409f0c <TemperatureRegulate+0x590>)
  409d84:	f06f 021d 	mvn.w	r2, #29
  409d88:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409d8c:	f04f 32ff 	mov.w	r2, #4294967295
  409d90:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409d94:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409d98:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
           sData.RegDXD.val_0_10V = 0;
  409d9c:	2200      	movs	r2, #0
  409d9e:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
           sData.RegDXD.processor_I2C |= CHANGE_VAL_0_10V;
  409da2:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
  409da6:	f042 0202 	orr.w	r2, r2, #2
  409daa:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
  409dae:	e664      	b.n	409a7a <TemperatureRegulate+0xfe>
     if(++sData.RegDXD.count > time_regulator)
  409db0:	4b56      	ldr	r3, [pc, #344]	; (409f0c <TemperatureRegulate+0x590>)
  409db2:	f8c3 21aa 	str.w	r2, [r3, #426]	; 0x1aa
  409db6:	e660      	b.n	409a7a <TemperatureRegulate+0xfe>
          if ((TempRif <= (SetPointTemp - 8)) && (sData.measure_Temp[I_PROBE_SUPPLY] <= (SetPointTemp + 190))) 
  409db8:	463a      	mov	r2, r7
  409dba:	4633      	mov	r3, r6
  409dbc:	f1a6 0108 	sub.w	r1, r6, #8
  409dc0:	428f      	cmp	r7, r1
  409dc2:	dc05      	bgt.n	409dd0 <TemperatureRegulate+0x454>
  409dc4:	4951      	ldr	r1, [pc, #324]	; (409f0c <TemperatureRegulate+0x590>)
  409dc6:	f9b1 11d1 	ldrsh.w	r1, [r1, #465]	; 0x1d1
  409dca:	36be      	adds	r6, #190	; 0xbe
  409dcc:	42b1      	cmp	r1, r6
  409dce:	dd1b      	ble.n	409e08 <TemperatureRegulate+0x48c>
          }else if (TempRif > (SetPointTemp + 25)) {  
  409dd0:	f103 0119 	add.w	r1, r3, #25
  409dd4:	428a      	cmp	r2, r1
  409dd6:	dc44      	bgt.n	409e62 <TemperatureRegulate+0x4e6>
          }else if ((TempRif >= (SetPointTemp + 8)) && sData.RegDXD.val_0_10V) { 
  409dd8:	3308      	adds	r3, #8
  409dda:	429a      	cmp	r2, r3
  409ddc:	f6ff ae4d 	blt.w	409a7a <TemperatureRegulate+0xfe>
  409de0:	4b4a      	ldr	r3, [pc, #296]	; (409f0c <TemperatureRegulate+0x590>)
  409de2:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
  409de6:	2b00      	cmp	r3, #0
  409de8:	f43f ae47 	beq.w	409a7a <TemperatureRegulate+0xfe>
              if(sData.RegDXD.val_0_10V > STEP_REG_DXD)
  409dec:	2b05      	cmp	r3, #5
  409dee:	d959      	bls.n	409ea4 <TemperatureRegulate+0x528>
                sData.RegDXD.val_0_10V -= STEP_REG_DXD;
  409df0:	3b05      	subs	r3, #5
  409df2:	4a46      	ldr	r2, [pc, #280]	; (409f0c <TemperatureRegulate+0x590>)
  409df4:	f882 31a5 	strb.w	r3, [r2, #421]	; 0x1a5
              sData.RegDXD.processor_I2C |= CHANGE_VAL_0_10V;
  409df8:	4a44      	ldr	r2, [pc, #272]	; (409f0c <TemperatureRegulate+0x590>)
  409dfa:	f892 31a4 	ldrb.w	r3, [r2, #420]	; 0x1a4
  409dfe:	f043 0302 	orr.w	r3, r3, #2
  409e02:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
  409e06:	e638      	b.n	409a7a <TemperatureRegulate+0xfe>
              if(DigitAccessoryOn(ACC_I2C_DXD) == 0) 
  409e08:	200c      	movs	r0, #12
  409e0a:	4b43      	ldr	r3, [pc, #268]	; (409f18 <TemperatureRegulate+0x59c>)
  409e0c:	4798      	blx	r3
  409e0e:	b1a0      	cbz	r0, 409e3a <TemperatureRegulate+0x4be>
                 sData.RegDXD.val_0_10V += STEP_REG_DXD;
  409e10:	4a3e      	ldr	r2, [pc, #248]	; (409f0c <TemperatureRegulate+0x590>)
  409e12:	f892 31a5 	ldrb.w	r3, [r2, #421]	; 0x1a5
  409e16:	3305      	adds	r3, #5
  409e18:	b2db      	uxtb	r3, r3
  409e1a:	f882 31a5 	strb.w	r3, [r2, #421]	; 0x1a5
              if(sData.RegDXD.val_0_10V > 100)
  409e1e:	2b64      	cmp	r3, #100	; 0x64
  409e20:	d903      	bls.n	409e2a <TemperatureRegulate+0x4ae>
                 sData.RegDXD.val_0_10V = 100; 
  409e22:	2264      	movs	r2, #100	; 0x64
  409e24:	4b39      	ldr	r3, [pc, #228]	; (409f0c <TemperatureRegulate+0x590>)
  409e26:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
              sData.RegDXD.processor_I2C |= CHANGE_VAL_0_10V;
  409e2a:	4a38      	ldr	r2, [pc, #224]	; (409f0c <TemperatureRegulate+0x590>)
  409e2c:	f892 31a4 	ldrb.w	r3, [r2, #420]	; 0x1a4
  409e30:	f043 0302 	orr.w	r3, r3, #2
  409e34:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
  409e38:	e61f      	b.n	409a7a <TemperatureRegulate+0xfe>
                 TAG_DigitAccessoryOn(ACC_I2C_DXD);  
  409e3a:	200c      	movs	r0, #12
  409e3c:	4b35      	ldr	r3, [pc, #212]	; (409f14 <TemperatureRegulate+0x598>)
  409e3e:	4798      	blx	r3
                 sData.RegDXD.val_0_10V =  60;  // si parte con il compressore al 60%
  409e40:	4b32      	ldr	r3, [pc, #200]	; (409f0c <TemperatureRegulate+0x590>)
  409e42:	223c      	movs	r2, #60	; 0x3c
  409e44:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
                 sData.RegDXD.count     = -24;  // Diamo +2 minuti in più (24 x 5sec. = 120 sec), in modo da dare il tempo al compressore di arrivare a regime
  409e48:	f06f 0217 	mvn.w	r2, #23
  409e4c:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409e50:	f04f 32ff 	mov.w	r2, #4294967295
  409e54:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409e58:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409e5c:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
  409e60:	e7e3      	b.n	409e2a <TemperatureRegulate+0x4ae>
              sData.RegDXD.val_0_10V = 0;
  409e62:	2200      	movs	r2, #0
  409e64:	4b29      	ldr	r3, [pc, #164]	; (409f0c <TemperatureRegulate+0x590>)
  409e66:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
              if(DigitAccessoryOn(ACC_I2C_DXD)) 
  409e6a:	200c      	movs	r0, #12
  409e6c:	4b2a      	ldr	r3, [pc, #168]	; (409f18 <TemperatureRegulate+0x59c>)
  409e6e:	4798      	blx	r3
  409e70:	2800      	cmp	r0, #0
  409e72:	f43f ae02 	beq.w	409a7a <TemperatureRegulate+0xfe>
                  TAG_DigitAccessoryOff(ACC_I2C_DXD); 
  409e76:	200c      	movs	r0, #12
  409e78:	4b25      	ldr	r3, [pc, #148]	; (409f10 <TemperatureRegulate+0x594>)
  409e7a:	4798      	blx	r3
                  sData.RegDXD.count = -24;
  409e7c:	4b23      	ldr	r3, [pc, #140]	; (409f0c <TemperatureRegulate+0x590>)
  409e7e:	f06f 0217 	mvn.w	r2, #23
  409e82:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409e86:	f04f 32ff 	mov.w	r2, #4294967295
  409e8a:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409e8e:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409e92:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
                  sData.RegDXD.processor_I2C |= CHANGE_VAL_0_10V;
  409e96:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
  409e9a:	f042 0202 	orr.w	r2, r2, #2
  409e9e:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
  409ea2:	e5ea      	b.n	409a7a <TemperatureRegulate+0xfe>
                sData.RegDXD.val_0_10V = 0;
  409ea4:	2200      	movs	r2, #0
  409ea6:	4b19      	ldr	r3, [pc, #100]	; (409f0c <TemperatureRegulate+0x590>)
  409ea8:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
                if(DigitAccessoryOn(ACC_I2C_DXD)) {   // intile tenere acceso il compressore
  409eac:	200c      	movs	r0, #12
  409eae:	4b1a      	ldr	r3, [pc, #104]	; (409f18 <TemperatureRegulate+0x59c>)
  409eb0:	4798      	blx	r3
  409eb2:	2800      	cmp	r0, #0
  409eb4:	d0a0      	beq.n	409df8 <TemperatureRegulate+0x47c>
                   TAG_DigitAccessoryOff(ACC_I2C_DXD); 
  409eb6:	200c      	movs	r0, #12
  409eb8:	4b15      	ldr	r3, [pc, #84]	; (409f10 <TemperatureRegulate+0x594>)
  409eba:	4798      	blx	r3
                   sData.RegDXD.count = -24;
  409ebc:	4b13      	ldr	r3, [pc, #76]	; (409f0c <TemperatureRegulate+0x590>)
  409ebe:	f06f 0217 	mvn.w	r2, #23
  409ec2:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409ec6:	f04f 32ff 	mov.w	r2, #4294967295
  409eca:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409ece:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409ed2:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
  409ed6:	e78f      	b.n	409df8 <TemperatureRegulate+0x47c>
            if(DigitAccessoryOn(ACC_I2C_DXD) == 0) {
  409ed8:	200c      	movs	r0, #12
  409eda:	4b0f      	ldr	r3, [pc, #60]	; (409f18 <TemperatureRegulate+0x59c>)
  409edc:	4798      	blx	r3
  409ede:	b328      	cbz	r0, 409f2c <TemperatureRegulate+0x5b0>
              sData.RegDXD.val_0_10V += STEP_REG_DXD;
  409ee0:	4a0a      	ldr	r2, [pc, #40]	; (409f0c <TemperatureRegulate+0x590>)
  409ee2:	f892 31a5 	ldrb.w	r3, [r2, #421]	; 0x1a5
  409ee6:	3305      	adds	r3, #5
  409ee8:	b2db      	uxtb	r3, r3
  409eea:	f882 31a5 	strb.w	r3, [r2, #421]	; 0x1a5
            if(sData.RegDXD.val_0_10V > 100)
  409eee:	2b64      	cmp	r3, #100	; 0x64
  409ef0:	d903      	bls.n	409efa <TemperatureRegulate+0x57e>
              sData.RegDXD.val_0_10V = 100;  
  409ef2:	2264      	movs	r2, #100	; 0x64
  409ef4:	4b05      	ldr	r3, [pc, #20]	; (409f0c <TemperatureRegulate+0x590>)
  409ef6:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
            sData.RegDXD.processor_I2C |= CHANGE_VAL_0_10V;
  409efa:	4a04      	ldr	r2, [pc, #16]	; (409f0c <TemperatureRegulate+0x590>)
  409efc:	f892 31a4 	ldrb.w	r3, [r2, #420]	; 0x1a4
  409f00:	f043 0302 	orr.w	r3, r3, #2
  409f04:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
  409f08:	e5b7      	b.n	409a7a <TemperatureRegulate+0xfe>
  409f0a:	bf00      	nop
  409f0c:	200013ac 	.word	0x200013ac
  409f10:	004001d9 	.word	0x004001d9
  409f14:	0040019d 	.word	0x0040019d
  409f18:	00400151 	.word	0x00400151
  409f1c:	20000dec 	.word	0x20000dec
  409f20:	0040012d 	.word	0x0040012d
  409f24:	0040a26d 	.word	0x0040a26d
  409f28:	00403535 	.word	0x00403535
              TAG_DigitAccessoryOn(ACC_I2C_DXD);  
  409f2c:	200c      	movs	r0, #12
  409f2e:	4b94      	ldr	r3, [pc, #592]	; (40a180 <TemperatureRegulate+0x804>)
  409f30:	4798      	blx	r3
              sData.RegDXD.val_0_10V =   60;  // si parte con il compressore al 60%
  409f32:	4b94      	ldr	r3, [pc, #592]	; (40a184 <TemperatureRegulate+0x808>)
  409f34:	223c      	movs	r2, #60	; 0x3c
  409f36:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
              sData.RegDXD.count     =  -24;  // Diamo +2 minuti in più, in modo da dare il tempo al compressore di arrivare a regime
  409f3a:	f06f 0217 	mvn.w	r2, #23
  409f3e:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409f42:	f04f 32ff 	mov.w	r2, #4294967295
  409f46:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409f4a:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409f4e:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
  409f52:	e7d2      	b.n	409efa <TemperatureRegulate+0x57e>
              sData.RegDXD.val_0_10V = 0;
  409f54:	2200      	movs	r2, #0
  409f56:	4b8b      	ldr	r3, [pc, #556]	; (40a184 <TemperatureRegulate+0x808>)
  409f58:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
              if(DigitAccessoryOn(ACC_I2C_DXD)) 
  409f5c:	200c      	movs	r0, #12
  409f5e:	4b8a      	ldr	r3, [pc, #552]	; (40a188 <TemperatureRegulate+0x80c>)
  409f60:	4798      	blx	r3
  409f62:	2800      	cmp	r0, #0
  409f64:	f43f ad89 	beq.w	409a7a <TemperatureRegulate+0xfe>
                  TAG_DigitAccessoryOff(ACC_I2C_DXD); 
  409f68:	200c      	movs	r0, #12
  409f6a:	4b88      	ldr	r3, [pc, #544]	; (40a18c <TemperatureRegulate+0x810>)
  409f6c:	4798      	blx	r3
                  sData.RegDXD.count = -24;
  409f6e:	4b85      	ldr	r3, [pc, #532]	; (40a184 <TemperatureRegulate+0x808>)
  409f70:	f06f 0217 	mvn.w	r2, #23
  409f74:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409f78:	f04f 32ff 	mov.w	r2, #4294967295
  409f7c:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409f80:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409f84:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
                  sData.RegDXD.processor_I2C |= CHANGE_VAL_0_10V;
  409f88:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
  409f8c:	f042 0202 	orr.w	r2, r2, #2
  409f90:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
  409f94:	e571      	b.n	409a7a <TemperatureRegulate+0xfe>
              sData.RegDXD.val_0_10V = 0;
  409f96:	2200      	movs	r2, #0
  409f98:	4b7a      	ldr	r3, [pc, #488]	; (40a184 <TemperatureRegulate+0x808>)
  409f9a:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
              if(DigitAccessoryOn(ACC_I2C_DXD)) {   // intile tenere acceso il compressore
  409f9e:	200c      	movs	r0, #12
  409fa0:	4b79      	ldr	r3, [pc, #484]	; (40a188 <TemperatureRegulate+0x80c>)
  409fa2:	4798      	blx	r3
  409fa4:	2800      	cmp	r0, #0
  409fa6:	f43f aeb3 	beq.w	409d10 <TemperatureRegulate+0x394>
                 TAG_DigitAccessoryOff(ACC_I2C_DXD); 
  409faa:	200c      	movs	r0, #12
  409fac:	4b77      	ldr	r3, [pc, #476]	; (40a18c <TemperatureRegulate+0x810>)
  409fae:	4798      	blx	r3
                 sData.RegDXD.count = -24;
  409fb0:	4b74      	ldr	r3, [pc, #464]	; (40a184 <TemperatureRegulate+0x808>)
  409fb2:	f06f 0217 	mvn.w	r2, #23
  409fb6:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  409fba:	f04f 32ff 	mov.w	r2, #4294967295
  409fbe:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  409fc2:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  409fc6:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
  409fca:	e6a1      	b.n	409d10 <TemperatureRegulate+0x394>
    sData.RegDXD.processor_I2C = 0;
  409fcc:	4b6d      	ldr	r3, [pc, #436]	; (40a184 <TemperatureRegulate+0x808>)
  409fce:	2000      	movs	r0, #0
  409fd0:	f883 01a4 	strb.w	r0, [r3, #420]	; 0x1a4
    sData.RegDXD.val_0_10V    = 0;
  409fd4:	f883 01a5 	strb.w	r0, [r3, #421]	; 0x1a5
    sData.RegDXD.count        = 0; 
  409fd8:	f883 01aa 	strb.w	r0, [r3, #426]	; 0x1aa
  409fdc:	f883 01ab 	strb.w	r0, [r3, #427]	; 0x1ab
  409fe0:	f883 01ac 	strb.w	r0, [r3, #428]	; 0x1ac
  409fe4:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
  if (!DigitAccessoryOperating(ACC_I2C_HEATER) && !DigitAccessoryOperating(ACC_I2C_COOLER) && !AccessoryPresent_EepList(ACC_EEP_SSR))
  409fe8:	4b69      	ldr	r3, [pc, #420]	; (40a190 <TemperatureRegulate+0x814>)
  409fea:	4798      	blx	r3
  409fec:	b918      	cbnz	r0, 409ff6 <TemperatureRegulate+0x67a>
  409fee:	2001      	movs	r0, #1
  409ff0:	4b67      	ldr	r3, [pc, #412]	; (40a190 <TemperatureRegulate+0x814>)
  409ff2:	4798      	blx	r3
  409ff4:	b348      	cbz	r0, 40a04a <TemperatureRegulate+0x6ce>
   soglia_Off_Heater = SetPointTemp + (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Hot[0]));
  409ff6:	2090      	movs	r0, #144	; 0x90
  409ff8:	4d66      	ldr	r5, [pc, #408]	; (40a194 <TemperatureRegulate+0x818>)
  409ffa:	47a8      	blx	r5
  409ffc:	4681      	mov	r9, r0
   soglia_On_Heater  = SetPointTemp + (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Hot[1]));
  409ffe:	2091      	movs	r0, #145	; 0x91
  40a000:	47a8      	blx	r5
  40a002:	4680      	mov	r8, r0
   soglia_Off_Cooler = SetPointTemp + (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Cold[0]));
  40a004:	2092      	movs	r0, #146	; 0x92
  40a006:	47a8      	blx	r5
  40a008:	4682      	mov	sl, r0
   soglia_On_Cooler  = SetPointTemp + (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Cold[1])); 
  40a00a:	2093      	movs	r0, #147	; 0x93
  40a00c:	47a8      	blx	r5
  40a00e:	4605      	mov	r5, r0
   if((enab_func & (1 << ENAB_WINTER)) && !(enab_func & (1 << ENAB_MBF))) 
  40a010:	f404 4388 	and.w	r3, r4, #17408	; 0x4400
  40a014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  40a018:	d02b      	beq.n	40a072 <TemperatureRegulate+0x6f6>
    }else if((enab_func & (1 << ENAB_SUMMER)) && !(enab_func & (1 << ENAB_MBF))) {   
  40a01a:	f404 4390 	and.w	r3, r4, #18432	; 0x4800
  40a01e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  40a022:	d071      	beq.n	40a108 <TemperatureRegulate+0x78c>
	}else if(!(enab_func & (1 << ENAB_WINTER)) && !(enab_func & (1 << ENAB_SUMMER)) && !(enab_func & (1 << ENAB_MBF)))
  40a024:	f414 4f98 	tst.w	r4, #19456	; 0x4c00
  40a028:	f47f ad27 	bne.w	409a7a <TemperatureRegulate+0xfe>
        TAG_DigitAccessoryOff(ACC_I2C_COOLER);
  40a02c:	2001      	movs	r0, #1
  40a02e:	4c57      	ldr	r4, [pc, #348]	; (40a18c <TemperatureRegulate+0x810>)
  40a030:	47a0      	blx	r4
        TAG_DigitAccessoryOff(ACC_I2C_HEATER);
  40a032:	2000      	movs	r0, #0
  40a034:	47a0      	blx	r4
	    if ( info_SSR > 0)
  40a036:	4b58      	ldr	r3, [pc, #352]	; (40a198 <TemperatureRegulate+0x81c>)
  40a038:	781b      	ldrb	r3, [r3, #0]
  40a03a:	2b00      	cmp	r3, #0
  40a03c:	f43f ad1d 	beq.w	409a7a <TemperatureRegulate+0xfe>
    	write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 0);	  
  40a040:	2100      	movs	r1, #0
  40a042:	2096      	movs	r0, #150	; 0x96
  40a044:	4b55      	ldr	r3, [pc, #340]	; (40a19c <TemperatureRegulate+0x820>)
  40a046:	4798      	blx	r3
  40a048:	e517      	b.n	409a7a <TemperatureRegulate+0xfe>
  if (!DigitAccessoryOperating(ACC_I2C_HEATER) && !DigitAccessoryOperating(ACC_I2C_COOLER) && !AccessoryPresent_EepList(ACC_EEP_SSR))
  40a04a:	2012      	movs	r0, #18
  40a04c:	4b54      	ldr	r3, [pc, #336]	; (40a1a0 <TemperatureRegulate+0x824>)
  40a04e:	4798      	blx	r3
  40a050:	2800      	cmp	r0, #0
  40a052:	d1d0      	bne.n	409ff6 <TemperatureRegulate+0x67a>
    TAG_DigitAccessoryOff(ACC_I2C_COOLER);
  40a054:	2001      	movs	r0, #1
  40a056:	4c4d      	ldr	r4, [pc, #308]	; (40a18c <TemperatureRegulate+0x810>)
  40a058:	47a0      	blx	r4
    TAG_DigitAccessoryOff(ACC_I2C_HEATER);
  40a05a:	2000      	movs	r0, #0
  40a05c:	47a0      	blx	r4
	if ( info_SSR > 0)
  40a05e:	4b4e      	ldr	r3, [pc, #312]	; (40a198 <TemperatureRegulate+0x81c>)
  40a060:	781b      	ldrb	r3, [r3, #0]
  40a062:	2b00      	cmp	r3, #0
  40a064:	f43f ad09 	beq.w	409a7a <TemperatureRegulate+0xfe>
	write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 0);	
  40a068:	2100      	movs	r1, #0
  40a06a:	2096      	movs	r0, #150	; 0x96
  40a06c:	4b4b      	ldr	r3, [pc, #300]	; (40a19c <TemperatureRegulate+0x820>)
  40a06e:	4798      	blx	r3
  40a070:	e503      	b.n	409a7a <TemperatureRegulate+0xfe>
      TAG_DigitAccessoryOff(ACC_I2C_COOLER); 
  40a072:	2001      	movs	r0, #1
  40a074:	4b45      	ldr	r3, [pc, #276]	; (40a18c <TemperatureRegulate+0x810>)
  40a076:	4798      	blx	r3
      if(DigitAccessoryOperating(ACC_I2C_HEATER) || AccessoryPresent_EepList(ACC_EEP_SSR) )
  40a078:	2000      	movs	r0, #0
  40a07a:	4b45      	ldr	r3, [pc, #276]	; (40a190 <TemperatureRegulate+0x814>)
  40a07c:	4798      	blx	r3
  40a07e:	b1d8      	cbz	r0, 40a0b8 <TemperatureRegulate+0x73c>
   soglia_On_Heater  = SetPointTemp + (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Hot[1]));
  40a080:	fa46 f388 	sxtab	r3, r6, r8
         if (TempRif < soglia_On_Heater) 
  40a084:	b21b      	sxth	r3, r3
  40a086:	429f      	cmp	r7, r3
  40a088:	db2d      	blt.n	40a0e6 <TemperatureRegulate+0x76a>
   soglia_Off_Heater = SetPointTemp + (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Hot[0]));
  40a08a:	fa46 f389 	sxtab	r3, r6, r9
         else if (TempRif >= soglia_Off_Heater) 
  40a08e:	b21b      	sxth	r3, r3
  40a090:	429f      	cmp	r7, r3
  40a092:	db30      	blt.n	40a0f6 <TemperatureRegulate+0x77a>
            if(++persist_Temp_heater_off > 1) { 
  40a094:	4a43      	ldr	r2, [pc, #268]	; (40a1a4 <TemperatureRegulate+0x828>)
  40a096:	6813      	ldr	r3, [r2, #0]
  40a098:	3301      	adds	r3, #1
  40a09a:	6013      	str	r3, [r2, #0]
  40a09c:	2b01      	cmp	r3, #1
  40a09e:	f77f acec 	ble.w	409a7a <TemperatureRegulate+0xfe>
               TAG_DigitAccessoryOff(ACC_I2C_HEATER); 
  40a0a2:	2000      	movs	r0, #0
  40a0a4:	4b39      	ldr	r3, [pc, #228]	; (40a18c <TemperatureRegulate+0x810>)
  40a0a6:	4798      	blx	r3
			   write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 0);
  40a0a8:	2100      	movs	r1, #0
  40a0aa:	2096      	movs	r0, #150	; 0x96
  40a0ac:	4b3b      	ldr	r3, [pc, #236]	; (40a19c <TemperatureRegulate+0x820>)
  40a0ae:	4798      	blx	r3
               persist_Temp_heater_off = 0; 
  40a0b0:	2200      	movs	r2, #0
  40a0b2:	4b3c      	ldr	r3, [pc, #240]	; (40a1a4 <TemperatureRegulate+0x828>)
  40a0b4:	601a      	str	r2, [r3, #0]
  40a0b6:	e4e0      	b.n	409a7a <TemperatureRegulate+0xfe>
      if(DigitAccessoryOperating(ACC_I2C_HEATER) || AccessoryPresent_EepList(ACC_EEP_SSR) )
  40a0b8:	2012      	movs	r0, #18
  40a0ba:	4b39      	ldr	r3, [pc, #228]	; (40a1a0 <TemperatureRegulate+0x824>)
  40a0bc:	4798      	blx	r3
  40a0be:	2800      	cmp	r0, #0
  40a0c0:	d1de      	bne.n	40a080 <TemperatureRegulate+0x704>
         if (DigitAccessoryOn(ACC_I2C_HEATER) == 1 || (info_SSR > 0) )
  40a0c2:	2000      	movs	r0, #0
  40a0c4:	4b30      	ldr	r3, [pc, #192]	; (40a188 <TemperatureRegulate+0x80c>)
  40a0c6:	4798      	blx	r3
  40a0c8:	2801      	cmp	r0, #1
  40a0ca:	d002      	beq.n	40a0d2 <TemperatureRegulate+0x756>
  40a0cc:	4b32      	ldr	r3, [pc, #200]	; (40a198 <TemperatureRegulate+0x81c>)
  40a0ce:	781b      	ldrb	r3, [r3, #0]
  40a0d0:	b12b      	cbz	r3, 40a0de <TemperatureRegulate+0x762>
            TAG_DigitAccessoryOff(ACC_I2C_HEATER); 
  40a0d2:	2000      	movs	r0, #0
  40a0d4:	4b2d      	ldr	r3, [pc, #180]	; (40a18c <TemperatureRegulate+0x810>)
  40a0d6:	4798      	blx	r3
			if ( info_SSR > 0)
  40a0d8:	4b2f      	ldr	r3, [pc, #188]	; (40a198 <TemperatureRegulate+0x81c>)
  40a0da:	781b      	ldrb	r3, [r3, #0]
  40a0dc:	b97b      	cbnz	r3, 40a0fe <TemperatureRegulate+0x782>
         persist_Temp_heater_off = 0; 
  40a0de:	2200      	movs	r2, #0
  40a0e0:	4b30      	ldr	r3, [pc, #192]	; (40a1a4 <TemperatureRegulate+0x828>)
  40a0e2:	601a      	str	r2, [r3, #0]
  40a0e4:	e4c9      	b.n	409a7a <TemperatureRegulate+0xfe>
            TAG_DigitAccessoryOn(ACC_I2C_HEATER);
  40a0e6:	2000      	movs	r0, #0
  40a0e8:	4b25      	ldr	r3, [pc, #148]	; (40a180 <TemperatureRegulate+0x804>)
  40a0ea:	4798      	blx	r3
			write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 100);
  40a0ec:	2164      	movs	r1, #100	; 0x64
  40a0ee:	2096      	movs	r0, #150	; 0x96
  40a0f0:	4b2a      	ldr	r3, [pc, #168]	; (40a19c <TemperatureRegulate+0x820>)
  40a0f2:	4798      	blx	r3
  40a0f4:	e4c1      	b.n	409a7a <TemperatureRegulate+0xfe>
            persist_Temp_heater_off = 0;        
  40a0f6:	2200      	movs	r2, #0
  40a0f8:	4b2a      	ldr	r3, [pc, #168]	; (40a1a4 <TemperatureRegulate+0x828>)
  40a0fa:	601a      	str	r2, [r3, #0]
  40a0fc:	e4bd      	b.n	409a7a <TemperatureRegulate+0xfe>
	        write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 0);
  40a0fe:	2100      	movs	r1, #0
  40a100:	2096      	movs	r0, #150	; 0x96
  40a102:	4b26      	ldr	r3, [pc, #152]	; (40a19c <TemperatureRegulate+0x820>)
  40a104:	4798      	blx	r3
  40a106:	e7ea      	b.n	40a0de <TemperatureRegulate+0x762>
      TAG_DigitAccessoryOff(ACC_I2C_HEATER);
  40a108:	2000      	movs	r0, #0
  40a10a:	4b20      	ldr	r3, [pc, #128]	; (40a18c <TemperatureRegulate+0x810>)
  40a10c:	4798      	blx	r3
       if (info_SSR > 0)
  40a10e:	4b22      	ldr	r3, [pc, #136]	; (40a198 <TemperatureRegulate+0x81c>)
  40a110:	781b      	ldrb	r3, [r3, #0]
  40a112:	bb13      	cbnz	r3, 40a15a <TemperatureRegulate+0x7de>
      if(DigitAccessoryOperating(ACC_I2C_COOLER))
  40a114:	2001      	movs	r0, #1
  40a116:	4b1e      	ldr	r3, [pc, #120]	; (40a190 <TemperatureRegulate+0x814>)
  40a118:	4798      	blx	r3
  40a11a:	b338      	cbz	r0, 40a16c <TemperatureRegulate+0x7f0>
   soglia_On_Cooler  = SetPointTemp + (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Cold[1])); 
  40a11c:	fa46 f385 	sxtab	r3, r6, r5
        if((TempRif >= soglia_On_Cooler) && (sData.measure_Temp[I_PROBE_FRESH] > (sData.measure_Temp[I_PROBE_RETURN] - 40))) 
  40a120:	b21b      	sxth	r3, r3
  40a122:	429f      	cmp	r7, r3
  40a124:	db07      	blt.n	40a136 <TemperatureRegulate+0x7ba>
  40a126:	4b17      	ldr	r3, [pc, #92]	; (40a184 <TemperatureRegulate+0x808>)
  40a128:	f9b3 21cd 	ldrsh.w	r2, [r3, #461]	; 0x1cd
  40a12c:	f9b3 31cf 	ldrsh.w	r3, [r3, #463]	; 0x1cf
  40a130:	3b28      	subs	r3, #40	; 0x28
  40a132:	429a      	cmp	r2, r3
  40a134:	dc16      	bgt.n	40a164 <TemperatureRegulate+0x7e8>
   soglia_Off_Cooler = SetPointTemp + (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Cold[0]));
  40a136:	fa46 f38a 	sxtab	r3, r6, sl
        else if ((TempRif < soglia_Off_Cooler) || (sData.measure_Temp[I_PROBE_FRESH] < (sData.measure_Temp[I_PROBE_RETURN] - 50))) 
  40a13a:	b21b      	sxth	r3, r3
  40a13c:	429f      	cmp	r7, r3
  40a13e:	db08      	blt.n	40a152 <TemperatureRegulate+0x7d6>
  40a140:	4b10      	ldr	r3, [pc, #64]	; (40a184 <TemperatureRegulate+0x808>)
  40a142:	f9b3 21cd 	ldrsh.w	r2, [r3, #461]	; 0x1cd
  40a146:	f9b3 31cf 	ldrsh.w	r3, [r3, #463]	; 0x1cf
  40a14a:	3b32      	subs	r3, #50	; 0x32
  40a14c:	429a      	cmp	r2, r3
  40a14e:	f6bf ac94 	bge.w	409a7a <TemperatureRegulate+0xfe>
          TAG_DigitAccessoryOff(ACC_I2C_COOLER);
  40a152:	2001      	movs	r0, #1
  40a154:	4b0d      	ldr	r3, [pc, #52]	; (40a18c <TemperatureRegulate+0x810>)
  40a156:	4798      	blx	r3
  40a158:	e48f      	b.n	409a7a <TemperatureRegulate+0xfe>
		  write_byte_eeprom(ADDR_EEP(Set_EHD_mod), 0); 
  40a15a:	2100      	movs	r1, #0
  40a15c:	2096      	movs	r0, #150	; 0x96
  40a15e:	4b0f      	ldr	r3, [pc, #60]	; (40a19c <TemperatureRegulate+0x820>)
  40a160:	4798      	blx	r3
  40a162:	e7d7      	b.n	40a114 <TemperatureRegulate+0x798>
          TAG_DigitAccessoryOn(ACC_I2C_COOLER);
  40a164:	2001      	movs	r0, #1
  40a166:	4b06      	ldr	r3, [pc, #24]	; (40a180 <TemperatureRegulate+0x804>)
  40a168:	4798      	blx	r3
  40a16a:	e486      	b.n	409a7a <TemperatureRegulate+0xfe>
        if(DigitAccessoryOn(ACC_I2C_COOLER) == 1)
  40a16c:	2001      	movs	r0, #1
  40a16e:	4b06      	ldr	r3, [pc, #24]	; (40a188 <TemperatureRegulate+0x80c>)
  40a170:	4798      	blx	r3
  40a172:	2801      	cmp	r0, #1
  40a174:	f47f ac81 	bne.w	409a7a <TemperatureRegulate+0xfe>
          TAG_DigitAccessoryOff(ACC_I2C_COOLER); 
  40a178:	4b04      	ldr	r3, [pc, #16]	; (40a18c <TemperatureRegulate+0x810>)
  40a17a:	4798      	blx	r3
  40a17c:	e47d      	b.n	409a7a <TemperatureRegulate+0xfe>
  40a17e:	bf00      	nop
  40a180:	0040019d 	.word	0x0040019d
  40a184:	200013ac 	.word	0x200013ac
  40a188:	00400151 	.word	0x00400151
  40a18c:	004001d9 	.word	0x004001d9
  40a190:	0040012d 	.word	0x0040012d
  40a194:	0040a26d 	.word	0x0040a26d
  40a198:	20000e8b 	.word	0x20000e8b
  40a19c:	0040a1fd 	.word	0x0040a1fd
  40a1a0:	00400175 	.word	0x00400175
  40a1a4:	20000df0 	.word	0x20000df0

0040a1a8 <CkUpdate_EepromToShadow>:
extern void eep_write_byte(unsigned int addr, Byte data_to_send);

//-----------------------------------------------------------------
// Dopo 12 secondi aggiorna i dati in eeprom. dalla shadow.
//-----------------------------------------------------------------
int CkUpdate_EepromToShadow (void) {
  40a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned int i=0;
  
  if(countdown_Update_EepromToShadow != 0xFF) {
  40a1aa:	4b10      	ldr	r3, [pc, #64]	; (40a1ec <CkUpdate_EepromToShadow+0x44>)
  40a1ac:	781b      	ldrb	r3, [r3, #0]
  40a1ae:	2bff      	cmp	r3, #255	; 0xff
  40a1b0:	d01a      	beq.n	40a1e8 <CkUpdate_EepromToShadow+0x40>
    if(countdown_Update_EepromToShadow)
  40a1b2:	b923      	cbnz	r3, 40a1be <CkUpdate_EepromToShadow+0x16>
  40a1b4:	4e0e      	ldr	r6, [pc, #56]	; (40a1f0 <CkUpdate_EepromToShadow+0x48>)
  40a1b6:	4d0f      	ldr	r5, [pc, #60]	; (40a1f4 <CkUpdate_EepromToShadow+0x4c>)
  40a1b8:	2400      	movs	r4, #0
      countdown_Update_EepromToShadow--;
    else {
      // timer scaduto, andiamo ad aggiornare l'eeprom
      for(i=0; i < 255; i++) {
        if(Shadow_eep_preview[i] != Shadow_eep[i]) {
           eep_write_byte(i,  Shadow_eep[i]); 
  40a1ba:	4f0f      	ldr	r7, [pc, #60]	; (40a1f8 <CkUpdate_EepromToShadow+0x50>)
  40a1bc:	e008      	b.n	40a1d0 <CkUpdate_EepromToShadow+0x28>
      countdown_Update_EepromToShadow--;
  40a1be:	3b01      	subs	r3, #1
  40a1c0:	4a0a      	ldr	r2, [pc, #40]	; (40a1ec <CkUpdate_EepromToShadow+0x44>)
  40a1c2:	7013      	strb	r3, [r2, #0]
  40a1c4:	e010      	b.n	40a1e8 <CkUpdate_EepromToShadow+0x40>
      for(i=0; i < 255; i++) {
  40a1c6:	3401      	adds	r4, #1
  40a1c8:	3601      	adds	r6, #1
  40a1ca:	3501      	adds	r5, #1
  40a1cc:	2cff      	cmp	r4, #255	; 0xff
  40a1ce:	d008      	beq.n	40a1e2 <CkUpdate_EepromToShadow+0x3a>
        if(Shadow_eep_preview[i] != Shadow_eep[i]) {
  40a1d0:	7829      	ldrb	r1, [r5, #0]
  40a1d2:	7833      	ldrb	r3, [r6, #0]
  40a1d4:	428b      	cmp	r3, r1
  40a1d6:	d0f6      	beq.n	40a1c6 <CkUpdate_EepromToShadow+0x1e>
           eep_write_byte(i,  Shadow_eep[i]); 
  40a1d8:	4620      	mov	r0, r4
  40a1da:	47b8      	blx	r7
           Shadow_eep_preview[i]  = Shadow_eep[i];
  40a1dc:	782b      	ldrb	r3, [r5, #0]
  40a1de:	7033      	strb	r3, [r6, #0]
  40a1e0:	e7f1      	b.n	40a1c6 <CkUpdate_EepromToShadow+0x1e>
        }         
      }  
        
      countdown_Update_EepromToShadow = 0xFF;  
  40a1e2:	22ff      	movs	r2, #255	; 0xff
  40a1e4:	4b01      	ldr	r3, [pc, #4]	; (40a1ec <CkUpdate_EepromToShadow+0x44>)
  40a1e6:	701a      	strb	r2, [r3, #0]
    }  
  }  
  
  return 1;
}
  40a1e8:	2001      	movs	r0, #1
  40a1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a1ec:	20000043 	.word	0x20000043
  40a1f0:	20001294 	.word	0x20001294
  40a1f4:	20001194 	.word	0x20001194
  40a1f8:	0040c005 	.word	0x0040c005

0040a1fc <write_byte_eeprom>:
// Scrivi 1 byte in eeprom
//-----------------------------------------------------------------
void write_byte_eeprom(unsigned short addr_eep, Byte val)
{
    addr_eep &= 0x0FF; 
    Shadow_eep[addr_eep] = val;
  40a1fc:	b2c0      	uxtb	r0, r0
  40a1fe:	4b03      	ldr	r3, [pc, #12]	; (40a20c <write_byte_eeprom+0x10>)
  40a200:	5419      	strb	r1, [r3, r0]
    // dopo 6 secondi aggiorniamo anche la eeprom.
    countdown_Update_EepromToShadow  = 6; 
  40a202:	2206      	movs	r2, #6
  40a204:	4b02      	ldr	r3, [pc, #8]	; (40a210 <write_byte_eeprom+0x14>)
  40a206:	701a      	strb	r2, [r3, #0]
  40a208:	4770      	bx	lr
  40a20a:	bf00      	nop
  40a20c:	20001194 	.word	0x20001194
  40a210:	20000043 	.word	0x20000043

0040a214 <write_word_eeprom>:

//-----------------------------------------------------------------
// Scrivi 2 byte in eeprom
//-----------------------------------------------------------------
 void write_word_eeprom(unsigned short addr_eep, unsigned short val_16)
 {
  40a214:	b410      	push	{r4}
    addr_eep &= 0x0FF; 
  40a216:	b2c0      	uxtb	r0, r0
    Shadow_eep[addr_eep] = val;
  40a218:	4b05      	ldr	r3, [pc, #20]	; (40a230 <write_word_eeprom+0x1c>)
    write_byte_eeprom(addr_eep, (Byte)(val_16 & 0x0FF));       // byte LOW
  40a21a:	5419      	strb	r1, [r3, r0]
    countdown_Update_EepromToShadow  = 6; 
  40a21c:	2406      	movs	r4, #6
  40a21e:	4a05      	ldr	r2, [pc, #20]	; (40a234 <write_word_eeprom+0x20>)
  40a220:	7014      	strb	r4, [r2, #0]
    write_byte_eeprom((addr_eep + 1), (Byte)(val_16 >> 8));    // byte  HI
  40a222:	3001      	adds	r0, #1
    Shadow_eep[addr_eep] = val;
  40a224:	b2c0      	uxtb	r0, r0
    write_byte_eeprom((addr_eep + 1), (Byte)(val_16 >> 8));    // byte  HI
  40a226:	0a09      	lsrs	r1, r1, #8
  40a228:	5419      	strb	r1, [r3, r0]
 }  
  40a22a:	bc10      	pop	{r4}
  40a22c:	4770      	bx	lr
  40a22e:	bf00      	nop
  40a230:	20001194 	.word	0x20001194
  40a234:	20000043 	.word	0x20000043

0040a238 <write_Dword_eeprom>:
 
//-----------------------------------------------------------------
// Scrivi 4 byte in eeprom
//----------------------------------------------------------------- 
void write_Dword_eeprom(unsigned short addr_eep, unsigned long val_32)
{
  40a238:	b410      	push	{r4}
    addr_eep &= 0x0FF; 
  40a23a:	b2c0      	uxtb	r0, r0
    Shadow_eep[addr_eep] = val;
  40a23c:	4b09      	ldr	r3, [pc, #36]	; (40a264 <write_Dword_eeprom+0x2c>)
    write_byte_eeprom(addr_eep, (Byte)(val_32 & 0x00000FF));       // byte LOW
  40a23e:	5419      	strb	r1, [r3, r0]
    countdown_Update_EepromToShadow  = 6; 
  40a240:	2406      	movs	r4, #6
  40a242:	4a09      	ldr	r2, [pc, #36]	; (40a268 <write_Dword_eeprom+0x30>)
  40a244:	7014      	strb	r4, [r2, #0]
    write_byte_eeprom((addr_eep + 1), (Byte)(val_32 >> 8));
  40a246:	1c42      	adds	r2, r0, #1
    Shadow_eep[addr_eep] = val;
  40a248:	b2d2      	uxtb	r2, r2
    write_byte_eeprom((addr_eep + 1), (Byte)(val_32 >> 8));
  40a24a:	0a0c      	lsrs	r4, r1, #8
  40a24c:	549c      	strb	r4, [r3, r2]
    write_byte_eeprom((addr_eep + 2), (Byte)(val_32 >> 16));  
  40a24e:	1c82      	adds	r2, r0, #2
    Shadow_eep[addr_eep] = val;
  40a250:	b2d2      	uxtb	r2, r2
    write_byte_eeprom((addr_eep + 2), (Byte)(val_32 >> 16));  
  40a252:	0c0c      	lsrs	r4, r1, #16
  40a254:	549c      	strb	r4, [r3, r2]
    write_byte_eeprom((addr_eep + 3), (Byte)(val_32 >> 24));  
  40a256:	3003      	adds	r0, #3
    Shadow_eep[addr_eep] = val;
  40a258:	b2c0      	uxtb	r0, r0
    write_byte_eeprom((addr_eep + 3), (Byte)(val_32 >> 24));  
  40a25a:	0e09      	lsrs	r1, r1, #24
  40a25c:	5419      	strb	r1, [r3, r0]
}
  40a25e:	bc10      	pop	{r4}
  40a260:	4770      	bx	lr
  40a262:	bf00      	nop
  40a264:	20001194 	.word	0x20001194
  40a268:	20000043 	.word	0x20000043

0040a26c <read_byte_eeprom>:
// Leggi 1 byte dalla eeprom
//-----------------------------------------------------------------
 Byte read_byte_eeprom(unsigned short addr_eep)
 {
    addr_eep &= 0x0FF; 
    return Shadow_eep[addr_eep]; 
  40a26c:	b2c0      	uxtb	r0, r0
 }   
  40a26e:	4b01      	ldr	r3, [pc, #4]	; (40a274 <read_byte_eeprom+0x8>)
  40a270:	5c18      	ldrb	r0, [r3, r0]
  40a272:	4770      	bx	lr
  40a274:	20001194 	.word	0x20001194

0040a278 <read_word_eeprom>:
//-----------------------------------------------------------------
 unsigned short read_word_eeprom(unsigned short addr_eep)
 {
   unsigned short val_16 = 0;
   
   addr_eep &= 0x0FF; 
  40a278:	b2c2      	uxtb	r2, r0
    return Shadow_eep[addr_eep]; 
  40a27a:	4904      	ldr	r1, [pc, #16]	; (40a28c <read_word_eeprom+0x14>)
   val_16 = read_byte_eeprom(addr_eep);
   val_16 |= ((unsigned short)read_byte_eeprom(addr_eep+1) << 8);
  40a27c:	1c53      	adds	r3, r2, #1
    return Shadow_eep[addr_eep]; 
  40a27e:	b2db      	uxtb	r3, r3
   val_16 |= ((unsigned short)read_byte_eeprom(addr_eep+1) << 8);
  40a280:	5cc8      	ldrb	r0, [r1, r3]
  40a282:	5c8b      	ldrb	r3, [r1, r2]
   
   return val_16; 
 }   
  40a284:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  40a288:	4770      	bx	lr
  40a28a:	bf00      	nop
  40a28c:	20001194 	.word	0x20001194

0040a290 <read_Dword_eeprom>:
 
//-----------------------------------------------------------------
// Leggi 4 byte dalla eeprom, il primo è quello LOW, per poi salire
//-----------------------------------------------------------------
 unsigned long int read_Dword_eeprom(unsigned short addr_eep)
 {
  40a290:	b410      	push	{r4}
   unsigned long int val_32 = 0;
   
   addr_eep &= 0x0FF; 
  40a292:	b2c2      	uxtb	r2, r0
    return Shadow_eep[addr_eep]; 
  40a294:	4907      	ldr	r1, [pc, #28]	; (40a2b4 <read_Dword_eeprom+0x24>)
   val_32 = (unsigned long)read_byte_eeprom(addr_eep) & 0x0FF;
   val_32 |= (((unsigned long)read_byte_eeprom(addr_eep+1) <<  8) & 0x0000FF00);
   val_32 |= (((unsigned long)read_byte_eeprom(addr_eep+2) << 16) & 0x00FF0000);
  40a296:	1c93      	adds	r3, r2, #2
    return Shadow_eep[addr_eep]; 
  40a298:	b2db      	uxtb	r3, r3
   val_32 |= (((unsigned long)read_byte_eeprom(addr_eep+2) << 16) & 0x00FF0000);
  40a29a:	5cc8      	ldrb	r0, [r1, r3]
   val_32 |= (((unsigned long)read_byte_eeprom(addr_eep+1) <<  8) & 0x0000FF00);
  40a29c:	1c53      	adds	r3, r2, #1
    return Shadow_eep[addr_eep]; 
  40a29e:	b2db      	uxtb	r3, r3
   val_32 |= (((unsigned long)read_byte_eeprom(addr_eep+1) <<  8) & 0x0000FF00);
  40a2a0:	5ccc      	ldrb	r4, [r1, r3]
   val_32 = (unsigned long)read_byte_eeprom(addr_eep) & 0x0FF;
  40a2a2:	5c8b      	ldrb	r3, [r1, r2]
  40a2a4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  40a2a8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   val_32 |= (((unsigned long)read_byte_eeprom(addr_eep+2) << 24) & 0xFF000000);
   
   return val_32; 
 }   
  40a2ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40a2b0:	bc10      	pop	{r4}
  40a2b2:	4770      	bx	lr
  40a2b4:	20001194 	.word	0x20001194

0040a2b8 <upgrade_type_func>:
    return Shadow_eep[addr_eep]; 
  40a2b8:	4b06      	ldr	r3, [pc, #24]	; (40a2d4 <upgrade_type_func+0x1c>)
   for(i=0; i <= 3; i++)
      size_unit[i] = read_byte_eeprom(ADDR_EEP(SerialString[4+i]));
   
   //  bit[7]:CAF | bit[6]:CAP | bit[5]:CSF | ...
   // al momento solo le unità serie 5 utilizzano la funz. CAP/CAF. 
   if(size_unit[3] != '5')
  40a2ba:	7c9b      	ldrb	r3, [r3, #18]
  40a2bc:	2b35      	cmp	r3, #53	; 0x35
     msk &= 0x3F;
  40a2be:	bf0c      	ite	eq
  40a2c0:	22ff      	moveq	r2, #255	; 0xff
  40a2c2:	223f      	movne	r2, #63	; 0x3f
    Shadow_eep[addr_eep] = val;
  40a2c4:	4b03      	ldr	r3, [pc, #12]	; (40a2d4 <upgrade_type_func+0x1c>)
  40a2c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    countdown_Update_EepromToShadow  = 6; 
  40a2ca:	2206      	movs	r2, #6
  40a2cc:	4b02      	ldr	r3, [pc, #8]	; (40a2d8 <upgrade_type_func+0x20>)
  40a2ce:	701a      	strb	r2, [r3, #0]
  40a2d0:	4770      	bx	lr
  40a2d2:	bf00      	nop
  40a2d4:	20001194 	.word	0x20001194
  40a2d8:	20000043 	.word	0x20000043

0040a2dc <check_control_speed_func>:
//   Andiamo a vedere la funzionalita dell' unità (CAP/CAF/CSF) e, 
//   facciamo le varie considerazioni in base all'accessorio configuato,
//   al tipo di motore e alle mappature inserite.
//------------------------------------------------------------------
 void check_control_speed_func()
 {
  40a2dc:	b570      	push	{r4, r5, r6, lr}
    Byte acc_cap, acc_caf, temp, msk, type_func, serie_unit;
   
    // -------------- bit: Enab_Fuction ----------------
    //  (LOW)  bit[7]:CAF  | bit[6]:CAP  | bit[5]:FSC    | bit[4]:ImbalanON   | bit[3]:StepLess | bit[2]:WeeklyON | bit[1]:BoostON   | bit[0]:DeFrostON. 
    //  (HIGH) bit[15]:--- | bit[14]:--- | bit[13]:---   | bit[12]:EnPreHeater| bit[11]:EnSummer| bit[10]:EnWinter| bit[9]:CtrlFilter| bit[8]:Password    
    enab_func     = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  40a2de:	202e      	movs	r0, #46	; 0x2e
  40a2e0:	4c47      	ldr	r4, [pc, #284]	; (40a400 <check_control_speed_func+0x124>)
  40a2e2:	47a0      	blx	r4
  40a2e4:	4606      	mov	r6, r0
    msk_enab_func = read_word_eeprom(ADDR_EEP(msk_Enab_Fuction));
  40a2e6:	2030      	movs	r0, #48	; 0x30
  40a2e8:	47a0      	blx	r4
    return Shadow_eep[addr_eep]; 
  40a2ea:	4b46      	ldr	r3, [pc, #280]	; (40a404 <check_control_speed_func+0x128>)
         
    new_enab_func     = enab_func; 
    new_msk_enab_func = msk_enab_func;

 
    if(type_func == 0) 
  40a2ec:	785b      	ldrb	r3, [r3, #1]
  40a2ee:	2b00      	cmp	r3, #0
  40a2f0:	d136      	bne.n	40a360 <check_control_speed_func+0x84>
    {
        //*************   
        //**  BASIC  **
        //*************   
        // Funz. BASIC, non è possibile in alcun modo abilitare le funz. CAP/CAF
        new_enab_func &= ~0x00C0; // tolgo la possibilità di far funzione CAP e CAF
  40a2f2:	f026 04c0 	bic.w	r4, r6, #192	; 0xc0
  40a2f6:	b2a4      	uxth	r4, r4
        new_msk_enab_func &= ~0x00C0; // tolgo la possibilità di far funzione CAP e CAF
  40a2f8:	f020 01c0 	bic.w	r1, r0, #192	; 0xc0
  40a2fc:	b289      	uxth	r1, r1
        new_msk_enab_func |= 0x0020;
  40a2fe:	f041 0120 	orr.w	r1, r1, #32
         
    }
    
    // Se dopo tutte le varie masturbazioni mentali, risulta che nessun controllo è stato inserito, andiamo con quello di default: FSC
	// If after all the various mental masturbations, it turns out that no controls have been inserted, we go with the default one: FSC
    if((new_enab_func & 0x00C0) == 0)
  40a302:	f014 0fc0 	tst.w	r4, #192	; 0xc0
       new_enab_func |= (1 << ENAB_CSF);
  40a306:	bf04      	itt	eq
  40a308:	f044 0420 	orreq.w	r4, r4, #32
  40a30c:	b2a4      	uxtheq	r4, r4
       
    temp =0;
    
    if(new_msk_enab_func != msk_enab_func) { 
  40a30e:	4281      	cmp	r1, r0
  40a310:	d044      	beq.n	40a39c <check_control_speed_func+0xc0>
       i = ADDR_EEP(msk_Enab_Fuction);
       eep_write_byte(i,  (Byte)new_msk_enab_func); 
  40a312:	b2cd      	uxtb	r5, r1
  40a314:	4629      	mov	r1, r5
  40a316:	2030      	movs	r0, #48	; 0x30
  40a318:	4b3b      	ldr	r3, [pc, #236]	; (40a408 <check_control_speed_func+0x12c>)
  40a31a:	4798      	blx	r3
       Shadow_eep[i] = (Byte)new_msk_enab_func;
  40a31c:	4b39      	ldr	r3, [pc, #228]	; (40a404 <check_control_speed_func+0x128>)
  40a31e:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
       Shadow_eep_preview[i] = (Byte)new_msk_enab_func;    
  40a322:	4b3a      	ldr	r3, [pc, #232]	; (40a40c <check_control_speed_func+0x130>)
  40a324:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
       temp =1;          
    }   
    
    if(new_enab_func != enab_func) {
  40a328:	42b4      	cmp	r4, r6
  40a32a:	d00a      	beq.n	40a342 <check_control_speed_func+0x66>
       i = ADDR_EEP(Enab_Fuction);
       eep_write_byte(i,  (Byte)new_enab_func); 
  40a32c:	b2e4      	uxtb	r4, r4
  40a32e:	4621      	mov	r1, r4
  40a330:	202e      	movs	r0, #46	; 0x2e
  40a332:	4b35      	ldr	r3, [pc, #212]	; (40a408 <check_control_speed_func+0x12c>)
  40a334:	4798      	blx	r3
       Shadow_eep[i] = (Byte)new_enab_func;
  40a336:	4b33      	ldr	r3, [pc, #204]	; (40a404 <check_control_speed_func+0x128>)
  40a338:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
       Shadow_eep_preview[i]  = (Byte)new_enab_func;   
  40a33c:	4b33      	ldr	r3, [pc, #204]	; (40a40c <check_control_speed_func+0x130>)
  40a33e:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
    return Shadow_eep[addr_eep]; 
  40a342:	4d30      	ldr	r5, [pc, #192]	; (40a404 <check_control_speed_func+0x128>)
      
    // aggiornamento del contatore delle info
    if(temp) {
       i = ADDR_EEP(cntUpdate_info); 
       temp = read_byte_eeprom(i);
       temp++;   
  40a344:	f895 403a 	ldrb.w	r4, [r5, #58]	; 0x3a
  40a348:	3401      	adds	r4, #1
  40a34a:	b2e4      	uxtb	r4, r4
       eep_write_byte(i,  (Byte)temp); 
  40a34c:	4621      	mov	r1, r4
  40a34e:	203a      	movs	r0, #58	; 0x3a
  40a350:	4b2d      	ldr	r3, [pc, #180]	; (40a408 <check_control_speed_func+0x12c>)
  40a352:	4798      	blx	r3
       Shadow_eep[i] = (Byte)temp;
  40a354:	f885 403a 	strb.w	r4, [r5, #58]	; 0x3a
       Shadow_eep_preview[i]  = (Byte)temp;      
  40a358:	4b2c      	ldr	r3, [pc, #176]	; (40a40c <check_control_speed_func+0x130>)
  40a35a:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
    } 
 
 }  
  40a35e:	bd70      	pop	{r4, r5, r6, pc}
    return Shadow_eep[addr_eep]; 
  40a360:	4b28      	ldr	r3, [pc, #160]	; (40a404 <check_control_speed_func+0x128>)
  40a362:	7c9a      	ldrb	r2, [r3, #18]
  40a364:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
        if(temp & msk){
  40a368:	f013 0f20 	tst.w	r3, #32
  40a36c:	d019      	beq.n	40a3a2 <check_control_speed_func+0xc6>
          new_msk_enab_func |= 0x00C0;
  40a36e:	f040 01c0 	orr.w	r1, r0, #192	; 0xc0
  40a372:	b289      	uxth	r1, r1
        if(temp & msk){
  40a374:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a378:	d13d      	bne.n	40a3f6 <check_control_speed_func+0x11a>
        if(!acc_caf && (serie_unit != '5') && (serie_unit != '8')) 
  40a37a:	2a35      	cmp	r2, #53	; 0x35
  40a37c:	d00c      	beq.n	40a398 <check_control_speed_func+0xbc>
  40a37e:	2a38      	cmp	r2, #56	; 0x38
  40a380:	d008      	beq.n	40a394 <check_control_speed_func+0xb8>
    new_enab_func     = enab_func; 
  40a382:	4634      	mov	r4, r6
           new_enab_func &= ~0x0080; // NO CAF in eep
  40a384:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40a388:	b2a4      	uxth	r4, r4
  40a38a:	e01a      	b.n	40a3c2 <check_control_speed_func+0xe6>
    new_enab_func     = enab_func; 
  40a38c:	4634      	mov	r4, r6
  40a38e:	e018      	b.n	40a3c2 <check_control_speed_func+0xe6>
  40a390:	4634      	mov	r4, r6
  40a392:	e016      	b.n	40a3c2 <check_control_speed_func+0xe6>
  40a394:	4634      	mov	r4, r6
  40a396:	e014      	b.n	40a3c2 <check_control_speed_func+0xe6>
  40a398:	4634      	mov	r4, r6
  40a39a:	e012      	b.n	40a3c2 <check_control_speed_func+0xe6>
    if(new_enab_func != enab_func) {
  40a39c:	42b4      	cmp	r4, r6
  40a39e:	d1c5      	bne.n	40a32c <check_control_speed_func+0x50>
  40a3a0:	bd70      	pop	{r4, r5, r6, pc}
        if(temp & msk){
  40a3a2:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a3a6:	d023      	beq.n	40a3f0 <check_control_speed_func+0x114>
          new_msk_enab_func |= 0x0080;
  40a3a8:	f040 0180 	orr.w	r1, r0, #128	; 0x80
  40a3ac:	b289      	uxth	r1, r1
          acc_caf = 1;
  40a3ae:	2301      	movs	r3, #1
        if(!acc_cap && (serie_unit != '5') && (serie_unit != '8'))
  40a3b0:	2a35      	cmp	r2, #53	; 0x35
  40a3b2:	d0eb      	beq.n	40a38c <check_control_speed_func+0xb0>
  40a3b4:	2a38      	cmp	r2, #56	; 0x38
  40a3b6:	d0eb      	beq.n	40a390 <check_control_speed_func+0xb4>
           new_enab_func &= ~0x0040; // NO CAP in eep 
  40a3b8:	f026 0440 	bic.w	r4, r6, #64	; 0x40
  40a3bc:	b2a4      	uxth	r4, r4
        if(!acc_caf && (serie_unit != '5') && (serie_unit != '8')) 
  40a3be:	2b00      	cmp	r3, #0
  40a3c0:	d0e0      	beq.n	40a384 <check_control_speed_func+0xa8>
        if (enab_func & (1 << ENAB_CAP)) 
  40a3c2:	f016 0f40 	tst.w	r6, #64	; 0x40
  40a3c6:	d007      	beq.n	40a3d8 <check_control_speed_func+0xfc>
           if((new_msk_enab_func  & (1 << ENAB_CAP)) == 0)
  40a3c8:	f011 0f40 	tst.w	r1, #64	; 0x40
           new_enab_func &= ~0x0080; // NO CAF in eep
  40a3cc:	bf14      	ite	ne
  40a3ce:	f024 0480 	bicne.w	r4, r4, #128	; 0x80
             new_enab_func &= ~0x0040; // NO CAP in eep  
  40a3d2:	f024 04c0 	biceq.w	r4, r4, #192	; 0xc0
  40a3d6:	b2a4      	uxth	r4, r4
        if (enab_func & (1 << ENAB_CAF)) 
  40a3d8:	f016 0f80 	tst.w	r6, #128	; 0x80
  40a3dc:	d091      	beq.n	40a302 <check_control_speed_func+0x26>
          if((new_msk_enab_func  & (1 << ENAB_CAF)) == 0)
  40a3de:	f011 0f80 	tst.w	r1, #128	; 0x80
          new_enab_func &= ~0x0040; // NO CAP in eep
  40a3e2:	bf14      	ite	ne
  40a3e4:	f024 0440 	bicne.w	r4, r4, #64	; 0x40
             new_enab_func &= ~0x0080;
  40a3e8:	f024 04c0 	biceq.w	r4, r4, #192	; 0xc0
  40a3ec:	b2a4      	uxth	r4, r4
  40a3ee:	e788      	b.n	40a302 <check_control_speed_func+0x26>
    new_msk_enab_func = msk_enab_func;
  40a3f0:	4601      	mov	r1, r0
        acc_caf = 0;
  40a3f2:	2300      	movs	r3, #0
  40a3f4:	e7dc      	b.n	40a3b0 <check_control_speed_func+0xd4>
          new_msk_enab_func |= 0x0080;
  40a3f6:	f040 01c0 	orr.w	r1, r0, #192	; 0xc0
  40a3fa:	b289      	uxth	r1, r1
    new_enab_func     = enab_func; 
  40a3fc:	4634      	mov	r4, r6
  40a3fe:	e7e0      	b.n	40a3c2 <check_control_speed_func+0xe6>
  40a400:	0040a279 	.word	0x0040a279
  40a404:	20001194 	.word	0x20001194
  40a408:	0040c005 	.word	0x0040c005
  40a40c:	20001294 	.word	0x20001294

0040a410 <check_control_speed_func1>:
 
 void check_control_speed_func1()
 {
  40a410:	b570      	push	{r4, r5, r6, lr}
    Byte acc_cap, acc_caf, temp, msk, type_func, serie_unit;
   
    // -------------- bit: Enab_Fuction ----------------
    //  (LOW)  bit[7]:CAF  | bit[6]:CAP  | bit[5]:FSC    | bit[4]:ImbalanON   | bit[3]:StepLess | bit[2]:WeeklyON | bit[1]:BoostON   | bit[0]:DeFrostON. 
    //  (HIGH) bit[15]:--- | bit[14]:--- | bit[13]:---   | bit[12]:EnPreHeater| bit[11]:EnSummer| bit[10]:EnWinter| bit[9]:CtrlFilter| bit[8]:Password    
    enab_func     = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  40a412:	202e      	movs	r0, #46	; 0x2e
  40a414:	4c23      	ldr	r4, [pc, #140]	; (40a4a4 <check_control_speed_func1+0x94>)
  40a416:	47a0      	blx	r4
  40a418:	4606      	mov	r6, r0
    msk_enab_func = read_word_eeprom(ADDR_EEP(msk_Enab_Fuction));
  40a41a:	2030      	movs	r0, #48	; 0x30
  40a41c:	47a0      	blx	r4
    return Shadow_eep[addr_eep]; 
  40a41e:	4b22      	ldr	r3, [pc, #136]	; (40a4a8 <check_control_speed_func1+0x98>)
         
    new_enab_func     = enab_func; 
    new_msk_enab_func = msk_enab_func;

 
    if(type_func == 0) 
  40a420:	785b      	ldrb	r3, [r3, #1]
  40a422:	2b00      	cmp	r3, #0
  40a424:	d136      	bne.n	40a494 <check_control_speed_func1+0x84>
    {
        //*************   
        //**  BASIC  **
        //*************   
        // Funz. BASIC, non è possibile in alcun modo abilitare le funz. CAP/CAF
        new_enab_func &= ~0x00C0; // tolgo la possibilità di far funzione CAP e CAF
  40a426:	f026 04c0 	bic.w	r4, r6, #192	; 0xc0
  40a42a:	b2a4      	uxth	r4, r4
        new_msk_enab_func &= ~0x00C0; // tolgo la possibilità di far funzione CAP e CAF
  40a42c:	f020 01c0 	bic.w	r1, r0, #192	; 0xc0
  40a430:	b289      	uxth	r1, r1
        new_msk_enab_func |= 0x0020;
  40a432:	f041 0120 	orr.w	r1, r1, #32
         
    }
    
    // Se dopo tutte le varie masturbazioni mentali, risulta che nessun controllo è stato inserito, andiamo con quello di default: FSC
	// If after all the various mental masturbations, it turns out that no controls have been inserted, we go with the default one: FSC
    if((new_enab_func & 0x00C0) == 0)
  40a436:	f014 0fc0 	tst.w	r4, #192	; 0xc0
       new_enab_func |= (1 << ENAB_CSF);
  40a43a:	bf04      	itt	eq
  40a43c:	f044 0420 	orreq.w	r4, r4, #32
  40a440:	b2a4      	uxtheq	r4, r4
       
    temp =0;
    
    if(new_msk_enab_func != msk_enab_func) { 
  40a442:	4281      	cmp	r1, r0
  40a444:	d02b      	beq.n	40a49e <check_control_speed_func1+0x8e>
       i = ADDR_EEP(msk_Enab_Fuction);
       eep_write_byte(i,  (Byte)new_msk_enab_func); 
  40a446:	b2cd      	uxtb	r5, r1
  40a448:	4629      	mov	r1, r5
  40a44a:	2030      	movs	r0, #48	; 0x30
  40a44c:	4b17      	ldr	r3, [pc, #92]	; (40a4ac <check_control_speed_func1+0x9c>)
  40a44e:	4798      	blx	r3
       Shadow_eep[i] = (Byte)new_msk_enab_func;
  40a450:	4b15      	ldr	r3, [pc, #84]	; (40a4a8 <check_control_speed_func1+0x98>)
  40a452:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
       Shadow_eep_preview[i] = (Byte)new_msk_enab_func;    
  40a456:	4b16      	ldr	r3, [pc, #88]	; (40a4b0 <check_control_speed_func1+0xa0>)
  40a458:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
       temp =1;          
    }   
    
    if(new_enab_func != enab_func) {
  40a45c:	42b4      	cmp	r4, r6
  40a45e:	d00a      	beq.n	40a476 <check_control_speed_func1+0x66>
       i = ADDR_EEP(Enab_Fuction);
       eep_write_byte(i,  (Byte)new_enab_func); 
  40a460:	b2e4      	uxtb	r4, r4
  40a462:	4621      	mov	r1, r4
  40a464:	202e      	movs	r0, #46	; 0x2e
  40a466:	4b11      	ldr	r3, [pc, #68]	; (40a4ac <check_control_speed_func1+0x9c>)
  40a468:	4798      	blx	r3
       Shadow_eep[i] = (Byte)new_enab_func;
  40a46a:	4b0f      	ldr	r3, [pc, #60]	; (40a4a8 <check_control_speed_func1+0x98>)
  40a46c:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
       Shadow_eep_preview[i]  = (Byte)new_enab_func;   
  40a470:	4b0f      	ldr	r3, [pc, #60]	; (40a4b0 <check_control_speed_func1+0xa0>)
  40a472:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
    return Shadow_eep[addr_eep]; 
  40a476:	4d0c      	ldr	r5, [pc, #48]	; (40a4a8 <check_control_speed_func1+0x98>)
      
    // aggiornamento del contatore delle info
    if(temp) {
       i = ADDR_EEP(cntUpdate_info); 
       temp = read_byte_eeprom(i);
       temp++;   
  40a478:	f895 403a 	ldrb.w	r4, [r5, #58]	; 0x3a
  40a47c:	3401      	adds	r4, #1
  40a47e:	b2e4      	uxtb	r4, r4
       eep_write_byte(i,  (Byte)temp); 
  40a480:	4621      	mov	r1, r4
  40a482:	203a      	movs	r0, #58	; 0x3a
  40a484:	4b09      	ldr	r3, [pc, #36]	; (40a4ac <check_control_speed_func1+0x9c>)
  40a486:	4798      	blx	r3
       Shadow_eep[i] = (Byte)temp;
  40a488:	f885 403a 	strb.w	r4, [r5, #58]	; 0x3a
       Shadow_eep_preview[i]  = (Byte)temp;      
  40a48c:	4b08      	ldr	r3, [pc, #32]	; (40a4b0 <check_control_speed_func1+0xa0>)
  40a48e:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
    } 
 
 }  
  40a492:	bd70      	pop	{r4, r5, r6, pc}
		new_msk_enab_func |= 0x0040; // enable CAP
  40a494:	f040 0140 	orr.w	r1, r0, #64	; 0x40
  40a498:	b289      	uxth	r1, r1
    new_enab_func     = enab_func; 
  40a49a:	4634      	mov	r4, r6
  40a49c:	e7cb      	b.n	40a436 <check_control_speed_func1+0x26>
    if(new_enab_func != enab_func) {
  40a49e:	42b4      	cmp	r4, r6
  40a4a0:	d1de      	bne.n	40a460 <check_control_speed_func1+0x50>
  40a4a2:	bd70      	pop	{r4, r5, r6, pc}
  40a4a4:	0040a279 	.word	0x0040a279
  40a4a8:	20001194 	.word	0x20001194
  40a4ac:	0040c005 	.word	0x0040c005
  40a4b0:	20001294 	.word	0x20001294

0040a4b4 <ctrl_eeprom>:
 //       inizializza il chip eeprom. 
 //    2. Veriica i CKsum8 delle varie aree
 //    3. Carica i dati dalla eeprom alla Struttura in ram    
 //------------------------------------------------------------------
 void ctrl_eeprom()
 {
  40a4b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a4b8:	f8df 8328 	ldr.w	r8, [pc, #808]	; 40a7e4 <ctrl_eeprom+0x330>
  40a4bc:	f8df 9328 	ldr.w	r9, [pc, #808]	; 40a7e8 <ctrl_eeprom+0x334>
  40a4c0:	464e      	mov	r6, r9
  40a4c2:	4645      	mov	r5, r8
    unsigned short size_eep, enab_func;
	
    size_eep = ADDR_EEP(check_eeprom[1]) + 1;
    
    //----- (1) carichiamo la eeprom nel buffer in ram ----------------  
    for(i=0; i <= size_eep; i++) {
  40a4c4:	2400      	movs	r4, #0
      Shadow_eep[i] = eep_read_byte(i);         
  40a4c6:	4fad      	ldr	r7, [pc, #692]	; (40a77c <ctrl_eeprom+0x2c8>)
      if((i%32) == 0) 
        delay_ms (2);    
  40a4c8:	f243 7bce 	movw	fp, #14286	; 0x37ce
  40a4cc:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 40a784 <ctrl_eeprom+0x2d0>
  40a4d0:	e006      	b.n	40a4e0 <ctrl_eeprom+0x2c>
      Shadow_eep_preview[i]  = Shadow_eep[i];
  40a4d2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40a4d6:	f806 3f01 	strb.w	r3, [r6, #1]!
    for(i=0; i <= size_eep; i++) {
  40a4da:	3401      	adds	r4, #1
  40a4dc:	2cf2      	cmp	r4, #242	; 0xf2
  40a4de:	d008      	beq.n	40a4f2 <ctrl_eeprom+0x3e>
      Shadow_eep[i] = eep_read_byte(i);         
  40a4e0:	4620      	mov	r0, r4
  40a4e2:	47b8      	blx	r7
  40a4e4:	7068      	strb	r0, [r5, #1]
      if((i%32) == 0) 
  40a4e6:	f014 0f1f 	tst.w	r4, #31
  40a4ea:	d1f2      	bne.n	40a4d2 <ctrl_eeprom+0x1e>
        delay_ms (2);    
  40a4ec:	4658      	mov	r0, fp
  40a4ee:	47d0      	blx	sl
  40a4f0:	e7ef      	b.n	40a4d2 <ctrl_eeprom+0x1e>
    }  
    
    delay_ms (10);
  40a4f2:	48a3      	ldr	r0, [pc, #652]	; (40a780 <ctrl_eeprom+0x2cc>)
  40a4f4:	4ba3      	ldr	r3, [pc, #652]	; (40a784 <ctrl_eeprom+0x2d0>)
  40a4f6:	4798      	blx	r3
    addr[1] =  ADDR_EEP(numMotors);    
    addr[2] =  ADDR_EEP(check_eeprom[0]); 
    addr[3] =  ADDR_EEP(version_eeprom);
    
    LoadVectDefault = 0; 
    if(Shadow_eep[addr[0]] > 1)      // Type Fuctions: 0= BASIC, 1= EXTRA
  40a4f8:	4ba3      	ldr	r3, [pc, #652]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a4fa:	785a      	ldrb	r2, [r3, #1]
      LoadVectDefault = 1;
      
    if ((Shadow_eep[addr[1]] > 6) || (Shadow_eep[addr[1]] < 2))    // Num. Motors 
  40a4fc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
  40a500:	3b02      	subs	r3, #2
  40a502:	b2db      	uxtb	r3, r3
  40a504:	2b04      	cmp	r3, #4
  40a506:	f200 811d 	bhi.w	40a744 <ctrl_eeprom+0x290>
    LoadVectDefault = 0; 
  40a50a:	2a01      	cmp	r2, #1
  40a50c:	bf94      	ite	ls
  40a50e:	f04f 0b00 	movls.w	fp, #0
  40a512:	f04f 0b01 	movhi.w	fp, #1
      LoadVectDefault = 2;
      
    if ((Shadow_eep[addr[2]] != CHECK_EEP) && (Shadow_eep[addr[3]] != VERSION_EEP))   // ultimi 2 byte 
  40a516:	4b9c      	ldr	r3, [pc, #624]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a518:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
  40a51c:	2b45      	cmp	r3, #69	; 0x45
  40a51e:	f040 8119 	bne.w	40a754 <ctrl_eeprom+0x2a0>
      LoadVectDefault = 3;    
    
    // prima di cancellare l'eeprom, proviamo a rileggerla  
    if(LoadVectDefault)
  40a522:	f1bb 0f00 	cmp.w	fp, #0
  40a526:	f040 811d 	bne.w	40a764 <ctrl_eeprom+0x2b0>
        if((i%16)==0)
          delay_ms (2); 
      }  
      
    }else {
       if(read_byte_eeprom(ADDR_EEP(Type_func)) > 1) {
  40a52a:	2a01      	cmp	r2, #1
  40a52c:	d90a      	bls.n	40a544 <ctrl_eeprom+0x90>
    Shadow_eep[addr_eep] = val;
  40a52e:	2201      	movs	r2, #1
  40a530:	4b95      	ldr	r3, [pc, #596]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a532:	705a      	strb	r2, [r3, #1]
    countdown_Update_EepromToShadow  = 6; 
  40a534:	2206      	movs	r2, #6
  40a536:	4b95      	ldr	r3, [pc, #596]	; (40a78c <ctrl_eeprom+0x2d8>)
  40a538:	701a      	strb	r2, [r3, #0]
           // forziamo EXTRA
           write_byte_eeprom(ADDR_EEP(Type_func) , 1);
           write_word_eeprom(ADDR_EEP(msk_Enab_Fuction), 0xFFFF);       
  40a53a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40a53e:	2030      	movs	r0, #48	; 0x30
  40a540:	4b93      	ldr	r3, [pc, #588]	; (40a790 <ctrl_eeprom+0x2dc>)
  40a542:	4798      	blx	r3
    return Shadow_eep[addr_eep]; 
  40a544:	4b90      	ldr	r3, [pc, #576]	; (40a788 <ctrl_eeprom+0x2d4>)
       }  
       
       // dalla Ver 2.06 inpostostaimo la posizione delle sonde
       if(read_byte_eeprom(ADDR_EEP(Posiz_NTC)) == 0xFF) {
  40a546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  40a54a:	2bff      	cmp	r3, #255	; 0xff
  40a54c:	d069      	beq.n	40a622 <ctrl_eeprom+0x16e>
    return Shadow_eep[addr_eep]; 
  40a54e:	4b8e      	ldr	r3, [pc, #568]	; (40a788 <ctrl_eeprom+0x2d4>)
           Shadow_eep[i] = vect_default_eeprom[i];
           Shadow_eep_preview[i] = Shadow_eep[i];
       }  
       
       // dalla 2.12: gestiamo il modulo RFM, abbiamo cambiato un byte (era  progMotors = 'S'  non usato)
       if(read_byte_eeprom(ADDR_EEP(chWireless)) > 16){
  40a550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
  40a554:	2b10      	cmp	r3, #16
  40a556:	d870      	bhi.n	40a63a <ctrl_eeprom+0x186>
    return Shadow_eep[addr_eep]; 
  40a558:	4b8b      	ldr	r3, [pc, #556]	; (40a788 <ctrl_eeprom+0x2d4>)
           Shadow_eep[i] = 1;
           Shadow_eep_preview[i] = Shadow_eep[i];
       }  
       
       // dalla 2.16: impostiamo i 2 byte   (..., bit[5,4,3,2]: speed_regulator , bit[1]: 1= TempAmb=TR / TempAmb=TS, bit[0]: ***)
       if (read_byte_eeprom(ADDR_EEP(DeltaTemp_Supply)) > 200) 
  40a55a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  40a55e:	2bc8      	cmp	r3, #200	; 0xc8
  40a560:	d912      	bls.n	40a588 <ctrl_eeprom+0xd4>
       {
          // set_regulate_DXD;       
          // TempSup_hist_summer;    
          // TempSup_hist_winter;    
          for(i = ADDR_EEP(Ref_T_setting); i <= ADDR_EEP(DeltaTemp_Supply); i++) {
             eep_write_byte(i, vect_default_eeprom[i]);
  40a562:	210e      	movs	r1, #14
  40a564:	2094      	movs	r0, #148	; 0x94
  40a566:	4e8b      	ldr	r6, [pc, #556]	; (40a794 <ctrl_eeprom+0x2e0>)
  40a568:	47b0      	blx	r6
             Shadow_eep[i] =  vect_default_eeprom[i];
  40a56a:	4d87      	ldr	r5, [pc, #540]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a56c:	230e      	movs	r3, #14
  40a56e:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
             Shadow_eep_preview[i] = Shadow_eep[i];
  40a572:	4c89      	ldr	r4, [pc, #548]	; (40a798 <ctrl_eeprom+0x2e4>)
  40a574:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
             eep_write_byte(i, vect_default_eeprom[i]);
  40a578:	2178      	movs	r1, #120	; 0x78
  40a57a:	2095      	movs	r0, #149	; 0x95
  40a57c:	47b0      	blx	r6
             Shadow_eep[i] =  vect_default_eeprom[i];
  40a57e:	2378      	movs	r3, #120	; 0x78
  40a580:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
             Shadow_eep_preview[i] = Shadow_eep[i];
  40a584:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
      
       // dalla 2.17: i bits: ENAB_COOLING diventa ENAB_SUMMER 
       //                     ENAB_HEATING diventa ENAB_WINTER  
       // quindi non possono coesistere le 2 funzioni contemporaneamente.
       //  (HIGH) bit[15]:--- | bit[14]:--- | bit[13]:---   | bit[12]:EnPreHeater| bit[11]:EnSummer| bit[10]:EnWinter| bit[9]:CtrlFilter| bit[8]:Password  
       enab_func  = read_word_eeprom(ADDR_EEP(Enab_Fuction));  
  40a588:	202e      	movs	r0, #46	; 0x2e
  40a58a:	4b84      	ldr	r3, [pc, #528]	; (40a79c <ctrl_eeprom+0x2e8>)
  40a58c:	4798      	blx	r3
       if((enab_func & 0x0C00) == 0x0C00) {
  40a58e:	f400 6340 	and.w	r3, r0, #3072	; 0xc00
  40a592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
  40a596:	d05c      	beq.n	40a652 <ctrl_eeprom+0x19e>
  40a598:	4d81      	ldr	r5, [pc, #516]	; (40a7a0 <ctrl_eeprom+0x2ec>)
  40a59a:	4f82      	ldr	r7, [pc, #520]	; (40a7a4 <ctrl_eeprom+0x2f0>)
      for(i=0; i <= size_eep; i++){
  40a59c:	2406      	movs	r4, #6
    addr[1] =  ADDR_EEP(SW_Vers[4]); 
    
    for(i=addr[0]; i <= addr[1]; i++){
      if(Shadow_eep[i] != vect_default_eeprom[i])
      {
         eep_write_byte(i,  vect_default_eeprom[i]); 
  40a59e:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 40a794 <ctrl_eeprom+0x2e0>
         Shadow_eep[i] = vect_default_eeprom[i];
         Shadow_eep_preview[i]  = Shadow_eep[i];
  40a5a2:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 40a798 <ctrl_eeprom+0x2e4>
  40a5a6:	e067      	b.n	40a678 <ctrl_eeprom+0x1c4>
              if((i%16)== 0)
  40a5a8:	f014 0f0f 	tst.w	r4, #15
  40a5ac:	d012      	beq.n	40a5d4 <ctrl_eeprom+0x120>
       for(i=0; i <= size_eep; i++) {    
  40a5ae:	3401      	adds	r4, #1
  40a5b0:	3501      	adds	r5, #1
  40a5b2:	2cf2      	cmp	r4, #242	; 0xf2
  40a5b4:	f000 80a8 	beq.w	40a708 <ctrl_eeprom+0x254>
          flag = eep_read_byte(i);   
  40a5b8:	4620      	mov	r0, r4
  40a5ba:	47b0      	blx	r6
          if(Shadow_eep[i] != flag) {
  40a5bc:	782b      	ldrb	r3, [r5, #0]
  40a5be:	4283      	cmp	r3, r0
  40a5c0:	d0f2      	beq.n	40a5a8 <ctrl_eeprom+0xf4>
              delay_ms (2);
  40a5c2:	f243 70ce 	movw	r0, #14286	; 0x37ce
  40a5c6:	47b8      	blx	r7
              Shadow_eep[i] = eep_read_byte(i); 
  40a5c8:	4620      	mov	r0, r4
  40a5ca:	47b0      	blx	r6
  40a5cc:	7028      	strb	r0, [r5, #0]
              Shadow_eep_preview[i]  = Shadow_eep[i];
  40a5ce:	f804 000a 	strb.w	r0, [r4, sl]
  40a5d2:	e7ec      	b.n	40a5ae <ctrl_eeprom+0xfa>
                delay_ms (2);            
  40a5d4:	f243 70ce 	movw	r0, #14286	; 0x37ce
  40a5d8:	47b8      	blx	r7
  40a5da:	e7e8      	b.n	40a5ae <ctrl_eeprom+0xfa>
        Serial_print1("CK_CTRL:");
  40a5dc:	4872      	ldr	r0, [pc, #456]	; (40a7a8 <ctrl_eeprom+0x2f4>)
  40a5de:	4d73      	ldr	r5, [pc, #460]	; (40a7ac <ctrl_eeprom+0x2f8>)
  40a5e0:	47a8      	blx	r5
        Serial_print(Shadow_eep[addr[2]], HEX);
  40a5e2:	4c69      	ldr	r4, [pc, #420]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a5e4:	2110      	movs	r1, #16
  40a5e6:	f894 00ef 	ldrb.w	r0, [r4, #239]	; 0xef
  40a5ea:	4b71      	ldr	r3, [pc, #452]	; (40a7b0 <ctrl_eeprom+0x2fc>)
  40a5ec:	4798      	blx	r3
        Serial_print1(" "); 
  40a5ee:	4871      	ldr	r0, [pc, #452]	; (40a7b4 <ctrl_eeprom+0x300>)
  40a5f0:	47a8      	blx	r5
        Serial_println(Shadow_eep[addr[3]], HEX);
  40a5f2:	2110      	movs	r1, #16
  40a5f4:	f894 00ee 	ldrb.w	r0, [r4, #238]	; 0xee
  40a5f8:	4b6f      	ldr	r3, [pc, #444]	; (40a7b8 <ctrl_eeprom+0x304>)
  40a5fa:	4798      	blx	r3
  40a5fc:	e094      	b.n	40a728 <ctrl_eeprom+0x274>
      for(i=0; i <= size_eep; i++){
  40a5fe:	3401      	adds	r4, #1
  40a600:	2cf2      	cmp	r4, #242	; 0xf2
  40a602:	d0c9      	beq.n	40a598 <ctrl_eeprom+0xe4>
        eep_write_byte(i,  vect_default_eeprom[i]); 
  40a604:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  40a608:	4629      	mov	r1, r5
  40a60a:	4620      	mov	r0, r4
  40a60c:	47b8      	blx	r7
        Shadow_eep[i] = vect_default_eeprom[i];
  40a60e:	f808 5f01 	strb.w	r5, [r8, #1]!
        Shadow_eep_preview[i] = Shadow_eep[i];
  40a612:	f809 5f01 	strb.w	r5, [r9, #1]!
        if((i%16)==0)
  40a616:	f014 0f0f 	tst.w	r4, #15
  40a61a:	d1f0      	bne.n	40a5fe <ctrl_eeprom+0x14a>
          delay_ms (2); 
  40a61c:	4658      	mov	r0, fp
  40a61e:	47d0      	blx	sl
  40a620:	e7ed      	b.n	40a5fe <ctrl_eeprom+0x14a>
           eep_write_byte(i, 0xE4); 
  40a622:	21e4      	movs	r1, #228	; 0xe4
  40a624:	2041      	movs	r0, #65	; 0x41
  40a626:	4b5b      	ldr	r3, [pc, #364]	; (40a794 <ctrl_eeprom+0x2e0>)
  40a628:	4798      	blx	r3
           Shadow_eep[i] = vect_default_eeprom[i];
  40a62a:	23e4      	movs	r3, #228	; 0xe4
  40a62c:	4a56      	ldr	r2, [pc, #344]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a62e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
           Shadow_eep_preview[i] = Shadow_eep[i];
  40a632:	4a59      	ldr	r2, [pc, #356]	; (40a798 <ctrl_eeprom+0x2e4>)
  40a634:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  40a638:	e789      	b.n	40a54e <ctrl_eeprom+0x9a>
           eep_write_byte(i, 1); 
  40a63a:	2101      	movs	r1, #1
  40a63c:	203e      	movs	r0, #62	; 0x3e
  40a63e:	4b55      	ldr	r3, [pc, #340]	; (40a794 <ctrl_eeprom+0x2e0>)
  40a640:	4798      	blx	r3
           Shadow_eep[i] = 1;
  40a642:	2301      	movs	r3, #1
  40a644:	4a50      	ldr	r2, [pc, #320]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a646:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
           Shadow_eep_preview[i] = Shadow_eep[i];
  40a64a:	4a53      	ldr	r2, [pc, #332]	; (40a798 <ctrl_eeprom+0x2e4>)
  40a64c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  40a650:	e782      	b.n	40a558 <ctrl_eeprom+0xa4>
    return Shadow_eep[addr_eep]; 
  40a652:	4b4d      	ldr	r3, [pc, #308]	; (40a788 <ctrl_eeprom+0x2d4>)
          if(read_byte_eeprom(ADDR_EEP(AccessoyHW[0])) & (1 << ACC_EEP_CWD))
  40a654:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  40a658:	f013 0f10 	tst.w	r3, #16
             enab_func &= ~0x0400; // togliamo la funzione WINTER: solo SUMMER
  40a65c:	bf14      	ite	ne
  40a65e:	f420 6180 	bicne.w	r1, r0, #1024	; 0x400
             enab_func &= ~0x0800; // togliamo la funzione SUMMER: solo WINTER
  40a662:	f420 6100 	biceq.w	r1, r0, #2048	; 0x800
  40a666:	b289      	uxth	r1, r1
          write_word_eeprom(ADDR_EEP(Enab_Fuction),  enab_func);     
  40a668:	202e      	movs	r0, #46	; 0x2e
  40a66a:	4b49      	ldr	r3, [pc, #292]	; (40a790 <ctrl_eeprom+0x2dc>)
  40a66c:	4798      	blx	r3
  40a66e:	e793      	b.n	40a598 <ctrl_eeprom+0xe4>
    for(i=addr[0]; i <= addr[1]; i++){
  40a670:	3401      	adds	r4, #1
  40a672:	3501      	adds	r5, #1
  40a674:	2c0b      	cmp	r4, #11
  40a676:	d00b      	beq.n	40a690 <ctrl_eeprom+0x1dc>
      if(Shadow_eep[i] != vect_default_eeprom[i])
  40a678:	f817 6b01 	ldrb.w	r6, [r7], #1
  40a67c:	782b      	ldrb	r3, [r5, #0]
  40a67e:	42b3      	cmp	r3, r6
  40a680:	d0f6      	beq.n	40a670 <ctrl_eeprom+0x1bc>
         eep_write_byte(i,  vect_default_eeprom[i]); 
  40a682:	4631      	mov	r1, r6
  40a684:	4620      	mov	r0, r4
  40a686:	47c8      	blx	r9
         Shadow_eep[i] = vect_default_eeprom[i];
  40a688:	702e      	strb	r6, [r5, #0]
         Shadow_eep_preview[i]  = Shadow_eep[i];
  40a68a:	f804 6008 	strb.w	r6, [r4, r8]
  40a68e:	e7ef      	b.n	40a670 <ctrl_eeprom+0x1bc>
    }   
    


    // Andiamo a vedere la funzionalita di controllo ventole dell'unità (CAP/CAF/CSF) e, facciamo le varie deduzioni
    check_control_speed_func();
  40a690:	4b4a      	ldr	r3, [pc, #296]	; (40a7bc <ctrl_eeprom+0x308>)
  40a692:	4798      	blx	r3
              
    //----- (3) controlliamo i dati in ram e in eeprom coincidano -----
    delay_ms (5);
  40a694:	f648 3083 	movw	r0, #35715	; 0x8b83
  40a698:	4b3a      	ldr	r3, [pc, #232]	; (40a784 <ctrl_eeprom+0x2d0>)
  40a69a:	4798      	blx	r3
  40a69c:	4d3a      	ldr	r5, [pc, #232]	; (40a788 <ctrl_eeprom+0x2d4>)
    
    flag = 0;
    for(i=0;  i < size_eep; i++) {
  40a69e:	2400      	movs	r4, #0
    flag = 0;
  40a6a0:	4627      	mov	r7, r4
       if(eep_read_byte(i) !=  Shadow_eep[i]) {
  40a6a2:	4e36      	ldr	r6, [pc, #216]	; (40a77c <ctrl_eeprom+0x2c8>)
         delay_ms (5);
  40a6a4:	f648 3983 	movw	r9, #35715	; 0x8b83
  40a6a8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 40a784 <ctrl_eeprom+0x2d0>
  40a6ac:	e006      	b.n	40a6bc <ctrl_eeprom+0x208>
         if(eep_read_byte(i) !=  Shadow_eep[i])
           flag++;
       } 
         
       if((i%16)==0)
  40a6ae:	f014 0f0f 	tst.w	r4, #15
  40a6b2:	d012      	beq.n	40a6da <ctrl_eeprom+0x226>
    for(i=0;  i < size_eep; i++) {
  40a6b4:	3401      	adds	r4, #1
  40a6b6:	3501      	adds	r5, #1
  40a6b8:	2cf1      	cmp	r4, #241	; 0xf1
  40a6ba:	d012      	beq.n	40a6e2 <ctrl_eeprom+0x22e>
       if(eep_read_byte(i) !=  Shadow_eep[i]) {
  40a6bc:	4620      	mov	r0, r4
  40a6be:	47b0      	blx	r6
  40a6c0:	782b      	ldrb	r3, [r5, #0]
  40a6c2:	4283      	cmp	r3, r0
  40a6c4:	d0f3      	beq.n	40a6ae <ctrl_eeprom+0x1fa>
         delay_ms (5);
  40a6c6:	4648      	mov	r0, r9
  40a6c8:	47c0      	blx	r8
         if(eep_read_byte(i) !=  Shadow_eep[i])
  40a6ca:	4620      	mov	r0, r4
  40a6cc:	47b0      	blx	r6
  40a6ce:	782b      	ldrb	r3, [r5, #0]
  40a6d0:	4283      	cmp	r3, r0
           flag++;
  40a6d2:	bf1c      	itt	ne
  40a6d4:	3701      	addne	r7, #1
  40a6d6:	b2ff      	uxtbne	r7, r7
  40a6d8:	e7e9      	b.n	40a6ae <ctrl_eeprom+0x1fa>
          delay_ms (2);  
  40a6da:	f243 70ce 	movw	r0, #14286	; 0x37ce
  40a6de:	47c0      	blx	r8
  40a6e0:	e7e8      	b.n	40a6b4 <ctrl_eeprom+0x200>
    } 
    // inserisci l'allarme di eeprom fault (solo qua per il momento)
    if(flag > 1) {
  40a6e2:	2f01      	cmp	r7, #1
  40a6e4:	d948      	bls.n	40a778 <ctrl_eeprom+0x2c4>
       Serial_println1(" "); 
  40a6e6:	4833      	ldr	r0, [pc, #204]	; (40a7b4 <ctrl_eeprom+0x300>)
  40a6e8:	4c35      	ldr	r4, [pc, #212]	; (40a7c0 <ctrl_eeprom+0x30c>)
  40a6ea:	47a0      	blx	r4
       Serial_print1("Eeprom FAULT! N.Byte Error: "); 
  40a6ec:	4835      	ldr	r0, [pc, #212]	; (40a7c4 <ctrl_eeprom+0x310>)
  40a6ee:	4b2f      	ldr	r3, [pc, #188]	; (40a7ac <ctrl_eeprom+0x2f8>)
  40a6f0:	4798      	blx	r3
       Serial_print(flag, DEC);
  40a6f2:	210a      	movs	r1, #10
  40a6f4:	4638      	mov	r0, r7
  40a6f6:	4b2e      	ldr	r3, [pc, #184]	; (40a7b0 <ctrl_eeprom+0x2fc>)
  40a6f8:	4798      	blx	r3
       Serial_println1("");
  40a6fa:	4833      	ldr	r0, [pc, #204]	; (40a7c8 <ctrl_eeprom+0x314>)
  40a6fc:	47a0      	blx	r4
       InsertAlarm(ALM_EEP_FAULT); 
  40a6fe:	2054      	movs	r0, #84	; 0x54
  40a700:	4b32      	ldr	r3, [pc, #200]	; (40a7cc <ctrl_eeprom+0x318>)
  40a702:	4798      	blx	r3
    }
           
 }  
  40a704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Serial_println1(" "); 
  40a708:	482a      	ldr	r0, [pc, #168]	; (40a7b4 <ctrl_eeprom+0x300>)
  40a70a:	4c2d      	ldr	r4, [pc, #180]	; (40a7c0 <ctrl_eeprom+0x30c>)
  40a70c:	47a0      	blx	r4
      Serial_print1("Init eeprom ("); 
  40a70e:	4830      	ldr	r0, [pc, #192]	; (40a7d0 <ctrl_eeprom+0x31c>)
  40a710:	4b26      	ldr	r3, [pc, #152]	; (40a7ac <ctrl_eeprom+0x2f8>)
  40a712:	4798      	blx	r3
      Serial_print(LoadVectDefault, DEC); 
  40a714:	210a      	movs	r1, #10
  40a716:	4658      	mov	r0, fp
  40a718:	4b25      	ldr	r3, [pc, #148]	; (40a7b0 <ctrl_eeprom+0x2fc>)
  40a71a:	4798      	blx	r3
      Serial_println1(")...."); 
  40a71c:	482d      	ldr	r0, [pc, #180]	; (40a7d4 <ctrl_eeprom+0x320>)
  40a71e:	47a0      	blx	r4
      if(LoadVectDefault == 3) { 
  40a720:	f1bb 0f03 	cmp.w	fp, #3
  40a724:	f43f af5a 	beq.w	40a5dc <ctrl_eeprom+0x128>
      delay_ms (10);
  40a728:	4815      	ldr	r0, [pc, #84]	; (40a780 <ctrl_eeprom+0x2cc>)
  40a72a:	4b16      	ldr	r3, [pc, #88]	; (40a784 <ctrl_eeprom+0x2d0>)
  40a72c:	4798      	blx	r3
      wdt_restart(WATCH_DOG);
  40a72e:	482a      	ldr	r0, [pc, #168]	; (40a7d8 <ctrl_eeprom+0x324>)
  40a730:	4b2a      	ldr	r3, [pc, #168]	; (40a7dc <ctrl_eeprom+0x328>)
  40a732:	4798      	blx	r3
  40a734:	4e2a      	ldr	r6, [pc, #168]	; (40a7e0 <ctrl_eeprom+0x32c>)
      for(i=0; i <= size_eep; i++){
  40a736:	2400      	movs	r4, #0
        eep_write_byte(i,  vect_default_eeprom[i]); 
  40a738:	4f16      	ldr	r7, [pc, #88]	; (40a794 <ctrl_eeprom+0x2e0>)
          delay_ms (2); 
  40a73a:	f243 7bce 	movw	fp, #14286	; 0x37ce
  40a73e:	f8df a044 	ldr.w	sl, [pc, #68]	; 40a784 <ctrl_eeprom+0x2d0>
  40a742:	e75f      	b.n	40a604 <ctrl_eeprom+0x150>
    if ((Shadow_eep[addr[2]] != CHECK_EEP) && (Shadow_eep[addr[3]] != VERSION_EEP))   // ultimi 2 byte 
  40a744:	4b10      	ldr	r3, [pc, #64]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a746:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
  40a74a:	2b45      	cmp	r3, #69	; 0x45
      LoadVectDefault = 2;
  40a74c:	bf18      	it	ne
  40a74e:	f04f 0b02 	movne.w	fp, #2
    if ((Shadow_eep[addr[2]] != CHECK_EEP) && (Shadow_eep[addr[3]] != VERSION_EEP))   // ultimi 2 byte 
  40a752:	d00e      	beq.n	40a772 <ctrl_eeprom+0x2be>
  40a754:	4b0c      	ldr	r3, [pc, #48]	; (40a788 <ctrl_eeprom+0x2d4>)
  40a756:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
  40a75a:	2b30      	cmp	r3, #48	; 0x30
  40a75c:	f43f aee1 	beq.w	40a522 <ctrl_eeprom+0x6e>
      LoadVectDefault = 3;    
  40a760:	f04f 0b03 	mov.w	fp, #3
  40a764:	4d08      	ldr	r5, [pc, #32]	; (40a788 <ctrl_eeprom+0x2d4>)
      LoadVectDefault = 2;
  40a766:	2400      	movs	r4, #0
          flag = eep_read_byte(i);   
  40a768:	4e04      	ldr	r6, [pc, #16]	; (40a77c <ctrl_eeprom+0x2c8>)
                delay_ms (2);            
  40a76a:	4f06      	ldr	r7, [pc, #24]	; (40a784 <ctrl_eeprom+0x2d0>)
              Shadow_eep_preview[i]  = Shadow_eep[i];
  40a76c:	f8df a028 	ldr.w	sl, [pc, #40]	; 40a798 <ctrl_eeprom+0x2e4>
  40a770:	e722      	b.n	40a5b8 <ctrl_eeprom+0x104>
      LoadVectDefault = 2;
  40a772:	f04f 0b02 	mov.w	fp, #2
  40a776:	e7f5      	b.n	40a764 <ctrl_eeprom+0x2b0>
  40a778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a77c:	0040bfd1 	.word	0x0040bfd1
  40a780:	00011705 	.word	0x00011705
  40a784:	20000001 	.word	0x20000001
  40a788:	20001194 	.word	0x20001194
  40a78c:	20000043 	.word	0x20000043
  40a790:	0040a215 	.word	0x0040a215
  40a794:	0040c005 	.word	0x0040c005
  40a798:	20001294 	.word	0x20001294
  40a79c:	0040a279 	.word	0x0040a279
  40a7a0:	2000119a 	.word	0x2000119a
  40a7a4:	00413792 	.word	0x00413792
  40a7a8:	00413748 	.word	0x00413748
  40a7ac:	00405f35 	.word	0x00405f35
  40a7b0:	00405f65 	.word	0x00405f65
  40a7b4:	004126b8 	.word	0x004126b8
  40a7b8:	0040609d 	.word	0x0040609d
  40a7bc:	0040a2dd 	.word	0x0040a2dd
  40a7c0:	00406051 	.word	0x00406051
  40a7c4:	00413754 	.word	0x00413754
  40a7c8:	004127f0 	.word	0x004127f0
  40a7cc:	00403555 	.word	0x00403555
  40a7d0:	00413774 	.word	0x00413774
  40a7d4:	00413784 	.word	0x00413784
  40a7d8:	400e1450 	.word	0x400e1450
  40a7dc:	00403a89 	.word	0x00403a89
  40a7e0:	0041378b 	.word	0x0041378b
  40a7e4:	20001193 	.word	0x20001193
  40a7e8:	20001293 	.word	0x20001293

0040a7ec <ctrl_validity_values>:
// Controlla i dati inseriti da inserire nella Eeprom.
// se si superano i limiti di alcuni parametri in alcuni casi 
// correggi il buffer, in altri ritorna il -1.
//------------------------------------------------------------------
int ctrl_validity_values(Byte start_addr, Byte end_addr, Byte *buff)
{
  40a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a7f0:	4604      	mov	r4, r0
  40a7f2:	460d      	mov	r5, r1
  40a7f4:	4617      	mov	r7, r2
  Byte val, val_BPD, ctrl_val;
  
    
  //--- ADDR_MODBUS: lo 0 nel mondo MODBUS  è per i comandi di broadcast  
  addr = ADDR_EEP(AddrUnit);
  if ((addr >= start_addr) && (addr <= end_addr)){
  40a7f6:	b286      	uxth	r6, r0
  40a7f8:	b190      	cbz	r0, 40a820 <ctrl_validity_values+0x34>
      return -1;
  }  
 
  //--- FUNZ_UNITA:  0= BASIC, 1= EXTRA   
  addr = ADDR_EEP(Type_func); 
  if ((addr >= start_addr) && (addr <= end_addr)){
  40a7fa:	2801      	cmp	r0, #1
  40a7fc:	d91a      	bls.n	40a834 <ctrl_validity_values+0x48>
  }    
    
  
  //--- NUM_MOTORS: valori accettati: 2, 4, 6.
  addr = ADDR_EEP(numMotors);
  if ((addr >= start_addr) && (addr <= end_addr)){
  40a7fe:	2c3b      	cmp	r4, #59	; 0x3b
  40a800:	d821      	bhi.n	40a846 <ctrl_validity_values+0x5a>
  40a802:	2d3a      	cmp	r5, #58	; 0x3a
  40a804:	d91f      	bls.n	40a846 <ctrl_validity_values+0x5a>
    
    val = buff[addr - start_addr]; 
  40a806:	f1c4 033b 	rsb	r3, r4, #59	; 0x3b
  40a80a:	5cfb      	ldrb	r3, [r7, r3]
    
    if((val != 2) && (val != 4) && (val != 6))
  40a80c:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
  40a810:	2a02      	cmp	r2, #2
  40a812:	d018      	beq.n	40a846 <ctrl_validity_values+0x5a>
  40a814:	2b04      	cmp	r3, #4
  40a816:	d016      	beq.n	40a846 <ctrl_validity_values+0x5a>
      return -1; 
  40a818:	f04f 30ff 	mov.w	r0, #4294967295
  40a81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    val = buff[addr - start_addr];     
  40a820:	f892 8000 	ldrb.w	r8, [r2]
    ctrl_val  = constrain(val, 1, 63);      
  40a824:	223f      	movs	r2, #63	; 0x3f
  40a826:	2101      	movs	r1, #1
  40a828:	4640      	mov	r0, r8
  40a82a:	4b7d      	ldr	r3, [pc, #500]	; (40aa20 <ctrl_validity_values+0x234>)
  40a82c:	4798      	blx	r3
    if(val != ctrl_val)
  40a82e:	4580      	cmp	r8, r0
  40a830:	f040 80c4 	bne.w	40a9bc <ctrl_validity_values+0x1d0>
  if ((addr >= start_addr) && (addr <= end_addr)){
  40a834:	b18d      	cbz	r5, 40a85a <ctrl_validity_values+0x6e>
    val = buff[addr - start_addr];  
  40a836:	f1c4 0301 	rsb	r3, r4, #1
    if(val > 1)
  40a83a:	5cfa      	ldrb	r2, [r7, r3]
  40a83c:	2a01      	cmp	r2, #1
      buff[addr - start_addr] = (Byte)0x01;  
  40a83e:	bf84      	itt	hi
  40a840:	2201      	movhi	r2, #1
  40a842:	54fa      	strbhi	r2, [r7, r3]
  40a844:	e7db      	b.n	40a7fe <ctrl_validity_values+0x12>
  }    
  
  //--- BYPASS: 0=Automatic, 1=Ext CTRL, 2=Manual CLOSE, 3=Manual OPEN 4= Automatic+Standby
  addr = ADDR_EEP(Config_Bypass);
  
  if ((addr >= start_addr) && (addr <= end_addr)){
  40a846:	2c4d      	cmp	r4, #77	; 0x4d
  40a848:	d807      	bhi.n	40a85a <ctrl_validity_values+0x6e>
  40a84a:	2d4c      	cmp	r5, #76	; 0x4c
  40a84c:	d905      	bls.n	40a85a <ctrl_validity_values+0x6e>
    val_BPD = buff[addr - start_addr]; 
  40a84e:	f1c4 034d 	rsb	r3, r4, #77	; 0x4d
    
    if(val_BPD > BPD_AUTO_ON_OFF)   
  40a852:	5cfb      	ldrb	r3, [r7, r3]
  40a854:	2b04      	cmp	r3, #4
  40a856:	f200 80b5 	bhi.w	40a9c4 <ctrl_validity_values+0x1d8>
  //--- INPUT:   0= Disable, ... , 5=  0V->Bypass Open , 10V->Bypass Closed,	  
  // 1 se il bypass non è config. con Ext CTRL, e vi sono invece input config. per pilortare il bypass
  //   disabilito gli input  
  for(i=0; i < 2; i++) {
    addr = ADDR_EEP(Set_Input[i]);
    if ((addr >= start_addr) && (addr <= end_addr)){
  40a85a:	2e4e      	cmp	r6, #78	; 0x4e
  40a85c:	d80b      	bhi.n	40a876 <ctrl_validity_values+0x8a>
  40a85e:	2d4d      	cmp	r5, #77	; 0x4d
  40a860:	d909      	bls.n	40a876 <ctrl_validity_values+0x8a>
      val = buff[addr - start_addr]; 
  40a862:	f1c4 024e 	rsb	r2, r4, #78	; 0x4e
  40a866:	5cb9      	ldrb	r1, [r7, r2]
   
      if(((val > INP_12V_CLIMA_OFF) && (val < INP_12V_ALM_FIRE_UNIT_STOP)) || (val > INP_12V_ALM_FIRE_ONLY_SUPPLY)) 
  40a868:	1fcb      	subs	r3, r1, #7
  40a86a:	b2db      	uxtb	r3, r3
  40a86c:	2b03      	cmp	r3, #3
  40a86e:	f200 80a1 	bhi.w	40a9b4 <ctrl_validity_values+0x1c8>
         buff[addr - start_addr] = (Byte)INP_DISABLE;  // default: Disable   
  40a872:	2300      	movs	r3, #0
  40a874:	54bb      	strb	r3, [r7, r2]
    if ((addr >= start_addr) && (addr <= end_addr)){
  40a876:	2e4f      	cmp	r6, #79	; 0x4f
  40a878:	d80c      	bhi.n	40a894 <ctrl_validity_values+0xa8>
  40a87a:	2d4e      	cmp	r5, #78	; 0x4e
  40a87c:	d90a      	bls.n	40a894 <ctrl_validity_values+0xa8>
      val = buff[addr - start_addr]; 
  40a87e:	f1c4 024f 	rsb	r2, r4, #79	; 0x4f
  40a882:	5cb9      	ldrb	r1, [r7, r2]
      if(((val > INP_12V_CLIMA_OFF) && (val < INP_12V_ALM_FIRE_UNIT_STOP)) || (val > INP_12V_ALM_FIRE_ONLY_SUPPLY)) 
  40a884:	1fcb      	subs	r3, r1, #7
  40a886:	b2db      	uxtb	r3, r3
  40a888:	2b03      	cmp	r3, #3
  40a88a:	d901      	bls.n	40a890 <ctrl_validity_values+0xa4>
  40a88c:	290e      	cmp	r1, #14
  40a88e:	d901      	bls.n	40a894 <ctrl_validity_values+0xa8>
         buff[addr - start_addr] = (Byte)INP_DISABLE;  // default: Disable   
  40a890:	2300      	movs	r3, #0
  40a892:	54bb      	strb	r3, [r7, r2]
  
  //--- OUTPUT  ---  
  // 0= Disable, ... , 3= Idle/Standby Mode (SDD),  128= 0= Caduta / 1=Attrazione 
  for(i=0; i < 2; i++) {
    addr = ADDR_EEP(Set_Output[i]);
    if ((addr >= start_addr) && (addr <= end_addr)){
  40a894:	2e50      	cmp	r6, #80	; 0x50
  40a896:	d809      	bhi.n	40a8ac <ctrl_validity_values+0xc0>
  40a898:	2d4f      	cmp	r5, #79	; 0x4f
  40a89a:	d907      	bls.n	40a8ac <ctrl_validity_values+0xc0>
      
      val = buff[addr - start_addr];
  40a89c:	f1c4 0350 	rsb	r3, r4, #80	; 0x50
      if((val & 0x7F) > 6) // 6 = MAX SPEED
  40a8a0:	5cfb      	ldrb	r3, [r7, r3]
  40a8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a8a6:	2b06      	cmp	r3, #6
  40a8a8:	f300 8090 	bgt.w	40a9cc <ctrl_validity_values+0x1e0>
    if ((addr >= start_addr) && (addr <= end_addr)){
  40a8ac:	2e51      	cmp	r6, #81	; 0x51
  40a8ae:	d809      	bhi.n	40a8c4 <ctrl_validity_values+0xd8>
  40a8b0:	2d50      	cmp	r5, #80	; 0x50
  40a8b2:	d907      	bls.n	40a8c4 <ctrl_validity_values+0xd8>
      val = buff[addr - start_addr];
  40a8b4:	f1c4 0351 	rsb	r3, r4, #81	; 0x51
      if((val & 0x7F) > 6) // 6 = MAX SPEED
  40a8b8:	5cfb      	ldrb	r3, [r7, r3]
  40a8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a8be:	2b06      	cmp	r3, #6
  40a8c0:	f300 8088 	bgt.w	40a9d4 <ctrl_validity_values+0x1e8>
    }  
  }  
  
  //--- SET_STEP_MOTOR: 0, 1, 2, 3=Stepless ---  
  addr = ADDR_EEP(sel_idxStepMotors);
  if ((addr >= start_addr) && (addr <= end_addr)){
  40a8c4:	2c52      	cmp	r4, #82	; 0x52
  40a8c6:	d807      	bhi.n	40a8d8 <ctrl_validity_values+0xec>
  40a8c8:	2d51      	cmp	r5, #81	; 0x51
  40a8ca:	d905      	bls.n	40a8d8 <ctrl_validity_values+0xec>
    val = buff[addr - start_addr];
  40a8cc:	f1c4 0352 	rsb	r3, r4, #82	; 0x52
    
    if(val > 3)
  40a8d0:	5cfb      	ldrb	r3, [r7, r3]
  40a8d2:	2b03      	cmp	r3, #3
  40a8d4:	f200 8082 	bhi.w	40a9dc <ctrl_validity_values+0x1f0>
      return -1;   
  }     

  //--- TIME BOOST: valori tra 15' a 240' ---
  addr = ADDR_EEP(Set_TimeBoost);
  if ((addr >= start_addr) && (addr <= end_addr)){
  40a8d8:	2c65      	cmp	r4, #101	; 0x65
  40a8da:	d808      	bhi.n	40a8ee <ctrl_validity_values+0x102>
  40a8dc:	2d64      	cmp	r5, #100	; 0x64
  40a8de:	d906      	bls.n	40a8ee <ctrl_validity_values+0x102>
    val  = buff[addr - start_addr]; 
  40a8e0:	f1c4 0365 	rsb	r3, r4, #101	; 0x65
    
    if ((val < 15) || (val >240)) 
  40a8e4:	5cfb      	ldrb	r3, [r7, r3]
  40a8e6:	3b0f      	subs	r3, #15
  40a8e8:	b2db      	uxtb	r3, r3
  40a8ea:	2be1      	cmp	r3, #225	; 0xe1
  40a8ec:	d87a      	bhi.n	40a9e4 <ctrl_validity_values+0x1f8>
      return -1; 
  }
  
  //--- SETPOINT CO2 in PPM --- 
  addr = ADDR_EEP(SetPoint_CO2);
  if ((addr >= start_addr) && (addr < end_addr)){
  40a8ee:	2c66      	cmp	r4, #102	; 0x66
  40a8f0:	d810      	bhi.n	40a914 <ctrl_validity_values+0x128>
  40a8f2:	2d66      	cmp	r5, #102	; 0x66
  40a8f4:	d90e      	bls.n	40a914 <ctrl_validity_values+0x128>
    
    val_16  = ((buff[addr + 1 - start_addr]  << 8)&0xFF00) + buff[addr - start_addr]; 
  40a8f6:	f1c4 0366 	rsb	r3, r4, #102	; 0x66
  40a8fa:	5cfb      	ldrb	r3, [r7, r3]
    
    if ((val_16  <= 450) || (val_16 > 1600)) 
  40a8fc:	f2a3 13c3 	subw	r3, r3, #451	; 0x1c3
    val_16  = ((buff[addr + 1 - start_addr]  << 8)&0xFF00) + buff[addr - start_addr]; 
  40a900:	f1c4 0267 	rsb	r2, r4, #103	; 0x67
  40a904:	5cba      	ldrb	r2, [r7, r2]
    if ((val_16  <= 450) || (val_16 > 1600)) 
  40a906:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40a90a:	b29b      	uxth	r3, r3
  40a90c:	f240 427d 	movw	r2, #1149	; 0x47d
  40a910:	4293      	cmp	r3, r2
  40a912:	d86b      	bhi.n	40a9ec <ctrl_validity_values+0x200>
       return -1;
  }
  
  //--- SETPOINT RH da 20% a 100% ---   
  addr = ADDR_EEP(SetPoint_RH);
  if ((addr >= start_addr) && (addr <= end_addr)){
  40a914:	2c68      	cmp	r4, #104	; 0x68
  40a916:	d808      	bhi.n	40a92a <ctrl_validity_values+0x13e>
  40a918:	2d67      	cmp	r5, #103	; 0x67
  40a91a:	d906      	bls.n	40a92a <ctrl_validity_values+0x13e>
    val  = buff[addr - start_addr]; 
  40a91c:	f1c4 0368 	rsb	r3, r4, #104	; 0x68
    
    if((val < 20) || (val > 99)) 
  40a920:	5cfb      	ldrb	r3, [r7, r3]
  40a922:	3b14      	subs	r3, #20
  40a924:	b2db      	uxtb	r3, r3
  40a926:	2b4f      	cmp	r3, #79	; 0x4f
  40a928:	d864      	bhi.n	40a9f4 <ctrl_validity_values+0x208>
       return -1; 
  }
  
  //--- SETPOINR VOC: da 8 a 90 PPM ---
  addr = ADDR_EEP(SetPoint_VOC);
  if ((addr >= start_addr) && (addr < end_addr)){
  40a92a:	2c69      	cmp	r4, #105	; 0x69
  40a92c:	d80d      	bhi.n	40a94a <ctrl_validity_values+0x15e>
  40a92e:	2d69      	cmp	r5, #105	; 0x69
  40a930:	d90b      	bls.n	40a94a <ctrl_validity_values+0x15e>
    val_16  = ((buff[addr + 1 - start_addr]  << 8)&0xFF00) + buff[addr - start_addr]; 
  40a932:	f1c4 036a 	rsb	r3, r4, #106	; 0x6a
  40a936:	5cfa      	ldrb	r2, [r7, r3]
  40a938:	f1c4 0369 	rsb	r3, r4, #105	; 0x69
  40a93c:	5cfb      	ldrb	r3, [r7, r3]
    
    if ((val_16  < 8) || (val_16 > 90)) 
  40a93e:	3b08      	subs	r3, #8
  40a940:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40a944:	b29b      	uxth	r3, r3
  40a946:	2b52      	cmp	r3, #82	; 0x52
  40a948:	d858      	bhi.n	40a9fc <ctrl_validity_values+0x210>
//      return -1;
//  }
  
  //--- MIN. TEMP. BYPASS: 11.0°C a 30.0°C ---
  addr = ADDR_EEP(Bypass_minTempExt);
  if ((addr >= start_addr) && (addr < end_addr)){
  40a94a:	2c85      	cmp	r4, #133	; 0x85
  40a94c:	d80d      	bhi.n	40a96a <ctrl_validity_values+0x17e>
  40a94e:	2d85      	cmp	r5, #133	; 0x85
  40a950:	d90b      	bls.n	40a96a <ctrl_validity_values+0x17e>
    val_16  = ((buff[addr + 1 - start_addr]  << 8)&0xFF00) + buff[addr - start_addr]; 
  40a952:	f1c4 0385 	rsb	r3, r4, #133	; 0x85
  40a956:	5cfb      	ldrb	r3, [r7, r3]
    
    if ((val_16  < 120) || (val_16 > 350))
  40a958:	3b78      	subs	r3, #120	; 0x78
    val_16  = ((buff[addr + 1 - start_addr]  << 8)&0xFF00) + buff[addr - start_addr]; 
  40a95a:	f1c4 0286 	rsb	r2, r4, #134	; 0x86
  40a95e:	5cba      	ldrb	r2, [r7, r2]
    if ((val_16  < 120) || (val_16 > 350))
  40a960:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40a964:	b29b      	uxth	r3, r3
  40a966:	2be6      	cmp	r3, #230	; 0xe6
  40a968:	d84c      	bhi.n	40aa04 <ctrl_validity_values+0x218>
  }  
      
  for(i=0; i < 2; i++) {
     //--- Set-Point Temperature 1&2 value 15.0 °C a 32.0 °C. ---
     addr = ADDR_EEP(SetPointTemp[i]);
     if ((addr >= start_addr) && (addr < end_addr)){
  40a96a:	2e87      	cmp	r6, #135	; 0x87
  40a96c:	d80d      	bhi.n	40a98a <ctrl_validity_values+0x19e>
  40a96e:	2d87      	cmp	r5, #135	; 0x87
  40a970:	d90b      	bls.n	40a98a <ctrl_validity_values+0x19e>
       val_16  = ((buff[addr + 1 - start_addr]  << 8) & 0xFF00) + buff[addr - start_addr];  
  40a972:	f1c4 0388 	rsb	r3, r4, #136	; 0x88
  40a976:	5cfa      	ldrb	r2, [r7, r3]
  40a978:	f1c4 0387 	rsb	r3, r4, #135	; 0x87
  40a97c:	5cfb      	ldrb	r3, [r7, r3]
   
       if ((val_16  < 150) || (val_16 > 350)) 
  40a97e:	3b96      	subs	r3, #150	; 0x96
  40a980:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40a984:	b29b      	uxth	r3, r3
  40a986:	2bc8      	cmp	r3, #200	; 0xc8
  40a988:	d840      	bhi.n	40aa0c <ctrl_validity_values+0x220>
     if ((addr >= start_addr) && (addr < end_addr)){
  40a98a:	2e89      	cmp	r6, #137	; 0x89
  40a98c:	d842      	bhi.n	40aa14 <ctrl_validity_values+0x228>
  40a98e:	2d89      	cmp	r5, #137	; 0x89
  40a990:	d943      	bls.n	40aa1a <ctrl_validity_values+0x22e>
       val_16  = ((buff[addr + 1 - start_addr]  << 8) & 0xFF00) + buff[addr - start_addr];  
  40a992:	f1c4 038a 	rsb	r3, r4, #138	; 0x8a
  40a996:	5cfa      	ldrb	r2, [r7, r3]
  40a998:	f1c4 0489 	rsb	r4, r4, #137	; 0x89
  40a99c:	5d3b      	ldrb	r3, [r7, r4]
       if ((val_16  < 150) || (val_16 > 350)) 
  40a99e:	3b96      	subs	r3, #150	; 0x96
  40a9a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40a9a4:	b29b      	uxth	r3, r3
          return -1;
     }    
  } 
  
  return 0; // ok
  40a9a6:	2bc8      	cmp	r3, #200	; 0xc8
  40a9a8:	bf8c      	ite	hi
  40a9aa:	f04f 30ff 	movhi.w	r0, #4294967295
  40a9ae:	2000      	movls	r0, #0
  40a9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((val > INP_12V_CLIMA_OFF) && (val < INP_12V_ALM_FIRE_UNIT_STOP)) || (val > INP_12V_ALM_FIRE_ONLY_SUPPLY)) 
  40a9b4:	290e      	cmp	r1, #14
  40a9b6:	f63f af5c 	bhi.w	40a872 <ctrl_validity_values+0x86>
  40a9ba:	e75c      	b.n	40a876 <ctrl_validity_values+0x8a>
      return -1;
  40a9bc:	f04f 30ff 	mov.w	r0, #4294967295
  40a9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return -1;
  40a9c4:	f04f 30ff 	mov.w	r0, #4294967295
  40a9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         return -1;        
  40a9cc:	f04f 30ff 	mov.w	r0, #4294967295
  40a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a9d4:	f04f 30ff 	mov.w	r0, #4294967295
  40a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return -1;   
  40a9dc:	f04f 30ff 	mov.w	r0, #4294967295
  40a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return -1; 
  40a9e4:	f04f 30ff 	mov.w	r0, #4294967295
  40a9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return -1;
  40a9ec:	f04f 30ff 	mov.w	r0, #4294967295
  40a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return -1; 
  40a9f4:	f04f 30ff 	mov.w	r0, #4294967295
  40a9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return -1;
  40a9fc:	f04f 30ff 	mov.w	r0, #4294967295
  40aa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return -1;
  40aa04:	f04f 30ff 	mov.w	r0, #4294967295
  40aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return -1;
  40aa0c:	f04f 30ff 	mov.w	r0, #4294967295
  40aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return 0; // ok
  40aa14:	2000      	movs	r0, #0
  40aa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aa1a:	2000      	movs	r0, #0
}
  40aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aa20:	0040bfc1 	.word	0x0040bfc1

0040aa24 <ctrl_lim_histTemp>:
//------------------------------------------------------------------
// Bisogna oltre che controllare i limiti anche la non sovrapposizione
// dei valori.
//------------------------------------------------------------------
Byte ctrl_lim_histTemp()
{
  40aa24:	b410      	push	{r4}
    return Shadow_eep[addr_eep]; 
  40aa26:	4a63      	ldr	r2, [pc, #396]	; (40abb4 <ctrl_lim_histTemp+0x190>)
    
   // ---- Limiti valori sull'isteresi temperature ON/OFF  HWD/EHD. ----
   //  si accende basso es: 21.0 , si spegne alto 24.0
   // --- CON AWP ---
   val= 0;
   Ton  = (signed char)read_byte_eeprom(ADDR_EEP(hister_AWP_Temp_Hot[1])); // Value Default  ON: -2.0°C -> 22.0°C -2.0° = 20.0°C
  40aa28:	f992 308d 	ldrsb.w	r3, [r2, #141]	; 0x8d
   Toff = (signed char)read_byte_eeprom(ADDR_EEP(hister_AWP_Temp_Hot[0])); // Value Default OFF: +1.5°C -> 22.0°C +1.5° = 23.5°C
  40aa2c:	f992 208c 	ldrsb.w	r2, [r2, #140]	; 0x8c

   if(Ton < -100) {
  40aa30:	f113 0f64 	cmn.w	r3, #100	; 0x64
  40aa34:	f2c0 80b1 	blt.w	40ab9a <ctrl_lim_histTemp+0x176>
      Ton = -100;
      val = 1;
   }
   
   if(Ton > 100) {
  40aa38:	2b64      	cmp	r3, #100	; 0x64
  40aa3a:	dd63      	ble.n	40ab04 <ctrl_lim_histTemp+0xe0>
      Ton = 100;
      val = 1;
   }
   
   if(Toff > 100) {
  40aa3c:	2a64      	cmp	r2, #100	; 0x64
  40aa3e:	dc65      	bgt.n	40ab0c <ctrl_lim_histTemp+0xe8>
      val = 1;
  40aa40:	2001      	movs	r0, #1
      Ton = 100;
  40aa42:	2364      	movs	r3, #100	; 0x64
      Toff = 100;
      val = 1;
   }
   
   if (Toff < (Ton + 10)) {
  40aa44:	f103 010a 	add.w	r1, r3, #10
  40aa48:	428a      	cmp	r2, r1
  40aa4a:	da61      	bge.n	40ab10 <ctrl_lim_histTemp+0xec>
      Toff = (Ton + 10); 
  40aa4c:	f103 020a 	add.w	r2, r3, #10
  40aa50:	b252      	sxtb	r2, r2
    Shadow_eep[addr_eep] = val;
  40aa52:	4958      	ldr	r1, [pc, #352]	; (40abb4 <ctrl_lim_histTemp+0x190>)
  40aa54:	f881 208c 	strb.w	r2, [r1, #140]	; 0x8c
    countdown_Update_EepromToShadow  = 6; 
  40aa58:	2006      	movs	r0, #6
  40aa5a:	4a57      	ldr	r2, [pc, #348]	; (40abb8 <ctrl_lim_histTemp+0x194>)
  40aa5c:	7010      	strb	r0, [r2, #0]
    Shadow_eep[addr_eep] = val;
  40aa5e:	f881 308d 	strb.w	r3, [r1, #141]	; 0x8d
      val = 1;
   }   
   
  
   if(val) {
     ret = 1;
  40aa62:	2001      	movs	r0, #1
    return Shadow_eep[addr_eep]; 
  40aa64:	4a53      	ldr	r2, [pc, #332]	; (40abb4 <ctrl_lim_histTemp+0x190>)
     write_byte_eeprom(ADDR_EEP(hister_AWP_Temp_Hot[1]),  Ton); //
   }  
 
    // ---  SENZA AWP ----
   val = 0;     
   Ton  = (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Hot[1])); // Value default  ON: -2.0°C -> 22.0 -2.0°C = 20.0°C  
  40aa66:	f992 3091 	ldrsb.w	r3, [r2, #145]	; 0x91
   Toff = (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Hot[0]));  // Value default OFF: +5.0°C -> 22.0 +5.0°C = 27.0°C
  40aa6a:	f992 2090 	ldrsb.w	r2, [r2, #144]	; 0x90
  
   if(Ton < -100) {
  40aa6e:	f113 0f64 	cmn.w	r3, #100	; 0x64
  40aa72:	f2c0 8098 	blt.w	40aba6 <ctrl_lim_histTemp+0x182>
      Ton = -100;
      val = 1;
   }
   
   if(Ton > 100) {
  40aa76:	2b64      	cmp	r3, #100	; 0x64
  40aa78:	dd52      	ble.n	40ab20 <ctrl_lim_histTemp+0xfc>
      Ton = 100;
      val = 1;
   }
  
   if(Toff > 100) {
  40aa7a:	2a64      	cmp	r2, #100	; 0x64
  40aa7c:	dc54      	bgt.n	40ab28 <ctrl_lim_histTemp+0x104>
      val = 1;
  40aa7e:	2401      	movs	r4, #1
      Ton = 100;
  40aa80:	2364      	movs	r3, #100	; 0x64
      Toff = 100;
      val = 1;
   } 
  
   if (Toff < (Ton + 20)) {
  40aa82:	f103 0114 	add.w	r1, r3, #20
  40aa86:	428a      	cmp	r2, r1
  40aa88:	da50      	bge.n	40ab2c <ctrl_lim_histTemp+0x108>
      Toff = (Ton + 20); 
  40aa8a:	f103 0214 	add.w	r2, r3, #20
  40aa8e:	b252      	sxtb	r2, r2
    Shadow_eep[addr_eep] = val;
  40aa90:	4948      	ldr	r1, [pc, #288]	; (40abb4 <ctrl_lim_histTemp+0x190>)
  40aa92:	f881 2090 	strb.w	r2, [r1, #144]	; 0x90
    countdown_Update_EepromToShadow  = 6; 
  40aa96:	2006      	movs	r0, #6
  40aa98:	4a47      	ldr	r2, [pc, #284]	; (40abb8 <ctrl_lim_histTemp+0x194>)
  40aa9a:	7010      	strb	r0, [r2, #0]
    Shadow_eep[addr_eep] = val;
  40aa9c:	f881 3091 	strb.w	r3, [r1, #145]	; 0x91
   }  
   
  
   
   if(val) {
      ret = 1;
  40aaa0:	2001      	movs	r0, #1
    return Shadow_eep[addr_eep]; 
  40aaa2:	4a44      	ldr	r2, [pc, #272]	; (40abb4 <ctrl_lim_histTemp+0x190>)
   }  
   // ---- Limite valori sull'isteresi temperature ON/OFF CWD ---- 
   //  si accende alto es: 26.0 , si spegne basso 21.0
   val = 0;
    
   Ton  = (signed char)read_byte_eeprom(ADDR_EEP(hister_AWP_Temp_Cold[1])); // Value default  ON: +4.0°C -> 22.0°C + 4.0°C = 26.0 °C
  40aaa4:	f992 308f 	ldrsb.w	r3, [r2, #143]	; 0x8f
   Toff = (signed char)read_byte_eeprom(ADDR_EEP(hister_AWP_Temp_Cold[0])); // Value default OFF: +1.0°C -> 22.0°C + 1.0°C = 23.0 °C  
  40aaa8:	f992 208e 	ldrsb.w	r2, [r2, #142]	; 0x8e
   
   if (Ton > 100) {
  40aaac:	2b64      	cmp	r3, #100	; 0x64
  40aaae:	dc44      	bgt.n	40ab3a <ctrl_lim_histTemp+0x116>
      Ton  = 100; 
      val = 1;
   }      
   
   if (Ton < -100) {
  40aab0:	f113 0f64 	cmn.w	r3, #100	; 0x64
  40aab4:	da44      	bge.n	40ab40 <ctrl_lim_histTemp+0x11c>
      Ton  = -100; 
      val = 1;
  40aab6:	2101      	movs	r1, #1
      Ton  = -100; 
  40aab8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   }    
   
   if(Toff > (Ton - 10)) {
  40aabc:	f1a3 040a 	sub.w	r4, r3, #10
  40aac0:	42a2      	cmp	r2, r4
  40aac2:	dd01      	ble.n	40aac8 <ctrl_lim_histTemp+0xa4>
      Toff = (Ton - 10);
  40aac4:	b262      	sxtb	r2, r4
      val  = 1;
  40aac6:	2101      	movs	r1, #1
   }   
   
   if(Toff < -100) {
  40aac8:	f112 0f64 	cmn.w	r2, #100	; 0x64
  40aacc:	db3a      	blt.n	40ab44 <ctrl_lim_histTemp+0x120>
      Toff = -100;
       val  = 1;
   }  
 
   if(val) {
  40aace:	2900      	cmp	r1, #0
  40aad0:	d13a      	bne.n	40ab48 <ctrl_lim_histTemp+0x124>
    return Shadow_eep[addr_eep]; 
  40aad2:	4a38      	ldr	r2, [pc, #224]	; (40abb4 <ctrl_lim_histTemp+0x190>)
      write_byte_eeprom(ADDR_EEP(hister_AWP_Temp_Cold[0]), Toff); // OFF
      write_byte_eeprom(ADDR_EEP(hister_AWP_Temp_Cold[1]),  Ton); //
   }
   
   val = 0;
   Ton  = (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Cold[1]));  // Value default  ON: +5.0°C -> 22.0°C + 4.0°C = 27.0 °C   
  40aad4:	f992 3093 	ldrsb.w	r3, [r2, #147]	; 0x93
   Toff = (signed char)read_byte_eeprom(ADDR_EEP(hister_Temp_Cold[0]));  // Value default OFF: +0.0°C -> 22.0°C - 1.0°C = 21.0 °C  
  40aad8:	f992 2092 	ldrsb.w	r2, [r2, #146]	; 0x92
   
   if (Ton > 100) {
  40aadc:	2b64      	cmp	r3, #100	; 0x64
  40aade:	dc3d      	bgt.n	40ab5c <ctrl_lim_histTemp+0x138>
      Ton  = 100; 
      val = 1;
   }   

   if (Ton < -100) {
  40aae0:	f113 0f64 	cmn.w	r3, #100	; 0x64
  40aae4:	da3d      	bge.n	40ab62 <ctrl_lim_histTemp+0x13e>
      Ton  = -100; 
      val = 1;
  40aae6:	2101      	movs	r1, #1
      Ton  = -100; 
  40aae8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   }      
   
   if(Toff > (Ton - 20)) {
  40aaec:	f1a3 0414 	sub.w	r4, r3, #20
  40aaf0:	42a2      	cmp	r2, r4
  40aaf2:	dd01      	ble.n	40aaf8 <ctrl_lim_histTemp+0xd4>
      Toff = (Ton - 20);
  40aaf4:	b262      	sxtb	r2, r4
      val  = 1;
  40aaf6:	2101      	movs	r1, #1
   }   
   
   if(Toff < -100) {
  40aaf8:	f112 0f64 	cmn.w	r2, #100	; 0x64
  40aafc:	db33      	blt.n	40ab66 <ctrl_lim_histTemp+0x142>
      Toff = -100;
      val  = 1;
   }  
   
   if(val) {
  40aafe:	bba1      	cbnz	r1, 40ab6a <ctrl_lim_histTemp+0x146>
      write_byte_eeprom(ADDR_EEP(hister_Temp_Cold[1]),  Ton); //
   }
   
   return ret;
       
}  
  40ab00:	bc10      	pop	{r4}
  40ab02:	4770      	bx	lr
   if(Toff > 100) {
  40ab04:	2a64      	cmp	r2, #100	; 0x64
  40ab06:	dc3a      	bgt.n	40ab7e <ctrl_lim_histTemp+0x15a>
   val= 0;
  40ab08:	2000      	movs	r0, #0
  40ab0a:	e79b      	b.n	40aa44 <ctrl_lim_histTemp+0x20>
      Ton = 100;
  40ab0c:	2364      	movs	r3, #100	; 0x64
  40ab0e:	e79d      	b.n	40aa4c <ctrl_lim_histTemp+0x28>
   if(val) {
  40ab10:	2800      	cmp	r0, #0
  40ab12:	d19e      	bne.n	40aa52 <ctrl_lim_histTemp+0x2e>
   Byte ret =0;
  40ab14:	2000      	movs	r0, #0
  40ab16:	e7a5      	b.n	40aa64 <ctrl_lim_histTemp+0x40>
      Ton = -100;
  40ab18:	f06f 0363 	mvn.w	r3, #99	; 0x63
      Toff = 100;
  40ab1c:	2264      	movs	r2, #100	; 0x64
  40ab1e:	e798      	b.n	40aa52 <ctrl_lim_histTemp+0x2e>
   if(Toff > 100) {
  40ab20:	2a64      	cmp	r2, #100	; 0x64
  40ab22:	dc33      	bgt.n	40ab8c <ctrl_lim_histTemp+0x168>
   val = 0;     
  40ab24:	2400      	movs	r4, #0
  40ab26:	e7ac      	b.n	40aa82 <ctrl_lim_histTemp+0x5e>
      Ton = 100;
  40ab28:	2364      	movs	r3, #100	; 0x64
  40ab2a:	e7ae      	b.n	40aa8a <ctrl_lim_histTemp+0x66>
   if(val) {
  40ab2c:	2c00      	cmp	r4, #0
  40ab2e:	d0b8      	beq.n	40aaa2 <ctrl_lim_histTemp+0x7e>
  40ab30:	e7ae      	b.n	40aa90 <ctrl_lim_histTemp+0x6c>
      Ton = -100;
  40ab32:	f06f 0363 	mvn.w	r3, #99	; 0x63
      Toff = 100;
  40ab36:	2264      	movs	r2, #100	; 0x64
  40ab38:	e7aa      	b.n	40aa90 <ctrl_lim_histTemp+0x6c>
      val = 1;
  40ab3a:	2101      	movs	r1, #1
      Ton  = 100; 
  40ab3c:	2364      	movs	r3, #100	; 0x64
  40ab3e:	e7bd      	b.n	40aabc <ctrl_lim_histTemp+0x98>
   val = 0;
  40ab40:	2100      	movs	r1, #0
  40ab42:	e7bb      	b.n	40aabc <ctrl_lim_histTemp+0x98>
      Toff = -100;
  40ab44:	f06f 0263 	mvn.w	r2, #99	; 0x63
    Shadow_eep[addr_eep] = val;
  40ab48:	491a      	ldr	r1, [pc, #104]	; (40abb4 <ctrl_lim_histTemp+0x190>)
  40ab4a:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
    countdown_Update_EepromToShadow  = 6; 
  40ab4e:	2006      	movs	r0, #6
  40ab50:	4a19      	ldr	r2, [pc, #100]	; (40abb8 <ctrl_lim_histTemp+0x194>)
  40ab52:	7010      	strb	r0, [r2, #0]
    Shadow_eep[addr_eep] = val;
  40ab54:	f881 308f 	strb.w	r3, [r1, #143]	; 0x8f
      ret = 1;
  40ab58:	2001      	movs	r0, #1
  40ab5a:	e7ba      	b.n	40aad2 <ctrl_lim_histTemp+0xae>
      val = 1;
  40ab5c:	2101      	movs	r1, #1
      Ton  = 100; 
  40ab5e:	2364      	movs	r3, #100	; 0x64
  40ab60:	e7c4      	b.n	40aaec <ctrl_lim_histTemp+0xc8>
   val = 0;
  40ab62:	2100      	movs	r1, #0
  40ab64:	e7c2      	b.n	40aaec <ctrl_lim_histTemp+0xc8>
      Toff = -100;
  40ab66:	f06f 0263 	mvn.w	r2, #99	; 0x63
    Shadow_eep[addr_eep] = val;
  40ab6a:	4912      	ldr	r1, [pc, #72]	; (40abb4 <ctrl_lim_histTemp+0x190>)
  40ab6c:	f881 2092 	strb.w	r2, [r1, #146]	; 0x92
    countdown_Update_EepromToShadow  = 6; 
  40ab70:	2006      	movs	r0, #6
  40ab72:	4a11      	ldr	r2, [pc, #68]	; (40abb8 <ctrl_lim_histTemp+0x194>)
  40ab74:	7010      	strb	r0, [r2, #0]
    Shadow_eep[addr_eep] = val;
  40ab76:	f881 3093 	strb.w	r3, [r1, #147]	; 0x93
      ret = 1;
  40ab7a:	2001      	movs	r0, #1
   return ret;
  40ab7c:	e7c0      	b.n	40ab00 <ctrl_lim_histTemp+0xdc>
   if (Toff < (Ton + 10)) {
  40ab7e:	f103 020a 	add.w	r2, r3, #10
  40ab82:	2a64      	cmp	r2, #100	; 0x64
  40ab84:	f73f af62 	bgt.w	40aa4c <ctrl_lim_histTemp+0x28>
      Toff = 100;
  40ab88:	2264      	movs	r2, #100	; 0x64
  40ab8a:	e762      	b.n	40aa52 <ctrl_lim_histTemp+0x2e>
   if (Toff < (Ton + 20)) {
  40ab8c:	f103 0214 	add.w	r2, r3, #20
  40ab90:	2a64      	cmp	r2, #100	; 0x64
  40ab92:	f73f af7a 	bgt.w	40aa8a <ctrl_lim_histTemp+0x66>
      Toff = 100;
  40ab96:	2264      	movs	r2, #100	; 0x64
  40ab98:	e77a      	b.n	40aa90 <ctrl_lim_histTemp+0x6c>
   if(Toff > 100) {
  40ab9a:	2a64      	cmp	r2, #100	; 0x64
  40ab9c:	dcbc      	bgt.n	40ab18 <ctrl_lim_histTemp+0xf4>
      val = 1;
  40ab9e:	2001      	movs	r0, #1
      Ton = -100;
  40aba0:	f06f 0363 	mvn.w	r3, #99	; 0x63
  40aba4:	e74e      	b.n	40aa44 <ctrl_lim_histTemp+0x20>
   if(Toff > 100) {
  40aba6:	2a64      	cmp	r2, #100	; 0x64
  40aba8:	dcc3      	bgt.n	40ab32 <ctrl_lim_histTemp+0x10e>
      val = 1;
  40abaa:	2401      	movs	r4, #1
      Ton = -100;
  40abac:	f06f 0363 	mvn.w	r3, #99	; 0x63
  40abb0:	e767      	b.n	40aa82 <ctrl_lim_histTemp+0x5e>
  40abb2:	bf00      	nop
  40abb4:	20001194 	.word	0x20001194
  40abb8:	20000043 	.word	0x20000043

0040abbc <update_data_eeprom>:
//------------------------------------------------------------------
// Aggiorna la eeprom, dopo aver fatto i controlli dei dati
// se c'è un errore di parametri ritorna -1
//------------------------------------------------------------------
 int update_data_eeprom(unsigned short start_addr, unsigned short end_addr, Byte *buff)
 {
  40abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40abbe:	4607      	mov	r7, r0
  40abc0:	460c      	mov	r4, r1
  40abc2:	4616      	mov	r6, r2
    unsigned short a,  addr1, addr2;
    int valid_data;
   

    //--- (1) andiamo a verificare i limiti di alcuni parametri e li correggiamo ----
    valid_data = ctrl_validity_values(start_addr, end_addr, &buff[0]);    
  40abc4:	b2c5      	uxtb	r5, r0
  40abc6:	b2c9      	uxtb	r1, r1
  40abc8:	4628      	mov	r0, r5
  40abca:	4b3f      	ldr	r3, [pc, #252]	; (40acc8 <update_data_eeprom+0x10c>)
  40abcc:	4798      	blx	r3


    if(valid_data == -1)
  40abce:	f1b0 3fff 	cmp.w	r0, #4294967295
  40abd2:	d078      	beq.n	40acc6 <update_data_eeprom+0x10a>
      return -1;


    for(a=start_addr, i=0;  a <= end_addr; a++, i++) 
  40abd4:	42a7      	cmp	r7, r4
  40abd6:	d812      	bhi.n	40abfe <update_data_eeprom+0x42>
  40abd8:	463b      	mov	r3, r7
    Shadow_eep[addr_eep] = val;
  40abda:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 40accc <update_data_eeprom+0x110>
    countdown_Update_EepromToShadow  = 6; 
  40abde:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 40acd8 <update_data_eeprom+0x11c>
  40abe2:	f04f 0006 	mov.w	r0, #6
       write_byte_eeprom(a,  buff[i]);   
  40abe6:	1b5a      	subs	r2, r3, r5
  40abe8:	b2d2      	uxtb	r2, r2
  40abea:	5cb1      	ldrb	r1, [r6, r2]
    Shadow_eep[addr_eep] = val;
  40abec:	b2da      	uxtb	r2, r3
  40abee:	f80c 1002 	strb.w	r1, [ip, r2]
    countdown_Update_EepromToShadow  = 6; 
  40abf2:	f88e 0000 	strb.w	r0, [lr]
    for(a=start_addr, i=0;  a <= end_addr; a++, i++) 
  40abf6:	3301      	adds	r3, #1
  40abf8:	b29b      	uxth	r3, r3
  40abfa:	429c      	cmp	r4, r3
  40abfc:	d2f3      	bcs.n	40abe6 <update_data_eeprom+0x2a>
    // -- info ---
    // ma solo se vi sono byte modificati dentro la zona info 
    addr1 = 0;
    addr2 = ADDR_EEP(cntUpdate_info); 
        
    if(start_addr < addr2) {         
  40abfe:	2f39      	cmp	r7, #57	; 0x39
  40ac00:	d82e      	bhi.n	40ac60 <update_data_eeprom+0xa4>
    return Shadow_eep[addr_eep]; 
  40ac02:	4b32      	ldr	r3, [pc, #200]	; (40accc <update_data_eeprom+0x110>)
             
       cnt_update_eep = read_byte_eeprom(addr2); 
       cnt_update_eep++;
  40ac04:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a
  40ac08:	3501      	adds	r5, #1
  40ac0a:	b2ed      	uxtb	r5, r5
                        
       //1.  se vi è un Upgrade della Type_func, attiviamo tutte le funzioni.
       addr1 = ADDR_EEP(Type_func);
       if((Shadow_eep_preview[addr1] != Shadow_eep[addr1]) && Shadow_eep[addr1]) 
  40ac0c:	785b      	ldrb	r3, [r3, #1]
  40ac0e:	4a30      	ldr	r2, [pc, #192]	; (40acd0 <update_data_eeprom+0x114>)
  40ac10:	7852      	ldrb	r2, [r2, #1]
  40ac12:	429a      	cmp	r2, r3
  40ac14:	d00f      	beq.n	40ac36 <update_data_eeprom+0x7a>
  40ac16:	b963      	cbnz	r3, 40ac32 <update_data_eeprom+0x76>
           upgrade_type_func();          
       
       
       //2. Se è cambiata una configurazione delle funzioni facciamo attenzione che rispetti i parametri EXTRA/ BASIC
       addr1 = ADDR_EEP(Enab_Fuction);
       if (Shadow_eep_preview[addr1] != Shadow_eep[addr1]) {        
  40ac18:	4b2c      	ldr	r3, [pc, #176]	; (40accc <update_data_eeprom+0x110>)
  40ac1a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
  40ac1e:	4a2c      	ldr	r2, [pc, #176]	; (40acd0 <update_data_eeprom+0x114>)
  40ac20:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
  40ac24:	429a      	cmp	r2, r3
  40ac26:	d015      	beq.n	40ac54 <update_data_eeprom+0x98>
           if (Shadow_eep[ADDR_EEP(Type_func)])
             i = (Shadow_eep[addr1] & ENAB_FUNC_EXTRA);
           else  { 
             i = (Shadow_eep[addr1] & ENAB_FUNC_BASIC);
  40ac28:	f003 0329 	and.w	r3, r3, #41	; 0x29
             i |= ENAB_CSF;
  40ac2c:	f043 0305 	orr.w	r3, r3, #5
  40ac30:	e00d      	b.n	40ac4e <update_data_eeprom+0x92>
           upgrade_type_func();          
  40ac32:	4b28      	ldr	r3, [pc, #160]	; (40acd4 <update_data_eeprom+0x118>)
  40ac34:	4798      	blx	r3
       if (Shadow_eep_preview[addr1] != Shadow_eep[addr1]) {        
  40ac36:	4b25      	ldr	r3, [pc, #148]	; (40accc <update_data_eeprom+0x110>)
  40ac38:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
  40ac3c:	4a24      	ldr	r2, [pc, #144]	; (40acd0 <update_data_eeprom+0x114>)
  40ac3e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
  40ac42:	429a      	cmp	r2, r3
  40ac44:	d006      	beq.n	40ac54 <update_data_eeprom+0x98>
           if (Shadow_eep[ADDR_EEP(Type_func)])
  40ac46:	4a21      	ldr	r2, [pc, #132]	; (40accc <update_data_eeprom+0x110>)
  40ac48:	7852      	ldrb	r2, [r2, #1]
  40ac4a:	2a00      	cmp	r2, #0
  40ac4c:	d0ec      	beq.n	40ac28 <update_data_eeprom+0x6c>
    Shadow_eep[addr_eep] = val;
  40ac4e:	4a1f      	ldr	r2, [pc, #124]	; (40accc <update_data_eeprom+0x110>)
  40ac50:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  40ac54:	4b1d      	ldr	r3, [pc, #116]	; (40accc <update_data_eeprom+0x110>)
  40ac56:	f883 503a 	strb.w	r5, [r3, #58]	; 0x3a
    countdown_Update_EepromToShadow  = 6; 
  40ac5a:	2206      	movs	r2, #6
  40ac5c:	4b1e      	ldr	r3, [pc, #120]	; (40acd8 <update_data_eeprom+0x11c>)
  40ac5e:	701a      	strb	r2, [r3, #0]
    // --- Setting parameters ---
    // ma solo se vi sono byte modificati dentro la zona Setting par. 
    addr1 = ADDR_EEP(Set_Power_ON); 
    addr2 = ADDR_EEP(cntUpdate_SettingPar); 
       
    if ((start_addr < addr2) && (end_addr >= addr1)) 
  40ac60:	2f7d      	cmp	r7, #125	; 0x7d
  40ac62:	d801      	bhi.n	40ac68 <update_data_eeprom+0xac>
  40ac64:	2c4b      	cmp	r4, #75	; 0x4b
  40ac66:	d809      	bhi.n	40ac7c <update_data_eeprom+0xc0>
    // ---  Soglie Temperature ---
    // ma solo se vi sono byte modificati dentro la zona Soglie Temp. 
    addr1 =  ADDR_EEP(Bypass_minTempExt); 
    addr2 =  ADDR_EEP(cntUpdate_SetTemp);   
    
    if ((start_addr < addr2) && (end_addr >= addr1))
  40ac68:	2f97      	cmp	r7, #151	; 0x97
  40ac6a:	d801      	bhi.n	40ac70 <update_data_eeprom+0xb4>
  40ac6c:	2c84      	cmp	r4, #132	; 0x84
  40ac6e:	d80f      	bhi.n	40ac90 <update_data_eeprom+0xd4>
    // --- weekly program ---
    // ma solo se vi sono byte modificati dentro la zona weekly. 
    addr1 =  ADDR_EEP(cntUpdate_SetTemp) + 1;
    addr2 =  ADDR_EEP(cntUpdate_dayProg);
    
    if ((start_addr < addr2) && (end_addr >= addr1))
  40ac70:	2fec      	cmp	r7, #236	; 0xec
  40ac72:	d826      	bhi.n	40acc2 <update_data_eeprom+0x106>
  40ac74:	2c98      	cmp	r4, #152	; 0x98
  40ac76:	d819      	bhi.n	40acac <update_data_eeprom+0xf0>
    cnt_update_eep = read_byte_eeprom(addr2); 
    cnt_update_eep++;
    write_byte_eeprom(addr2,  cnt_update_eep);   
#endif

    return 0;
  40ac78:	2000      	movs	r0, #0
  40ac7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Shadow_eep[addr_eep] = val;
  40ac7c:	4a13      	ldr	r2, [pc, #76]	; (40accc <update_data_eeprom+0x110>)
       cnt_update_eep++;
  40ac7e:	f892 307e 	ldrb.w	r3, [r2, #126]	; 0x7e
  40ac82:	3301      	adds	r3, #1
    Shadow_eep[addr_eep] = val;
  40ac84:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
    countdown_Update_EepromToShadow  = 6; 
  40ac88:	2206      	movs	r2, #6
  40ac8a:	4b13      	ldr	r3, [pc, #76]	; (40acd8 <update_data_eeprom+0x11c>)
  40ac8c:	701a      	strb	r2, [r3, #0]
  40ac8e:	e7eb      	b.n	40ac68 <update_data_eeprom+0xac>
    return Shadow_eep[addr_eep]; 
  40ac90:	4e0e      	ldr	r6, [pc, #56]	; (40accc <update_data_eeprom+0x110>)
       cnt_update_eep++;
  40ac92:	f896 5098 	ldrb.w	r5, [r6, #152]	; 0x98
  40ac96:	3501      	adds	r5, #1
  40ac98:	b2ed      	uxtb	r5, r5
       cnt_update_eep += ctrl_lim_histTemp(); 
  40ac9a:	4b10      	ldr	r3, [pc, #64]	; (40acdc <update_data_eeprom+0x120>)
  40ac9c:	4798      	blx	r3
  40ac9e:	4428      	add	r0, r5
    Shadow_eep[addr_eep] = val;
  40aca0:	f886 0098 	strb.w	r0, [r6, #152]	; 0x98
    countdown_Update_EepromToShadow  = 6; 
  40aca4:	2206      	movs	r2, #6
  40aca6:	4b0c      	ldr	r3, [pc, #48]	; (40acd8 <update_data_eeprom+0x11c>)
  40aca8:	701a      	strb	r2, [r3, #0]
  40acaa:	e7e1      	b.n	40ac70 <update_data_eeprom+0xb4>
    Shadow_eep[addr_eep] = val;
  40acac:	4a07      	ldr	r2, [pc, #28]	; (40accc <update_data_eeprom+0x110>)
       cnt_update_eep++;
  40acae:	f892 30ed 	ldrb.w	r3, [r2, #237]	; 0xed
  40acb2:	3301      	adds	r3, #1
    Shadow_eep[addr_eep] = val;
  40acb4:	f882 30ed 	strb.w	r3, [r2, #237]	; 0xed
    countdown_Update_EepromToShadow  = 6; 
  40acb8:	2206      	movs	r2, #6
  40acba:	4b07      	ldr	r3, [pc, #28]	; (40acd8 <update_data_eeprom+0x11c>)
  40acbc:	701a      	strb	r2, [r3, #0]
    return 0;
  40acbe:	2000      	movs	r0, #0
  40acc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40acc2:	2000      	movs	r0, #0
  40acc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           
 }
  40acc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40acc8:	0040a7ed 	.word	0x0040a7ed
  40accc:	20001194 	.word	0x20001194
  40acd0:	20001294 	.word	0x20001294
  40acd4:	0040a2b9 	.word	0x0040a2b9
  40acd8:	20000043 	.word	0x20000043
  40acdc:	0040aa25 	.word	0x0040aa25

0040ace0 <check_clogged_filter>:
//---------------------------------------------------------------------
//  Controlla lo stato dei filtri, la funzione gira nella
//  operatingHoursCounter() che sta nello sheduler.
//---------------------------------------------------------------------
void  check_clogged_filter()
{
  40ace0:	b570      	push	{r4, r5, r6, lr}
	//         bit[1]:   Tipo Lettura Richiesta: 0 = calibrazione, 1 = verifica
	//         bit[2-6]: Ultima lettura livello filtro (0-20) (in step di 5%)
	Byte calibrazione;                    //  Valore percentuale di calibrazione ( 0 = nessuna calibrazione effettuata)
	Byte cntUpdate_SettingPar;

	enab_func = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  40ace2:	202e      	movs	r0, #46	; 0x2e
  40ace4:	4b43      	ldr	r3, [pc, #268]	; (40adf4 <check_clogged_filter+0x114>)
  40ace6:	4798      	blx	r3

	// Se la funzione di controllo è disabilitata, togliamo l'allarme e usciamo
	if((enab_func & (1 << ENAB_CTRL_FILTER))==0) {
  40ace8:	f410 7f00 	tst.w	r0, #512	; 0x200
  40acec:	d011      	beq.n	40ad12 <check_clogged_filter+0x32>
  40acee:	4604      	mov	r4, r0
		RemoveAlarm(ALM_FILTER);
		return;
	}


	last_timeCloggedFilters    = read_Dword_eeprom(ADDR_EEP(time_lastCloggedFilters));
  40acf0:	2026      	movs	r0, #38	; 0x26
  40acf2:	4b41      	ldr	r3, [pc, #260]	; (40adf8 <check_clogged_filter+0x118>)
  40acf4:	4798      	blx	r3
  40acf6:	4605      	mov	r5, r0
	calibrazione               = read_byte_eeprom(ADDR_EEP(DPP_Calibrationvalue));
  40acf8:	207a      	movs	r0, #122	; 0x7a
  40acfa:	4b40      	ldr	r3, [pc, #256]	; (40adfc <check_clogged_filter+0x11c>)
  40acfc:	4798      	blx	r3
  40acfe:	4606      	mov	r6, r0
  40ad00:	f404 5308 	and.w	r3, r4, #8704	; 0x2200

	// Se sono attivo come DPS (timer) faccio una semplice verifica temporale

	if((enab_func & (1 << ENAB_CTRL_FILTER))!=0 & (enab_func & (1 << ENAB_DPP))==0 ) {
  40ad04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40ad08:	d007      	beq.n	40ad1a <check_clogged_filter+0x3a>
		RemoveAlarm(ALM_FILTER);

	}

	// Se sono attivo come DPP (pressostato) faccio una semplice verifica 1 volta ogni 200 ore
	if((enab_func & (1 << ENAB_CTRL_FILTER))!=0 & (enab_func & (1 << ENAB_DPP))!=0 ) {
  40ad0a:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
  40ad0e:	d015      	beq.n	40ad3c <check_clogged_filter+0x5c>
  40ad10:	bd70      	pop	{r4, r5, r6, pc}
		RemoveAlarm(ALM_FILTER);
  40ad12:	2055      	movs	r0, #85	; 0x55
  40ad14:	4b3a      	ldr	r3, [pc, #232]	; (40ae00 <check_clogged_filter+0x120>)
  40ad16:	4798      	blx	r3
		return;
  40ad18:	bd70      	pop	{r4, r5, r6, pc}
		setting_timeCloggedFilters = (long)read_word_eeprom(ADDR_EEP(gg_manut_Filter)) * 24;
  40ad1a:	206b      	movs	r0, #107	; 0x6b
  40ad1c:	4b35      	ldr	r3, [pc, #212]	; (40adf4 <check_clogged_filter+0x114>)
  40ad1e:	4798      	blx	r3
  40ad20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		timeLimit_To_clogged_filers = setting_timeCloggedFilters + last_timeCloggedFilters;
  40ad24:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
		if(countHoursFunz > timeLimit_To_clogged_filers)
  40ad28:	4b36      	ldr	r3, [pc, #216]	; (40ae04 <check_clogged_filter+0x124>)
  40ad2a:	681b      	ldr	r3, [r3, #0]
  40ad2c:	429d      	cmp	r5, r3
		InsertAlarm(ALM_FILTER);
  40ad2e:	f04f 0055 	mov.w	r0, #85	; 0x55
  40ad32:	bf34      	ite	cc
  40ad34:	4b34      	ldrcc	r3, [pc, #208]	; (40ae08 <check_clogged_filter+0x128>)
		RemoveAlarm(ALM_FILTER);
  40ad36:	4b32      	ldrcs	r3, [pc, #200]	; (40ae00 <check_clogged_filter+0x120>)
  40ad38:	4798      	blx	r3
  40ad3a:	bd70      	pop	{r4, r5, r6, pc}

		if (last_timeCloggedFilters == 0)
  40ad3c:	b36d      	cbz	r5, 40ad9a <check_clogged_filter+0xba>
		RemoveAlarm(ALM_FILTER);

		// ogni 200 ore di funzionamento (circa 8 giorni) faccio una verifica di filtro sporco
		// dopo che sono trascorsi i primi 8 giorni
		if  (countHoursFunz >= 200)
  40ad3e:	4b31      	ldr	r3, [pc, #196]	; (40ae04 <check_clogged_filter+0x124>)
  40ad40:	681b      	ldr	r3, [r3, #0]
  40ad42:	2bc7      	cmp	r3, #199	; 0xc7
  40ad44:	d950      	bls.n	40ade8 <check_clogged_filter+0x108>
		{
			timeLimit_To_clogged_filers = (countHoursFunz - last_timeCloggedFilters) % 200;
  40ad46:	1b5b      	subs	r3, r3, r5
  40ad48:	4d30      	ldr	r5, [pc, #192]	; (40ae0c <check_clogged_filter+0x12c>)
  40ad4a:	fba5 2503 	umull	r2, r5, r5, r3
  40ad4e:	09ad      	lsrs	r5, r5, #6
  40ad50:	22c8      	movs	r2, #200	; 0xc8
  40ad52:	fb02 3515 	mls	r5, r2, r5, r3
		}
		else //non faccio nessuna verifica
		timeLimit_To_clogged_filers =1;
		

		if(timeLimit_To_clogged_filers == 0 & CkAlarm(ALM_FILTER)==0 & calibrazione != 0 )   //se sono passate 200 ore e non ho l'allarme filtri attivo e ho fatto la calibrazione
  40ad56:	fab5 f585 	clz	r5, r5
  40ad5a:	096d      	lsrs	r5, r5, #5
  40ad5c:	2055      	movs	r0, #85	; 0x55
  40ad5e:	4b2c      	ldr	r3, [pc, #176]	; (40ae10 <check_clogged_filter+0x130>)
  40ad60:	4798      	blx	r3
  40ad62:	2e00      	cmp	r6, #0
  40ad64:	bf0c      	ite	eq
  40ad66:	2300      	moveq	r3, #0
  40ad68:	f005 0301 	andne.w	r3, r5, #1
  40ad6c:	b1cb      	cbz	r3, 40ada2 <check_clogged_filter+0xc2>
  40ad6e:	b9c0      	cbnz	r0, 40ada2 <check_clogged_filter+0xc2>
		{
			DPP_data = (word)read_word_eeprom(ADDR_EEP(gg_manut_Filter));
  40ad70:	206b      	movs	r0, #107	; 0x6b
  40ad72:	4b20      	ldr	r3, [pc, #128]	; (40adf4 <check_clogged_filter+0x114>)
  40ad74:	4798      	blx	r3
			DPP_FilterLevel = DPP_data >>   8; //Ricavo il byte alto
			DPP_Threshold   = DPP_data & 0xFF;  //Ricavo il byte basso

			DPP_FilterLevel = DPP_FilterLevel | 0x03; // Attivo la richiesta di verifica
			DPP_data = DPP_Threshold | (DPP_FilterLevel << 8); // ricompongo i byte e scrivo
  40ad76:	f400 417c 	and.w	r1, r0, #64512	; 0xfc00
  40ad7a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
  40ad7e:	b2c0      	uxtb	r0, r0
			write_word_eeprom(ADDR_EEP(gg_manut_Filter), DPP_data); // Mando la richiesta di verifica (scrivo in Eeprom il valore)
  40ad80:	4301      	orrs	r1, r0
  40ad82:	206b      	movs	r0, #107	; 0x6b
  40ad84:	4b23      	ldr	r3, [pc, #140]	; (40ae14 <check_clogged_filter+0x134>)
  40ad86:	4798      	blx	r3
			cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40ad88:	207e      	movs	r0, #126	; 0x7e
  40ad8a:	4b1c      	ldr	r3, [pc, #112]	; (40adfc <check_clogged_filter+0x11c>)
  40ad8c:	4798      	blx	r3
			cntUpdate_SettingPar++;
  40ad8e:	1c41      	adds	r1, r0, #1
			write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40ad90:	b2c9      	uxtb	r1, r1
  40ad92:	207e      	movs	r0, #126	; 0x7e
  40ad94:	4b20      	ldr	r3, [pc, #128]	; (40ae18 <check_clogged_filter+0x138>)
  40ad96:	4798      	blx	r3
			return;
  40ad98:	bd70      	pop	{r4, r5, r6, pc}
		RemoveAlarm(ALM_FILTER);
  40ad9a:	2055      	movs	r0, #85	; 0x55
  40ad9c:	4b18      	ldr	r3, [pc, #96]	; (40ae00 <check_clogged_filter+0x120>)
  40ad9e:	4798      	blx	r3
  40ada0:	e7cd      	b.n	40ad3e <check_clogged_filter+0x5e>
		}

		if(timeLimit_To_clogged_filers == 0 & CkAlarm(ALM_FILTER)==0 & calibrazione == 0 )   //se sono passate 200 ore e non ho l'allarme filtri attivo e NON ho fatto la calibrazione --> passo in DPS 90gg
  40ada2:	2055      	movs	r0, #85	; 0x55
  40ada4:	4b1a      	ldr	r3, [pc, #104]	; (40ae10 <check_clogged_filter+0x130>)
  40ada6:	4798      	blx	r3
  40ada8:	2e00      	cmp	r6, #0
  40adaa:	bf14      	ite	ne
  40adac:	2500      	movne	r5, #0
  40adae:	f005 0501 	andeq.w	r5, r5, #1
  40adb2:	2d00      	cmp	r5, #0
  40adb4:	d0ac      	beq.n	40ad10 <check_clogged_filter+0x30>
  40adb6:	2800      	cmp	r0, #0
  40adb8:	d1aa      	bne.n	40ad10 <check_clogged_filter+0x30>
		{
			enab_func &= ~(1 << ENAB_DPP);
			write_word_eeprom(ADDR_EEP(Enab_Fuction),enab_func);
  40adba:	f64d 71ff 	movw	r1, #57343	; 0xdfff
  40adbe:	4021      	ands	r1, r4
  40adc0:	202e      	movs	r0, #46	; 0x2e
  40adc2:	4c14      	ldr	r4, [pc, #80]	; (40ae14 <check_clogged_filter+0x134>)
  40adc4:	47a0      	blx	r4
			write_word_eeprom(ADDR_EEP(gg_manut_Filter), 90);
  40adc6:	215a      	movs	r1, #90	; 0x5a
  40adc8:	206b      	movs	r0, #107	; 0x6b
  40adca:	47a0      	blx	r4
			write_Dword_eeprom(ADDR_EEP(time_lastCloggedFilters), countHoursFunz);
  40adcc:	4b0d      	ldr	r3, [pc, #52]	; (40ae04 <check_clogged_filter+0x124>)
  40adce:	6819      	ldr	r1, [r3, #0]
  40add0:	2026      	movs	r0, #38	; 0x26
  40add2:	4b12      	ldr	r3, [pc, #72]	; (40ae1c <check_clogged_filter+0x13c>)
  40add4:	4798      	blx	r3
			cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40add6:	207e      	movs	r0, #126	; 0x7e
  40add8:	4b08      	ldr	r3, [pc, #32]	; (40adfc <check_clogged_filter+0x11c>)
  40adda:	4798      	blx	r3
			cntUpdate_SettingPar++;
  40addc:	1c41      	adds	r1, r0, #1
			write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40adde:	b2c9      	uxtb	r1, r1
  40ade0:	207e      	movs	r0, #126	; 0x7e
  40ade2:	4b0d      	ldr	r3, [pc, #52]	; (40ae18 <check_clogged_filter+0x138>)
  40ade4:	4798      	blx	r3
			return;
  40ade6:	bd70      	pop	{r4, r5, r6, pc}
		if(timeLimit_To_clogged_filers == 0 & CkAlarm(ALM_FILTER)==0 & calibrazione != 0 )   //se sono passate 200 ore e non ho l'allarme filtri attivo e ho fatto la calibrazione
  40ade8:	2055      	movs	r0, #85	; 0x55
  40adea:	4c09      	ldr	r4, [pc, #36]	; (40ae10 <check_clogged_filter+0x130>)
  40adec:	47a0      	blx	r4
		if(timeLimit_To_clogged_filers == 0 & CkAlarm(ALM_FILTER)==0 & calibrazione == 0 )   //se sono passate 200 ore e non ho l'allarme filtri attivo e NON ho fatto la calibrazione --> passo in DPS 90gg
  40adee:	2055      	movs	r0, #85	; 0x55
  40adf0:	47a0      	blx	r4
  40adf2:	e78d      	b.n	40ad10 <check_clogged_filter+0x30>
  40adf4:	0040a279 	.word	0x0040a279
  40adf8:	0040a291 	.word	0x0040a291
  40adfc:	0040a26d 	.word	0x0040a26d
  40ae00:	004035ad 	.word	0x004035ad
  40ae04:	20000e7c 	.word	0x20000e7c
  40ae08:	00403555 	.word	0x00403555
  40ae0c:	51eb851f 	.word	0x51eb851f
  40ae10:	00403535 	.word	0x00403535
  40ae14:	0040a215 	.word	0x0040a215
  40ae18:	0040a1fd 	.word	0x0040a1fd
  40ae1c:	0040a239 	.word	0x0040a239

0040ae20 <verifica_clogged_filter>:
//---------------------------------------------------------------------
int cnt_tempo=0;
int cnt_step=0;

void  verifica_clogged_filter()
{
  40ae20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	unsigned short enab_func =0;
	word DPP_data;
	Byte DPP_FilterLevel;
	Byte DPP_Threshold;
	Byte calibrazione;
	enab_func = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  40ae24:	202e      	movs	r0, #46	; 0x2e
  40ae26:	4da3      	ldr	r5, [pc, #652]	; (40b0b4 <verifica_clogged_filter+0x294>)
  40ae28:	47a8      	blx	r5
  40ae2a:	4604      	mov	r4, r0
	DPP_data = (word)read_word_eeprom(ADDR_EEP(gg_manut_Filter));
  40ae2c:	206b      	movs	r0, #107	; 0x6b
  40ae2e:	47a8      	blx	r5
	DPP_FilterLevel = DPP_data >>   8;  //Ricavo il byte alto
  40ae30:	f3c0 2607 	ubfx	r6, r0, #8, #8
	Byte cntUpdate_SettingPar;
	Byte cntUpdate_info;
	unsigned long int last_timeCloggedFilters;

	//  Serial_println1(" <<< VERIFICA prima IF >>>");
	if((enab_func & (1 << ENAB_CTRL_FILTER))!=0 & (enab_func & (1 << ENAB_DPP))!=0  & (DPP_FilterLevel & 0x03)==3 ) {
  40ae34:	f404 5408 	and.w	r4, r4, #8704	; 0x2200
  40ae38:	f5b4 5f08 	cmp.w	r4, #8704	; 0x2200
  40ae3c:	d120      	bne.n	40ae80 <verifica_clogged_filter+0x60>
  40ae3e:	4605      	mov	r5, r0
  40ae40:	f006 0303 	and.w	r3, r6, #3
  40ae44:	2b03      	cmp	r3, #3
  40ae46:	d11b      	bne.n	40ae80 <verifica_clogged_filter+0x60>

		//  Controlliamo il livello di sporcamento
		//  Siamo in verifica, prendiamo il controllo dei motori
		
		//  Leggiamo gli stati
		calibrazione  = read_byte_eeprom(ADDR_EEP(DPP_Calibrationvalue));
  40ae48:	207a      	movs	r0, #122	; 0x7a
  40ae4a:	4b9b      	ldr	r3, [pc, #620]	; (40b0b8 <verifica_clogged_filter+0x298>)
  40ae4c:	4798      	blx	r3
  40ae4e:	4604      	mov	r4, r0

		sData.status_unit |= (1 << POS_BIT_DPP_CHECK); // prendiamo il controllo motori
  40ae50:	4a9a      	ldr	r2, [pc, #616]	; (40b0bc <verifica_clogged_filter+0x29c>)
  40ae52:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40ae56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40ae5a:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb

		//  Serial_println1(" <<< VERIFICA dopo IF >>>");
		if (cnt_step==0)
  40ae5e:	4b98      	ldr	r3, [pc, #608]	; (40b0c0 <verifica_clogged_filter+0x2a0>)
  40ae60:	681b      	ldr	r3, [r3, #0]
  40ae62:	b93b      	cbnz	r3, 40ae74 <verifica_clogged_filter+0x54>
		{
			sData.speed_motors_R = calibrazione;
  40ae64:	4613      	mov	r3, r2
  40ae66:	f883 01af 	strb.w	r0, [r3, #431]	; 0x1af
			sData.speed_motors_F = calibrazione;
  40ae6a:	f883 01b0 	strb.w	r0, [r3, #432]	; 0x1b0
			cnt_step =1;
  40ae6e:	2201      	movs	r2, #1
  40ae70:	4b93      	ldr	r3, [pc, #588]	; (40b0c0 <verifica_clogged_filter+0x2a0>)
  40ae72:	601a      	str	r2, [r3, #0]
		}
		
		//  Passo oltre ogni 9 cicli (circa 10 sec.) in modo da dare tempo hai motori di adattarsi
		if(++cnt_tempo <= TEMPO)
  40ae74:	4a93      	ldr	r2, [pc, #588]	; (40b0c4 <verifica_clogged_filter+0x2a4>)
  40ae76:	6813      	ldr	r3, [r2, #0]
  40ae78:	3301      	adds	r3, #1
  40ae7a:	6013      	str	r3, [r2, #0]
  40ae7c:	2b1e      	cmp	r3, #30
  40ae7e:	dc01      	bgt.n	40ae84 <verifica_clogged_filter+0x64>
  40ae80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return;

		dpp_status = analogRead(pAnSensQual_Ari1);  // leggo il pressostato
  40ae84:	4b90      	ldr	r3, [pc, #576]	; (40b0c8 <verifica_clogged_filter+0x2a8>)
  40ae86:	7818      	ldrb	r0, [r3, #0]
  40ae88:	4b90      	ldr	r3, [pc, #576]	; (40b0cc <verifica_clogged_filter+0x2ac>)
  40ae8a:	4798      	blx	r3

		if(dpp_status > 10 &  cnt_step == 1 & sData.speed_motors_R !=  MINSPEED  )  // è scattato e sono alla calibrazione precedente in partenza, decremento fintanto che smette di scattare
  40ae8c:	4b8c      	ldr	r3, [pc, #560]	; (40b0c0 <verifica_clogged_filter+0x2a0>)
  40ae8e:	681b      	ldr	r3, [r3, #0]
  40ae90:	2b01      	cmp	r3, #1
  40ae92:	bf14      	ite	ne
  40ae94:	2300      	movne	r3, #0
  40ae96:	2301      	moveq	r3, #1
  40ae98:	280a      	cmp	r0, #10
  40ae9a:	bfd4      	ite	le
  40ae9c:	2100      	movle	r1, #0
  40ae9e:	f003 0101 	andgt.w	r1, r3, #1
  40aea2:	4a86      	ldr	r2, [pc, #536]	; (40b0bc <verifica_clogged_filter+0x29c>)
  40aea4:	f892 21af 	ldrb.w	r2, [r2, #431]	; 0x1af
  40aea8:	2a40      	cmp	r2, #64	; 0x40
  40aeaa:	d011      	beq.n	40aed0 <verifica_clogged_filter+0xb0>
  40aeac:	b181      	cbz	r1, 40aed0 <verifica_clogged_filter+0xb0>
		{
			sData.speed_motors_R -= 13 ;
  40aeae:	4b83      	ldr	r3, [pc, #524]	; (40b0bc <verifica_clogged_filter+0x29c>)
  40aeb0:	3a0d      	subs	r2, #13
  40aeb2:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
			sData.speed_motors_F -= 13 ;
  40aeb6:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
  40aeba:	3a0d      	subs	r2, #13
  40aebc:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
			//      Serial_println1(" <<< VERIFICA sto DIMINUENDO >>>");
			cnt_tempo=(int)TEMPO/2;
  40aec0:	220f      	movs	r2, #15
  40aec2:	4b80      	ldr	r3, [pc, #512]	; (40b0c4 <verifica_clogged_filter+0x2a4>)
  40aec4:	601a      	str	r2, [r3, #0]
			cnt_step =1;
  40aec6:	2201      	movs	r2, #1
  40aec8:	4b7d      	ldr	r3, [pc, #500]	; (40b0c0 <verifica_clogged_filter+0x2a0>)
  40aeca:	601a      	str	r2, [r3, #0]
			return;
  40aecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	DPP_Threshold   = DPP_data & 0xFF;  //Ricavo il byte basso
  40aed0:	b2ef      	uxtb	r7, r5
		}
		else if(dpp_status > 10 &  cnt_step == 1 & sData.speed_motors_R ==  MINSPEED  )  // è scattato e sono al minimo non riesco a controllare sotto questa soglia
  40aed2:	2a40      	cmp	r2, #64	; 0x40
  40aed4:	d16e      	bne.n	40afb4 <verifica_clogged_filter+0x194>
  40aed6:	2900      	cmp	r1, #0
  40aed8:	d06c      	beq.n	40afb4 <verifica_clogged_filter+0x194>
		{
			// Calcolo il fattore di sporcamento
			sporcamento = (int) ((1.0f  - (float) MINSPEED / (float) calibrazione) * 100.0f);
  40aeda:	4620      	mov	r0, r4
  40aedc:	4b7c      	ldr	r3, [pc, #496]	; (40b0d0 <verifica_clogged_filter+0x2b0>)
  40aede:	4798      	blx	r3
  40aee0:	4601      	mov	r1, r0
  40aee2:	f04f 4085 	mov.w	r0, #1115684864	; 0x42800000
  40aee6:	4b7b      	ldr	r3, [pc, #492]	; (40b0d4 <verifica_clogged_filter+0x2b4>)
  40aee8:	4798      	blx	r3
  40aeea:	4601      	mov	r1, r0
  40aeec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40aef0:	4b79      	ldr	r3, [pc, #484]	; (40b0d8 <verifica_clogged_filter+0x2b8>)
  40aef2:	4798      	blx	r3
  40aef4:	4979      	ldr	r1, [pc, #484]	; (40b0dc <verifica_clogged_filter+0x2bc>)
  40aef6:	4b7a      	ldr	r3, [pc, #488]	; (40b0e0 <verifica_clogged_filter+0x2c0>)
  40aef8:	4798      	blx	r3
  40aefa:	4b7a      	ldr	r3, [pc, #488]	; (40b0e4 <verifica_clogged_filter+0x2c4>)
  40aefc:	4798      	blx	r3
  40aefe:	4c7a      	ldr	r4, [pc, #488]	; (40b0e8 <verifica_clogged_filter+0x2c8>)
  40af00:	47a0      	blx	r4
  40af02:	4680      	mov	r8, r0
			if (sporcamento > DPP_Threshold)
  40af04:	4638      	mov	r0, r7
  40af06:	47a0      	blx	r4
  40af08:	4601      	mov	r1, r0
  40af0a:	4640      	mov	r0, r8
  40af0c:	4b77      	ldr	r3, [pc, #476]	; (40b0ec <verifica_clogged_filter+0x2cc>)
  40af0e:	4798      	blx	r3
  40af10:	2800      	cmp	r0, #0
  40af12:	d030      	beq.n	40af76 <verifica_clogged_filter+0x156>
			{
				DPP_FilterLevel = ((int)(sporcamento/5) << 2);             // Scrivo l'ultima verifica (20 step da 5%) e spengo la richiesta
				sData.status_unit &= ~(1 << POS_BIT_DPP_CHECK);            // libero il controllo motori
  40af14:	4a69      	ldr	r2, [pc, #420]	; (40b0bc <verifica_clogged_filter+0x29c>)
  40af16:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40af1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40af1e:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
				InsertAlarm(ALM_FILTER);                                   // inserisco l'allarme filtro sporco
  40af22:	2055      	movs	r0, #85	; 0x55
  40af24:	4b72      	ldr	r3, [pc, #456]	; (40b0f0 <verifica_clogged_filter+0x2d0>)
  40af26:	4798      	blx	r3
				last_timeCloggedFilters=1;
				write_Dword_eeprom(ADDR_EEP(time_lastCloggedFilters), last_timeCloggedFilters);
  40af28:	2101      	movs	r1, #1
  40af2a:	2026      	movs	r0, #38	; 0x26
  40af2c:	4b71      	ldr	r3, [pc, #452]	; (40b0f4 <verifica_clogged_filter+0x2d4>)
  40af2e:	4798      	blx	r3
				cntUpdate_info = read_byte_eeprom( ADDR_EEP( cntUpdate_info ) );
  40af30:	203a      	movs	r0, #58	; 0x3a
  40af32:	4e61      	ldr	r6, [pc, #388]	; (40b0b8 <verifica_clogged_filter+0x298>)
  40af34:	47b0      	blx	r6
				cntUpdate_info++;
  40af36:	1c41      	adds	r1, r0, #1
				write_byte_eeprom( ADDR_EEP( cntUpdate_info ), cntUpdate_info );
  40af38:	b2c9      	uxtb	r1, r1
  40af3a:	203a      	movs	r0, #58	; 0x3a
  40af3c:	4c6e      	ldr	r4, [pc, #440]	; (40b0f8 <verifica_clogged_filter+0x2d8>)
  40af3e:	47a0      	blx	r4
				DPP_FilterLevel = ((int)(sporcamento/5) << 2);             // Scrivo l'ultima verifica (20 step da 5%) e spengo la richiesta
  40af40:	496e      	ldr	r1, [pc, #440]	; (40b0fc <verifica_clogged_filter+0x2dc>)
  40af42:	4640      	mov	r0, r8
  40af44:	4b63      	ldr	r3, [pc, #396]	; (40b0d4 <verifica_clogged_filter+0x2b4>)
  40af46:	4798      	blx	r3
  40af48:	4b66      	ldr	r3, [pc, #408]	; (40b0e4 <verifica_clogged_filter+0x2c4>)
  40af4a:	4798      	blx	r3
				DPP_data = DPP_Threshold | (DPP_FilterLevel << 8);         // ricompongo i byte
  40af4c:	ea47 2080 	orr.w	r0, r7, r0, lsl #10
				write_word_eeprom(ADDR_EEP(gg_manut_Filter), DPP_data);    // scrivo in Eeprom il valore
  40af50:	f64f 41ff 	movw	r1, #64767	; 0xfcff
  40af54:	4001      	ands	r1, r0
  40af56:	206b      	movs	r0, #107	; 0x6b
  40af58:	4b69      	ldr	r3, [pc, #420]	; (40b100 <verifica_clogged_filter+0x2e0>)
  40af5a:	4798      	blx	r3
				cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40af5c:	207e      	movs	r0, #126	; 0x7e
  40af5e:	47b0      	blx	r6
				cntUpdate_SettingPar++;
  40af60:	1c41      	adds	r1, r0, #1
				write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40af62:	b2c9      	uxtb	r1, r1
  40af64:	207e      	movs	r0, #126	; 0x7e
  40af66:	47a0      	blx	r4
				//     Serial_println1(" <<< VERIFICA MINIMO: SONO SPORCO >>>");
				cnt_tempo=0;                                               // azzero il contatore
  40af68:	2300      	movs	r3, #0
  40af6a:	4a56      	ldr	r2, [pc, #344]	; (40b0c4 <verifica_clogged_filter+0x2a4>)
  40af6c:	6013      	str	r3, [r2, #0]
				cnt_step=0;                                                // azzero il contatore
  40af6e:	4a54      	ldr	r2, [pc, #336]	; (40b0c0 <verifica_clogged_filter+0x2a0>)
  40af70:	6013      	str	r3, [r2, #0]
				return;
  40af72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			else
			{
				// Non ho visibilità sotto questa soglia, non sono ancora sporco a sufficienza, passo al dps
				write_byte_eeprom(ADDR_EEP(DPP_Calibrationvalue), 0);    // scrivo la calibrazione = 0 (passo a DPS)
  40af76:	2100      	movs	r1, #0
  40af78:	207a      	movs	r0, #122	; 0x7a
  40af7a:	4c5f      	ldr	r4, [pc, #380]	; (40b0f8 <verifica_clogged_filter+0x2d8>)
  40af7c:	47a0      	blx	r4
				sData.status_unit &= ~(1 << POS_BIT_DPP_CHECK);            // libero il controllo motori
  40af7e:	4a4f      	ldr	r2, [pc, #316]	; (40b0bc <verifica_clogged_filter+0x29c>)
  40af80:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40af84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40af88:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
				DPP_FilterLevel |= 0x00;                                 // spengo la richiesta
				DPP_data = DPP_Threshold | (DPP_FilterLevel << 8);         // ricompongo i byte
  40af8c:	b2e9      	uxtb	r1, r5
				write_word_eeprom(ADDR_EEP(gg_manut_Filter), DPP_data);    // scrivo in Eeprom il valore
  40af8e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  40af92:	206b      	movs	r0, #107	; 0x6b
  40af94:	4b5a      	ldr	r3, [pc, #360]	; (40b100 <verifica_clogged_filter+0x2e0>)
  40af96:	4798      	blx	r3
				cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40af98:	207e      	movs	r0, #126	; 0x7e
  40af9a:	4b47      	ldr	r3, [pc, #284]	; (40b0b8 <verifica_clogged_filter+0x298>)
  40af9c:	4798      	blx	r3
				cntUpdate_SettingPar++;
  40af9e:	1c41      	adds	r1, r0, #1
				write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40afa0:	b2c9      	uxtb	r1, r1
  40afa2:	207e      	movs	r0, #126	; 0x7e
  40afa4:	47a0      	blx	r4
				//     Serial_println1(" <<< VERIFICA MINIMO: PASSO A DPS >>>");
				cnt_tempo=0;                                             // azzero il contatore
  40afa6:	2300      	movs	r3, #0
  40afa8:	4a46      	ldr	r2, [pc, #280]	; (40b0c4 <verifica_clogged_filter+0x2a4>)
  40afaa:	6013      	str	r3, [r2, #0]
				cnt_step= 0;                                             // azzero il contatore
  40afac:	4a44      	ldr	r2, [pc, #272]	; (40b0c0 <verifica_clogged_filter+0x2a0>)
  40afae:	6013      	str	r3, [r2, #0]
				return;
  40afb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		else if(dpp_status < 10 &  cnt_step == 1 & sData.speed_motors_R >=  MINSPEED  )  // NON è scattato a una nuova soglia
  40afb4:	2a3f      	cmp	r2, #63	; 0x3f
  40afb6:	bf94      	ite	ls
  40afb8:	2300      	movls	r3, #0
  40afba:	f003 0301 	andhi.w	r3, r3, #1
  40afbe:	2b00      	cmp	r3, #0
  40afc0:	f43f af5e 	beq.w	40ae80 <verifica_clogged_filter+0x60>
  40afc4:	2809      	cmp	r0, #9
  40afc6:	f73f af5b 	bgt.w	40ae80 <verifica_clogged_filter+0x60>
		{
			// Calcolo il fattore di sporcamento
			sporcamento = (int) ((1.0f  - (float) sData.speed_motors_R / (float) calibrazione) * 100.0f);
  40afca:	4e41      	ldr	r6, [pc, #260]	; (40b0d0 <verifica_clogged_filter+0x2b0>)
  40afcc:	4610      	mov	r0, r2
  40afce:	47b0      	blx	r6
  40afd0:	4680      	mov	r8, r0
  40afd2:	4620      	mov	r0, r4
  40afd4:	47b0      	blx	r6
  40afd6:	4601      	mov	r1, r0
  40afd8:	4640      	mov	r0, r8
  40afda:	4b3e      	ldr	r3, [pc, #248]	; (40b0d4 <verifica_clogged_filter+0x2b4>)
  40afdc:	4798      	blx	r3
  40afde:	4601      	mov	r1, r0
  40afe0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40afe4:	4b3c      	ldr	r3, [pc, #240]	; (40b0d8 <verifica_clogged_filter+0x2b8>)
  40afe6:	4798      	blx	r3
  40afe8:	493c      	ldr	r1, [pc, #240]	; (40b0dc <verifica_clogged_filter+0x2bc>)
  40afea:	4b3d      	ldr	r3, [pc, #244]	; (40b0e0 <verifica_clogged_filter+0x2c0>)
  40afec:	4798      	blx	r3
  40afee:	4b3d      	ldr	r3, [pc, #244]	; (40b0e4 <verifica_clogged_filter+0x2c4>)
  40aff0:	4798      	blx	r3
  40aff2:	4e3d      	ldr	r6, [pc, #244]	; (40b0e8 <verifica_clogged_filter+0x2c8>)
  40aff4:	47b0      	blx	r6
  40aff6:	4604      	mov	r4, r0
			if (sporcamento > DPP_Threshold)
  40aff8:	4638      	mov	r0, r7
  40affa:	47b0      	blx	r6
  40affc:	4601      	mov	r1, r0
  40affe:	4620      	mov	r0, r4
  40b000:	4b3a      	ldr	r3, [pc, #232]	; (40b0ec <verifica_clogged_filter+0x2cc>)
  40b002:	4798      	blx	r3
  40b004:	bb18      	cbnz	r0, 40b04e <verifica_clogged_filter+0x22e>
			}
			else
			{
				// I filtri non sono ancora sporchi a sufficienza, memorizzo il valore rilevato e aspetto la prossima verifica
				DPP_FilterLevel = ((int)(sporcamento/5) << 2);             // Scrivo l'ultima verifica (20 step da 5%) e spengo la richiesta
				sData.status_unit &= ~(1 << POS_BIT_DPP_CHECK);            // libero il controllo motori
  40b006:	4a2d      	ldr	r2, [pc, #180]	; (40b0bc <verifica_clogged_filter+0x29c>)
  40b008:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40b00c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b010:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
				DPP_FilterLevel = ((int)(sporcamento/5) << 2);             // Scrivo l'ultima verifica (20 step da 5%) e spengo la richiesta
  40b014:	4939      	ldr	r1, [pc, #228]	; (40b0fc <verifica_clogged_filter+0x2dc>)
  40b016:	4620      	mov	r0, r4
  40b018:	4b2e      	ldr	r3, [pc, #184]	; (40b0d4 <verifica_clogged_filter+0x2b4>)
  40b01a:	4798      	blx	r3
  40b01c:	4b31      	ldr	r3, [pc, #196]	; (40b0e4 <verifica_clogged_filter+0x2c4>)
  40b01e:	4798      	blx	r3
				DPP_data = DPP_Threshold | (DPP_FilterLevel << 8);         // ricompongo i byte
  40b020:	b2ed      	uxtb	r5, r5
  40b022:	ea45 2080 	orr.w	r0, r5, r0, lsl #10
				write_word_eeprom(ADDR_EEP(gg_manut_Filter), DPP_data);    // scrivo in Eeprom il valore
  40b026:	f64f 41ff 	movw	r1, #64767	; 0xfcff
  40b02a:	4001      	ands	r1, r0
  40b02c:	206b      	movs	r0, #107	; 0x6b
  40b02e:	4b34      	ldr	r3, [pc, #208]	; (40b100 <verifica_clogged_filter+0x2e0>)
  40b030:	4798      	blx	r3
				cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40b032:	207e      	movs	r0, #126	; 0x7e
  40b034:	4b20      	ldr	r3, [pc, #128]	; (40b0b8 <verifica_clogged_filter+0x298>)
  40b036:	4798      	blx	r3
				cntUpdate_SettingPar++;
  40b038:	1c41      	adds	r1, r0, #1
				write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40b03a:	b2c9      	uxtb	r1, r1
  40b03c:	207e      	movs	r0, #126	; 0x7e
  40b03e:	4b2e      	ldr	r3, [pc, #184]	; (40b0f8 <verifica_clogged_filter+0x2d8>)
  40b040:	4798      	blx	r3
				//    Serial_println1(" <<< VERIFICA > MINIMO: SONO ANCORA PULITO >>>");
				cnt_tempo=0;                                               // azzero il contatore
  40b042:	2300      	movs	r3, #0
  40b044:	4a1f      	ldr	r2, [pc, #124]	; (40b0c4 <verifica_clogged_filter+0x2a4>)
  40b046:	6013      	str	r3, [r2, #0]
				cnt_step=0;                                                // azzero il contatore
  40b048:	4a1d      	ldr	r2, [pc, #116]	; (40b0c0 <verifica_clogged_filter+0x2a0>)
  40b04a:	6013      	str	r3, [r2, #0]
				return;
  40b04c:	e718      	b.n	40ae80 <verifica_clogged_filter+0x60>
				sData.status_unit &= ~(1 << POS_BIT_DPP_CHECK);            // libero il controllo motori
  40b04e:	4a1b      	ldr	r2, [pc, #108]	; (40b0bc <verifica_clogged_filter+0x29c>)
  40b050:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40b054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b058:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
				InsertAlarm(ALM_FILTER);                                   // inserisco l'allarme filtro sporco
  40b05c:	2055      	movs	r0, #85	; 0x55
  40b05e:	4b24      	ldr	r3, [pc, #144]	; (40b0f0 <verifica_clogged_filter+0x2d0>)
  40b060:	4798      	blx	r3
				write_Dword_eeprom(ADDR_EEP(time_lastCloggedFilters), last_timeCloggedFilters);
  40b062:	2101      	movs	r1, #1
  40b064:	2026      	movs	r0, #38	; 0x26
  40b066:	4b23      	ldr	r3, [pc, #140]	; (40b0f4 <verifica_clogged_filter+0x2d4>)
  40b068:	4798      	blx	r3
				cntUpdate_info = read_byte_eeprom( ADDR_EEP( cntUpdate_info ) );
  40b06a:	203a      	movs	r0, #58	; 0x3a
  40b06c:	4f12      	ldr	r7, [pc, #72]	; (40b0b8 <verifica_clogged_filter+0x298>)
  40b06e:	47b8      	blx	r7
				cntUpdate_info++;
  40b070:	1c41      	adds	r1, r0, #1
				write_byte_eeprom( ADDR_EEP( cntUpdate_info ), cntUpdate_info );
  40b072:	b2c9      	uxtb	r1, r1
  40b074:	203a      	movs	r0, #58	; 0x3a
  40b076:	4e20      	ldr	r6, [pc, #128]	; (40b0f8 <verifica_clogged_filter+0x2d8>)
  40b078:	47b0      	blx	r6
				DPP_FilterLevel = ((int)(sporcamento/5) << 2);             // Scrivo l'ultima verifica (20 step da 5%) e spengo la richiesta
  40b07a:	4920      	ldr	r1, [pc, #128]	; (40b0fc <verifica_clogged_filter+0x2dc>)
  40b07c:	4620      	mov	r0, r4
  40b07e:	4b15      	ldr	r3, [pc, #84]	; (40b0d4 <verifica_clogged_filter+0x2b4>)
  40b080:	4798      	blx	r3
  40b082:	4b18      	ldr	r3, [pc, #96]	; (40b0e4 <verifica_clogged_filter+0x2c4>)
  40b084:	4798      	blx	r3
				DPP_data = DPP_Threshold | (DPP_FilterLevel << 8);         // ricompongo i byte
  40b086:	b2ed      	uxtb	r5, r5
  40b088:	ea45 2080 	orr.w	r0, r5, r0, lsl #10
				write_word_eeprom(ADDR_EEP(gg_manut_Filter), DPP_data);    // scrivo in Eeprom il valore
  40b08c:	f64f 41ff 	movw	r1, #64767	; 0xfcff
  40b090:	4001      	ands	r1, r0
  40b092:	206b      	movs	r0, #107	; 0x6b
  40b094:	4b1a      	ldr	r3, [pc, #104]	; (40b100 <verifica_clogged_filter+0x2e0>)
  40b096:	4798      	blx	r3
				cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40b098:	207e      	movs	r0, #126	; 0x7e
  40b09a:	47b8      	blx	r7
				cntUpdate_SettingPar++;
  40b09c:	1c41      	adds	r1, r0, #1
				write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40b09e:	b2c9      	uxtb	r1, r1
  40b0a0:	207e      	movs	r0, #126	; 0x7e
  40b0a2:	47b0      	blx	r6
				cnt_tempo=0;                                               // azzero il contatore
  40b0a4:	2300      	movs	r3, #0
  40b0a6:	4a07      	ldr	r2, [pc, #28]	; (40b0c4 <verifica_clogged_filter+0x2a4>)
  40b0a8:	6013      	str	r3, [r2, #0]
				cnt_step=0;                                                // azzero il contatore
  40b0aa:	4a05      	ldr	r2, [pc, #20]	; (40b0c0 <verifica_clogged_filter+0x2a0>)
  40b0ac:	6013      	str	r3, [r2, #0]
				return;
  40b0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b0b2:	bf00      	nop
  40b0b4:	0040a279 	.word	0x0040a279
  40b0b8:	0040a26d 	.word	0x0040a26d
  40b0bc:	200013ac 	.word	0x200013ac
  40b0c0:	20000df8 	.word	0x20000df8
  40b0c4:	20000dfc 	.word	0x20000dfc
  40b0c8:	004138c0 	.word	0x004138c0
  40b0cc:	0040c5d9 	.word	0x0040c5d9
  40b0d0:	0040d745 	.word	0x0040d745
  40b0d4:	0040d95d 	.word	0x0040d95d
  40b0d8:	0040d5e1 	.word	0x0040d5e1
  40b0dc:	42c80000 	.word	0x42c80000
  40b0e0:	0040d7f5 	.word	0x0040d7f5
  40b0e4:	0040db81 	.word	0x0040db81
  40b0e8:	0040d74d 	.word	0x0040d74d
  40b0ec:	0040db6d 	.word	0x0040db6d
  40b0f0:	00403555 	.word	0x00403555
  40b0f4:	0040a239 	.word	0x0040a239
  40b0f8:	0040a1fd 	.word	0x0040a1fd
  40b0fc:	40a00000 	.word	0x40a00000
  40b100:	0040a215 	.word	0x0040a215

0040b104 <calibrazione_clogged_filter>:
//  Calibrazione dei filtri, la funzione gira nella
//  operatingHoursCounter() che sta nello sheduler.
//---------------------------------------------------------------------

void  calibrazione_clogged_filter()
{
  40b104:	b570      	push	{r4, r5, r6, lr}
	Byte DPP_FilterLevel;
	Byte DPP_Threshold;
	int dpp_status;
	Byte cntUpdate_SettingPar;
	
	enab_func = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  40b106:	202e      	movs	r0, #46	; 0x2e
  40b108:	4d68      	ldr	r5, [pc, #416]	; (40b2ac <calibrazione_clogged_filter+0x1a8>)
  40b10a:	47a8      	blx	r5
  40b10c:	4604      	mov	r4, r0
	DPP_data = (word)read_word_eeprom(ADDR_EEP(gg_manut_Filter));
  40b10e:	206b      	movs	r0, #107	; 0x6b
  40b110:	47a8      	blx	r5
	DPP_FilterLevel = DPP_data >>   8;  //Ricavo il byte alto
  40b112:	f3c0 2507 	ubfx	r5, r0, #8, #8
	DPP_Threshold   = DPP_data & 0xFF;  //Ricavo il byte basso

	// Serial_println1(" <<< CALIBRAZIONE prima IF >>>");
	if((enab_func & (1 << ENAB_CTRL_FILTER))!=0 & (enab_func & (1 << ENAB_DPP))!=0  & (DPP_FilterLevel & 0x01)==1 & (DPP_FilterLevel & 0x02)==0  ) {
  40b116:	f085 0302 	eor.w	r3, r5, #2
  40b11a:	f3c3 0340 	ubfx	r3, r3, #1, #1
  40b11e:	421d      	tst	r5, r3
  40b120:	d01e      	beq.n	40b160 <calibrazione_clogged_filter+0x5c>
  40b122:	4606      	mov	r6, r0
  40b124:	f404 5408 	and.w	r4, r4, #8704	; 0x2200
  40b128:	f5b4 5f08 	cmp.w	r4, #8704	; 0x2200
  40b12c:	d118      	bne.n	40b160 <calibrazione_clogged_filter+0x5c>

		//  Facciamo la taratura del sistema
		//  Siamo in Calibrazione
		sData.status_unit |= (1 << POS_BIT_DPP_CHECK); // prendiamo il controllo motori
  40b12e:	4a60      	ldr	r2, [pc, #384]	; (40b2b0 <calibrazione_clogged_filter+0x1ac>)
  40b130:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40b134:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40b138:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
		
		if (cnt_step==0)
  40b13c:	4b5d      	ldr	r3, [pc, #372]	; (40b2b4 <calibrazione_clogged_filter+0x1b0>)
  40b13e:	681b      	ldr	r3, [r3, #0]
  40b140:	b943      	cbnz	r3, 40b154 <calibrazione_clogged_filter+0x50>
		{
			sData.speed_motors_R = 255;
  40b142:	4613      	mov	r3, r2
  40b144:	22ff      	movs	r2, #255	; 0xff
  40b146:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
			sData.speed_motors_F = 255;
  40b14a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
			cnt_step =1;
  40b14e:	2201      	movs	r2, #1
  40b150:	4b58      	ldr	r3, [pc, #352]	; (40b2b4 <calibrazione_clogged_filter+0x1b0>)
  40b152:	601a      	str	r2, [r3, #0]
		}
		//   Serial_println1(" <<< CALIBRAZIONE DOPO IF >>>");
		if(++cnt_tempo <= TEMPO)
  40b154:	4a58      	ldr	r2, [pc, #352]	; (40b2b8 <calibrazione_clogged_filter+0x1b4>)
  40b156:	6813      	ldr	r3, [r2, #0]
  40b158:	3301      	adds	r3, #1
  40b15a:	6013      	str	r3, [r2, #0]
  40b15c:	2b1e      	cmp	r3, #30
  40b15e:	dc00      	bgt.n	40b162 <calibrazione_clogged_filter+0x5e>
  40b160:	bd70      	pop	{r4, r5, r6, pc}
		return;

		dpp_status = analogRead(pAnSensQual_Ari1);  // leggo il pressostato
  40b162:	4b56      	ldr	r3, [pc, #344]	; (40b2bc <calibrazione_clogged_filter+0x1b8>)
  40b164:	7818      	ldrb	r0, [r3, #0]
  40b166:	4b56      	ldr	r3, [pc, #344]	; (40b2c0 <calibrazione_clogged_filter+0x1bc>)
  40b168:	4798      	blx	r3
		

		if(dpp_status < 10 & sData.speed_motors_R == 255)          // sono al massimo e non scatta: il punto di sporcamento > della curva massima = calibrazione a 255
  40b16a:	2809      	cmp	r0, #9
  40b16c:	bfcc      	ite	gt
  40b16e:	2200      	movgt	r2, #0
  40b170:	2201      	movle	r2, #1
  40b172:	4b4f      	ldr	r3, [pc, #316]	; (40b2b0 <calibrazione_clogged_filter+0x1ac>)
  40b174:	f893 11af 	ldrb.w	r1, [r3, #431]	; 0x1af
  40b178:	29ff      	cmp	r1, #255	; 0xff
  40b17a:	d100      	bne.n	40b17e <calibrazione_clogged_filter+0x7a>
  40b17c:	b9b2      	cbnz	r2, 40b1ac <calibrazione_clogged_filter+0xa8>
			cnt_tempo=0;                                             // azzero il contatore
			cnt_step=0;                                              // azzero il contatore
			//     Serial_println1(" <<< CALIBRAZIONE 255 >>>");
			return;
		}
		else if (dpp_status > 10 & cnt_step==1)                      // sono al massimo e scatta: vediamo cosa succede al minimo
  40b17e:	280a      	cmp	r0, #10
  40b180:	bfd4      	ite	le
  40b182:	2000      	movle	r0, #0
  40b184:	2001      	movgt	r0, #1
  40b186:	4b4b      	ldr	r3, [pc, #300]	; (40b2b4 <calibrazione_clogged_filter+0x1b0>)
  40b188:	681b      	ldr	r3, [r3, #0]
  40b18a:	2b01      	cmp	r3, #1
  40b18c:	d12d      	bne.n	40b1ea <calibrazione_clogged_filter+0xe6>
  40b18e:	2800      	cmp	r0, #0
  40b190:	d02b      	beq.n	40b1ea <calibrazione_clogged_filter+0xe6>
		{
			sData.speed_motors_R =  MINSPEED;
  40b192:	4b47      	ldr	r3, [pc, #284]	; (40b2b0 <calibrazione_clogged_filter+0x1ac>)
  40b194:	2240      	movs	r2, #64	; 0x40
  40b196:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
			sData.speed_motors_F =  MINSPEED;
  40b19a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
			//     Serial_println1(" <<< VADO AL MINIMO >>>");
			cnt_tempo=0;
  40b19e:	2200      	movs	r2, #0
  40b1a0:	4b45      	ldr	r3, [pc, #276]	; (40b2b8 <calibrazione_clogged_filter+0x1b4>)
  40b1a2:	601a      	str	r2, [r3, #0]
			cnt_step =2;
  40b1a4:	2202      	movs	r2, #2
  40b1a6:	4b43      	ldr	r3, [pc, #268]	; (40b2b4 <calibrazione_clogged_filter+0x1b0>)
  40b1a8:	601a      	str	r2, [r3, #0]
			return;
  40b1aa:	bd70      	pop	{r4, r5, r6, pc}
			write_byte_eeprom(ADDR_EEP(DPP_Calibrationvalue), 255);  // scrivo la calibrazione
  40b1ac:	207a      	movs	r0, #122	; 0x7a
  40b1ae:	4c45      	ldr	r4, [pc, #276]	; (40b2c4 <calibrazione_clogged_filter+0x1c0>)
  40b1b0:	47a0      	blx	r4
			sData.status_unit &= ~(1 << POS_BIT_DPP_CHECK);          // libero il controllo motori
  40b1b2:	4a3f      	ldr	r2, [pc, #252]	; (40b2b0 <calibrazione_clogged_filter+0x1ac>)
  40b1b4:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40b1b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b1bc:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
			DPP_data = DPP_Threshold | (DPP_FilterLevel << 8);         // ricompongo i byte
  40b1c0:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
  40b1c4:	b2f6      	uxtb	r6, r6
			write_word_eeprom(ADDR_EEP(gg_manut_Filter), DPP_data);    // scrivo in Eeprom il valore
  40b1c6:	ea46 2101 	orr.w	r1, r6, r1, lsl #8
  40b1ca:	206b      	movs	r0, #107	; 0x6b
  40b1cc:	4b3e      	ldr	r3, [pc, #248]	; (40b2c8 <calibrazione_clogged_filter+0x1c4>)
  40b1ce:	4798      	blx	r3
			cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40b1d0:	207e      	movs	r0, #126	; 0x7e
  40b1d2:	4b3e      	ldr	r3, [pc, #248]	; (40b2cc <calibrazione_clogged_filter+0x1c8>)
  40b1d4:	4798      	blx	r3
			cntUpdate_SettingPar++;
  40b1d6:	1c41      	adds	r1, r0, #1
			write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40b1d8:	b2c9      	uxtb	r1, r1
  40b1da:	207e      	movs	r0, #126	; 0x7e
  40b1dc:	47a0      	blx	r4
			cnt_tempo=0;                                             // azzero il contatore
  40b1de:	2300      	movs	r3, #0
  40b1e0:	4a35      	ldr	r2, [pc, #212]	; (40b2b8 <calibrazione_clogged_filter+0x1b4>)
  40b1e2:	6013      	str	r3, [r2, #0]
			cnt_step=0;                                              // azzero il contatore
  40b1e4:	4a33      	ldr	r2, [pc, #204]	; (40b2b4 <calibrazione_clogged_filter+0x1b0>)
  40b1e6:	6013      	str	r3, [r2, #0]
			return;
  40b1e8:	bd70      	pop	{r4, r5, r6, pc}
		}
		else if (cnt_step==2 & dpp_status > 10 & sData.speed_motors_R ==  MINSPEED) // sono al minimo e scatta: non abbiamo visibilità per lo scatto del DPP, torniamo al DPS (calibrazione =0)
  40b1ea:	2b02      	cmp	r3, #2
  40b1ec:	bf14      	ite	ne
  40b1ee:	2300      	movne	r3, #0
  40b1f0:	2301      	moveq	r3, #1
  40b1f2:	4018      	ands	r0, r3
  40b1f4:	2940      	cmp	r1, #64	; 0x40
  40b1f6:	d100      	bne.n	40b1fa <calibrazione_clogged_filter+0xf6>
  40b1f8:	b998      	cbnz	r0, 40b222 <calibrazione_clogged_filter+0x11e>
			cnt_tempo=0;                                             // azzero il contatore
			cnt_step= 0;                                             // azzero il contatore
			//    Serial_println1(" <<< CALIBRAZIONE 0 >>>");
			return;
		}
		else if (cnt_step==2 & dpp_status < 10 )                   // sono al minimo (inizialmente) e non scatta: incrementiamo fino a trovare il valore per cui scatta
  40b1fa:	2a00      	cmp	r2, #0
  40b1fc:	d031      	beq.n	40b262 <calibrazione_clogged_filter+0x15e>
  40b1fe:	2b00      	cmp	r3, #0
  40b200:	d02f      	beq.n	40b262 <calibrazione_clogged_filter+0x15e>
		{
			sData.speed_motors_R += 13 ;
  40b202:	4b2b      	ldr	r3, [pc, #172]	; (40b2b0 <calibrazione_clogged_filter+0x1ac>)
  40b204:	310d      	adds	r1, #13
  40b206:	f883 11af 	strb.w	r1, [r3, #431]	; 0x1af
			sData.speed_motors_F += 13 ;
  40b20a:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
  40b20e:	320d      	adds	r2, #13
  40b210:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
			//    Serial_println1(" <<< INCREMENTO >>>");
			cnt_tempo=TEMPO/2;
  40b214:	220f      	movs	r2, #15
  40b216:	4b28      	ldr	r3, [pc, #160]	; (40b2b8 <calibrazione_clogged_filter+0x1b4>)
  40b218:	601a      	str	r2, [r3, #0]
			cnt_step =2;
  40b21a:	2202      	movs	r2, #2
  40b21c:	4b25      	ldr	r3, [pc, #148]	; (40b2b4 <calibrazione_clogged_filter+0x1b0>)
  40b21e:	601a      	str	r2, [r3, #0]
			return;
  40b220:	bd70      	pop	{r4, r5, r6, pc}
			write_byte_eeprom(ADDR_EEP(DPP_Calibrationvalue), 0);    // scrivo la calibrazione = 0 (passo a DPS)
  40b222:	2100      	movs	r1, #0
  40b224:	207a      	movs	r0, #122	; 0x7a
  40b226:	4c27      	ldr	r4, [pc, #156]	; (40b2c4 <calibrazione_clogged_filter+0x1c0>)
  40b228:	47a0      	blx	r4
			sData.status_unit &= ~(1 << POS_BIT_DPP_CHECK);          // libero il controllo motori
  40b22a:	4a21      	ldr	r2, [pc, #132]	; (40b2b0 <calibrazione_clogged_filter+0x1ac>)
  40b22c:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40b230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b234:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
			DPP_data = DPP_Threshold | (DPP_FilterLevel << 8);         // ricompongo i byte
  40b238:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
  40b23c:	b2f6      	uxtb	r6, r6
			write_word_eeprom(ADDR_EEP(gg_manut_Filter), DPP_data);    // scrivo in Eeprom il valore
  40b23e:	ea46 2101 	orr.w	r1, r6, r1, lsl #8
  40b242:	206b      	movs	r0, #107	; 0x6b
  40b244:	4b20      	ldr	r3, [pc, #128]	; (40b2c8 <calibrazione_clogged_filter+0x1c4>)
  40b246:	4798      	blx	r3
			cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40b248:	207e      	movs	r0, #126	; 0x7e
  40b24a:	4b20      	ldr	r3, [pc, #128]	; (40b2cc <calibrazione_clogged_filter+0x1c8>)
  40b24c:	4798      	blx	r3
			cntUpdate_SettingPar++;
  40b24e:	1c41      	adds	r1, r0, #1
			write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40b250:	b2c9      	uxtb	r1, r1
  40b252:	207e      	movs	r0, #126	; 0x7e
  40b254:	47a0      	blx	r4
			cnt_tempo=0;                                             // azzero il contatore
  40b256:	2300      	movs	r3, #0
  40b258:	4a17      	ldr	r2, [pc, #92]	; (40b2b8 <calibrazione_clogged_filter+0x1b4>)
  40b25a:	6013      	str	r3, [r2, #0]
			cnt_step= 0;                                             // azzero il contatore
  40b25c:	4a15      	ldr	r2, [pc, #84]	; (40b2b4 <calibrazione_clogged_filter+0x1b0>)
  40b25e:	6013      	str	r3, [r2, #0]
			return;
  40b260:	bd70      	pop	{r4, r5, r6, pc}
		}
		else if (cnt_step==2 & dpp_status > 10 & sData.speed_motors_R > MINSPEED)  // Ho trovato la velocità per cui scatta: la memorizzo nella calibrazione
  40b262:	2940      	cmp	r1, #64	; 0x40
  40b264:	f67f af7c 	bls.w	40b160 <calibrazione_clogged_filter+0x5c>
  40b268:	2800      	cmp	r0, #0
  40b26a:	f43f af79 	beq.w	40b160 <calibrazione_clogged_filter+0x5c>
		{
			write_byte_eeprom(ADDR_EEP(DPP_Calibrationvalue), sData.speed_motors_R);    // scrivo la calibrazione = valore di regolazione motori
  40b26e:	207a      	movs	r0, #122	; 0x7a
  40b270:	4c14      	ldr	r4, [pc, #80]	; (40b2c4 <calibrazione_clogged_filter+0x1c0>)
  40b272:	47a0      	blx	r4
			sData.status_unit &= ~(1 << POS_BIT_DPP_CHECK);          // libero il controllo motori
  40b274:	4a0e      	ldr	r2, [pc, #56]	; (40b2b0 <calibrazione_clogged_filter+0x1ac>)
  40b276:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40b27a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b27e:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
			DPP_FilterLevel &= ~0x03;                                // spengo la richiesta
			DPP_data = DPP_Threshold | (DPP_FilterLevel << 8);         // ricompongo i byte
  40b282:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
  40b286:	b2f1      	uxtb	r1, r6
			write_word_eeprom(ADDR_EEP(gg_manut_Filter), DPP_data);    // scrivo in Eeprom il valore
  40b288:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  40b28c:	206b      	movs	r0, #107	; 0x6b
  40b28e:	4b0e      	ldr	r3, [pc, #56]	; (40b2c8 <calibrazione_clogged_filter+0x1c4>)
  40b290:	4798      	blx	r3
			cntUpdate_SettingPar = read_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ) );
  40b292:	207e      	movs	r0, #126	; 0x7e
  40b294:	4b0d      	ldr	r3, [pc, #52]	; (40b2cc <calibrazione_clogged_filter+0x1c8>)
  40b296:	4798      	blx	r3
			cntUpdate_SettingPar++;
  40b298:	1c41      	adds	r1, r0, #1
			write_byte_eeprom( ADDR_EEP( cntUpdate_SettingPar ), cntUpdate_SettingPar );
  40b29a:	b2c9      	uxtb	r1, r1
  40b29c:	207e      	movs	r0, #126	; 0x7e
  40b29e:	47a0      	blx	r4
			//   Serial_println1(" <<< CALIBRAZIONE > MINSPEED >>>");
			cnt_tempo=0;                                             // azzero il contatore
  40b2a0:	2300      	movs	r3, #0
  40b2a2:	4a05      	ldr	r2, [pc, #20]	; (40b2b8 <calibrazione_clogged_filter+0x1b4>)
  40b2a4:	6013      	str	r3, [r2, #0]
			cnt_step= 0;                                             // azzero il contatore
  40b2a6:	4a03      	ldr	r2, [pc, #12]	; (40b2b4 <calibrazione_clogged_filter+0x1b0>)
  40b2a8:	6013      	str	r3, [r2, #0]
			return;
  40b2aa:	e759      	b.n	40b160 <calibrazione_clogged_filter+0x5c>
  40b2ac:	0040a279 	.word	0x0040a279
  40b2b0:	200013ac 	.word	0x200013ac
  40b2b4:	20000df8 	.word	0x20000df8
  40b2b8:	20000dfc 	.word	0x20000dfc
  40b2bc:	004138c0 	.word	0x004138c0
  40b2c0:	0040c5d9 	.word	0x0040c5d9
  40b2c4:	0040a1fd 	.word	0x0040a1fd
  40b2c8:	0040a215 	.word	0x0040a215
  40b2cc:	0040a26d 	.word	0x0040a26d

0040b2d0 <operatingHoursCounter>:
{
  40b2d0:	b500      	push	{lr}
  40b2d2:	b083      	sub	sp, #12
	if(sData.timeout_test){
  40b2d4:	4b33      	ldr	r3, [pc, #204]	; (40b3a4 <operatingHoursCounter+0xd4>)
  40b2d6:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	; 0x1f4
  40b2da:	2b00      	cmp	r3, #0
  40b2dc:	d044      	beq.n	40b368 <operatingHoursCounter+0x98>
		sData.timeout_test--;
  40b2de:	3b01      	subs	r3, #1
  40b2e0:	4a30      	ldr	r2, [pc, #192]	; (40b3a4 <operatingHoursCounter+0xd4>)
  40b2e2:	f8a2 31f4 	strh.w	r3, [r2, #500]	; 0x1f4
	if(!read_hours_eep) {
  40b2e6:	4b30      	ldr	r3, [pc, #192]	; (40b3a8 <operatingHoursCounter+0xd8>)
  40b2e8:	781b      	ldrb	r3, [r3, #0]
  40b2ea:	2b00      	cmp	r3, #0
  40b2ec:	d043      	beq.n	40b376 <operatingHoursCounter+0xa6>
	if(sData.status_unit & 0x000F) {
  40b2ee:	4b2d      	ldr	r3, [pc, #180]	; (40b3a4 <operatingHoursCounter+0xd4>)
  40b2f0:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  40b2f4:	f013 0f0f 	tst.w	r3, #15
  40b2f8:	d048      	beq.n	40b38c <operatingHoursCounter+0xbc>
		countSecondFunz++;
  40b2fa:	4b2c      	ldr	r3, [pc, #176]	; (40b3ac <operatingHoursCounter+0xdc>)
  40b2fc:	681b      	ldr	r3, [r3, #0]
  40b2fe:	3301      	adds	r3, #1
		if(countSecondFunz >= 3600) {
  40b300:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
  40b304:	d340      	bcc.n	40b388 <operatingHoursCounter+0xb8>
			countSecondFunz = 0;
  40b306:	2200      	movs	r2, #0
  40b308:	4b28      	ldr	r3, [pc, #160]	; (40b3ac <operatingHoursCounter+0xdc>)
  40b30a:	601a      	str	r2, [r3, #0]
			countHoursFunz++;
  40b30c:	4a28      	ldr	r2, [pc, #160]	; (40b3b0 <operatingHoursCounter+0xe0>)
  40b30e:	6813      	ldr	r3, [r2, #0]
  40b310:	3301      	adds	r3, #1
  40b312:	6013      	str	r3, [r2, #0]
			if((countHoursFunz % 8) == 0){
  40b314:	f013 0f07 	tst.w	r3, #7
  40b318:	d138      	bne.n	40b38c <operatingHoursCounter+0xbc>
				buff[0] = (countHoursFunz & 0x000FF); // byte Low
  40b31a:	f88d 3000 	strb.w	r3, [sp]
				buff[1] = (countHoursFunz >> 8);
  40b31e:	0a1a      	lsrs	r2, r3, #8
  40b320:	f88d 2001 	strb.w	r2, [sp, #1]
				buff[2] = (countHoursFunz >> 16);
  40b324:	0c1a      	lsrs	r2, r3, #16
  40b326:	f88d 2002 	strb.w	r2, [sp, #2]
				buff[3] = (countHoursFunz >> 24);     // byte high
  40b32a:	0e1b      	lsrs	r3, r3, #24
  40b32c:	f88d 3003 	strb.w	r3, [sp, #3]
				enab_func = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  40b330:	202e      	movs	r0, #46	; 0x2e
  40b332:	4b20      	ldr	r3, [pc, #128]	; (40b3b4 <operatingHoursCounter+0xe4>)
  40b334:	4798      	blx	r3
				if ((enab_func & (1 << ENAB_CTRL_FILTER)) == 0)
  40b336:	f410 7f00 	tst.w	r0, #512	; 0x200
  40b33a:	d131      	bne.n	40b3a0 <operatingHoursCounter+0xd0>
					buff[4] = buff[0];    // byte Low
  40b33c:	f89d 3000 	ldrb.w	r3, [sp]
  40b340:	f88d 3004 	strb.w	r3, [sp, #4]
					buff[5] = buff[1];
  40b344:	f89d 3001 	ldrb.w	r3, [sp, #1]
  40b348:	f88d 3005 	strb.w	r3, [sp, #5]
					buff[6] = buff[2];
  40b34c:	f89d 3002 	ldrb.w	r3, [sp, #2]
  40b350:	f88d 3006 	strb.w	r3, [sp, #6]
					buff[7] = buff[3];    // byte high
  40b354:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40b358:	f88d 3007 	strb.w	r3, [sp, #7]
					addr_end   = addr_start + 7;
  40b35c:	2129      	movs	r1, #41	; 0x29
				update_data_eeprom(addr_start, addr_end, &buff[0]);  // 4 / 8 byte
  40b35e:	466a      	mov	r2, sp
  40b360:	2022      	movs	r0, #34	; 0x22
  40b362:	4b15      	ldr	r3, [pc, #84]	; (40b3b8 <operatingHoursCounter+0xe8>)
  40b364:	4798      	blx	r3
  40b366:	e011      	b.n	40b38c <operatingHoursCounter+0xbc>
	sData.status_test = 0;
  40b368:	4b0e      	ldr	r3, [pc, #56]	; (40b3a4 <operatingHoursCounter+0xd4>)
  40b36a:	2200      	movs	r2, #0
  40b36c:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
  40b370:	f883 21f3 	strb.w	r2, [r3, #499]	; 0x1f3
  40b374:	e7b7      	b.n	40b2e6 <operatingHoursCounter+0x16>
		read_hours_eep = 1;
  40b376:	2201      	movs	r2, #1
  40b378:	4b0b      	ldr	r3, [pc, #44]	; (40b3a8 <operatingHoursCounter+0xd8>)
  40b37a:	701a      	strb	r2, [r3, #0]
		countHoursFunz = read_Dword_eeprom(ADDR_EEP(hour_runnig));
  40b37c:	2022      	movs	r0, #34	; 0x22
  40b37e:	4b0f      	ldr	r3, [pc, #60]	; (40b3bc <operatingHoursCounter+0xec>)
  40b380:	4798      	blx	r3
  40b382:	4b0b      	ldr	r3, [pc, #44]	; (40b3b0 <operatingHoursCounter+0xe0>)
  40b384:	6018      	str	r0, [r3, #0]
  40b386:	e7b2      	b.n	40b2ee <operatingHoursCounter+0x1e>
		countSecondFunz++;
  40b388:	4a08      	ldr	r2, [pc, #32]	; (40b3ac <operatingHoursCounter+0xdc>)
  40b38a:	6013      	str	r3, [r2, #0]
	check_clogged_filter();
  40b38c:	4b0c      	ldr	r3, [pc, #48]	; (40b3c0 <operatingHoursCounter+0xf0>)
  40b38e:	4798      	blx	r3
	verifica_clogged_filter();
  40b390:	4b0c      	ldr	r3, [pc, #48]	; (40b3c4 <operatingHoursCounter+0xf4>)
  40b392:	4798      	blx	r3
	calibrazione_clogged_filter();
  40b394:	4b0c      	ldr	r3, [pc, #48]	; (40b3c8 <operatingHoursCounter+0xf8>)
  40b396:	4798      	blx	r3
}
  40b398:	2001      	movs	r0, #1
  40b39a:	b003      	add	sp, #12
  40b39c:	f85d fb04 	ldr.w	pc, [sp], #4
				addr_end   = addr_start + 3;
  40b3a0:	2125      	movs	r1, #37	; 0x25
  40b3a2:	e7dc      	b.n	40b35e <operatingHoursCounter+0x8e>
  40b3a4:	200013ac 	.word	0x200013ac
  40b3a8:	20000e04 	.word	0x20000e04
  40b3ac:	20000e00 	.word	0x20000e00
  40b3b0:	20000e7c 	.word	0x20000e7c
  40b3b4:	0040a279 	.word	0x0040a279
  40b3b8:	0040abbd 	.word	0x0040abbd
  40b3bc:	0040a291 	.word	0x0040a291
  40b3c0:	0040ace1 	.word	0x0040ace1
  40b3c4:	0040ae21 	.word	0x0040ae21
  40b3c8:	0040b105 	.word	0x0040b105

0040b3cc <BuzzerFunc>:
// Description:
//   Funzione che gira nello scheduler per N volte.
//---------------------------------------------------------------------
int BuzzerFunc () 
{
  if(StatusBuzzer) {
  40b3cc:	4b0e      	ldr	r3, [pc, #56]	; (40b408 <BuzzerFunc+0x3c>)
  40b3ce:	781b      	ldrb	r3, [r3, #0]
  40b3d0:	b173      	cbz	r3, 40b3f0 <BuzzerFunc+0x24>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b3d2:	2220      	movs	r2, #32
  40b3d4:	4b0d      	ldr	r3, [pc, #52]	; (40b40c <BuzzerFunc+0x40>)
  40b3d6:	635a      	str	r2, [r3, #52]	; 0x34
    //digitalWrite(pBuz, LOW);
	ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_LOW);
    if(numBeep)
  40b3d8:	4b0d      	ldr	r3, [pc, #52]	; (40b410 <BuzzerFunc+0x44>)
  40b3da:	781b      	ldrb	r3, [r3, #0]
  40b3dc:	b113      	cbz	r3, 40b3e4 <BuzzerFunc+0x18>
      numBeep--;
  40b3de:	3b01      	subs	r3, #1
  40b3e0:	4a0b      	ldr	r2, [pc, #44]	; (40b410 <BuzzerFunc+0x44>)
  40b3e2:	7013      	strb	r3, [r2, #0]
    StatusBuzzer = 0;  
  40b3e4:	2200      	movs	r2, #0
  40b3e6:	4b08      	ldr	r3, [pc, #32]	; (40b408 <BuzzerFunc+0x3c>)
  40b3e8:	701a      	strb	r2, [r3, #0]
      StatusBuzzer = 1; 
    }  
  }  
       
  return numBeep; 
}
  40b3ea:	4b09      	ldr	r3, [pc, #36]	; (40b410 <BuzzerFunc+0x44>)
  40b3ec:	7818      	ldrb	r0, [r3, #0]
  40b3ee:	4770      	bx	lr
    if(numBeep) {
  40b3f0:	4b07      	ldr	r3, [pc, #28]	; (40b410 <BuzzerFunc+0x44>)
  40b3f2:	781b      	ldrb	r3, [r3, #0]
  40b3f4:	2b00      	cmp	r3, #0
  40b3f6:	d0f8      	beq.n	40b3ea <BuzzerFunc+0x1e>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b3f8:	2220      	movs	r2, #32
  40b3fa:	4b04      	ldr	r3, [pc, #16]	; (40b40c <BuzzerFunc+0x40>)
  40b3fc:	631a      	str	r2, [r3, #48]	; 0x30
      StatusBuzzer = 1; 
  40b3fe:	2201      	movs	r2, #1
  40b400:	4b01      	ldr	r3, [pc, #4]	; (40b408 <BuzzerFunc+0x3c>)
  40b402:	701a      	strb	r2, [r3, #0]
  40b404:	e7f1      	b.n	40b3ea <BuzzerFunc+0x1e>
  40b406:	bf00      	nop
  40b408:	20000e07 	.word	0x20000e07
  40b40c:	400e0e00 	.word	0x400e0e00
  40b410:	20000e0c 	.word	0x20000e0c

0040b414 <startMotorBPD>:
{
  40b414:	b510      	push	{r4, lr}
   pmc_enable_periph_clk(ID_TC0);
  40b416:	2017      	movs	r0, #23
  40b418:	4b0e      	ldr	r3, [pc, #56]	; (40b454 <startMotorBPD+0x40>)
  40b41a:	4798      	blx	r3
   tc_init(TC0,0,TC_CMR_CPCTRG | TC_CMR_TCCLKS_TIMER_CLOCK4);
  40b41c:	4c0e      	ldr	r4, [pc, #56]	; (40b458 <startMotorBPD+0x44>)
  40b41e:	f244 0203 	movw	r2, #16387	; 0x4003
  40b422:	2100      	movs	r1, #0
  40b424:	4620      	mov	r0, r4
  40b426:	4b0d      	ldr	r3, [pc, #52]	; (40b45c <startMotorBPD+0x48>)
  40b428:	4798      	blx	r3
   tc_write_rc(TC0,0,3906);
  40b42a:	f640 7242 	movw	r2, #3906	; 0xf42
  40b42e:	2100      	movs	r1, #0
  40b430:	4620      	mov	r0, r4
  40b432:	4b0b      	ldr	r3, [pc, #44]	; (40b460 <startMotorBPD+0x4c>)
  40b434:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40b436:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40b43a:	4b0a      	ldr	r3, [pc, #40]	; (40b464 <startMotorBPD+0x50>)
  40b43c:	601a      	str	r2, [r3, #0]
   tc_enable_interrupt(TC0,0,TC_IER_CPCS);
  40b43e:	2210      	movs	r2, #16
  40b440:	2100      	movs	r1, #0
  40b442:	4620      	mov	r0, r4
  40b444:	4b08      	ldr	r3, [pc, #32]	; (40b468 <startMotorBPD+0x54>)
  40b446:	4798      	blx	r3
   tc_start(TC0, 0); // Start TC0 
  40b448:	2100      	movs	r1, #0
  40b44a:	4620      	mov	r0, r4
  40b44c:	4b07      	ldr	r3, [pc, #28]	; (40b46c <startMotorBPD+0x58>)
  40b44e:	4798      	blx	r3
}  
  40b450:	2000      	movs	r0, #0
  40b452:	bd10      	pop	{r4, pc}
  40b454:	00409185 	.word	0x00409185
  40b458:	40010000 	.word	0x40010000
  40b45c:	004091b1 	.word	0x004091b1
  40b460:	004091d9 	.word	0x004091d9
  40b464:	e000e100 	.word	0xe000e100
  40b468:	004091e1 	.word	0x004091e1
  40b46c:	004091c9 	.word	0x004091c9

0040b470 <PowerMode>:
   if(sts == POWER_SAVE) {
  40b470:	b138      	cbz	r0, 40b482 <PowerMode+0x12>
     PowerMotors = POWER_ON;
  40b472:	224f      	movs	r2, #79	; 0x4f
  40b474:	4b07      	ldr	r3, [pc, #28]	; (40b494 <PowerMode+0x24>)
  40b476:	701a      	strb	r2, [r3, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40b47c:	4b06      	ldr	r3, [pc, #24]	; (40b498 <PowerMode+0x28>)
  40b47e:	635a      	str	r2, [r3, #52]	; 0x34
  40b480:	4770      	bx	lr
     PowerMotors = POWER_SAVE;
  40b482:	2200      	movs	r2, #0
  40b484:	4b03      	ldr	r3, [pc, #12]	; (40b494 <PowerMode+0x24>)
  40b486:	701a      	strb	r2, [r3, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b488:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40b48c:	4b02      	ldr	r3, [pc, #8]	; (40b498 <PowerMode+0x28>)
  40b48e:	631a      	str	r2, [r3, #48]	; 0x30
  40b490:	4770      	bx	lr
  40b492:	bf00      	nop
  40b494:	20000e38 	.word	0x20000e38
  40b498:	400e0e00 	.word	0x400e0e00

0040b49c <TC0_Handler>:
{
  40b49c:	b510      	push	{r4, lr}
	TC0_Status_Register = tc_get_status(TC0, 0);
  40b49e:	2100      	movs	r1, #0
  40b4a0:	4898      	ldr	r0, [pc, #608]	; (40b704 <TC0_Handler+0x268>)
  40b4a2:	4b99      	ldr	r3, [pc, #612]	; (40b708 <TC0_Handler+0x26c>)
  40b4a4:	4798      	blx	r3
  40b4a6:	4b99      	ldr	r3, [pc, #612]	; (40b70c <TC0_Handler+0x270>)
  40b4a8:	6018      	str	r0, [r3, #0]
    numStepBypass++;
  40b4aa:	4a99      	ldr	r2, [pc, #612]	; (40b710 <TC0_Handler+0x274>)
  40b4ac:	6813      	ldr	r3, [r2, #0]
  40b4ae:	3301      	adds	r3, #1
  40b4b0:	6013      	str	r3, [r2, #0]
   if (numStepBypass >= MAX_STEP_FINE_CORSA) 
  40b4b2:	f240 51db 	movw	r1, #1499	; 0x5db
  40b4b6:	428b      	cmp	r3, r1
  40b4b8:	d812      	bhi.n	40b4e0 <TC0_Handler+0x44>
  40b4ba:	f003 0207 	and.w	r2, r3, #7
    if(RotaBypass == ANTIORARIO)  
  40b4be:	4b95      	ldr	r3, [pc, #596]	; (40b714 <TC0_Handler+0x278>)
  40b4c0:	781b      	ldrb	r3, [r3, #0]
  40b4c2:	2bff      	cmp	r3, #255	; 0xff
  40b4c4:	d025      	beq.n	40b512 <TC0_Handler+0x76>
       switch (step_motor) {
  40b4c6:	2a07      	cmp	r2, #7
  40b4c8:	f200 811b 	bhi.w	40b702 <TC0_Handler+0x266>
  40b4cc:	e8df f012 	tbh	[pc, r2, lsl #1]
  40b4d0:	00b100a2 	.word	0x00b100a2
  40b4d4:	00cf00c0 	.word	0x00cf00c0
  40b4d8:	00ed00de 	.word	0x00ed00de
  40b4dc:	010b00fc 	.word	0x010b00fc
	   tc_stop(TC0, 0); // Start TC0 
  40b4e0:	4c88      	ldr	r4, [pc, #544]	; (40b704 <TC0_Handler+0x268>)
  40b4e2:	2100      	movs	r1, #0
  40b4e4:	4620      	mov	r0, r4
  40b4e6:	4b8c      	ldr	r3, [pc, #560]	; (40b718 <TC0_Handler+0x27c>)
  40b4e8:	4798      	blx	r3
	   tc_disable_interrupt(TC0,0,TC_IER_CPCS);
  40b4ea:	2210      	movs	r2, #16
  40b4ec:	2100      	movs	r1, #0
  40b4ee:	4620      	mov	r0, r4
  40b4f0:	4b8a      	ldr	r3, [pc, #552]	; (40b71c <TC0_Handler+0x280>)
  40b4f2:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b4f4:	4b8a      	ldr	r3, [pc, #552]	; (40b720 <TC0_Handler+0x284>)
  40b4f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b4fa:	635a      	str	r2, [r3, #52]	; 0x34
  40b4fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b500:	635a      	str	r2, [r3, #52]	; 0x34
  40b502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b506:	635a      	str	r2, [r3, #52]	; 0x34
  40b508:	2210      	movs	r2, #16
  40b50a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b50e:	635a      	str	r2, [r3, #52]	; 0x34
  40b510:	bd10      	pop	{r4, pc}
       switch (step_motor) {
  40b512:	2a07      	cmp	r2, #7
  40b514:	f200 80f5 	bhi.w	40b702 <TC0_Handler+0x266>
  40b518:	e8df f002 	tbb	[pc, r2]
  40b51c:	31221304 	.word	0x31221304
  40b520:	6d5e4f40 	.word	0x6d5e4f40
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b524:	4b7e      	ldr	r3, [pc, #504]	; (40b720 <TC0_Handler+0x284>)
  40b526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b52a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b52c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b530:	635a      	str	r2, [r3, #52]	; 0x34
  40b532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b536:	635a      	str	r2, [r3, #52]	; 0x34
  40b538:	2210      	movs	r2, #16
  40b53a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b53e:	635a      	str	r2, [r3, #52]	; 0x34
  40b540:	bd10      	pop	{r4, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b542:	4b77      	ldr	r3, [pc, #476]	; (40b720 <TC0_Handler+0x284>)
  40b544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b548:	631a      	str	r2, [r3, #48]	; 0x30
  40b54a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b54e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b554:	635a      	str	r2, [r3, #52]	; 0x34
  40b556:	2210      	movs	r2, #16
  40b558:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b55c:	635a      	str	r2, [r3, #52]	; 0x34
  40b55e:	bd10      	pop	{r4, pc}
  40b560:	4b6f      	ldr	r3, [pc, #444]	; (40b720 <TC0_Handler+0x284>)
  40b562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b566:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b568:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b56c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b56e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b572:	635a      	str	r2, [r3, #52]	; 0x34
  40b574:	2210      	movs	r2, #16
  40b576:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b57a:	635a      	str	r2, [r3, #52]	; 0x34
  40b57c:	bd10      	pop	{r4, pc}
  40b57e:	4b68      	ldr	r3, [pc, #416]	; (40b720 <TC0_Handler+0x284>)
  40b580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b584:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b586:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b58a:	631a      	str	r2, [r3, #48]	; 0x30
  40b58c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b590:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b592:	2210      	movs	r2, #16
  40b594:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b598:	635a      	str	r2, [r3, #52]	; 0x34
  40b59a:	bd10      	pop	{r4, pc}
  40b59c:	4b60      	ldr	r3, [pc, #384]	; (40b720 <TC0_Handler+0x284>)
  40b59e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b5a2:	635a      	str	r2, [r3, #52]	; 0x34
  40b5a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b5a8:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b5aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b5ae:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b5b0:	2210      	movs	r2, #16
  40b5b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b5b6:	635a      	str	r2, [r3, #52]	; 0x34
  40b5b8:	bd10      	pop	{r4, pc}
  40b5ba:	4b59      	ldr	r3, [pc, #356]	; (40b720 <TC0_Handler+0x284>)
  40b5bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b5c0:	635a      	str	r2, [r3, #52]	; 0x34
  40b5c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b5c6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b5c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b5cc:	631a      	str	r2, [r3, #48]	; 0x30
  40b5ce:	2210      	movs	r2, #16
  40b5d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b5d4:	631a      	str	r2, [r3, #48]	; 0x30
  40b5d6:	bd10      	pop	{r4, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b5d8:	4b51      	ldr	r3, [pc, #324]	; (40b720 <TC0_Handler+0x284>)
  40b5da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b5de:	635a      	str	r2, [r3, #52]	; 0x34
  40b5e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b5e4:	635a      	str	r2, [r3, #52]	; 0x34
  40b5e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b5ea:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b5ec:	2210      	movs	r2, #16
  40b5ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b5f2:	631a      	str	r2, [r3, #48]	; 0x30
  40b5f4:	bd10      	pop	{r4, pc}
  40b5f6:	4b4a      	ldr	r3, [pc, #296]	; (40b720 <TC0_Handler+0x284>)
  40b5f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b5fc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b5fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b602:	635a      	str	r2, [r3, #52]	; 0x34
  40b604:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b608:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b60a:	2210      	movs	r2, #16
  40b60c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b610:	631a      	str	r2, [r3, #48]	; 0x30
  40b612:	bd10      	pop	{r4, pc}
  40b614:	4b42      	ldr	r3, [pc, #264]	; (40b720 <TC0_Handler+0x284>)
  40b616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b61a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b61c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b620:	635a      	str	r2, [r3, #52]	; 0x34
  40b622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b626:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b628:	2210      	movs	r2, #16
  40b62a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b62e:	631a      	str	r2, [r3, #48]	; 0x30
  40b630:	bd10      	pop	{r4, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b632:	4b3b      	ldr	r3, [pc, #236]	; (40b720 <TC0_Handler+0x284>)
  40b634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b638:	635a      	str	r2, [r3, #52]	; 0x34
  40b63a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b63e:	635a      	str	r2, [r3, #52]	; 0x34
  40b640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b644:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b646:	2210      	movs	r2, #16
  40b648:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b64c:	631a      	str	r2, [r3, #48]	; 0x30
  40b64e:	bd10      	pop	{r4, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b650:	4b33      	ldr	r3, [pc, #204]	; (40b720 <TC0_Handler+0x284>)
  40b652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b656:	635a      	str	r2, [r3, #52]	; 0x34
  40b658:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b65c:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b65e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b662:	631a      	str	r2, [r3, #48]	; 0x30
  40b664:	2210      	movs	r2, #16
  40b666:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b66a:	631a      	str	r2, [r3, #48]	; 0x30
  40b66c:	bd10      	pop	{r4, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b66e:	4b2c      	ldr	r3, [pc, #176]	; (40b720 <TC0_Handler+0x284>)
  40b670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b674:	635a      	str	r2, [r3, #52]	; 0x34
  40b676:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b67a:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b67c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b680:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b682:	2210      	movs	r2, #16
  40b684:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b688:	635a      	str	r2, [r3, #52]	; 0x34
  40b68a:	bd10      	pop	{r4, pc}
  40b68c:	4b24      	ldr	r3, [pc, #144]	; (40b720 <TC0_Handler+0x284>)
  40b68e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b692:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b694:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b698:	631a      	str	r2, [r3, #48]	; 0x30
  40b69a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b69e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b6a0:	2210      	movs	r2, #16
  40b6a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b6a6:	635a      	str	r2, [r3, #52]	; 0x34
  40b6a8:	bd10      	pop	{r4, pc}
  40b6aa:	4b1d      	ldr	r3, [pc, #116]	; (40b720 <TC0_Handler+0x284>)
  40b6ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b6b0:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b6b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b6b6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b6b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b6bc:	635a      	str	r2, [r3, #52]	; 0x34
  40b6be:	2210      	movs	r2, #16
  40b6c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b6c4:	635a      	str	r2, [r3, #52]	; 0x34
  40b6c6:	bd10      	pop	{r4, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b6c8:	4b15      	ldr	r3, [pc, #84]	; (40b720 <TC0_Handler+0x284>)
  40b6ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b6ce:	631a      	str	r2, [r3, #48]	; 0x30
  40b6d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b6d4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b6d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b6da:	635a      	str	r2, [r3, #52]	; 0x34
  40b6dc:	2210      	movs	r2, #16
  40b6de:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b6e2:	635a      	str	r2, [r3, #52]	; 0x34
  40b6e4:	bd10      	pop	{r4, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b6e6:	4b0e      	ldr	r3, [pc, #56]	; (40b720 <TC0_Handler+0x284>)
  40b6e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b6ec:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b6ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b6f2:	635a      	str	r2, [r3, #52]	; 0x34
  40b6f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b6f8:	635a      	str	r2, [r3, #52]	; 0x34
  40b6fa:	2210      	movs	r2, #16
  40b6fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b700:	635a      	str	r2, [r3, #52]	; 0x34
  40b702:	bd10      	pop	{r4, pc}
  40b704:	40010000 	.word	0x40010000
  40b708:	004091f1 	.word	0x004091f1
  40b70c:	20000e08 	.word	0x20000e08
  40b710:	20000e10 	.word	0x20000e10
  40b714:	20000038 	.word	0x20000038
  40b718:	004091d1 	.word	0x004091d1
  40b71c:	004091e9 	.word	0x004091e9
  40b720:	400e0e00 	.word	0x400e0e00

0040b724 <ActiveBuzzer>:
//     1: numBeepBeep -> numero di ripetizioni dei Beep ON e OFF
//     2: freq_100ms  -> Frequenza del segnale ON e OFF, step di 100ms. 
//                   
//---------------------------------------------------------------------
void ActiveBuzzer(Byte numBeepBeep, unsigned int freq_100ms)
{
  40b724:	b508      	push	{r3, lr}
    if((sData.status_test & MSK_TEST_ENABLE) && (sData.status_test & MSK_TEST_BUZZER) == 0)
  40b726:	4b0f      	ldr	r3, [pc, #60]	; (40b764 <ActiveBuzzer+0x40>)
  40b728:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  40b72c:	f003 0309 	and.w	r3, r3, #9
  40b730:	2b01      	cmp	r3, #1
  40b732:	d015      	beq.n	40b760 <ActiveBuzzer+0x3c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b734:	2220      	movs	r2, #32
  40b736:	4b0c      	ldr	r3, [pc, #48]	; (40b768 <ActiveBuzzer+0x44>)
  40b738:	631a      	str	r2, [r3, #48]	; 0x30
      return;
      
    // Tieni attivo il cicalino per N*0,1 sec., poi disattivalo
    //digitalWrite(pBuz,HIGH);
	ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_HIGH);       
    StatusBuzzer = 1;
  40b73a:	2201      	movs	r2, #1
  40b73c:	4b0b      	ldr	r3, [pc, #44]	; (40b76c <ActiveBuzzer+0x48>)
  40b73e:	701a      	strb	r2, [r3, #0]
    numBeep      = numBeepBeep;
  40b740:	4b0b      	ldr	r3, [pc, #44]	; (40b770 <ActiveBuzzer+0x4c>)
  40b742:	7018      	strb	r0, [r3, #0]
    insert_function_scheduler(BuzzerFunc,  freq_100ms); 
  40b744:	480b      	ldr	r0, [pc, #44]	; (40b774 <ActiveBuzzer+0x50>)
  40b746:	4b0c      	ldr	r3, [pc, #48]	; (40b778 <ActiveBuzzer+0x54>)
  40b748:	4798      	blx	r3
    
    if (sData.status_test & MSK_TEST_ENABLE) 
  40b74a:	4b06      	ldr	r3, [pc, #24]	; (40b764 <ActiveBuzzer+0x40>)
  40b74c:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  40b750:	f013 0f01 	tst.w	r3, #1
  40b754:	d004      	beq.n	40b760 <ActiveBuzzer+0x3c>
      sData.status_test &= ~MSK_TEST_BUZZER;
  40b756:	f023 0308 	bic.w	r3, r3, #8
  40b75a:	4a02      	ldr	r2, [pc, #8]	; (40b764 <ActiveBuzzer+0x40>)
  40b75c:	f8a2 31f2 	strh.w	r3, [r2, #498]	; 0x1f2
  40b760:	bd08      	pop	{r3, pc}
  40b762:	bf00      	nop
  40b764:	200013ac 	.word	0x200013ac
  40b768:	400e0e00 	.word	0x400e0e00
  40b76c:	20000e07 	.word	0x20000e07
  40b770:	20000e0c 	.word	0x20000e0c
  40b774:	0040b3cd 	.word	0x0040b3cd
  40b778:	00405d4d 	.word	0x00405d4d

0040b77c <Active_Procedure_Bypass_OpCl>:
//     4. Dopo 7 secondi dall'inizializzazione controlla l'assorbimento
//        per verificare il fine corsa.
//     5. Raggiunto il fine corsa Cambia stato del BYPASS.
//---------------------------------------------------------------------
void Active_Procedure_Bypass_OpCl(Byte OpenClose, int SecondsWait)
{
  40b77c:	b570      	push	{r4, r5, r6, lr}
  40b77e:	4604      	mov	r4, r0
  40b780:	460d      	mov	r5, r1
   
    numStepBypass  = 0;
  40b782:	2200      	movs	r2, #0
  40b784:	4b40      	ldr	r3, [pc, #256]	; (40b888 <Active_Procedure_Bypass_OpCl+0x10c>)
  40b786:	601a      	str	r2, [r3, #0]
    
    PositionBypass = OpenClose;
  40b788:	4b40      	ldr	r3, [pc, #256]	; (40b88c <Active_Procedure_Bypass_OpCl+0x110>)
  40b78a:	7018      	strb	r0, [r3, #0]
	unsigned short enab_func;
	enab_func = read_word_eeprom(ADDR_EEP(Enab_Fuction)); 
  40b78c:	202e      	movs	r0, #46	; 0x2e
  40b78e:	4b40      	ldr	r3, [pc, #256]	; (40b890 <Active_Procedure_Bypass_OpCl+0x114>)
  40b790:	4798      	blx	r3
  40b792:	4606      	mov	r6, r0
    
    if(read_byte_eeprom(ADDR_EEP(RotazioneBypass)) == ORARIO) 
  40b794:	2042      	movs	r0, #66	; 0x42
  40b796:	4b3f      	ldr	r3, [pc, #252]	; (40b894 <Active_Procedure_Bypass_OpCl+0x118>)
  40b798:	4798      	blx	r3
  40b79a:	b960      	cbnz	r0, 40b7b6 <Active_Procedure_Bypass_OpCl+0x3a>
    {
        if(OpenClose == CLOSE_BPD) 
  40b79c:	2c01      	cmp	r4, #1
           RotaBypass = ORARIO;
  40b79e:	bf0c      	ite	eq
  40b7a0:	2200      	moveq	r2, #0
        else  
           RotaBypass = ANTIORARIO;                      
  40b7a2:	22ff      	movne	r2, #255	; 0xff
  40b7a4:	4b3c      	ldr	r3, [pc, #240]	; (40b898 <Active_Procedure_Bypass_OpCl+0x11c>)
  40b7a6:	701a      	strb	r2, [r3, #0]
        else  
           RotaBypass = ORARIO; 

    }  
    
    if(sData.status_unit & (1 << POS_BIT_BYPASS_RUN))
  40b7a8:	4b3c      	ldr	r3, [pc, #240]	; (40b89c <Active_Procedure_Bypass_OpCl+0x120>)
  40b7aa:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  40b7ae:	f013 0f40 	tst.w	r3, #64	; 0x40
  40b7b2:	d007      	beq.n	40b7c4 <Active_Procedure_Bypass_OpCl+0x48>
  40b7b4:	bd70      	pop	{r4, r5, r6, pc}
        if(OpenClose == CLOSE_BPD) 
  40b7b6:	2c01      	cmp	r4, #1
           RotaBypass = ANTIORARIO;
  40b7b8:	bf0c      	ite	eq
  40b7ba:	22ff      	moveq	r2, #255	; 0xff
           RotaBypass = ORARIO; 
  40b7bc:	2200      	movne	r2, #0
  40b7be:	4b36      	ldr	r3, [pc, #216]	; (40b898 <Active_Procedure_Bypass_OpCl+0x11c>)
  40b7c0:	701a      	strb	r2, [r3, #0]
  40b7c2:	e7f1      	b.n	40b7a8 <Active_Procedure_Bypass_OpCl+0x2c>
      return;

    // segnaliamo che il bypass sta iniziando il cambiamento di stato (OPEN->CLOSE 0 CLOSE->OPEN).
    // quindi il regolatore porterÃ  la velocitÃ  al minimo.
    sData.status_unit &= ~MSK_STS_BYPASS; //pulisco lo stato
  40b7c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    sData.status_unit |= (1 << POS_BIT_BYPASS_RUN); //imposto la rotazione
  40b7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b7cc:	4a33      	ldr	r2, [pc, #204]	; (40b89c <Active_Procedure_Bypass_OpCl+0x120>)
  40b7ce:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb


	// Se c'è presente l'accessorio bypass (vite senza fine) inviamo il comando di cambio di stato.
	
	if( AccessoryPresent_EepList(ACC_EEP_EBPD) && !(enab_func & (1 << ENAB_MBF)) )
  40b7d2:	2015      	movs	r0, #21
  40b7d4:	4b32      	ldr	r3, [pc, #200]	; (40b8a0 <Active_Procedure_Bypass_OpCl+0x124>)
  40b7d6:	4798      	blx	r3
  40b7d8:	b330      	cbz	r0, 40b828 <Active_Procedure_Bypass_OpCl+0xac>
  40b7da:	f416 4f80 	tst.w	r6, #16384	; 0x4000
  40b7de:	d123      	bne.n	40b828 <Active_Procedure_Bypass_OpCl+0xac>
	{
		
		if(RotaBypass == ANTIORARIO)
  40b7e0:	4b2d      	ldr	r3, [pc, #180]	; (40b898 <Active_Procedure_Bypass_OpCl+0x11c>)
  40b7e2:	781b      	ldrb	r3, [r3, #0]
  40b7e4:	2bff      	cmp	r3, #255	; 0xff
  40b7e6:	d009      	beq.n	40b7fc <Active_Procedure_Bypass_OpCl+0x80>
		{	
			if (info_EBPD != 0)
				write_byte_eeprom(ADDR_EEP(Set_BPD_mod), 0);			
		}
		else if(RotaBypass == ORARIO)
  40b7e8:	b95b      	cbnz	r3, 40b802 <Active_Procedure_Bypass_OpCl+0x86>
		{
			if (info_EBPD != 100)
  40b7ea:	4b2e      	ldr	r3, [pc, #184]	; (40b8a4 <Active_Procedure_Bypass_OpCl+0x128>)
  40b7ec:	781b      	ldrb	r3, [r3, #0]
  40b7ee:	2b64      	cmp	r3, #100	; 0x64
  40b7f0:	d007      	beq.n	40b802 <Active_Procedure_Bypass_OpCl+0x86>
				write_byte_eeprom(ADDR_EEP(Set_BPD_mod), 100);	
  40b7f2:	2164      	movs	r1, #100	; 0x64
  40b7f4:	2097      	movs	r0, #151	; 0x97
  40b7f6:	4b2c      	ldr	r3, [pc, #176]	; (40b8a8 <Active_Procedure_Bypass_OpCl+0x12c>)
  40b7f8:	4798      	blx	r3
  40b7fa:	e002      	b.n	40b802 <Active_Procedure_Bypass_OpCl+0x86>
			if (info_EBPD != 0)
  40b7fc:	4b29      	ldr	r3, [pc, #164]	; (40b8a4 <Active_Procedure_Bypass_OpCl+0x128>)
  40b7fe:	781b      	ldrb	r3, [r3, #0]
  40b800:	b96b      	cbnz	r3, 40b81e <Active_Procedure_Bypass_OpCl+0xa2>
			
		}
		
		sData.status_unit &= ~MSK_STS_BYPASS; //pulisco lo stato
  40b802:	4b26      	ldr	r3, [pc, #152]	; (40b89c <Active_Procedure_Bypass_OpCl+0x120>)
  40b804:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  40b808:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  40b80c:	b29b      	uxth	r3, r3
		if(OpenClose == CLOSE_BPD)   
  40b80e:	2c01      	cmp	r4, #1
		sData.status_unit |= (1 << POS_BIT_BYPASS_CLOSE);   //imposto il nuovo stato OPEN = 0 o CLOSE = 1
  40b810:	bf08      	it	eq
  40b812:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
  40b816:	4a21      	ldr	r2, [pc, #132]	; (40b89c <Active_Procedure_Bypass_OpCl+0x120>)
  40b818:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  40b81c:	bd70      	pop	{r4, r5, r6, pc}
				write_byte_eeprom(ADDR_EEP(Set_BPD_mod), 0);			
  40b81e:	2100      	movs	r1, #0
  40b820:	2097      	movs	r0, #151	; 0x97
  40b822:	4b21      	ldr	r3, [pc, #132]	; (40b8a8 <Active_Procedure_Bypass_OpCl+0x12c>)
  40b824:	4798      	blx	r3
  40b826:	e7ec      	b.n	40b802 <Active_Procedure_Bypass_OpCl+0x86>
		
	}
	else if(read_byte_eeprom(ADDR_EEP(SerialString[7])) == '6') // Sono una unità della serie 6 il bypass è eseguito come stop/avvio rotore dello scambiatore
  40b828:	2012      	movs	r0, #18
  40b82a:	4b1a      	ldr	r3, [pc, #104]	; (40b894 <Active_Procedure_Bypass_OpCl+0x118>)
  40b82c:	4798      	blx	r3
  40b82e:	2836      	cmp	r0, #54	; 0x36
  40b830:	d007      	beq.n	40b842 <Active_Procedure_Bypass_OpCl+0xc6>
		sData.status_unit |= (1 << POS_BIT_BYPASS_CLOSE);   //imposto il nuovo stato OPEN = 0 o CLOSE = 1
	}
	else	
			// Aspettiamo N secondi prima di attivare il motore Bypass, in modo tale da far rallentare la pressione dell'aria 
			// e quindi evitare assorbimenti anomali che possono creare problemi.
	    insert_function_scheduler(startMotorBPD, ((SecondsWait * 10) + 1)); //scheduliamo funzione di rotazione e tempo di attesa.
  40b832:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40b836:	0069      	lsls	r1, r5, #1
  40b838:	3101      	adds	r1, #1
  40b83a:	481c      	ldr	r0, [pc, #112]	; (40b8ac <Active_Procedure_Bypass_OpCl+0x130>)
  40b83c:	4b1c      	ldr	r3, [pc, #112]	; (40b8b0 <Active_Procedure_Bypass_OpCl+0x134>)
  40b83e:	4798      	blx	r3
  40b840:	e7b8      	b.n	40b7b4 <Active_Procedure_Bypass_OpCl+0x38>
		if(RotaBypass == ANTIORARIO)
  40b842:	4b15      	ldr	r3, [pc, #84]	; (40b898 <Active_Procedure_Bypass_OpCl+0x11c>)
  40b844:	781b      	ldrb	r3, [r3, #0]
  40b846:	2bff      	cmp	r3, #255	; 0xff
  40b848:	d015      	beq.n	40b876 <Active_Procedure_Bypass_OpCl+0xfa>
		else if(RotaBypass == ORARIO)
  40b84a:	b933      	cbnz	r3, 40b85a <Active_Procedure_Bypass_OpCl+0xde>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b84c:	4b19      	ldr	r3, [pc, #100]	; (40b8b4 <Active_Procedure_Bypass_OpCl+0x138>)
  40b84e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40b852:	635a      	str	r2, [r3, #52]	; 0x34
  40b854:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b858:	635a      	str	r2, [r3, #52]	; 0x34
		sData.status_unit &= ~MSK_STS_BYPASS; //pulisco lo stato
  40b85a:	4b10      	ldr	r3, [pc, #64]	; (40b89c <Active_Procedure_Bypass_OpCl+0x120>)
  40b85c:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  40b860:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  40b864:	b29b      	uxth	r3, r3
		if(OpenClose == CLOSE_BPD)
  40b866:	2c01      	cmp	r4, #1
		sData.status_unit |= (1 << POS_BIT_BYPASS_CLOSE);   //imposto il nuovo stato OPEN = 0 o CLOSE = 1
  40b868:	bf08      	it	eq
  40b86a:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
  40b86e:	4a0b      	ldr	r2, [pc, #44]	; (40b89c <Active_Procedure_Bypass_OpCl+0x120>)
  40b870:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  40b874:	bd70      	pop	{r4, r5, r6, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b876:	4b0f      	ldr	r3, [pc, #60]	; (40b8b4 <Active_Procedure_Bypass_OpCl+0x138>)
  40b878:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40b87c:	631a      	str	r2, [r3, #48]	; 0x30
  40b87e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b882:	631a      	str	r2, [r3, #48]	; 0x30
  40b884:	e7e9      	b.n	40b85a <Active_Procedure_Bypass_OpCl+0xde>
  40b886:	bf00      	nop
  40b888:	20000e10 	.word	0x20000e10
  40b88c:	20000e05 	.word	0x20000e05
  40b890:	0040a279 	.word	0x0040a279
  40b894:	0040a26d 	.word	0x0040a26d
  40b898:	20000038 	.word	0x20000038
  40b89c:	200013ac 	.word	0x200013ac
  40b8a0:	00400175 	.word	0x00400175
  40b8a4:	20000047 	.word	0x20000047
  40b8a8:	0040a1fd 	.word	0x0040a1fd
  40b8ac:	0040b415 	.word	0x0040b415
  40b8b0:	00405d4d 	.word	0x00405d4d
  40b8b4:	400e0e00 	.word	0x400e0e00

0040b8b8 <Ctrl_FunzionamentoBPD>:
// Description:
//  Durante la chiusura o apertura, controlla l'assorbimento del motore
//  del Bypass.
//--------------------------------------------------------------------
void Ctrl_FunzionamentoBPD()
{  
  40b8b8:	b538      	push	{r3, r4, r5, lr}
  // verifica l'assorbimento del bypass solo dopo 40 dg di movimento
  if (numStepBypass >= MIN_STEP_CTRL_CURRENT_BPD)
  40b8ba:	4b3b      	ldr	r3, [pc, #236]	; (40b9a8 <Ctrl_FunzionamentoBPD+0xf0>)
  40b8bc:	681b      	ldr	r3, [r3, #0]
  40b8be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40b8c2:	d363      	bcc.n	40b98c <Ctrl_FunzionamentoBPD+0xd4>
     int valueADC_Bypass;
     short absorption_bypass;
     Bool StopMotor = false;
     
     
     if (numStepBypass >= MAX_STEP_FINE_CORSA) 
  40b8c4:	f240 52db 	movw	r2, #1499	; 0x5db
  40b8c8:	4293      	cmp	r3, r2
  40b8ca:	d92f      	bls.n	40b92c <Ctrl_FunzionamentoBPD+0x74>
     {  
       StopMotor = true;         
       RemoveAlarm(ALM_BYPASS_KO);          
  40b8cc:	2053      	movs	r0, #83	; 0x53
  40b8ce:	4b37      	ldr	r3, [pc, #220]	; (40b9ac <Ctrl_FunzionamentoBPD+0xf4>)
  40b8d0:	4798      	blx	r3
//----------------------------------------       
//         Serial_println1(" ");
//        Serial_print1("Nstep= ");    
//         Serial_println(numStepBypass, DEC);
//----------------------------------------             
         numStepBypass = 0;
  40b8d2:	2400      	movs	r4, #0
  40b8d4:	4b34      	ldr	r3, [pc, #208]	; (40b9a8 <Ctrl_FunzionamentoBPD+0xf0>)
  40b8d6:	601c      	str	r4, [r3, #0]
         //CloseTimer4(); 
		  tc_stop(TC0, 0); // Start TC0
  40b8d8:	4d35      	ldr	r5, [pc, #212]	; (40b9b0 <Ctrl_FunzionamentoBPD+0xf8>)
  40b8da:	4621      	mov	r1, r4
  40b8dc:	4628      	mov	r0, r5
  40b8de:	4b35      	ldr	r3, [pc, #212]	; (40b9b4 <Ctrl_FunzionamentoBPD+0xfc>)
  40b8e0:	4798      	blx	r3
		  tc_disable_interrupt(TC0,0,TC_IER_CPCS);
  40b8e2:	2210      	movs	r2, #16
  40b8e4:	4621      	mov	r1, r4
  40b8e6:	4628      	mov	r0, r5
  40b8e8:	4b33      	ldr	r3, [pc, #204]	; (40b9b8 <Ctrl_FunzionamentoBPD+0x100>)
  40b8ea:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b8ec:	4b33      	ldr	r3, [pc, #204]	; (40b9bc <Ctrl_FunzionamentoBPD+0x104>)
  40b8ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b8f2:	635a      	str	r2, [r3, #52]	; 0x34
  40b8f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40b8f8:	635a      	str	r2, [r3, #52]	; 0x34
  40b8fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40b8fe:	635a      	str	r2, [r3, #52]	; 0x34
  40b900:	2210      	movs	r2, #16
  40b902:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b906:	635a      	str	r2, [r3, #52]	; 0x34
		 ioport_set_pin_level(motor_pin_1, IOPORT_PIN_LEVEL_LOW);
		 ioport_set_pin_level(motor_pin_2, IOPORT_PIN_LEVEL_LOW);
		 ioport_set_pin_level(motor_pin_3, IOPORT_PIN_LEVEL_LOW);
		 ioport_set_pin_level(motor_pin_4, IOPORT_PIN_LEVEL_LOW);   
              
         sData.status_unit &= ~MSK_STS_BYPASS;    
  40b908:	4a2d      	ldr	r2, [pc, #180]	; (40b9c0 <Ctrl_FunzionamentoBPD+0x108>)
  40b90a:	f8b2 31eb 	ldrh.w	r3, [r2, #491]	; 0x1eb
  40b90e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  40b912:	b29b      	uxth	r3, r3
  40b914:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
      
         if(PositionBypass == CLOSE_BPD) 
  40b918:	4a2a      	ldr	r2, [pc, #168]	; (40b9c4 <Ctrl_FunzionamentoBPD+0x10c>)
  40b91a:	7812      	ldrb	r2, [r2, #0]
  40b91c:	2a01      	cmp	r2, #1
  40b91e:	d141      	bne.n	40b9a4 <Ctrl_FunzionamentoBPD+0xec>
            sData.status_unit |= (1 << POS_BIT_BYPASS_CLOSE);            
  40b920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b924:	4a26      	ldr	r2, [pc, #152]	; (40b9c0 <Ctrl_FunzionamentoBPD+0x108>)
  40b926:	f8a2 31eb 	strh.w	r3, [r2, #491]	; 0x1eb
  40b92a:	bd38      	pop	{r3, r4, r5, pc}
       valueADC_Bypass = analogRead(pAnAssorb_ByPass);
  40b92c:	4b26      	ldr	r3, [pc, #152]	; (40b9c8 <Ctrl_FunzionamentoBPD+0x110>)
  40b92e:	7818      	ldrb	r0, [r3, #0]
  40b930:	4b26      	ldr	r3, [pc, #152]	; (40b9cc <Ctrl_FunzionamentoBPD+0x114>)
  40b932:	4798      	blx	r3
       if(RotaBypass == ANTIORARIO) {  
  40b934:	4b26      	ldr	r3, [pc, #152]	; (40b9d0 <Ctrl_FunzionamentoBPD+0x118>)
  40b936:	781b      	ldrb	r3, [r3, #0]
  40b938:	2bff      	cmp	r3, #255	; 0xff
  40b93a:	d01e      	beq.n	40b97a <Ctrl_FunzionamentoBPD+0xc2>
     Bool StopMotor = false;
  40b93c:	287a      	cmp	r0, #122	; 0x7a
  40b93e:	bfcc      	ite	gt
  40b940:	2200      	movgt	r2, #0
  40b942:	2201      	movle	r2, #1
       absorption_bypass = (valueADC_Bypass * 3)/11;
  40b944:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40b948:	4b22      	ldr	r3, [pc, #136]	; (40b9d4 <Ctrl_FunzionamentoBPD+0x11c>)
  40b94a:	fb83 1300 	smull	r1, r3, r3, r0
  40b94e:	17c0      	asrs	r0, r0, #31
  40b950:	ebc0 0363 	rsb	r3, r0, r3, asr #1
  40b954:	b21b      	sxth	r3, r3
       if(absorption_bypass <= sData.absorption_bypass_min)
  40b956:	491a      	ldr	r1, [pc, #104]	; (40b9c0 <Ctrl_FunzionamentoBPD+0x108>)
  40b958:	f9b1 11e7 	ldrsh.w	r1, [r1, #487]	; 0x1e7
  40b95c:	4299      	cmp	r1, r3
          sData.absorption_bypass_min = absorption_bypass;
  40b95e:	bfa4      	itt	ge
  40b960:	4917      	ldrge	r1, [pc, #92]	; (40b9c0 <Ctrl_FunzionamentoBPD+0x108>)
  40b962:	f8a1 31e7 	strhge.w	r3, [r1, #487]	; 0x1e7
       if(absorption_bypass > sData.absorption_bypass_max) 
  40b966:	4916      	ldr	r1, [pc, #88]	; (40b9c0 <Ctrl_FunzionamentoBPD+0x108>)
  40b968:	f9b1 11e9 	ldrsh.w	r1, [r1, #489]	; 0x1e9
  40b96c:	4299      	cmp	r1, r3
          sData.absorption_bypass_max = absorption_bypass;
  40b96e:	bfbc      	itt	lt
  40b970:	4913      	ldrlt	r1, [pc, #76]	; (40b9c0 <Ctrl_FunzionamentoBPD+0x108>)
  40b972:	f8a1 31e9 	strhlt.w	r3, [r1, #489]	; 0x1e9
     if (StopMotor) 
  40b976:	b1aa      	cbz	r2, 40b9a4 <Ctrl_FunzionamentoBPD+0xec>
  40b978:	e7ab      	b.n	40b8d2 <Ctrl_FunzionamentoBPD+0x1a>
         if ((valueADC_Bypass > SOGLIA_MAX_ASSORB_BYPASS_KO) || (valueADC_Bypass < (SOGLIA_MIN_ASSORB_BYPASS_KO >> 1)))
  40b97a:	f1a0 022f 	sub.w	r2, r0, #47	; 0x2f
     Bool StopMotor = false;
  40b97e:	f240 331e 	movw	r3, #798	; 0x31e
  40b982:	429a      	cmp	r2, r3
  40b984:	bf94      	ite	ls
  40b986:	2200      	movls	r2, #0
  40b988:	2201      	movhi	r2, #1
  40b98a:	e7db      	b.n	40b944 <Ctrl_FunzionamentoBPD+0x8c>
      }     
      
   }else {
      sData.absorption_bypass_min = 255;        
  40b98c:	4b0c      	ldr	r3, [pc, #48]	; (40b9c0 <Ctrl_FunzionamentoBPD+0x108>)
  40b98e:	f04f 32ff 	mov.w	r2, #4294967295
  40b992:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
  40b996:	2200      	movs	r2, #0
  40b998:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
      sData.absorption_bypass_max = 0;   
  40b99c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
  40b9a0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
  40b9a4:	bd38      	pop	{r3, r4, r5, pc}
  40b9a6:	bf00      	nop
  40b9a8:	20000e10 	.word	0x20000e10
  40b9ac:	004035ad 	.word	0x004035ad
  40b9b0:	40010000 	.word	0x40010000
  40b9b4:	004091d1 	.word	0x004091d1
  40b9b8:	004091e9 	.word	0x004091e9
  40b9bc:	400e0e00 	.word	0x400e0e00
  40b9c0:	200013ac 	.word	0x200013ac
  40b9c4:	20000e05 	.word	0x20000e05
  40b9c8:	004138b0 	.word	0x004138b0
  40b9cc:	0040c5d9 	.word	0x0040c5d9
  40b9d0:	20000038 	.word	0x20000038
  40b9d4:	2e8ba2e9 	.word	0x2e8ba2e9

0040b9d8 <Test_Connect_KTS>:
//   alimentazione.
//---------------------------------------------------------------------
static Byte Procedure_reset_KTS_ON = 0; 

int Test_Connect_KTS()
{
  40b9d8:	b508      	push	{r3, lr}
  
    if(sData.status_test  & MSK_TEST_ENABLE) {      
  40b9da:	4b44      	ldr	r3, [pc, #272]	; (40baec <Test_Connect_KTS+0x114>)
  40b9dc:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  40b9e0:	f013 0f01 	tst.w	r3, #1
  40b9e4:	d13c      	bne.n	40ba60 <Test_Connect_KTS+0x88>
        cnt_sec_no_link_KTS = 0;   
        RemoveAlarm(ALM_KTS_FAULT);    
        return 1;       
    }  
       
    if ((sData.measure_I_KTS >= CUNSUMER_MIN_KTS) || Procedure_reset_KTS_ON)   // > 35mA
  40b9e6:	4b41      	ldr	r3, [pc, #260]	; (40baec <Test_Connect_KTS+0x114>)
  40b9e8:	f9b3 21d9 	ldrsh.w	r2, [r3, #473]	; 0x1d9
  40b9ec:	2a0e      	cmp	r2, #14
  40b9ee:	dc03      	bgt.n	40b9f8 <Test_Connect_KTS+0x20>
  40b9f0:	4b3f      	ldr	r3, [pc, #252]	; (40baf0 <Test_Connect_KTS+0x118>)
  40b9f2:	781b      	ldrb	r3, [r3, #0]
  40b9f4:	2b00      	cmp	r3, #0
  40b9f6:	d04c      	beq.n	40ba92 <Test_Connect_KTS+0xba>
    {
       // KTS: Inserito nel connettore RJ45
       cnt_sec_no_link_KTS++;
  40b9f8:	493e      	ldr	r1, [pc, #248]	; (40baf4 <Test_Connect_KTS+0x11c>)
  40b9fa:	680b      	ldr	r3, [r1, #0]
  40b9fc:	3301      	adds	r3, #1
  40b9fe:	600b      	str	r3, [r1, #0]
        
       // 1: assorbimento anomalo > di 200mA  
       // 2: Manca la comunicazione da almeno 30 secondi   
       if ((cnt_sec_no_link_KTS == TIMER_KTS_KO) || (sData.measure_I_KTS > 200))  { // 200
  40ba00:	2b28      	cmp	r3, #40	; 0x28
  40ba02:	d001      	beq.n	40ba08 <Test_Connect_KTS+0x30>
  40ba04:	2ac8      	cmp	r2, #200	; 0xc8
  40ba06:	dd38      	ble.n	40ba7a <Test_Connect_KTS+0xa2>
           Procedure_reset_KTS_ON = 1;
  40ba08:	2001      	movs	r0, #1
  40ba0a:	4b39      	ldr	r3, [pc, #228]	; (40baf0 <Test_Connect_KTS+0x118>)
  40ba0c:	7018      	strb	r0, [r3, #0]
  40ba0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40ba12:	4b39      	ldr	r3, [pc, #228]	; (40baf8 <Test_Connect_KTS+0x120>)
  40ba14:	635a      	str	r2, [r3, #52]	; 0x34
           //digitalWrite(pSwitchOFF_KTS, LOW);     // KTS: 12V OFF
		   ioport_set_pin_level(pSwitchOFF_KTS, IOPORT_PIN_LEVEL_LOW);
           ActiveBuzzer(1, 15);     
  40ba16:	210f      	movs	r1, #15
  40ba18:	4b38      	ldr	r3, [pc, #224]	; (40bafc <Test_Connect_KTS+0x124>)
  40ba1a:	4798      	blx	r3
           InsertAlarm(ALM_KTS_FAULT);
  40ba1c:	2056      	movs	r0, #86	; 0x56
  40ba1e:	4b38      	ldr	r3, [pc, #224]	; (40bb00 <Test_Connect_KTS+0x128>)
  40ba20:	4798      	blx	r3
           connect_KTS = 0;
  40ba22:	2200      	movs	r2, #0
  40ba24:	4b37      	ldr	r3, [pc, #220]	; (40bb04 <Test_Connect_KTS+0x12c>)
  40ba26:	701a      	strb	r2, [r3, #0]
    }  
    
#ifdef WORK_WDT    
   //ClearWDT();
#endif    
	wdt_restart(WATCH_DOG);
  40ba28:	4837      	ldr	r0, [pc, #220]	; (40bb08 <Test_Connect_KTS+0x130>)
  40ba2a:	4b38      	ldr	r3, [pc, #224]	; (40bb0c <Test_Connect_KTS+0x134>)
  40ba2c:	4798      	blx	r3
	
	if ( connect_KTS )
  40ba2e:	4b35      	ldr	r3, [pc, #212]	; (40bb04 <Test_Connect_KTS+0x12c>)
  40ba30:	781b      	ldrb	r3, [r3, #0]
  40ba32:	2b00      	cmp	r3, #0
  40ba34:	d050      	beq.n	40bad8 <Test_Connect_KTS+0x100>
	{
		if ( Wait_KTS_Response )
  40ba36:	4b36      	ldr	r3, [pc, #216]	; (40bb10 <Test_Connect_KTS+0x138>)
  40ba38:	781b      	ldrb	r3, [r3, #0]
  40ba3a:	2b00      	cmp	r3, #0
  40ba3c:	d132      	bne.n	40baa4 <Test_Connect_KTS+0xcc>
					KTS_10min_Counter = 0;
					//NVIC_SystemReset();
				}
		}
		
		if ( KTS_10min_Counter >= 1800000 ) // 10 min expired 600000
  40ba3e:	4b35      	ldr	r3, [pc, #212]	; (40bb14 <Test_Connect_KTS+0x13c>)
  40ba40:	681a      	ldr	r2, [r3, #0]
  40ba42:	4b35      	ldr	r3, [pc, #212]	; (40bb18 <Test_Connect_KTS+0x140>)
  40ba44:	429a      	cmp	r2, r3
  40ba46:	d94e      	bls.n	40bae6 <Test_Connect_KTS+0x10e>
		{
			//eep_write_byte( ADDR_EEP(KTS_Watchdog), 1);
			
			Byte Data1;
			Data1 = eep_read_byte(ADDR_EEP(cntUpdate_info));
  40ba48:	203a      	movs	r0, #58	; 0x3a
  40ba4a:	4b34      	ldr	r3, [pc, #208]	; (40bb1c <Test_Connect_KTS+0x144>)
  40ba4c:	4798      	blx	r3
			
			// need to update eeprom image on KTS
			//Send_Eeprom_Data_To_KTS ( );
			
			// wait 60 s for KTS to restart the byte in eeprom to 0
			KTS_10min_Counter = 0;
  40ba4e:	2300      	movs	r3, #0
  40ba50:	4a30      	ldr	r2, [pc, #192]	; (40bb14 <Test_Connect_KTS+0x13c>)
  40ba52:	6013      	str	r3, [r2, #0]
			
			Wait_KTS_Response = true;
  40ba54:	2101      	movs	r1, #1
  40ba56:	4a2e      	ldr	r2, [pc, #184]	; (40bb10 <Test_Connect_KTS+0x138>)
  40ba58:	7011      	strb	r1, [r2, #0]
			KTS_60s_Counter = 0;
  40ba5a:	4a31      	ldr	r2, [pc, #196]	; (40bb20 <Test_Connect_KTS+0x148>)
  40ba5c:	6013      	str	r3, [r2, #0]
  40ba5e:	e042      	b.n	40bae6 <Test_Connect_KTS+0x10e>
        Procedure_reset_KTS_ON = 0; 
  40ba60:	2300      	movs	r3, #0
  40ba62:	4a23      	ldr	r2, [pc, #140]	; (40baf0 <Test_Connect_KTS+0x118>)
  40ba64:	7013      	strb	r3, [r2, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40ba66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40ba6a:	4a23      	ldr	r2, [pc, #140]	; (40baf8 <Test_Connect_KTS+0x120>)
  40ba6c:	6311      	str	r1, [r2, #48]	; 0x30
        cnt_sec_no_link_KTS = 0;   
  40ba6e:	4a21      	ldr	r2, [pc, #132]	; (40baf4 <Test_Connect_KTS+0x11c>)
  40ba70:	6013      	str	r3, [r2, #0]
        RemoveAlarm(ALM_KTS_FAULT);    
  40ba72:	2056      	movs	r0, #86	; 0x56
  40ba74:	4b2b      	ldr	r3, [pc, #172]	; (40bb24 <Test_Connect_KTS+0x14c>)
  40ba76:	4798      	blx	r3
        return 1;       
  40ba78:	e035      	b.n	40bae6 <Test_Connect_KTS+0x10e>
       }else if (cnt_sec_no_link_KTS >= TIMER_KTS_KO+3) {
  40ba7a:	2b2a      	cmp	r3, #42	; 0x2a
  40ba7c:	ddd4      	ble.n	40ba28 <Test_Connect_KTS+0x50>
           Procedure_reset_KTS_ON = 0; 
  40ba7e:	2300      	movs	r3, #0
  40ba80:	4a1b      	ldr	r2, [pc, #108]	; (40baf0 <Test_Connect_KTS+0x118>)
  40ba82:	7013      	strb	r3, [r2, #0]
  40ba84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40ba88:	4a1b      	ldr	r2, [pc, #108]	; (40baf8 <Test_Connect_KTS+0x120>)
  40ba8a:	6311      	str	r1, [r2, #48]	; 0x30
           cnt_sec_no_link_KTS = 0;            
  40ba8c:	4a19      	ldr	r2, [pc, #100]	; (40baf4 <Test_Connect_KTS+0x11c>)
  40ba8e:	6013      	str	r3, [r2, #0]
  40ba90:	e7ca      	b.n	40ba28 <Test_Connect_KTS+0x50>
       cnt_sec_no_link_KTS = 0;  
  40ba92:	2300      	movs	r3, #0
  40ba94:	4a17      	ldr	r2, [pc, #92]	; (40baf4 <Test_Connect_KTS+0x11c>)
  40ba96:	6013      	str	r3, [r2, #0]
       connect_KTS         = 0;
  40ba98:	4a1a      	ldr	r2, [pc, #104]	; (40bb04 <Test_Connect_KTS+0x12c>)
  40ba9a:	7013      	strb	r3, [r2, #0]
       RemoveAlarm(ALM_KTS_FAULT);       
  40ba9c:	2056      	movs	r0, #86	; 0x56
  40ba9e:	4b21      	ldr	r3, [pc, #132]	; (40bb24 <Test_Connect_KTS+0x14c>)
  40baa0:	4798      	blx	r3
  40baa2:	e7c1      	b.n	40ba28 <Test_Connect_KTS+0x50>
			if ( eep_read_byte(ADDR_EEP(KTS_Watchdog)) == 0 )
  40baa4:	2037      	movs	r0, #55	; 0x37
  40baa6:	4b1d      	ldr	r3, [pc, #116]	; (40bb1c <Test_Connect_KTS+0x144>)
  40baa8:	4798      	blx	r3
  40baaa:	b938      	cbnz	r0, 40babc <Test_Connect_KTS+0xe4>
				Wait_KTS_Response = false;
  40baac:	2300      	movs	r3, #0
  40baae:	4a18      	ldr	r2, [pc, #96]	; (40bb10 <Test_Connect_KTS+0x138>)
  40bab0:	7013      	strb	r3, [r2, #0]
				KTS_10min_Counter = 0;
  40bab2:	4a18      	ldr	r2, [pc, #96]	; (40bb14 <Test_Connect_KTS+0x13c>)
  40bab4:	6013      	str	r3, [r2, #0]
				KTS_60s_Counter = 0;
  40bab6:	4a1a      	ldr	r2, [pc, #104]	; (40bb20 <Test_Connect_KTS+0x148>)
  40bab8:	6013      	str	r3, [r2, #0]
  40baba:	e7c0      	b.n	40ba3e <Test_Connect_KTS+0x66>
				if ( KTS_60s_Counter >= 60000) // KTS not responding after 60s
  40babc:	4b18      	ldr	r3, [pc, #96]	; (40bb20 <Test_Connect_KTS+0x148>)
  40babe:	681a      	ldr	r2, [r3, #0]
  40bac0:	f64e 235f 	movw	r3, #59999	; 0xea5f
  40bac4:	429a      	cmp	r2, r3
  40bac6:	d9ba      	bls.n	40ba3e <Test_Connect_KTS+0x66>
					KTS_60s_Counter = 0;
  40bac8:	2300      	movs	r3, #0
  40baca:	4a15      	ldr	r2, [pc, #84]	; (40bb20 <Test_Connect_KTS+0x148>)
  40bacc:	6013      	str	r3, [r2, #0]
					Wait_KTS_Response = false;
  40bace:	4a10      	ldr	r2, [pc, #64]	; (40bb10 <Test_Connect_KTS+0x138>)
  40bad0:	7013      	strb	r3, [r2, #0]
					KTS_10min_Counter = 0;
  40bad2:	4a10      	ldr	r2, [pc, #64]	; (40bb14 <Test_Connect_KTS+0x13c>)
  40bad4:	6013      	str	r3, [r2, #0]
  40bad6:	e7b2      	b.n	40ba3e <Test_Connect_KTS+0x66>
			
		}
	}
	else // KTS not connected
	{
		KTS_10min_Counter = 0;
  40bad8:	2300      	movs	r3, #0
  40bada:	4a0e      	ldr	r2, [pc, #56]	; (40bb14 <Test_Connect_KTS+0x13c>)
  40badc:	6013      	str	r3, [r2, #0]
		Wait_KTS_Response = false;
  40bade:	4a0c      	ldr	r2, [pc, #48]	; (40bb10 <Test_Connect_KTS+0x138>)
  40bae0:	7013      	strb	r3, [r2, #0]
		KTS_60s_Counter = 0;
  40bae2:	4a0f      	ldr	r2, [pc, #60]	; (40bb20 <Test_Connect_KTS+0x148>)
  40bae4:	6013      	str	r3, [r2, #0]
	}
    
    return 1; // tiene sempre viva la funzione nello sheduler   
}  
  40bae6:	2001      	movs	r0, #1
  40bae8:	bd08      	pop	{r3, pc}
  40baea:	bf00      	nop
  40baec:	200013ac 	.word	0x200013ac
  40baf0:	20000e06 	.word	0x20000e06
  40baf4:	20000e6c 	.word	0x20000e6c
  40baf8:	400e0e00 	.word	0x400e0e00
  40bafc:	0040b725 	.word	0x0040b725
  40bb00:	00403555 	.word	0x00403555
  40bb04:	20000e70 	.word	0x20000e70
  40bb08:	400e1450 	.word	0x400e1450
  40bb0c:	00403a89 	.word	0x00403a89
  40bb10:	20000e60 	.word	0x20000e60
  40bb14:	20000e30 	.word	0x20000e30
  40bb18:	001b773f 	.word	0x001b773f
  40bb1c:	0040bfd1 	.word	0x0040bfd1
  40bb20:	20000e34 	.word	0x20000e34
  40bb24:	004035ad 	.word	0x004035ad

0040bb28 <Gestione_Relays>:
   unsigned short SetPointTemp, enab_func;
   Byte i_rifTemp;
   unsigned short SetExtTemp;
   int MaxSpeed;
   
   if(sData.status_test & MSK_TEST_OUTPUT)
  40bb28:	4b9f      	ldr	r3, [pc, #636]	; (40bda8 <Gestione_Relays+0x280>)
  40bb2a:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
  40bb2e:	f013 0f04 	tst.w	r3, #4
  40bb32:	f040 8137 	bne.w	40bda4 <Gestione_Relays+0x27c>
{
  40bb36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40bb3a:	2400      	movs	r4, #0
      //                    130= Common Fault Status     (il rele si Diseccita se: Unità in allarme)
      //                    131= Unit is Run (ex: SDD)   (il rele si Diseccita se: Unita è in funz.)    
      //                    132= Pilota la valvola       (il rele si Diseccita se: AWP è minore del Setpoint di temperatura)
      //                    133= Estate / Inverno        (il rele si Diseccita se: Fresh è minore della temperatura Bypass_minTempExt) 
	  //                    134= Max Speed			     (il rele si Diseccita se: L'unità raggiunge il 100% di ventilazione)	  
      cfg_relay = read_byte_eeprom(ADDR_EEP(Set_Output[i])); 
  40bb3c:	4e9b      	ldr	r6, [pc, #620]	; (40bdac <Gestione_Relays+0x284>)
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bb3e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 40bdd8 <Gestione_Relays+0x2b0>
        break; 
		
		case 6:   
          //  6= Max Speed  
			
			MaxSpeed = (int)((float)255 * calcDepot());
  40bb42:	4f9b      	ldr	r7, [pc, #620]	; (40bdb0 <Gestione_Relays+0x288>)
  40bb44:	e021      	b.n	40bb8a <Gestione_Relays+0x62>
          if((sData.status_unit & MSK_STS_BYPASS) == 0) 
  40bb46:	4b98      	ldr	r3, [pc, #608]	; (40bda8 <Gestione_Relays+0x280>)
  40bb48:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  40bb4c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
      condizione_on =0;
  40bb50:	bf0c      	ite	eq
  40bb52:	2001      	moveq	r0, #1
  40bb54:	2000      	movne	r0, #0
        break;
       
      }

      //---- pilotiamo i rele' ----
      if(rele_disseccitato_condiz_on) {
  40bb56:	f015 0f80 	tst.w	r5, #128	; 0x80
  40bb5a:	f040 80db 	bne.w	40bd14 <Gestione_Relays+0x1ec>
				ioport_set_pin_level(pOut2, IOPORT_PIN_LEVEL_HIGH);
            sData.StatusOutput |= (1 << i);
            
         }  
      }else {
         if(condizione_on) { 
  40bb5e:	2800      	cmp	r0, #0
  40bb60:	f000 80b0 	beq.w	40bcc4 <Gestione_Relays+0x19c>
            // il relè si eccita, perchè viene soddisfatta la condizione
            //digitalWrite(pRelay[i],   HIGH);
			if ( i == 0 )
  40bb64:	2c00      	cmp	r4, #0
  40bb66:	f000 8103 	beq.w	40bd70 <Gestione_Relays+0x248>
				ioport_set_pin_level(pOut1, IOPORT_PIN_LEVEL_HIGH);
			if ( i == 1 )
  40bb6a:	2c01      	cmp	r4, #1
  40bb6c:	f000 8105 	beq.w	40bd7a <Gestione_Relays+0x252>
				ioport_set_pin_level(pOut2, IOPORT_PIN_LEVEL_HIGH);
            sData.StatusOutput |= (1 << i);
  40bb70:	498d      	ldr	r1, [pc, #564]	; (40bda8 <Gestione_Relays+0x280>)
  40bb72:	2301      	movs	r3, #1
  40bb74:	fa03 f204 	lsl.w	r2, r3, r4
  40bb78:	f891 31f1 	ldrb.w	r3, [r1, #497]	; 0x1f1
  40bb7c:	4313      	orrs	r3, r2
  40bb7e:	f881 31f1 	strb.w	r3, [r1, #497]	; 0x1f1
   for(i=0; i <2; i++) 
  40bb82:	3401      	adds	r4, #1
  40bb84:	2c02      	cmp	r4, #2
  40bb86:	f000 810a 	beq.w	40bd9e <Gestione_Relays+0x276>
      cfg_relay = read_byte_eeprom(ADDR_EEP(Set_Output[i])); 
  40bb8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40bb8e:	b280      	uxth	r0, r0
  40bb90:	47b0      	blx	r6
  40bb92:	4605      	mov	r5, r0
      switch (cfg_relay &0x07){
  40bb94:	f000 0307 	and.w	r3, r0, #7
  40bb98:	3b01      	subs	r3, #1
  40bb9a:	2b05      	cmp	r3, #5
  40bb9c:	f200 80b8 	bhi.w	40bd10 <Gestione_Relays+0x1e8>
  40bba0:	a201      	add	r2, pc, #4	; (adr r2, 40bba8 <Gestione_Relays+0x80>)
  40bba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40bba6:	bf00      	nop
  40bba8:	0040bb47 	.word	0x0040bb47
  40bbac:	0040bbc1 	.word	0x0040bbc1
  40bbb0:	0040bbcd 	.word	0x0040bbcd
  40bbb4:	0040bbdd 	.word	0x0040bbdd
  40bbb8:	0040bc1b 	.word	0x0040bc1b
  40bbbc:	0040bce9 	.word	0x0040bce9
          if(sData.status_Leds_ctrlFan & 0x08) 
  40bbc0:	4b79      	ldr	r3, [pc, #484]	; (40bda8 <Gestione_Relays+0x280>)
  40bbc2:	f893 01ee 	ldrb.w	r0, [r3, #494]	; 0x1ee
      condizione_on =0;
  40bbc6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  40bbca:	e7c4      	b.n	40bb56 <Gestione_Relays+0x2e>
          if (sData.status_unit & MSK_UNIT_OPERATING) 
  40bbcc:	4b76      	ldr	r3, [pc, #472]	; (40bda8 <Gestione_Relays+0x280>)
  40bbce:	f8b3 01eb 	ldrh.w	r0, [r3, #491]	; 0x1eb
      condizione_on =0;
  40bbd2:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
  40bbd6:	bf18      	it	ne
  40bbd8:	2001      	movne	r0, #1
  40bbda:	e7bc      	b.n	40bb56 <Gestione_Relays+0x2e>
            i_rifTemp    = read_byte_eeprom(ADDR_EEP(idxSetPointT)) & 0x01;
  40bbdc:	208b      	movs	r0, #139	; 0x8b
  40bbde:	47b0      	blx	r6
            SetPointTemp = read_word_eeprom(ADDR_EEP(SetPointTemp[i_rifTemp])); 
  40bbe0:	f000 0001 	and.w	r0, r0, #1
  40bbe4:	0040      	lsls	r0, r0, #1
  40bbe6:	3087      	adds	r0, #135	; 0x87
  40bbe8:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 40bdb4 <Gestione_Relays+0x28c>
  40bbec:	47d0      	blx	sl
  40bbee:	4681      	mov	r9, r0
            enab_func = read_word_eeprom(ADDR_EEP(Enab_Fuction));
  40bbf0:	202e      	movs	r0, #46	; 0x2e
  40bbf2:	47d0      	blx	sl
          if(enab_func & (1 << ENAB_SUMMER))
  40bbf4:	f410 6f00 	tst.w	r0, #2048	; 0x800
  40bbf8:	d007      	beq.n	40bc0a <Gestione_Relays+0xe2>
            if (sData.measure_AWP_max >  SetPointTemp) 
  40bbfa:	4b6b      	ldr	r3, [pc, #428]	; (40bda8 <Gestione_Relays+0x280>)
  40bbfc:	f9b3 01c1 	ldrsh.w	r0, [r3, #449]	; 0x1c1
      condizione_on =0;
  40bc00:	4548      	cmp	r0, r9
  40bc02:	bfd4      	ite	le
  40bc04:	2000      	movle	r0, #0
  40bc06:	2001      	movgt	r0, #1
  40bc08:	e7a5      	b.n	40bb56 <Gestione_Relays+0x2e>
            if (sData.measure_AWP_max <  SetPointTemp) 
  40bc0a:	4b67      	ldr	r3, [pc, #412]	; (40bda8 <Gestione_Relays+0x280>)
  40bc0c:	f9b3 01c1 	ldrsh.w	r0, [r3, #449]	; 0x1c1
      condizione_on =0;
  40bc10:	4548      	cmp	r0, r9
  40bc12:	bfac      	ite	ge
  40bc14:	2000      	movge	r0, #0
  40bc16:	2001      	movlt	r0, #1
  40bc18:	e79d      	b.n	40bb56 <Gestione_Relays+0x2e>
            SetExtTemp = read_word_eeprom(ADDR_EEP(Bypass_minTempExt)); 
  40bc1a:	2085      	movs	r0, #133	; 0x85
  40bc1c:	4b65      	ldr	r3, [pc, #404]	; (40bdb4 <Gestione_Relays+0x28c>)
  40bc1e:	4798      	blx	r3
            if ((sData.status_unit & MSK_UNIT_OPERATING) && (soft_start == 0))
  40bc20:	4b61      	ldr	r3, [pc, #388]	; (40bda8 <Gestione_Relays+0x280>)
  40bc22:	f8b3 31eb 	ldrh.w	r3, [r3, #491]	; 0x1eb
  40bc26:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40bc2a:	d03d      	beq.n	40bca8 <Gestione_Relays+0x180>
  40bc2c:	4b62      	ldr	r3, [pc, #392]	; (40bdb8 <Gestione_Relays+0x290>)
  40bc2e:	f9b3 3000 	ldrsh.w	r3, [r3]
  40bc32:	2b00      	cmp	r3, #0
  40bc34:	d138      	bne.n	40bca8 <Gestione_Relays+0x180>
            if (sData.measure_Temp[I_PROBE_FRESH] >  SetExtTemp)
  40bc36:	4b5c      	ldr	r3, [pc, #368]	; (40bda8 <Gestione_Relays+0x280>)
  40bc38:	f9b3 31cd 	ldrsh.w	r3, [r3, #461]	; 0x1cd
  40bc3c:	4283      	cmp	r3, r0
  40bc3e:	dd19      	ble.n	40bc74 <Gestione_Relays+0x14c>
                  count_win = FULLTIME;
  40bc40:	22f0      	movs	r2, #240	; 0xf0
  40bc42:	4b5e      	ldr	r3, [pc, #376]	; (40bdbc <Gestione_Relays+0x294>)
  40bc44:	801a      	strh	r2, [r3, #0]
               if( count_sum > 0)
  40bc46:	4b5e      	ldr	r3, [pc, #376]	; (40bdc0 <Gestione_Relays+0x298>)
  40bc48:	f9b3 3000 	ldrsh.w	r3, [r3]
  40bc4c:	2b00      	cmp	r3, #0
  40bc4e:	dd05      	ble.n	40bc5c <Gestione_Relays+0x134>
                   count_sum--;
  40bc50:	3b01      	subs	r3, #1
  40bc52:	4a5b      	ldr	r2, [pc, #364]	; (40bdc0 <Gestione_Relays+0x298>)
  40bc54:	8013      	strh	r3, [r2, #0]
                   output_on = 0;
  40bc56:	2200      	movs	r2, #0
  40bc58:	4b5a      	ldr	r3, [pc, #360]	; (40bdc4 <Gestione_Relays+0x29c>)
  40bc5a:	701a      	strb	r2, [r3, #0]
               if( count_sum == 0)
  40bc5c:	4b58      	ldr	r3, [pc, #352]	; (40bdc0 <Gestione_Relays+0x298>)
  40bc5e:	f9b3 3000 	ldrsh.w	r3, [r3]
  40bc62:	bb63      	cbnz	r3, 40bcbe <Gestione_Relays+0x196>
                   output_on = 1;
  40bc64:	2201      	movs	r2, #1
  40bc66:	4b57      	ldr	r3, [pc, #348]	; (40bdc4 <Gestione_Relays+0x29c>)
  40bc68:	701a      	strb	r2, [r3, #0]
      if(rele_disseccitato_condiz_on) {
  40bc6a:	f015 0f80 	tst.w	r5, #128	; 0x80
  40bc6e:	f43f af79 	beq.w	40bb64 <Gestione_Relays+0x3c>
  40bc72:	e050      	b.n	40bd16 <Gestione_Relays+0x1ee>
                  count_sum = FULLTIME;
  40bc74:	22f0      	movs	r2, #240	; 0xf0
  40bc76:	4b52      	ldr	r3, [pc, #328]	; (40bdc0 <Gestione_Relays+0x298>)
  40bc78:	801a      	strh	r2, [r3, #0]
               if( count_win > 0)
  40bc7a:	4b50      	ldr	r3, [pc, #320]	; (40bdbc <Gestione_Relays+0x294>)
  40bc7c:	f9b3 3000 	ldrsh.w	r3, [r3]
  40bc80:	2b00      	cmp	r3, #0
  40bc82:	dd0f      	ble.n	40bca4 <Gestione_Relays+0x17c>
                   count_win--;
  40bc84:	3b01      	subs	r3, #1
  40bc86:	4a4d      	ldr	r2, [pc, #308]	; (40bdbc <Gestione_Relays+0x294>)
  40bc88:	8013      	strh	r3, [r2, #0]
                   output_on = 1;
  40bc8a:	2001      	movs	r0, #1
  40bc8c:	4b4d      	ldr	r3, [pc, #308]	; (40bdc4 <Gestione_Relays+0x29c>)
  40bc8e:	7018      	strb	r0, [r3, #0]
               if( count_win == 0)
  40bc90:	4b4a      	ldr	r3, [pc, #296]	; (40bdbc <Gestione_Relays+0x294>)
  40bc92:	f9b3 3000 	ldrsh.w	r3, [r3]
  40bc96:	2b00      	cmp	r3, #0
  40bc98:	f47f af5d 	bne.w	40bb56 <Gestione_Relays+0x2e>
                   output_on = 0;
  40bc9c:	2200      	movs	r2, #0
  40bc9e:	4b49      	ldr	r3, [pc, #292]	; (40bdc4 <Gestione_Relays+0x29c>)
  40bca0:	701a      	strb	r2, [r3, #0]
  40bca2:	e00c      	b.n	40bcbe <Gestione_Relays+0x196>
      condizione_on =0;
  40bca4:	2000      	movs	r0, #0
  40bca6:	e7f3      	b.n	40bc90 <Gestione_Relays+0x168>
                  output_on = 0;
  40bca8:	2200      	movs	r2, #0
  40bcaa:	4b46      	ldr	r3, [pc, #280]	; (40bdc4 <Gestione_Relays+0x29c>)
  40bcac:	701a      	strb	r2, [r3, #0]
                  if(soft_start <= 0)
  40bcae:	4b42      	ldr	r3, [pc, #264]	; (40bdb8 <Gestione_Relays+0x290>)
  40bcb0:	f9b3 3000 	ldrsh.w	r3, [r3]
  40bcb4:	4293      	cmp	r3, r2
  40bcb6:	dd14      	ble.n	40bce2 <Gestione_Relays+0x1ba>
                  else soft_start--;// per i primi 15 secondi dall'accensione iniziale (no stand-by) non faccio niente per lasciare andare in temperatura le sonde
  40bcb8:	3b01      	subs	r3, #1
  40bcba:	4a3f      	ldr	r2, [pc, #252]	; (40bdb8 <Gestione_Relays+0x290>)
  40bcbc:	8013      	strh	r3, [r2, #0]
      if(rele_disseccitato_condiz_on) {
  40bcbe:	f015 0f80 	tst.w	r5, #128	; 0x80
  40bcc2:	d13f      	bne.n	40bd44 <Gestione_Relays+0x21c>
            
         }else {
            // il relè si dissecita
            //digitalWrite(pRelay[i],   LOW);
			if ( i == 0 )
  40bcc4:	2c00      	cmp	r4, #0
  40bcc6:	d05c      	beq.n	40bd82 <Gestione_Relays+0x25a>
				ioport_set_pin_level(pOut1, IOPORT_PIN_LEVEL_LOW);
			if ( i == 1 )
  40bcc8:	2c01      	cmp	r4, #1
  40bcca:	d05f      	beq.n	40bd8c <Gestione_Relays+0x264>
				ioport_set_pin_level(pOut2, IOPORT_PIN_LEVEL_LOW); 
            sData.StatusOutput &= ~(1 << i);
  40bccc:	4936      	ldr	r1, [pc, #216]	; (40bda8 <Gestione_Relays+0x280>)
  40bcce:	2301      	movs	r3, #1
  40bcd0:	fa03 f204 	lsl.w	r2, r3, r4
  40bcd4:	f891 31f1 	ldrb.w	r3, [r1, #497]	; 0x1f1
  40bcd8:	ea23 0302 	bic.w	r3, r3, r2
  40bcdc:	f881 31f1 	strb.w	r3, [r1, #497]	; 0x1f1
  40bce0:	e74f      	b.n	40bb82 <Gestione_Relays+0x5a>
                  soft_start = 0;
  40bce2:	4b35      	ldr	r3, [pc, #212]	; (40bdb8 <Gestione_Relays+0x290>)
  40bce4:	801a      	strh	r2, [r3, #0]
  40bce6:	e7ea      	b.n	40bcbe <Gestione_Relays+0x196>
			MaxSpeed = (int)((float)255 * calcDepot());
  40bce8:	4b37      	ldr	r3, [pc, #220]	; (40bdc8 <Gestione_Relays+0x2a0>)
  40bcea:	4798      	blx	r3
  40bcec:	4639      	mov	r1, r7
  40bcee:	4b37      	ldr	r3, [pc, #220]	; (40bdcc <Gestione_Relays+0x2a4>)
  40bcf0:	4798      	blx	r3
  40bcf2:	4b37      	ldr	r3, [pc, #220]	; (40bdd0 <Gestione_Relays+0x2a8>)
  40bcf4:	4798      	blx	r3
			if (sData.speed_motors_R >= MaxSpeed || sData.speed_motors_F >= MaxSpeed )
  40bcf6:	4b2c      	ldr	r3, [pc, #176]	; (40bda8 <Gestione_Relays+0x280>)
  40bcf8:	f893 31af 	ldrb.w	r3, [r3, #431]	; 0x1af
  40bcfc:	4298      	cmp	r0, r3
  40bcfe:	dd49      	ble.n	40bd94 <Gestione_Relays+0x26c>
  40bd00:	4b29      	ldr	r3, [pc, #164]	; (40bda8 <Gestione_Relays+0x280>)
  40bd02:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
      condizione_on =0;
  40bd06:	4298      	cmp	r0, r3
  40bd08:	bfcc      	ite	gt
  40bd0a:	2000      	movgt	r0, #0
  40bd0c:	2001      	movle	r0, #1
  40bd0e:	e722      	b.n	40bb56 <Gestione_Relays+0x2e>
  40bd10:	2000      	movs	r0, #0
  40bd12:	e720      	b.n	40bb56 <Gestione_Relays+0x2e>
         if(condizione_on) {     
  40bd14:	b1b0      	cbz	r0, 40bd44 <Gestione_Relays+0x21c>
			if ( i == 0 )
  40bd16:	b164      	cbz	r4, 40bd32 <Gestione_Relays+0x20a>
			if ( i == 1 )
  40bd18:	2c01      	cmp	r4, #1
  40bd1a:	d00f      	beq.n	40bd3c <Gestione_Relays+0x214>
            sData.StatusOutput &= ~(1 << i);
  40bd1c:	4922      	ldr	r1, [pc, #136]	; (40bda8 <Gestione_Relays+0x280>)
  40bd1e:	2301      	movs	r3, #1
  40bd20:	fa03 f204 	lsl.w	r2, r3, r4
  40bd24:	f891 31f1 	ldrb.w	r3, [r1, #497]	; 0x1f1
  40bd28:	ea23 0302 	bic.w	r3, r3, r2
  40bd2c:	f881 31f1 	strb.w	r3, [r1, #497]	; 0x1f1
  40bd30:	e727      	b.n	40bb82 <Gestione_Relays+0x5a>
  40bd32:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40bd36:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  40bd3a:	e7ef      	b.n	40bd1c <Gestione_Relays+0x1f4>
  40bd3c:	2201      	movs	r2, #1
  40bd3e:	4b25      	ldr	r3, [pc, #148]	; (40bdd4 <Gestione_Relays+0x2ac>)
  40bd40:	635a      	str	r2, [r3, #52]	; 0x34
  40bd42:	e7eb      	b.n	40bd1c <Gestione_Relays+0x1f4>
			if ( i == 0 )
  40bd44:	b15c      	cbz	r4, 40bd5e <Gestione_Relays+0x236>
			if ( i == 1 )
  40bd46:	2c01      	cmp	r4, #1
  40bd48:	d00e      	beq.n	40bd68 <Gestione_Relays+0x240>
            sData.StatusOutput |= (1 << i);
  40bd4a:	4917      	ldr	r1, [pc, #92]	; (40bda8 <Gestione_Relays+0x280>)
  40bd4c:	2301      	movs	r3, #1
  40bd4e:	fa03 f204 	lsl.w	r2, r3, r4
  40bd52:	f891 31f1 	ldrb.w	r3, [r1, #497]	; 0x1f1
  40bd56:	4313      	orrs	r3, r2
  40bd58:	f881 31f1 	strb.w	r3, [r1, #497]	; 0x1f1
  40bd5c:	e711      	b.n	40bb82 <Gestione_Relays+0x5a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40bd5e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40bd62:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  40bd66:	e7f0      	b.n	40bd4a <Gestione_Relays+0x222>
  40bd68:	2201      	movs	r2, #1
  40bd6a:	4b1a      	ldr	r3, [pc, #104]	; (40bdd4 <Gestione_Relays+0x2ac>)
  40bd6c:	631a      	str	r2, [r3, #48]	; 0x30
  40bd6e:	e7ec      	b.n	40bd4a <Gestione_Relays+0x222>
  40bd70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40bd74:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  40bd78:	e6fa      	b.n	40bb70 <Gestione_Relays+0x48>
  40bd7a:	2201      	movs	r2, #1
  40bd7c:	4b15      	ldr	r3, [pc, #84]	; (40bdd4 <Gestione_Relays+0x2ac>)
  40bd7e:	631a      	str	r2, [r3, #48]	; 0x30
  40bd80:	e6f6      	b.n	40bb70 <Gestione_Relays+0x48>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bd82:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40bd86:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  40bd8a:	e79f      	b.n	40bccc <Gestione_Relays+0x1a4>
  40bd8c:	2201      	movs	r2, #1
  40bd8e:	4b11      	ldr	r3, [pc, #68]	; (40bdd4 <Gestione_Relays+0x2ac>)
  40bd90:	635a      	str	r2, [r3, #52]	; 0x34
  40bd92:	e79b      	b.n	40bccc <Gestione_Relays+0x1a4>
      if(rele_disseccitato_condiz_on) {
  40bd94:	f015 0f80 	tst.w	r5, #128	; 0x80
  40bd98:	f43f aee4 	beq.w	40bb64 <Gestione_Relays+0x3c>
  40bd9c:	e7bb      	b.n	40bd16 <Gestione_Relays+0x1ee>
         }  
      }  
   }

   return 1;   
}  
  40bd9e:	2001      	movs	r0, #1
  40bda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bda4:	2001      	movs	r0, #1
  40bda6:	4770      	bx	lr
  40bda8:	200013ac 	.word	0x200013ac
  40bdac:	0040a26d 	.word	0x0040a26d
  40bdb0:	437f0000 	.word	0x437f0000
  40bdb4:	0040a279 	.word	0x0040a279
  40bdb8:	2000003e 	.word	0x2000003e
  40bdbc:	2000003c 	.word	0x2000003c
  40bdc0:	2000003a 	.word	0x2000003a
  40bdc4:	20000e14 	.word	0x20000e14
  40bdc8:	00404341 	.word	0x00404341
  40bdcc:	0040d7f5 	.word	0x0040d7f5
  40bdd0:	0040db81 	.word	0x0040db81
  40bdd4:	400e1000 	.word	0x400e1000
  40bdd8:	400e0e00 	.word	0x400e0e00

0040bddc <Check_SerialNumber>:
//   Controlla la validita' del serial number, se è default,
//   Imposta il depotenziamento in base alla lettura del canale AN9
//   secondo una certa tabella.
//---------------------------------------------------------------------
void Check_SerialNumber()
{
  40bddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bde0:	240b      	movs	r4, #11
   int val_16 = 0, i;
   Byte ord_vent = 0, data_prod =0, depot = 100;
           
  // SN[18] byte:  Ascii:  "OrVe SIZE CFG DATA PRG",
  // 1. se Ordine i vendita = '0','0','0','0'  
  for(i=0, ord_vent = 0; i < 4; i++) {     
  40bde2:	2500      	movs	r5, #0
    if(read_byte_eeprom(ADDR_EEP(SerialString[i])) == '0')
  40bde4:	4e2a      	ldr	r6, [pc, #168]	; (40be90 <Check_SerialNumber+0xb4>)
  40bde6:	4620      	mov	r0, r4
  40bde8:	47b0      	blx	r6
  40bdea:	2830      	cmp	r0, #48	; 0x30
      ord_vent++;
  40bdec:	bf04      	itt	eq
  40bdee:	3501      	addeq	r5, #1
  40bdf0:	b2ed      	uxtbeq	r5, r5
  40bdf2:	3401      	adds	r4, #1
  40bdf4:	b2a4      	uxth	r4, r4
  for(i=0, ord_vent = 0; i < 4; i++) {     
  40bdf6:	2c0f      	cmp	r4, #15
  40bdf8:	d1f5      	bne.n	40bde6 <Check_SerialNumber+0xa>
  40bdfa:	2416      	movs	r4, #22
  40bdfc:	2600      	movs	r6, #0
  } 
  // 2. se la data è = '0','0','0','0'  
  for(i=11, data_prod=0; i < 15; i++) {     
    if(read_byte_eeprom(ADDR_EEP(SerialString[i])) == '0')
  40bdfe:	4f24      	ldr	r7, [pc, #144]	; (40be90 <Check_SerialNumber+0xb4>)
  40be00:	4620      	mov	r0, r4
  40be02:	47b8      	blx	r7
  40be04:	2830      	cmp	r0, #48	; 0x30
      data_prod++;
  40be06:	bf04      	itt	eq
  40be08:	3601      	addeq	r6, #1
  40be0a:	b2f6      	uxtbeq	r6, r6
  40be0c:	3401      	adds	r4, #1
  40be0e:	b2a4      	uxth	r4, r4
  for(i=11, data_prod=0; i < 15; i++) {     
  40be10:	2c1a      	cmp	r4, #26
  40be12:	d1f5      	bne.n	40be00 <Check_SerialNumber+0x24>
  } 
  
  // se 1 && 2  si verificano allora il serial number è default
  // quindi andiamo a prendere il valore del livello HW
  if((data_prod >= 4) && (ord_vent >= 4)) {   
  40be14:	2e03      	cmp	r6, #3
  40be16:	d939      	bls.n	40be8c <Check_SerialNumber+0xb0>
  40be18:	2d03      	cmp	r5, #3
  40be1a:	d820      	bhi.n	40be5e <Check_SerialNumber+0x82>
  40be1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 ioport_set_pin_level(pStatusLedI2C, IOPORT_PIN_LEVEL_LOW);
		 ioport_set_pin_level(pLED5, IOPORT_PIN_LEVEL_LOW);
         delay_ms (1000);
		 wdt_restart(WATCH_DOG);
         if(i++ & 0x01)
           Serial_println1("Error Serial Number!!");
  40be20:	481c      	ldr	r0, [pc, #112]	; (40be94 <Check_SerialNumber+0xb8>)
  40be22:	4b1d      	ldr	r3, [pc, #116]	; (40be98 <Check_SerialNumber+0xbc>)
  40be24:	4798      	blx	r3
         if(i++ & 0x01)
  40be26:	4635      	mov	r5, r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40be28:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
  40be2c:	f44f 6800 	mov.w	r8, #2048	; 0x800
  40be30:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  40be34:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
  40be38:	6327      	str	r7, [r4, #48]	; 0x30
         //digitalWrite(pStatusLedI2C, HIGH);
         //digitalWrite(pLED5, HIGH);
		 ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_HIGH);
		 ioport_set_pin_level(pStatusLedI2C, IOPORT_PIN_LEVEL_HIGH);
		 ioport_set_pin_level(pLED5, IOPORT_PIN_LEVEL_HIGH);
         delay_ms (250);
  40be3a:	4650      	mov	r0, sl
  40be3c:	4e17      	ldr	r6, [pc, #92]	; (40be9c <Check_SerialNumber+0xc0>)
  40be3e:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40be40:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  40be44:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
  40be48:	6367      	str	r7, [r4, #52]	; 0x34
         delay_ms (1000);
  40be4a:	4815      	ldr	r0, [pc, #84]	; (40bea0 <Check_SerialNumber+0xc4>)
  40be4c:	47b0      	blx	r6
		 wdt_restart(WATCH_DOG);
  40be4e:	4815      	ldr	r0, [pc, #84]	; (40bea4 <Check_SerialNumber+0xc8>)
  40be50:	4b15      	ldr	r3, [pc, #84]	; (40bea8 <Check_SerialNumber+0xcc>)
  40be52:	4798      	blx	r3
         if(i++ & 0x01)
  40be54:	1c6e      	adds	r6, r5, #1
  40be56:	f015 0f01 	tst.w	r5, #1
  40be5a:	d0e4      	beq.n	40be26 <Check_SerialNumber+0x4a>
  40be5c:	e7e0      	b.n	40be20 <Check_SerialNumber+0x44>
  40be5e:	4b13      	ldr	r3, [pc, #76]	; (40beac <Check_SerialNumber+0xd0>)
  40be60:	2220      	movs	r2, #32
  40be62:	635a      	str	r2, [r3, #52]	; 0x34
  40be64:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40be68:	635a      	str	r2, [r3, #52]	; 0x34
  40be6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40be6e:	635a      	str	r2, [r3, #52]	; 0x34
         delay_ms (1000);
  40be70:	480b      	ldr	r0, [pc, #44]	; (40bea0 <Check_SerialNumber+0xc4>)
  40be72:	4b0a      	ldr	r3, [pc, #40]	; (40be9c <Check_SerialNumber+0xc0>)
  40be74:	4798      	blx	r3
		 wdt_restart(WATCH_DOG);
  40be76:	480b      	ldr	r0, [pc, #44]	; (40bea4 <Check_SerialNumber+0xc8>)
  40be78:	4b0b      	ldr	r3, [pc, #44]	; (40bea8 <Check_SerialNumber+0xcc>)
  40be7a:	4798      	blx	r3
         if(i++ & 0x01)
  40be7c:	2501      	movs	r5, #1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40be7e:	4c0b      	ldr	r4, [pc, #44]	; (40beac <Check_SerialNumber+0xd0>)
  40be80:	f04f 0920 	mov.w	r9, #32
  40be84:	46cb      	mov	fp, r9
         delay_ms (250);
  40be86:	f8df a028 	ldr.w	sl, [pc, #40]	; 40beb0 <Check_SerialNumber+0xd4>
  40be8a:	e7cd      	b.n	40be28 <Check_SerialNumber+0x4c>
  40be8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40be90:	0040a26d 	.word	0x0040a26d
  40be94:	00413880 	.word	0x00413880
  40be98:	00406051 	.word	0x00406051
  40be9c:	20000001 	.word	0x20000001
  40bea0:	006cfdca 	.word	0x006cfdca
  40bea4:	400e1450 	.word	0x400e1450
  40bea8:	00403a89 	.word	0x00403a89
  40beac:	400e0e00 	.word	0x400e0e00
  40beb0:	001b3f73 	.word	0x001b3f73

0040beb4 <calc_size_unit>:

//-----------------------------------------------------
// calcola il size della macchina
//-----------------------------------------------------
unsigned short calc_size_unit()
{
  40beb4:	b538      	push	{r3, r4, r5, lr}
	Byte temp;
	unsigned short size_unit;
	
	// in base ai dati del SN ricavo il size della unita'
	// Example SN: 1565 0023 115 1351 002.
	temp =  read_byte_eeprom(ADDR_EEP(SerialString[4])) - '0';
  40beb6:	200f      	movs	r0, #15
  40beb8:	4d0c      	ldr	r5, [pc, #48]	; (40beec <calc_size_unit+0x38>)
  40beba:	47a8      	blx	r5
  40bebc:	3830      	subs	r0, #48	; 0x30
	size_unit = (temp * 100);
  40bebe:	b2c0      	uxtb	r0, r0
  40bec0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40bec4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40bec8:	0084      	lsls	r4, r0, #2
  40beca:	b2a4      	uxth	r4, r4
	temp =  read_byte_eeprom(ADDR_EEP(SerialString[5])) - '0';
  40becc:	2010      	movs	r0, #16
  40bece:	47a8      	blx	r5
  40bed0:	3830      	subs	r0, #48	; 0x30
	size_unit += (temp * 10);
  40bed2:	b2c0      	uxtb	r0, r0
  40bed4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40bed8:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  40bedc:	b2a4      	uxth	r4, r4
	temp =  read_byte_eeprom(ADDR_EEP(SerialString[6])) - '0';
  40bede:	2011      	movs	r0, #17
  40bee0:	47a8      	blx	r5
  40bee2:	3830      	subs	r0, #48	; 0x30
	size_unit += temp;
  40bee4:	fa54 f080 	uxtab	r0, r4, r0
	
	return size_unit;
}
  40bee8:	b280      	uxth	r0, r0
  40beea:	bd38      	pop	{r3, r4, r5, pc}
  40beec:	0040a26d 	.word	0x0040a26d

0040bef0 <SysTick_Handler>:
}

volatile uint32_t tick = 0;

void SysTick_Handler ( void )
{
  40bef0:	b508      	push	{r3, lr}
	tick++;
  40bef2:	4a21      	ldr	r2, [pc, #132]	; (40bf78 <SysTick_Handler+0x88>)
  40bef4:	6813      	ldr	r3, [r2, #0]
  40bef6:	3301      	adds	r3, #1
  40bef8:	6013      	str	r3, [r2, #0]
	UART0_Timeout++;
  40befa:	4a20      	ldr	r2, [pc, #128]	; (40bf7c <SysTick_Handler+0x8c>)
  40befc:	6813      	ldr	r3, [r2, #0]
  40befe:	3301      	adds	r3, #1
  40bf00:	6013      	str	r3, [r2, #0]
	pir_counter++;
  40bf02:	4a1f      	ldr	r2, [pc, #124]	; (40bf80 <SysTick_Handler+0x90>)
  40bf04:	6813      	ldr	r3, [r2, #0]
  40bf06:	3301      	adds	r3, #1
  40bf08:	6013      	str	r3, [r2, #0]
	UART2_Timeout++;
  40bf0a:	4a1e      	ldr	r2, [pc, #120]	; (40bf84 <SysTick_Handler+0x94>)
  40bf0c:	6813      	ldr	r3, [r2, #0]
  40bf0e:	3301      	adds	r3, #1
  40bf10:	6013      	str	r3, [r2, #0]
	twi_counter++;
  40bf12:	4a1d      	ldr	r2, [pc, #116]	; (40bf88 <SysTick_Handler+0x98>)
  40bf14:	6813      	ldr	r3, [r2, #0]
  40bf16:	3301      	adds	r3, #1
  40bf18:	6013      	str	r3, [r2, #0]
	CO2_1_counter++;
  40bf1a:	4a1c      	ldr	r2, [pc, #112]	; (40bf8c <SysTick_Handler+0x9c>)
  40bf1c:	6813      	ldr	r3, [r2, #0]
  40bf1e:	3301      	adds	r3, #1
  40bf20:	6013      	str	r3, [r2, #0]
	CO2_2_counter++;
  40bf22:	4a1b      	ldr	r2, [pc, #108]	; (40bf90 <SysTick_Handler+0xa0>)
  40bf24:	6813      	ldr	r3, [r2, #0]
  40bf26:	3301      	adds	r3, #1
  40bf28:	6013      	str	r3, [r2, #0]
	CO2_1_Average_Counter++;
  40bf2a:	4a1a      	ldr	r2, [pc, #104]	; (40bf94 <SysTick_Handler+0xa4>)
  40bf2c:	6813      	ldr	r3, [r2, #0]
  40bf2e:	3301      	adds	r3, #1
  40bf30:	6013      	str	r3, [r2, #0]
	CO2_2_Average_Counter++;
  40bf32:	4a19      	ldr	r2, [pc, #100]	; (40bf98 <SysTick_Handler+0xa8>)
  40bf34:	6813      	ldr	r3, [r2, #0]
  40bf36:	3301      	adds	r3, #1
  40bf38:	6013      	str	r3, [r2, #0]
	Clean_Event_Counter++;
  40bf3a:	4a18      	ldr	r2, [pc, #96]	; (40bf9c <SysTick_Handler+0xac>)
  40bf3c:	6813      	ldr	r3, [r2, #0]
  40bf3e:	3301      	adds	r3, #1
  40bf40:	6013      	str	r3, [r2, #0]
	Clean_Event_Counter_2_hours++;
  40bf42:	4a17      	ldr	r2, [pc, #92]	; (40bfa0 <SysTick_Handler+0xb0>)
  40bf44:	6813      	ldr	r3, [r2, #0]
  40bf46:	3301      	adds	r3, #1
  40bf48:	6013      	str	r3, [r2, #0]
	KTS_10min_Counter++;
  40bf4a:	4a16      	ldr	r2, [pc, #88]	; (40bfa4 <SysTick_Handler+0xb4>)
  40bf4c:	6813      	ldr	r3, [r2, #0]
  40bf4e:	3301      	adds	r3, #1
  40bf50:	6013      	str	r3, [r2, #0]
	KTS_60s_Counter++;
  40bf52:	4a15      	ldr	r2, [pc, #84]	; (40bfa8 <SysTick_Handler+0xb8>)
  40bf54:	6813      	ldr	r3, [r2, #0]
  40bf56:	3301      	adds	r3, #1
  40bf58:	6013      	str	r3, [r2, #0]
	if ( Scheduler_Counter >= 100 )
  40bf5a:	4b14      	ldr	r3, [pc, #80]	; (40bfac <SysTick_Handler+0xbc>)
  40bf5c:	681b      	ldr	r3, [r3, #0]
  40bf5e:	2b63      	cmp	r3, #99	; 0x63
  40bf60:	d804      	bhi.n	40bf6c <SysTick_Handler+0x7c>
		{
			Scheduler_Counter = 0;
			Scheduler_Timer_Callback ();
		}
	else	
		Scheduler_Counter++;
  40bf62:	4a12      	ldr	r2, [pc, #72]	; (40bfac <SysTick_Handler+0xbc>)
  40bf64:	6813      	ldr	r3, [r2, #0]
  40bf66:	3301      	adds	r3, #1
  40bf68:	6013      	str	r3, [r2, #0]
  40bf6a:	bd08      	pop	{r3, pc}
			Scheduler_Counter = 0;
  40bf6c:	2200      	movs	r2, #0
  40bf6e:	4b0f      	ldr	r3, [pc, #60]	; (40bfac <SysTick_Handler+0xbc>)
  40bf70:	601a      	str	r2, [r3, #0]
			Scheduler_Timer_Callback ();
  40bf72:	4b0f      	ldr	r3, [pc, #60]	; (40bfb0 <SysTick_Handler+0xc0>)
  40bf74:	4798      	blx	r3
  40bf76:	bd08      	pop	{r3, pc}
  40bf78:	20000e98 	.word	0x20000e98
  40bf7c:	20000e58 	.word	0x20000e58
  40bf80:	20000e8c 	.word	0x20000e8c
  40bf84:	20000e5c 	.word	0x20000e5c
  40bf88:	20000ea8 	.word	0x20000ea8
  40bf8c:	20000e1c 	.word	0x20000e1c
  40bf90:	20000e24 	.word	0x20000e24
  40bf94:	20000e18 	.word	0x20000e18
  40bf98:	20000e20 	.word	0x20000e20
  40bf9c:	20000e28 	.word	0x20000e28
  40bfa0:	20000e2c 	.word	0x20000e2c
  40bfa4:	20000e30 	.word	0x20000e30
  40bfa8:	20000e34 	.word	0x20000e34
  40bfac:	20000e48 	.word	0x20000e48
  40bfb0:	00405d25 	.word	0x00405d25

0040bfb4 <millis>:
}

unsigned long millis( void )
{
	return tick;
  40bfb4:	4b01      	ldr	r3, [pc, #4]	; (40bfbc <millis+0x8>)
  40bfb6:	6818      	ldr	r0, [r3, #0]
}
  40bfb8:	4770      	bx	lr
  40bfba:	bf00      	nop
  40bfbc:	20000e98 	.word	0x20000e98

0040bfc0 <constrain>:

Byte constrain(Byte x, Byte a, Byte b) {
	if(x < a) {
  40bfc0:	4288      	cmp	r0, r1
  40bfc2:	d303      	bcc.n	40bfcc <constrain+0xc>
  40bfc4:	4290      	cmp	r0, r2
  40bfc6:	bf28      	it	cs
  40bfc8:	4610      	movcs	r0, r2
  40bfca:	4770      	bx	lr
		return a;
  40bfcc:	4608      	mov	r0, r1
	else if(b < x) {
		return b;
	}
	else
	return x;
}
  40bfce:	4770      	bx	lr

0040bfd0 <eep_read_byte>:

Byte eep_read_byte(unsigned int addr)
{
  40bfd0:	b500      	push	{lr}
  40bfd2:	b087      	sub	sp, #28
	Byte Data_Received;
	
	twi_package_t packet_read;
	packet_read.addr[0]      = addr;      // TWI slave memory address data
  40bfd4:	f88d 0000 	strb.w	r0, [sp]
	packet_read.addr_length  = sizeof (uint8_t);    // TWI slave memory address data size
  40bfd8:	2301      	movs	r3, #1
  40bfda:	9301      	str	r3, [sp, #4]
	packet_read.chip         = DEVICE_24LCO2B;      // TWI slave bus address
  40bfdc:	2250      	movs	r2, #80	; 0x50
  40bfde:	f88d 2010 	strb.w	r2, [sp, #16]
	packet_read.buffer       = &Data_Received; // transfer data source buffer
  40bfe2:	f10d 0217 	add.w	r2, sp, #23
  40bfe6:	9202      	str	r2, [sp, #8]
	packet_read.length       = sizeof(Data_Received);  // transfer data size (bytes)
  40bfe8:	9303      	str	r3, [sp, #12]
	
	twi_master_read(MAIN_I2C, &packet_read);
  40bfea:	4669      	mov	r1, sp
  40bfec:	4803      	ldr	r0, [pc, #12]	; (40bffc <eep_read_byte+0x2c>)
  40bfee:	4b04      	ldr	r3, [pc, #16]	; (40c000 <eep_read_byte+0x30>)
  40bff0:	4798      	blx	r3
	return Data_Received;
}
  40bff2:	f89d 0017 	ldrb.w	r0, [sp, #23]
  40bff6:	b007      	add	sp, #28
  40bff8:	f85d fb04 	ldr.w	pc, [sp], #4
  40bffc:	40018000 	.word	0x40018000
  40c000:	004038a5 	.word	0x004038a5

0040c004 <eep_write_byte>:

void eep_write_byte(unsigned int addr, Byte data_to_send)
{
  40c004:	b530      	push	{r4, r5, lr}
  40c006:	b089      	sub	sp, #36	; 0x24
  40c008:	f88d 1007 	strb.w	r1, [sp, #7]
	
	twi_package_t packet_write;
	packet_write.addr[0]      = addr;      // TWI slave memory address data
  40c00c:	f88d 000c 	strb.w	r0, [sp, #12]
	packet_write.addr_length  = sizeof (uint8_t);    // TWI slave memory address data size
  40c010:	2301      	movs	r3, #1
  40c012:	9304      	str	r3, [sp, #16]
	packet_write.chip         = DEVICE_24LCO2B;      // TWI slave bus address
  40c014:	2250      	movs	r2, #80	; 0x50
  40c016:	f88d 201c 	strb.w	r2, [sp, #28]
	packet_write.buffer       = &data_to_send; // transfer data source buffer
  40c01a:	f10d 0207 	add.w	r2, sp, #7
  40c01e:	9205      	str	r2, [sp, #20]
	packet_write.length       = sizeof(data_to_send);  // transfer data size (bytes)
  40c020:	9306      	str	r3, [sp, #24]
	
	while (twi_master_write(MAIN_I2C, &packet_write) != TWI_SUCCESS);
  40c022:	4d04      	ldr	r5, [pc, #16]	; (40c034 <eep_write_byte+0x30>)
  40c024:	4c04      	ldr	r4, [pc, #16]	; (40c038 <eep_write_byte+0x34>)
  40c026:	a903      	add	r1, sp, #12
  40c028:	4628      	mov	r0, r5
  40c02a:	47a0      	blx	r4
  40c02c:	2800      	cmp	r0, #0
  40c02e:	d1fa      	bne.n	40c026 <eep_write_byte+0x22>
}
  40c030:	b009      	add	sp, #36	; 0x24
  40c032:	bd30      	pop	{r4, r5, pc}
  40c034:	40018000 	.word	0x40018000
  40c038:	00403985 	.word	0x00403985

0040c03c <init_sdata>:
{
  40c03c:	b538      	push	{r3, r4, r5, lr}
	sData.KTS_Connect        = 0;
  40c03e:	4c6b      	ldr	r4, [pc, #428]	; (40c1ec <init_sdata+0x1b0>)
  40c040:	2500      	movs	r5, #0
  40c042:	7025      	strb	r5, [r4, #0]
	sData.level_link_CTRLFAN = 0;
  40c044:	7065      	strb	r5, [r4, #1]
	sData.size_unit = calc_size_unit();
  40c046:	4b6a      	ldr	r3, [pc, #424]	; (40c1f0 <init_sdata+0x1b4>)
  40c048:	4798      	blx	r3
  40c04a:	8060      	strh	r0, [r4, #2]
  40c04c:	4621      	mov	r1, r4
	for(i=0; i < TOT_ACCESSORY_I2C; i++) {
  40c04e:	4628      	mov	r0, r5
		sData.AccI2C[i].comand      = 0;         // Comando di Accensione o Spegnimento
  40c050:	462b      	mov	r3, r5
  40c052:	718b      	strb	r3, [r1, #6]
		sData.AccI2C[i].sts         = 0;         // Stato in cui si trova l'accessorio: ....,bit[4]Stato Comando Acc.ON/OFF, bit[3]:1=Elect/0=Water, bit[2]:Stato Acc. 1=ON/0=OFF, bit[1]:1=OPEARATIVO, bit[0]:1 = Collegato
  40c054:	71cb      	strb	r3, [r1, #7]
		sData.AccI2C[i].measure1    = 0;         // misura principale
  40c056:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
  40c05a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  40c05e:	7253      	strb	r3, [r2, #9]
  40c060:	7293      	strb	r3, [r2, #10]
		sData.AccI2C[i].measure2    = 0;         // misura secondaria
  40c062:	72d3      	strb	r3, [r2, #11]
  40c064:	7313      	strb	r3, [r2, #12]
		sData.AccI2C[i].measure3    = 0;         // misura secondaria
  40c066:	7353      	strb	r3, [r2, #13]
  40c068:	7393      	strb	r3, [r2, #14]
		sData.AccI2C[i].measure4    = 0;         // misura secondaria
  40c06a:	73d3      	strb	r3, [r2, #15]
  40c06c:	7413      	strb	r3, [r2, #16]
		sData.AccI2C[i].data        = 0;         // byte Data: Per gli accessori HWD, EHD, PEHD, è la taglia, per le sonde viene passato l'info. se sono da canale 'd', oppure d'ambiente 'a'
  40c06e:	744b      	strb	r3, [r1, #17]
		sData.AccI2C[i].level_link  = 0;         // livello  della comunicazione (valore espresso in 10/10)
  40c070:	74cb      	strb	r3, [r1, #19]
		sData.AccI2C[i].cnt_link_ok = 0;         // Contatore Link buoni
  40c072:	750b      	strb	r3, [r1, #20]
		sData.AccI2C[i].cnt_link_ko = 0;         // Contatore Link falliti
  40c074:	754b      	strb	r3, [r1, #21]
		sData.AccI2C[i].cnt_persist_link_ko = 0; // contatore di persistenza di collegamenti Falliti
  40c076:	758b      	strb	r3, [r1, #22]
		sData.AccI2C[i].status_comand = 0;
  40c078:	75cb      	strb	r3, [r1, #23]
	for(i=0; i < TOT_ACCESSORY_I2C; i++) {
  40c07a:	3001      	adds	r0, #1
  40c07c:	3112      	adds	r1, #18
  40c07e:	2817      	cmp	r0, #23
  40c080:	d1e7      	bne.n	40c052 <init_sdata+0x16>
	sData.RegDXD.processor_I2C   = 0;
  40c082:	4b5a      	ldr	r3, [pc, #360]	; (40c1ec <init_sdata+0x1b0>)
  40c084:	2200      	movs	r2, #0
  40c086:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
	sData.RegDXD.count           = 0;
  40c08a:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
  40c08e:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
  40c092:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  40c096:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
	if(read_word_eeprom(ADDR_EEP(Enab_Fuction)) & 0x0800) {
  40c09a:	202e      	movs	r0, #46	; 0x2e
  40c09c:	4b55      	ldr	r3, [pc, #340]	; (40c1f4 <init_sdata+0x1b8>)
  40c09e:	4798      	blx	r3
  40c0a0:	f410 6f00 	tst.w	r0, #2048	; 0x800
		sData.RegDXD.func_compressor   = 'S';
  40c0a4:	4b51      	ldr	r3, [pc, #324]	; (40c1ec <init_sdata+0x1b0>)
  40c0a6:	bf14      	ite	ne
  40c0a8:	2253      	movne	r2, #83	; 0x53
		sData.RegDXD.func_compressor   = 'W';
  40c0aa:	2257      	moveq	r2, #87	; 0x57
  40c0ac:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
		sData.AccI2C[ACC_I2C_DXD].info = 'W';
  40c0b0:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	sData.info_ProbesAD  = 0xFF;                // 7.P2CO2, 6.P1CO2, 5.BPD, 4.P2RH, 3.P1RH, 2.SSR, 1.P1VOC, 0.-----   (bit: 0 = Ambiente, 1 = Duct)
  40c0b4:	4b4d      	ldr	r3, [pc, #308]	; (40c1ec <init_sdata+0x1b0>)
  40c0b6:	22ff      	movs	r2, #255	; 0xff
  40c0b8:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
	sData.speed_motors_R = 0;                   // comando ai motori Returns, 0 -> 255 , il dato si puÃ² discostare dal valore in eeprom se vi Ã¨ in corso un Defrost, oppure una Co2 Alarm,...
  40c0bc:	2200      	movs	r2, #0
  40c0be:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
	sData.speed_motors_F = 0;                   // comando ai motori Returns, 0 -> 255 , il dato si puÃ² discostare dal valore in eeprom se vi Ã¨ in corso un Defrost, oppure una Co2 Alarm,...
  40c0c2:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	sData.increase_speed_RH_CO2 = 10;           // Coefficiente moltiplicativo per 10,  10= 1.0 ed è l'incremento della velocità rispetto al set-poin a causa: RH alta, o CO2 alta, o VOCs alta.
  40c0c6:	210a      	movs	r1, #10
  40c0c8:	f883 11b1 	strb.w	r1, [r3, #433]	; 0x1b1
	sData.feedbk_v_speed_motors_R = 0;          // tensione letta sul comando dei motori ramo RETURN (0.00V a 11.00V) il valore Ã¨ moltipl. per 100, quindi 1100 = 11.00V
  40c0cc:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
  40c0d0:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
	sData.feedbk_v_speed_motors_F = 0;          // tensione letta sul comando dei motori ramo FRESH  (0.00V a 11.00V) il valore Ã¨ moltipl. per 100, quindi 1100 = 11.00V
  40c0d4:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  40c0d8:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
	sData.measure_CO2_max         = 0;          // valore massimo di Co2 tra i vari sensori: espresso in PPM ( da 0 a 2000 PPM)
  40c0dc:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
  40c0e0:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
	sData.measure_RH_max          = 0;          // valore massimo di UmiditÃ  tra i vari sensori: da 0% a 99%
  40c0e4:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
  40c0e8:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
	sData.measure_VOC_max         = 0;          // valore massimo di VOC tra i vari sensori: da 0  a 10000 ug/M3
  40c0ec:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
  40c0f0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
	sData.measure_pressure        = 0;          // valore espresso in Pascal da 0 a 1000Pa
  40c0f4:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
  40c0f8:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	sData.measure_RH_Analogic     = 0;          // Misura della sonda RH  interna all'Unita'
  40c0fc:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
  40c100:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	sData.measure_VOC_Analogic    = 0;          // Misura della sonda VOC interna all'Unita'
  40c104:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
  40c108:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	sData.measure_CO2_Analogic    = 0;          // Misura della sonda CO2 interna all'Unita'
  40c10c:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
  40c110:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	sData.measure_Temp[i] = 0;
  40c114:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
  40c118:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
  40c11c:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
  40c120:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  40c124:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
  40c128:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
  40c12c:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
  40c130:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	sData.measure_ADC_input[0] = 0;             // i valori sono grezzi (0 a 1024)
  40c134:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
  40c138:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
	sData.measure_ADC_input[1] = 0;
  40c13c:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
  40c140:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
	sData.measure_I_KTS    = 0;                 // valori espresi in mA: FS=1024 = 250mA
  40c144:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
  40c148:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	sData.absorption_bypass_min = 0;            // Assorbimento  minimo mA del motore Bypass
  40c14c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
  40c150:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
	sData.absorption_bypass_max = 0;            // Assorbimento massimo mA del motore Bypass
  40c154:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
  40c158:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
		sData.rpm_motors_R[i] = 0;
  40c15c:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
  40c160:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
		sData.rpm_motors_F[i] = 0;
  40c164:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
  40c168:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
		sData.rpm_motors_R[i] = 0;
  40c16c:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
  40c170:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
		sData.rpm_motors_F[i] = 0;
  40c174:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
  40c178:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
		sData.rpm_motors_R[i] = 0;
  40c17c:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
  40c180:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
		sData.rpm_motors_F[i] = 0;
  40c184:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
  40c188:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
	sData.status_unit   = 0;
  40c18c:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
  40c190:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	sData.status_weekly = 0;                    // 1 byte:  bit[7,6]:1,0=SPEED3/ 0,1=SPEED2/ 0,0=SPEED1 | bit[5,4]: 0,1=IMBAL_1_ON/ 0,0=IMBAL_OFF | bit[3,2]:0,1=RIF_TEMP2/ 0,0=RIF_TEMP1 | bit[1]: WEEKLY_RUN, bit[0]:WEEKLY_ENABLE
  40c194:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
	sData.status_Leds_ctrlFan = 0;              // 1 byte:   [1,0] LED BYPASS    (00 = OFF, 01=Toggle, 10= ON, 11= none)
  40c198:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
	sData.StatusMotorsR = 0;                    // 1 byte:   bit.. 7.none | 6.AlarmM3 | 5.AlarmM2 | 4.AlarmM1 | 3.none | 2.PowerON_M3 | 1.PowerON_M2 | 0.PowerON_M1
  40c19c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	sData.StatusMotorsF = 0;                    // 1 byte:   bit.. 7.none | 6.AlarmM3 | 5.AlarmM2 | 4.AlarmM1 | 3.none | 2.PowerON_M3 | 1.PowerON_M2 | 0.PowerON_M1
  40c1a0:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
	sData.status_test   = 0;
  40c1a4:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
  40c1a8:	f883 21f3 	strb.w	r2, [r3, #499]	; 0x1f3
	sData.timeout_test  = 0;
  40c1ac:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
  40c1b0:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
	sData.Status_RemoteCTRL = 0;
  40c1b4:	715a      	strb	r2, [r3, #5]
	val   = read_byte_eeprom(ADDR_EEP(AccessoyHW[1]));
  40c1b6:	202b      	movs	r0, #43	; 0x2b
  40c1b8:	4b0f      	ldr	r3, [pc, #60]	; (40c1f8 <init_sdata+0x1bc>)
  40c1ba:	4798      	blx	r3
	if(val & 0x01)
  40c1bc:	f010 0f01 	tst.w	r0, #1
  40c1c0:	d002      	beq.n	40c1c8 <init_sdata+0x18c>
	sData.Status_RemoteCTRL =  0x80; // Modbus
  40c1c2:	2280      	movs	r2, #128	; 0x80
  40c1c4:	4b09      	ldr	r3, [pc, #36]	; (40c1ec <init_sdata+0x1b0>)
  40c1c6:	715a      	strb	r2, [r3, #5]
	if(val & 0x02)
  40c1c8:	f010 0f02 	tst.w	r0, #2
  40c1cc:	d004      	beq.n	40c1d8 <init_sdata+0x19c>
	sData.Status_RemoteCTRL |= 0x40; // RFM
  40c1ce:	4a07      	ldr	r2, [pc, #28]	; (40c1ec <init_sdata+0x1b0>)
  40c1d0:	7953      	ldrb	r3, [r2, #5]
  40c1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c1d6:	7153      	strb	r3, [r2, #5]
	InitAlarm();
  40c1d8:	4b08      	ldr	r3, [pc, #32]	; (40c1fc <init_sdata+0x1c0>)
  40c1da:	4798      	blx	r3
	eep_write_byte( ADDR_EEP(KTS_Watchdog), 0);
  40c1dc:	2100      	movs	r1, #0
  40c1de:	2037      	movs	r0, #55	; 0x37
  40c1e0:	4b07      	ldr	r3, [pc, #28]	; (40c200 <init_sdata+0x1c4>)
  40c1e2:	4798      	blx	r3
	KTS_10min_Counter = 0;
  40c1e4:	2200      	movs	r2, #0
  40c1e6:	4b07      	ldr	r3, [pc, #28]	; (40c204 <init_sdata+0x1c8>)
  40c1e8:	601a      	str	r2, [r3, #0]
  40c1ea:	bd38      	pop	{r3, r4, r5, pc}
  40c1ec:	200013ac 	.word	0x200013ac
  40c1f0:	0040beb5 	.word	0x0040beb5
  40c1f4:	0040a279 	.word	0x0040a279
  40c1f8:	0040a26d 	.word	0x0040a26d
  40c1fc:	00403509 	.word	0x00403509
  40c200:	0040c005 	.word	0x0040c005
  40c204:	20000e30 	.word	0x20000e30

0040c208 <Setup>:

void Setup ( void )
{
  40c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 
	 //Erase_EEprom (); // erase full eeprom
	 //for (int  j=0; j<18 ; j++ )
		//eep_write_byte(ADDR_EEP(SerialString[j]) , SN[j]);
	 
	 PowerMode(POWER_ON);                   // si parte con il power , D26: PowerMotors 0=ON/ 1= OFF
  40c20a:	204f      	movs	r0, #79	; 0x4f
  40c20c:	4b32      	ldr	r3, [pc, #200]	; (40c2d8 <Setup+0xd0>)
  40c20e:	4798      	blx	r3
	  
	 //---------- Verifichiamo la eeprom ----------------
	 ctrl_eeprom();
  40c210:	4b32      	ldr	r3, [pc, #200]	; (40c2dc <Setup+0xd4>)
  40c212:	4798      	blx	r3
	 
	 //---------- Init struct Data ----------------------
	 init_sdata();
  40c214:	4b32      	ldr	r3, [pc, #200]	; (40c2e0 <Setup+0xd8>)
  40c216:	4798      	blx	r3
  40c218:	4c32      	ldr	r4, [pc, #200]	; (40c2e4 <Setup+0xdc>)
  40c21a:	2720      	movs	r7, #32
  40c21c:	6327      	str	r7, [r4, #48]	; 0x30

	 ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_HIGH);
	 
	 wdt_disable(WATCH_DOG);					 
  40c21e:	4d32      	ldr	r5, [pc, #200]	; (40c2e8 <Setup+0xe0>)
  40c220:	4628      	mov	r0, r5
  40c222:	4b32      	ldr	r3, [pc, #200]	; (40c2ec <Setup+0xe4>)
  40c224:	4798      	blx	r3
	 //----------- Se viene premuto un tasto entraimo nella shell ------------
	 shell_config_menu(20);                // Diamo tempo massimo per entrare nella shell 2,0 sec.
  40c226:	2014      	movs	r0, #20
  40c228:	4b31      	ldr	r3, [pc, #196]	; (40c2f0 <Setup+0xe8>)
  40c22a:	4798      	blx	r3
	 
	 wdt_restart(WATCH_DOG);
  40c22c:	4628      	mov	r0, r5
  40c22e:	4e31      	ldr	r6, [pc, #196]	; (40c2f4 <Setup+0xec>)
  40c230:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40c232:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40c236:	6363      	str	r3, [r4, #52]	; 0x34
	 
	 ioport_set_pin_level(pStatusLedI2C, IOPORT_PIN_LEVEL_LOW);  // led SPENTO
	 
	 //---------- Init miniKernel -----------------------
	 init_scheduler();
  40c238:	4b2f      	ldr	r3, [pc, #188]	; (40c2f8 <Setup+0xf0>)
  40c23a:	4798      	blx	r3
  40c23c:	6367      	str	r7, [r4, #52]	; 0x34
  40c23e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40c242:	6363      	str	r3, [r4, #52]	; 0x34
	 
	 ioport_set_pin_level(pBuz, IOPORT_PIN_LEVEL_LOW);
	 ioport_set_pin_level(pLED5, IOPORT_PIN_LEVEL_LOW);
	 
	 wdt_restart(WATCH_DOG);
  40c244:	4628      	mov	r0, r5
  40c246:	47b0      	blx	r6
	 
	 //------------------ verifica la validità del serial Number, se è falso  blocca l'unità -------
	 Check_SerialNumber();
  40c248:	4b2c      	ldr	r3, [pc, #176]	; (40c2fc <Setup+0xf4>)
  40c24a:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c24c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40c250:	6323      	str	r3, [r4, #48]	; 0x30
	 
	 ioport_set_pin_level(pSwitchOFF_KTS, IOPORT_PIN_LEVEL_HIGH);  // KTS HIGH
	 
	 // diamo il comando di chiusura bypass, per allineare l'HW al fine corsa di chiusura.
	 // Attenzione al senso di rotazione per la chiusura.
	 if(read_byte_eeprom(ADDR_EEP(Config_Bypass)) != BPD_MANUAL_CLOSE)
  40c252:	204d      	movs	r0, #77	; 0x4d
  40c254:	4b2a      	ldr	r3, [pc, #168]	; (40c300 <Setup+0xf8>)
  40c256:	4798      	blx	r3
  40c258:	2802      	cmp	r0, #2
  40c25a:	d003      	beq.n	40c264 <Setup+0x5c>
		Active_Procedure_Bypass_OpCl(CLOSE_BPD, 0);
  40c25c:	2100      	movs	r1, #0
  40c25e:	2001      	movs	r0, #1
  40c260:	4b28      	ldr	r3, [pc, #160]	; (40c304 <Setup+0xfc>)
  40c262:	4798      	blx	r3
	 
	 
	 // Verifica gli indici delle sonde NTC
	 val = read_byte_eeprom(ADDR_EEP(Posiz_NTC));
  40c264:	2041      	movs	r0, #65	; 0x41
  40c266:	4b26      	ldr	r3, [pc, #152]	; (40c300 <Setup+0xf8>)
  40c268:	4798      	blx	r3
	 
	 if(val != 0xFF) {
  40c26a:	28ff      	cmp	r0, #255	; 0xff
  40c26c:	d00e      	beq.n	40c28c <Setup+0x84>
		 i_TFresh  = (val & 0x03);
  40c26e:	f000 0203 	and.w	r2, r0, #3
  40c272:	4b25      	ldr	r3, [pc, #148]	; (40c308 <Setup+0x100>)
  40c274:	701a      	strb	r2, [r3, #0]
		 i_TReturn = (val >> 2) & 0x03;
  40c276:	f3c0 0281 	ubfx	r2, r0, #2, #2
  40c27a:	4b24      	ldr	r3, [pc, #144]	; (40c30c <Setup+0x104>)
  40c27c:	701a      	strb	r2, [r3, #0]
		 i_TSupply = (val >> 4) & 0x03;
  40c27e:	f3c0 1201 	ubfx	r2, r0, #4, #2
  40c282:	4b23      	ldr	r3, [pc, #140]	; (40c310 <Setup+0x108>)
  40c284:	701a      	strb	r2, [r3, #0]
		 i_TExaust = (val >> 6) & 0x03;
  40c286:	0980      	lsrs	r0, r0, #6
  40c288:	4b22      	ldr	r3, [pc, #136]	; (40c314 <Setup+0x10c>)
  40c28a:	7018      	strb	r0, [r3, #0]
	 }
	  
	 // piccolo tempo di attesa.
	 delay_ms (100);
  40c28c:	4822      	ldr	r0, [pc, #136]	; (40c318 <Setup+0x110>)
  40c28e:	4b23      	ldr	r3, [pc, #140]	; (40c31c <Setup+0x114>)
  40c290:	4798      	blx	r3
	 wdt_restart(WATCH_DOG);
  40c292:	4815      	ldr	r0, [pc, #84]	; (40c2e8 <Setup+0xe0>)
  40c294:	4b17      	ldr	r3, [pc, #92]	; (40c2f4 <Setup+0xec>)
  40c296:	4798      	blx	r3
	 
	 //--------------- Carica lo Scheduler (mini Kernel) --------------
	 insert_function_scheduler(motor_speed,                12);   // sample  1.2 sec.
  40c298:	210c      	movs	r1, #12
  40c29a:	4821      	ldr	r0, [pc, #132]	; (40c320 <Setup+0x118>)
  40c29c:	4c21      	ldr	r4, [pc, #132]	; (40c324 <Setup+0x11c>)
  40c29e:	47a0      	blx	r4
	 insert_function_scheduler(IPEHD_test,                 30);   // sample  3.0 sec.
  40c2a0:	211e      	movs	r1, #30
  40c2a2:	4821      	ldr	r0, [pc, #132]	; (40c328 <Setup+0x120>)
  40c2a4:	47a0      	blx	r4
	 insert_function_scheduler(operatingHoursCounter,      10);   // sample  1.0 sec.
  40c2a6:	210a      	movs	r1, #10
  40c2a8:	4820      	ldr	r0, [pc, #128]	; (40c32c <Setup+0x124>)
  40c2aa:	47a0      	blx	r4
	 insert_function_scheduler(weekly_program,             10);   // sample  1.0 sec.
  40c2ac:	210a      	movs	r1, #10
  40c2ae:	4820      	ldr	r0, [pc, #128]	; (40c330 <Setup+0x128>)
  40c2b0:	47a0      	blx	r4
	 insert_function_scheduler(polling_serial_2,            6);   // sample  0.6 sec.
  40c2b2:	2106      	movs	r1, #6
  40c2b4:	481f      	ldr	r0, [pc, #124]	; (40c334 <Setup+0x12c>)
  40c2b6:	47a0      	blx	r4
	 insert_function_scheduler(TemperatureRegulate,        50);   // sample  5.0 sec.
  40c2b8:	2132      	movs	r1, #50	; 0x32
  40c2ba:	481f      	ldr	r0, [pc, #124]	; (40c338 <Setup+0x130>)
  40c2bc:	47a0      	blx	r4
	 //  insert_function_scheduler(ThermoCheck,                30);   // sample  5.0 sec. // NON ANCORA PRONTA
	 insert_function_scheduler(pollingDigitAccessory,       2);   // sample  0.2 sec.  //era 0.4 sec.
  40c2be:	2102      	movs	r1, #2
  40c2c0:	481e      	ldr	r0, [pc, #120]	; (40c33c <Setup+0x134>)
  40c2c2:	47a0      	blx	r4
	 insert_function_scheduler(Test_Connect_KTS,           15);   // sample  1.5 sec.
  40c2c4:	210f      	movs	r1, #15
  40c2c6:	481e      	ldr	r0, [pc, #120]	; (40c340 <Setup+0x138>)
  40c2c8:	47a0      	blx	r4
	 insert_function_scheduler(Gestione_Relays,            25);   // sample  2.5 sec.
  40c2ca:	2119      	movs	r1, #25
  40c2cc:	481d      	ldr	r0, [pc, #116]	; (40c344 <Setup+0x13c>)
  40c2ce:	47a0      	blx	r4
	 
	 insert_function_scheduler(CkUpdate_EepromToShadow,    13);   // sample  1.3 sec.
  40c2d0:	210d      	movs	r1, #13
  40c2d2:	481d      	ldr	r0, [pc, #116]	; (40c348 <Setup+0x140>)
  40c2d4:	47a0      	blx	r4
  40c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c2d8:	0040b471 	.word	0x0040b471
  40c2dc:	0040a4b5 	.word	0x0040a4b5
  40c2e0:	0040c03d 	.word	0x0040c03d
  40c2e4:	400e0e00 	.word	0x400e0e00
  40c2e8:	400e1450 	.word	0x400e1450
  40c2ec:	00403a81 	.word	0x00403a81
  40c2f0:	00407855 	.word	0x00407855
  40c2f4:	00403a89 	.word	0x00403a89
  40c2f8:	00405cfd 	.word	0x00405cfd
  40c2fc:	0040bddd 	.word	0x0040bddd
  40c300:	0040a26d 	.word	0x0040a26d
  40c304:	0040b77d 	.word	0x0040b77d
  40c308:	20000e8a 	.word	0x20000e8a
  40c30c:	20000045 	.word	0x20000045
  40c310:	20000046 	.word	0x20000046
  40c314:	20000044 	.word	0x20000044
  40c318:	000ae62e 	.word	0x000ae62e
  40c31c:	20000001 	.word	0x20000001
  40c320:	004052d9 	.word	0x004052d9
  40c324:	00405d4d 	.word	0x00405d4d
  40c328:	00408cc5 	.word	0x00408cc5
  40c32c:	0040b2d1 	.word	0x0040b2d1
  40c330:	00408d55 	.word	0x00408d55
  40c334:	00403491 	.word	0x00403491
  40c338:	0040997d 	.word	0x0040997d
  40c33c:	00401019 	.word	0x00401019
  40c340:	0040b9d9 	.word	0x0040b9d9
  40c344:	0040bb29 	.word	0x0040bb29
  40c348:	0040a1a9 	.word	0x0040a1a9

0040c34c <ADC121C027_IC7_Initialize>:
	
	return adc_val;
}

void ADC121C027_IC7_Initialize ( void )
{
  40c34c:	b530      	push	{r4, r5, lr}
  40c34e:	b087      	sub	sp, #28
	unsigned int addr; 
	Byte data_to_send;
	
	data_to_send = 0x60;
  40c350:	2360      	movs	r3, #96	; 0x60
  40c352:	f88d 3017 	strb.w	r3, [sp, #23]
	twi_package_t packet_write;
	packet_write.addr[0]      = 0x2;      // TWI slave memory address data
  40c356:	2302      	movs	r3, #2
  40c358:	f88d 3000 	strb.w	r3, [sp]
	packet_write.addr_length  = sizeof (uint8_t);    // TWI slave memory address data size
  40c35c:	2301      	movs	r3, #1
  40c35e:	9301      	str	r3, [sp, #4]
	packet_write.chip         = DEVICE_ADC121C027_IC7;      // TWI slave bus address
  40c360:	2251      	movs	r2, #81	; 0x51
  40c362:	f88d 2010 	strb.w	r2, [sp, #16]
	packet_write.buffer       = &data_to_send; // transfer data source buffer
  40c366:	f10d 0217 	add.w	r2, sp, #23
  40c36a:	9202      	str	r2, [sp, #8]
	packet_write.length       = sizeof(data_to_send);  // transfer data size (bytes)
  40c36c:	9303      	str	r3, [sp, #12]
	
	while (twi_master_write(MAIN_I2C, &packet_write) != TWI_SUCCESS);
  40c36e:	4d04      	ldr	r5, [pc, #16]	; (40c380 <ADC121C027_IC7_Initialize+0x34>)
  40c370:	4c04      	ldr	r4, [pc, #16]	; (40c384 <ADC121C027_IC7_Initialize+0x38>)
  40c372:	4669      	mov	r1, sp
  40c374:	4628      	mov	r0, r5
  40c376:	47a0      	blx	r4
  40c378:	2800      	cmp	r0, #0
  40c37a:	d1fa      	bne.n	40c372 <ADC121C027_IC7_Initialize+0x26>
}
  40c37c:	b007      	add	sp, #28
  40c37e:	bd30      	pop	{r4, r5, pc}
  40c380:	40018000 	.word	0x40018000
  40c384:	00403985 	.word	0x00403985

0040c388 <main>:
{
  40c388:	b580      	push	{r7, lr}
  40c38a:	b08a      	sub	sp, #40	; 0x28
	uart0_options.baudrate =   CONF_UART0_BAUDRATE;
  40c38c:	4b53      	ldr	r3, [pc, #332]	; (40c4dc <main+0x154>)
  40c38e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  40c392:	601a      	str	r2, [r3, #0]
	uart0_options.charlength = CONF_UART0_CHAR_LENGTH;
  40c394:	21c0      	movs	r1, #192	; 0xc0
  40c396:	6059      	str	r1, [r3, #4]
	uart0_options.paritytype = CONF_UART0_PARITY;
  40c398:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40c39c:	609a      	str	r2, [r3, #8]
	uart0_options.stopbits =   CONF_UART0_STOP_BITS;
  40c39e:	2000      	movs	r0, #0
  40c3a0:	60d8      	str	r0, [r3, #12]
	uart2_options.baudrate =   CONF_UART2_BAUDRATE;
  40c3a2:	4b4f      	ldr	r3, [pc, #316]	; (40c4e0 <main+0x158>)
  40c3a4:	f44f 4416 	mov.w	r4, #38400	; 0x9600
  40c3a8:	601c      	str	r4, [r3, #0]
	uart2_options.charlength = CONF_UART2_CHAR_LENGTH;
  40c3aa:	6059      	str	r1, [r3, #4]
	uart2_options.paritytype = CONF_UART2_PARITY;
  40c3ac:	609a      	str	r2, [r3, #8]
	uart2_options.stopbits =   CONF_UART2_STOP_BITS;
  40c3ae:	60d8      	str	r0, [r3, #12]
	twi0_options.speed = 400000;
  40c3b0:	4a4c      	ldr	r2, [pc, #304]	; (40c4e4 <main+0x15c>)
  40c3b2:	4b4d      	ldr	r3, [pc, #308]	; (40c4e8 <main+0x160>)
  40c3b4:	605a      	str	r2, [r3, #4]
    pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);   // enable external 32.768kHz crystal
  40c3b6:	4b4d      	ldr	r3, [pc, #308]	; (40c4ec <main+0x164>)
  40c3b8:	4798      	blx	r3
    while (!pmc_osc_is_ready_32kxtal()){};        // wait until oscillator is ready
  40c3ba:	4c4d      	ldr	r4, [pc, #308]	; (40c4f0 <main+0x168>)
  40c3bc:	47a0      	blx	r4
  40c3be:	2800      	cmp	r0, #0
  40c3c0:	d0fc      	beq.n	40c3bc <main+0x34>
	sysclk_init();
  40c3c2:	4b4c      	ldr	r3, [pc, #304]	; (40c4f4 <main+0x16c>)
  40c3c4:	4798      	blx	r3
	board_init();
  40c3c6:	4b4c      	ldr	r3, [pc, #304]	; (40c4f8 <main+0x170>)
  40c3c8:	4798      	blx	r3
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40c3ca:	4d4c      	ldr	r5, [pc, #304]	; (40c4fc <main+0x174>)
  40c3cc:	9501      	str	r5, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  40c3ce:	4b43      	ldr	r3, [pc, #268]	; (40c4dc <main+0x154>)
  40c3d0:	681a      	ldr	r2, [r3, #0]
  40c3d2:	9202      	str	r2, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  40c3d4:	689b      	ldr	r3, [r3, #8]
  40c3d6:	9303      	str	r3, [sp, #12]
  40c3d8:	2008      	movs	r0, #8
  40c3da:	4e49      	ldr	r6, [pc, #292]	; (40c500 <main+0x178>)
  40c3dc:	47b0      	blx	r6
		uart_init((Uart*)p_usart, &uart_settings);
  40c3de:	4c49      	ldr	r4, [pc, #292]	; (40c504 <main+0x17c>)
  40c3e0:	a901      	add	r1, sp, #4
  40c3e2:	4620      	mov	r0, r4
  40c3e4:	f8df a190 	ldr.w	sl, [pc, #400]	; 40c578 <main+0x1f0>
  40c3e8:	47d0      	blx	sl
	UART0_PDC = uart_get_pdc_base(CONF_UART0);
  40c3ea:	4620      	mov	r0, r4
  40c3ec:	4f46      	ldr	r7, [pc, #280]	; (40c508 <main+0x180>)
  40c3ee:	47b8      	blx	r7
  40c3f0:	4c46      	ldr	r4, [pc, #280]	; (40c50c <main+0x184>)
  40c3f2:	6020      	str	r0, [r4, #0]
	pdc_uart0_packet.ul_addr = USART0_buffRX;
  40c3f4:	4946      	ldr	r1, [pc, #280]	; (40c510 <main+0x188>)
  40c3f6:	4b47      	ldr	r3, [pc, #284]	; (40c514 <main+0x18c>)
  40c3f8:	600b      	str	r3, [r1, #0]
	pdc_uart0_packet.ul_size = 120;
  40c3fa:	2378      	movs	r3, #120	; 0x78
  40c3fc:	604b      	str	r3, [r1, #4]
	pdc_rx_init(UART0_PDC, &pdc_uart0_packet, NULL);
  40c3fe:	2200      	movs	r2, #0
  40c400:	f8df 8178 	ldr.w	r8, [pc, #376]	; 40c57c <main+0x1f4>
  40c404:	47c0      	blx	r8
	pdc_enable_transfer(UART0_PDC, PERIPH_PTCR_RXTEN);
  40c406:	2101      	movs	r1, #1
  40c408:	6820      	ldr	r0, [r4, #0]
  40c40a:	4c43      	ldr	r4, [pc, #268]	; (40c518 <main+0x190>)
  40c40c:	47a0      	blx	r4
	Serial_begin();
  40c40e:	4b43      	ldr	r3, [pc, #268]	; (40c51c <main+0x194>)
  40c410:	4798      	blx	r3
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40c412:	9501      	str	r5, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  40c414:	4b32      	ldr	r3, [pc, #200]	; (40c4e0 <main+0x158>)
  40c416:	681a      	ldr	r2, [r3, #0]
  40c418:	9202      	str	r2, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  40c41a:	689b      	ldr	r3, [r3, #8]
  40c41c:	9303      	str	r3, [sp, #12]
  40c41e:	200a      	movs	r0, #10
  40c420:	47b0      	blx	r6
		uart_init((Uart*)p_usart, &uart_settings);
  40c422:	f8df 915c 	ldr.w	r9, [pc, #348]	; 40c580 <main+0x1f8>
  40c426:	a901      	add	r1, sp, #4
  40c428:	4648      	mov	r0, r9
  40c42a:	47d0      	blx	sl
	UART2_PDC = uart_get_pdc_base(CONF_UART2);
  40c42c:	4648      	mov	r0, r9
  40c42e:	47b8      	blx	r7
  40c430:	4f3b      	ldr	r7, [pc, #236]	; (40c520 <main+0x198>)
  40c432:	6038      	str	r0, [r7, #0]
	pdc_uart2_packet.ul_addr = USART2_buffRX;
  40c434:	493b      	ldr	r1, [pc, #236]	; (40c524 <main+0x19c>)
  40c436:	4b3c      	ldr	r3, [pc, #240]	; (40c528 <main+0x1a0>)
  40c438:	600b      	str	r3, [r1, #0]
	pdc_uart2_packet.ul_size = 100;
  40c43a:	2364      	movs	r3, #100	; 0x64
  40c43c:	604b      	str	r3, [r1, #4]
	pdc_rx_init(UART2_PDC, &pdc_uart2_packet, NULL);
  40c43e:	2200      	movs	r2, #0
  40c440:	47c0      	blx	r8
	pdc_enable_transfer(UART2_PDC, PERIPH_PTCR_RXTEN);
  40c442:	2101      	movs	r1, #1
  40c444:	6838      	ldr	r0, [r7, #0]
  40c446:	47a0      	blx	r4
	Serial2_begin();
  40c448:	4b38      	ldr	r3, [pc, #224]	; (40c52c <main+0x1a4>)
  40c44a:	4798      	blx	r3
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  40c44c:	4c26      	ldr	r4, [pc, #152]	; (40c4e8 <main+0x160>)
  40c44e:	6025      	str	r5, [r4, #0]
	p_opt->smbus      = 0;
  40c450:	2500      	movs	r5, #0
  40c452:	7265      	strb	r5, [r4, #9]
  40c454:	2013      	movs	r0, #19
  40c456:	47b0      	blx	r6
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
  40c458:	4621      	mov	r1, r4
  40c45a:	4835      	ldr	r0, [pc, #212]	; (40c530 <main+0x1a8>)
  40c45c:	4b35      	ldr	r3, [pc, #212]	; (40c534 <main+0x1ac>)
  40c45e:	4798      	blx	r3
	delay_ms ( 100 );
  40c460:	4f35      	ldr	r7, [pc, #212]	; (40c538 <main+0x1b0>)
  40c462:	4638      	mov	r0, r7
  40c464:	4e35      	ldr	r6, [pc, #212]	; (40c53c <main+0x1b4>)
  40c466:	47b0      	blx	r6
	adc_enable();                           // enable ADC
  40c468:	4b35      	ldr	r3, [pc, #212]	; (40c540 <main+0x1b8>)
  40c46a:	4798      	blx	r3
	adc_get_config_defaults(&adc_conf);     // read ADC default values
  40c46c:	a804      	add	r0, sp, #16
  40c46e:	4b35      	ldr	r3, [pc, #212]	; (40c544 <main+0x1bc>)
  40c470:	4798      	blx	r3
	adc_conf.resolution = ADC_10_BITS;
  40c472:	9504      	str	r5, [sp, #16]
	adc_init(ADC, &adc_conf);               // initialize the ADC with default values
  40c474:	4c34      	ldr	r4, [pc, #208]	; (40c548 <main+0x1c0>)
  40c476:	a904      	add	r1, sp, #16
  40c478:	4620      	mov	r0, r4
  40c47a:	4b34      	ldr	r3, [pc, #208]	; (40c54c <main+0x1c4>)
  40c47c:	4798      	blx	r3
	reg = adc->ADC_MR;
  40c47e:	6863      	ldr	r3, [r4, #4]
		reg &= ~(ADC_MR_TRGSEL_Msk | ADC_MR_TRGEN | ADC_MR_FREERUN_ON);
  40c480:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	adc->ADC_MR = reg;
  40c484:	6063      	str	r3, [r4, #4]
	adc->ADC_CHER = (adc_ch == ADC_CHANNEL_ALL) ?
  40c486:	2301      	movs	r3, #1
  40c488:	6123      	str	r3, [r4, #16]
  40c48a:	2302      	movs	r3, #2
  40c48c:	6123      	str	r3, [r4, #16]
  40c48e:	2304      	movs	r3, #4
  40c490:	6123      	str	r3, [r4, #16]
  40c492:	2308      	movs	r3, #8
  40c494:	6123      	str	r3, [r4, #16]
  40c496:	2320      	movs	r3, #32
  40c498:	6123      	str	r3, [r4, #16]
  40c49a:	2340      	movs	r3, #64	; 0x40
  40c49c:	6123      	str	r3, [r4, #16]
  40c49e:	2380      	movs	r3, #128	; 0x80
  40c4a0:	6123      	str	r3, [r4, #16]
  40c4a2:	f44f 7380 	mov.w	r3, #256	; 0x100
  40c4a6:	6123      	str	r3, [r4, #16]
	ADC121C027_IC7_Initialize ( );
  40c4a8:	4b29      	ldr	r3, [pc, #164]	; (40c550 <main+0x1c8>)
  40c4aa:	4798      	blx	r3
	delay_ms ( 100 );
  40c4ac:	4638      	mov	r0, r7
  40c4ae:	47b0      	blx	r6
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  40c4b0:	4b28      	ldr	r3, [pc, #160]	; (40c554 <main+0x1cc>)
  40c4b2:	4a29      	ldr	r2, [pc, #164]	; (40c558 <main+0x1d0>)
  40c4b4:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40c4b6:	21f0      	movs	r1, #240	; 0xf0
  40c4b8:	4a28      	ldr	r2, [pc, #160]	; (40c55c <main+0x1d4>)
  40c4ba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  40c4be:	609d      	str	r5, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40c4c0:	2207      	movs	r2, #7
  40c4c2:	601a      	str	r2, [r3, #0]
	Setup ( );
  40c4c4:	4b26      	ldr	r3, [pc, #152]	; (40c560 <main+0x1d8>)
  40c4c6:	4798      	blx	r3
	wdt_restart(WATCH_DOG);
  40c4c8:	4826      	ldr	r0, [pc, #152]	; (40c564 <main+0x1dc>)
  40c4ca:	4b27      	ldr	r3, [pc, #156]	; (40c568 <main+0x1e0>)
  40c4cc:	4798      	blx	r3
		read_analogInput();
  40c4ce:	4e27      	ldr	r6, [pc, #156]	; (40c56c <main+0x1e4>)
		process_scheduler();
  40c4d0:	4d27      	ldr	r5, [pc, #156]	; (40c570 <main+0x1e8>)
		processes_messages();
  40c4d2:	4c28      	ldr	r4, [pc, #160]	; (40c574 <main+0x1ec>)
		read_analogInput();
  40c4d4:	47b0      	blx	r6
		process_scheduler();
  40c4d6:	47a8      	blx	r5
		processes_messages();
  40c4d8:	47a0      	blx	r4
  40c4da:	e7fb      	b.n	40c4d4 <main+0x14c>
  40c4dc:	20000eac 	.word	0x20000eac
  40c4e0:	20000ebc 	.word	0x20000ebc
  40c4e4:	00061a80 	.word	0x00061a80
  40c4e8:	20000e9c 	.word	0x20000e9c
  40c4ec:	004090bd 	.word	0x004090bd
  40c4f0:	004090e1 	.word	0x004090e1
  40c4f4:	00408ff5 	.word	0x00408ff5
  40c4f8:	00409281 	.word	0x00409281
  40c4fc:	05f5e100 	.word	0x05f5e100
  40c500:	00409185 	.word	0x00409185
  40c504:	400e0600 	.word	0x400e0600
  40c508:	00409255 	.word	0x00409255
  40c50c:	200016b4 	.word	0x200016b4
  40c510:	20001394 	.word	0x20001394
  40c514:	200015b4 	.word	0x200015b4
  40c518:	00403779 	.word	0x00403779
  40c51c:	00405e51 	.word	0x00405e51
  40c520:	200016b8 	.word	0x200016b8
  40c524:	2000139c 	.word	0x2000139c
  40c528:	2000174c 	.word	0x2000174c
  40c52c:	00406275 	.word	0x00406275
  40c530:	40018000 	.word	0x40018000
  40c534:	00403841 	.word	0x00403841
  40c538:	000ae62e 	.word	0x000ae62e
  40c53c:	20000001 	.word	0x20000001
  40c540:	00403709 	.word	0x00403709
  40c544:	004035ed 	.word	0x004035ed
  40c548:	40038000 	.word	0x40038000
  40c54c:	00403641 	.word	0x00403641
  40c550:	0040c34d 	.word	0x0040c34d
  40c554:	e000e010 	.word	0xe000e010
  40c558:	0001869f 	.word	0x0001869f
  40c55c:	e000ed00 	.word	0xe000ed00
  40c560:	0040c209 	.word	0x0040c209
  40c564:	400e1450 	.word	0x400e1450
  40c568:	00403a89 	.word	0x00403a89
  40c56c:	004019c5 	.word	0x004019c5
  40c570:	00405d89 	.word	0x00405d89
  40c574:	00402b31 	.word	0x00402b31
  40c578:	004091f9 	.word	0x004091f9
  40c57c:	00403761 	.word	0x00403761
  40c580:	40044000 	.word	0x40044000

0040c584 <ADC121C027_IC7_Read>:

uint32_t ADC121C027_IC7_Read ( void )
{
  40c584:	b500      	push	{lr}
  40c586:	b087      	sub	sp, #28
	uint32_t	Read_Value;
	Byte data_received[2];
	
	twi_package_t packet_read;
	
	packet_read.addr[0]      = 0;      // TWI slave memory address data
  40c588:	2300      	movs	r3, #0
  40c58a:	f88d 3000 	strb.w	r3, [sp]
	packet_read.addr_length  = sizeof (uint8_t);    // TWI slave memory address data size
  40c58e:	2301      	movs	r3, #1
  40c590:	9301      	str	r3, [sp, #4]
	packet_read.chip         = DEVICE_ADC121C027_IC7;      // TWI slave bus address
  40c592:	2351      	movs	r3, #81	; 0x51
  40c594:	f88d 3010 	strb.w	r3, [sp, #16]
	packet_read.buffer       = &data_received; // transfer data source buffer
  40c598:	ab05      	add	r3, sp, #20
  40c59a:	9302      	str	r3, [sp, #8]
	packet_read.length       = sizeof(data_received);  // transfer data size (bytes)
  40c59c:	2302      	movs	r3, #2
  40c59e:	9303      	str	r3, [sp, #12]
	
	twi_master_read(MAIN_I2C, &packet_read);
  40c5a0:	4669      	mov	r1, sp
  40c5a2:	480a      	ldr	r0, [pc, #40]	; (40c5cc <ADC121C027_IC7_Read+0x48>)
  40c5a4:	4b0a      	ldr	r3, [pc, #40]	; (40c5d0 <ADC121C027_IC7_Read+0x4c>)
  40c5a6:	4798      	blx	r3
	Read_Value = 0;
	Read_Value = (uint16_t)(data_received[0] << 8) | data_received[1];
  40c5a8:	f89d 0014 	ldrb.w	r0, [sp, #20]
  40c5ac:	f89d 3015 	ldrb.w	r3, [sp, #21]
  40c5b0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	
	Read_Value = ( Read_Value * 1023) / 4095;
  40c5b4:	ebc3 2383 	rsb	r3, r3, r3, lsl #10
  40c5b8:	4806      	ldr	r0, [pc, #24]	; (40c5d4 <ADC121C027_IC7_Read+0x50>)
  40c5ba:	fba0 2003 	umull	r2, r0, r0, r3
  40c5be:	1a1b      	subs	r3, r3, r0
  40c5c0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
	
	return Read_Value;
}
  40c5c4:	0ac0      	lsrs	r0, r0, #11
  40c5c6:	b007      	add	sp, #28
  40c5c8:	f85d fb04 	ldr.w	pc, [sp], #4
  40c5cc:	40018000 	.word	0x40018000
  40c5d0:	004038a5 	.word	0x004038a5
  40c5d4:	00100101 	.word	0x00100101

0040c5d8 <analogRead>:
{
  40c5d8:	b508      	push	{r3, lr}
	switch ( Channel_Num )
  40c5da:	280a      	cmp	r0, #10
  40c5dc:	d876      	bhi.n	40c6cc <analogRead+0xf4>
  40c5de:	e8df f000 	tbb	[pc, r0]
  40c5e2:	1506      	.short	0x1506
  40c5e4:	753c2f22 	.word	0x753c2f22
  40c5e8:	75685b41 	.word	0x75685b41
  40c5ec:	4e          	.byte	0x4e
  40c5ed:	00          	.byte	0x00
	adc->ADC_CR = ADC_CR_START;
  40c5ee:	2202      	movs	r2, #2
  40c5f0:	4b38      	ldr	r3, [pc, #224]	; (40c6d4 <analogRead+0xfc>)
  40c5f2:	601a      	str	r2, [r3, #0]
	return adc->ADC_ISR;
  40c5f4:	461a      	mov	r2, r3
  40c5f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
			while (!(adc_get_interrupt_status(ADC) & 1));
  40c5f8:	f013 0f01 	tst.w	r3, #1
  40c5fc:	d0fb      	beq.n	40c5f6 <analogRead+0x1e>
	return adc->ADC_CDR[adc_ch];
  40c5fe:	4b35      	ldr	r3, [pc, #212]	; (40c6d4 <analogRead+0xfc>)
  40c600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
			adc_val = adc_channel_get_value(ADC, ADC_CHANNEL_0);
  40c602:	4b35      	ldr	r3, [pc, #212]	; (40c6d8 <analogRead+0x100>)
  40c604:	601a      	str	r2, [r3, #0]
}
  40c606:	4b34      	ldr	r3, [pc, #208]	; (40c6d8 <analogRead+0x100>)
  40c608:	6818      	ldr	r0, [r3, #0]
  40c60a:	bd08      	pop	{r3, pc}
	adc->ADC_CR = ADC_CR_START;
  40c60c:	2202      	movs	r2, #2
  40c60e:	4b31      	ldr	r3, [pc, #196]	; (40c6d4 <analogRead+0xfc>)
  40c610:	601a      	str	r2, [r3, #0]
	return adc->ADC_ISR;
  40c612:	461a      	mov	r2, r3
  40c614:	6b13      	ldr	r3, [r2, #48]	; 0x30
			while (!(adc_get_interrupt_status(ADC) & 2));
  40c616:	f013 0f02 	tst.w	r3, #2
  40c61a:	d0fb      	beq.n	40c614 <analogRead+0x3c>
	return adc->ADC_CDR[adc_ch];
  40c61c:	4b2d      	ldr	r3, [pc, #180]	; (40c6d4 <analogRead+0xfc>)
  40c61e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
			adc_val = adc_channel_get_value(ADC, ADC_CHANNEL_1);
  40c620:	4b2d      	ldr	r3, [pc, #180]	; (40c6d8 <analogRead+0x100>)
  40c622:	601a      	str	r2, [r3, #0]
		break;
  40c624:	e7ef      	b.n	40c606 <analogRead+0x2e>
	adc->ADC_CR = ADC_CR_START;
  40c626:	2202      	movs	r2, #2
  40c628:	4b2a      	ldr	r3, [pc, #168]	; (40c6d4 <analogRead+0xfc>)
  40c62a:	601a      	str	r2, [r3, #0]
	return adc->ADC_ISR;
  40c62c:	461a      	mov	r2, r3
  40c62e:	6b13      	ldr	r3, [r2, #48]	; 0x30
			while (!(adc_get_interrupt_status(ADC) & 4));
  40c630:	f013 0f04 	tst.w	r3, #4
  40c634:	d0fb      	beq.n	40c62e <analogRead+0x56>
	return adc->ADC_CDR[adc_ch];
  40c636:	4b27      	ldr	r3, [pc, #156]	; (40c6d4 <analogRead+0xfc>)
  40c638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
			adc_val = adc_channel_get_value(ADC, ADC_CHANNEL_2);
  40c63a:	4b27      	ldr	r3, [pc, #156]	; (40c6d8 <analogRead+0x100>)
  40c63c:	601a      	str	r2, [r3, #0]
		break;
  40c63e:	e7e2      	b.n	40c606 <analogRead+0x2e>
	adc->ADC_CR = ADC_CR_START;
  40c640:	2202      	movs	r2, #2
  40c642:	4b24      	ldr	r3, [pc, #144]	; (40c6d4 <analogRead+0xfc>)
  40c644:	601a      	str	r2, [r3, #0]
	return adc->ADC_ISR;
  40c646:	461a      	mov	r2, r3
  40c648:	6b13      	ldr	r3, [r2, #48]	; 0x30
			while (!(adc_get_interrupt_status(ADC) & 8));
  40c64a:	f013 0f08 	tst.w	r3, #8
  40c64e:	d0fb      	beq.n	40c648 <analogRead+0x70>
	return adc->ADC_CDR[adc_ch];
  40c650:	4b20      	ldr	r3, [pc, #128]	; (40c6d4 <analogRead+0xfc>)
  40c652:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			adc_val = adc_channel_get_value(ADC, ADC_CHANNEL_3);
  40c654:	4b20      	ldr	r3, [pc, #128]	; (40c6d8 <analogRead+0x100>)
  40c656:	601a      	str	r2, [r3, #0]
		break;
  40c658:	e7d5      	b.n	40c606 <analogRead+0x2e>
			adc_val = ADC121C027_IC7_Read ( );
  40c65a:	4b20      	ldr	r3, [pc, #128]	; (40c6dc <analogRead+0x104>)
  40c65c:	4798      	blx	r3
  40c65e:	4b1e      	ldr	r3, [pc, #120]	; (40c6d8 <analogRead+0x100>)
  40c660:	6018      	str	r0, [r3, #0]
		break;
  40c662:	e7d0      	b.n	40c606 <analogRead+0x2e>
	adc->ADC_CR = ADC_CR_START;
  40c664:	2202      	movs	r2, #2
  40c666:	4b1b      	ldr	r3, [pc, #108]	; (40c6d4 <analogRead+0xfc>)
  40c668:	601a      	str	r2, [r3, #0]
	return adc->ADC_ISR;
  40c66a:	461a      	mov	r2, r3
  40c66c:	6b13      	ldr	r3, [r2, #48]	; 0x30
			while (!(adc_get_interrupt_status(ADC) & 0x40));
  40c66e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40c672:	d0fb      	beq.n	40c66c <analogRead+0x94>
	return adc->ADC_CDR[adc_ch];
  40c674:	4b17      	ldr	r3, [pc, #92]	; (40c6d4 <analogRead+0xfc>)
  40c676:	6e9a      	ldr	r2, [r3, #104]	; 0x68
			adc_val = adc_channel_get_value(ADC, ADC_CHANNEL_6);
  40c678:	4b17      	ldr	r3, [pc, #92]	; (40c6d8 <analogRead+0x100>)
  40c67a:	601a      	str	r2, [r3, #0]
		break;
  40c67c:	e7c3      	b.n	40c606 <analogRead+0x2e>
	adc->ADC_CR = ADC_CR_START;
  40c67e:	2202      	movs	r2, #2
  40c680:	4b14      	ldr	r3, [pc, #80]	; (40c6d4 <analogRead+0xfc>)
  40c682:	601a      	str	r2, [r3, #0]
	return adc->ADC_ISR;
  40c684:	461a      	mov	r2, r3
  40c686:	6b13      	ldr	r3, [r2, #48]	; 0x30
			while (!(adc_get_interrupt_status(ADC) & 0x20));
  40c688:	f013 0f20 	tst.w	r3, #32
  40c68c:	d0fb      	beq.n	40c686 <analogRead+0xae>
	return adc->ADC_CDR[adc_ch];
  40c68e:	4b11      	ldr	r3, [pc, #68]	; (40c6d4 <analogRead+0xfc>)
  40c690:	6e5a      	ldr	r2, [r3, #100]	; 0x64
			adc_val = adc_channel_get_value(ADC, ADC_CHANNEL_5);
  40c692:	4b11      	ldr	r3, [pc, #68]	; (40c6d8 <analogRead+0x100>)
  40c694:	601a      	str	r2, [r3, #0]
		break;
  40c696:	e7b6      	b.n	40c606 <analogRead+0x2e>
	adc->ADC_CR = ADC_CR_START;
  40c698:	2202      	movs	r2, #2
  40c69a:	4b0e      	ldr	r3, [pc, #56]	; (40c6d4 <analogRead+0xfc>)
  40c69c:	601a      	str	r2, [r3, #0]
	return adc->ADC_ISR;
  40c69e:	461a      	mov	r2, r3
  40c6a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
			while (!(adc_get_interrupt_status(ADC) & 0x80));
  40c6a2:	f013 0f80 	tst.w	r3, #128	; 0x80
  40c6a6:	d0fb      	beq.n	40c6a0 <analogRead+0xc8>
	return adc->ADC_CDR[adc_ch];
  40c6a8:	4b0a      	ldr	r3, [pc, #40]	; (40c6d4 <analogRead+0xfc>)
  40c6aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
			adc_val = adc_channel_get_value(ADC, ADC_CHANNEL_7);
  40c6ac:	4b0a      	ldr	r3, [pc, #40]	; (40c6d8 <analogRead+0x100>)
  40c6ae:	601a      	str	r2, [r3, #0]
		break;
  40c6b0:	e7a9      	b.n	40c606 <analogRead+0x2e>
	adc->ADC_CR = ADC_CR_START;
  40c6b2:	2202      	movs	r2, #2
  40c6b4:	4b07      	ldr	r3, [pc, #28]	; (40c6d4 <analogRead+0xfc>)
  40c6b6:	601a      	str	r2, [r3, #0]
	return adc->ADC_ISR;
  40c6b8:	461a      	mov	r2, r3
  40c6ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
			while (!(adc_get_interrupt_status(ADC) & 0x100));
  40c6bc:	f413 7f80 	tst.w	r3, #256	; 0x100
  40c6c0:	d0fb      	beq.n	40c6ba <analogRead+0xe2>
	return adc->ADC_CDR[adc_ch];
  40c6c2:	4b04      	ldr	r3, [pc, #16]	; (40c6d4 <analogRead+0xfc>)
  40c6c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
			adc_val = adc_channel_get_value(ADC, ADC_CHANNEL_8);
  40c6c6:	4b04      	ldr	r3, [pc, #16]	; (40c6d8 <analogRead+0x100>)
  40c6c8:	601a      	str	r2, [r3, #0]
		break;
  40c6ca:	e79c      	b.n	40c606 <analogRead+0x2e>
			adc_val = 0;
  40c6cc:	2200      	movs	r2, #0
  40c6ce:	4b02      	ldr	r3, [pc, #8]	; (40c6d8 <analogRead+0x100>)
  40c6d0:	601a      	str	r2, [r3, #0]
		break;
  40c6d2:	e798      	b.n	40c606 <analogRead+0x2e>
  40c6d4:	40038000 	.word	0x40038000
  40c6d8:	20000e64 	.word	0x20000e64
  40c6dc:	0040c585 	.word	0x0040c585

0040c6e0 <WDT_Handler>:

void WDT_Handler ( void )
{
  40c6e0:	4770      	bx	lr
	...

0040c6e4 <log>:
  40c6e4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c6e8:	b08a      	sub	sp, #40	; 0x28
  40c6ea:	4604      	mov	r4, r0
  40c6ec:	460d      	mov	r5, r1
  40c6ee:	f000 f877 	bl	40c7e0 <__ieee754_log>
  40c6f2:	4b35      	ldr	r3, [pc, #212]	; (40c7c8 <log+0xe4>)
  40c6f4:	f993 6000 	ldrsb.w	r6, [r3]
  40c6f8:	1c73      	adds	r3, r6, #1
  40c6fa:	4680      	mov	r8, r0
  40c6fc:	4689      	mov	r9, r1
  40c6fe:	d00d      	beq.n	40c71c <log+0x38>
  40c700:	4622      	mov	r2, r4
  40c702:	462b      	mov	r3, r5
  40c704:	4620      	mov	r0, r4
  40c706:	4629      	mov	r1, r5
  40c708:	f000 feb8 	bl	40d47c <__aeabi_dcmpun>
  40c70c:	b930      	cbnz	r0, 40c71c <log+0x38>
  40c70e:	2200      	movs	r2, #0
  40c710:	2300      	movs	r3, #0
  40c712:	4620      	mov	r0, r4
  40c714:	4629      	mov	r1, r5
  40c716:	f000 fea7 	bl	40d468 <__aeabi_dcmpgt>
  40c71a:	b120      	cbz	r0, 40c726 <log+0x42>
  40c71c:	4640      	mov	r0, r8
  40c71e:	4649      	mov	r1, r9
  40c720:	b00a      	add	sp, #40	; 0x28
  40c722:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  40c726:	4b29      	ldr	r3, [pc, #164]	; (40c7cc <log+0xe8>)
  40c728:	9008      	str	r0, [sp, #32]
  40c72a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40c72e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40c732:	9301      	str	r3, [sp, #4]
  40c734:	4620      	mov	r0, r4
  40c736:	4629      	mov	r1, r5
  40c738:	b9ce      	cbnz	r6, 40c76e <log+0x8a>
  40c73a:	4d25      	ldr	r5, [pc, #148]	; (40c7d0 <log+0xec>)
  40c73c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
  40c740:	2200      	movs	r2, #0
  40c742:	2300      	movs	r3, #0
  40c744:	e9cd 4506 	strd	r4, r5, [sp, #24]
  40c748:	f000 fe66 	bl	40d418 <__aeabi_dcmpeq>
  40c74c:	2800      	cmp	r0, #0
  40c74e:	d033      	beq.n	40c7b8 <log+0xd4>
  40c750:	2302      	movs	r3, #2
  40c752:	9300      	str	r3, [sp, #0]
  40c754:	4668      	mov	r0, sp
  40c756:	f000 fa37 	bl	40cbc8 <matherr>
  40c75a:	b1a8      	cbz	r0, 40c788 <log+0xa4>
  40c75c:	9b08      	ldr	r3, [sp, #32]
  40c75e:	b9c3      	cbnz	r3, 40c792 <log+0xae>
  40c760:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  40c764:	4640      	mov	r0, r8
  40c766:	4649      	mov	r1, r9
  40c768:	b00a      	add	sp, #40	; 0x28
  40c76a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  40c76e:	4d19      	ldr	r5, [pc, #100]	; (40c7d4 <log+0xf0>)
  40c770:	2400      	movs	r4, #0
  40c772:	2200      	movs	r2, #0
  40c774:	2300      	movs	r3, #0
  40c776:	e9cd 4506 	strd	r4, r5, [sp, #24]
  40c77a:	f000 fe4d 	bl	40d418 <__aeabi_dcmpeq>
  40c77e:	b168      	cbz	r0, 40c79c <log+0xb8>
  40c780:	2302      	movs	r3, #2
  40c782:	429e      	cmp	r6, r3
  40c784:	9300      	str	r3, [sp, #0]
  40c786:	d1e5      	bne.n	40c754 <log+0x70>
  40c788:	f001 fa40 	bl	40dc0c <__errno>
  40c78c:	2322      	movs	r3, #34	; 0x22
  40c78e:	6003      	str	r3, [r0, #0]
  40c790:	e7e4      	b.n	40c75c <log+0x78>
  40c792:	f001 fa3b 	bl	40dc0c <__errno>
  40c796:	9b08      	ldr	r3, [sp, #32]
  40c798:	6003      	str	r3, [r0, #0]
  40c79a:	e7e1      	b.n	40c760 <log+0x7c>
  40c79c:	2301      	movs	r3, #1
  40c79e:	2e02      	cmp	r6, #2
  40c7a0:	9300      	str	r3, [sp, #0]
  40c7a2:	d10b      	bne.n	40c7bc <log+0xd8>
  40c7a4:	f001 fa32 	bl	40dc0c <__errno>
  40c7a8:	2321      	movs	r3, #33	; 0x21
  40c7aa:	6003      	str	r3, [r0, #0]
  40c7ac:	480a      	ldr	r0, [pc, #40]	; (40c7d8 <log+0xf4>)
  40c7ae:	f000 fa0d 	bl	40cbcc <nan>
  40c7b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40c7b6:	e7d1      	b.n	40c75c <log+0x78>
  40c7b8:	2301      	movs	r3, #1
  40c7ba:	9300      	str	r3, [sp, #0]
  40c7bc:	4668      	mov	r0, sp
  40c7be:	f000 fa03 	bl	40cbc8 <matherr>
  40c7c2:	2800      	cmp	r0, #0
  40c7c4:	d1f2      	bne.n	40c7ac <log+0xc8>
  40c7c6:	e7ed      	b.n	40c7a4 <log+0xc0>
  40c7c8:	20000048 	.word	0x20000048
  40c7cc:	004138c4 	.word	0x004138c4
  40c7d0:	c7efffff 	.word	0xc7efffff
  40c7d4:	fff00000 	.word	0xfff00000
  40c7d8:	004127f0 	.word	0x004127f0
  40c7dc:	00000000 	.word	0x00000000

0040c7e0 <__ieee754_log>:
  40c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c7e4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40c7e8:	b085      	sub	sp, #20
  40c7ea:	4606      	mov	r6, r0
  40c7ec:	460f      	mov	r7, r1
  40c7ee:	460b      	mov	r3, r1
  40c7f0:	da5a      	bge.n	40c8a8 <__ieee754_log+0xc8>
  40c7f2:	4602      	mov	r2, r0
  40c7f4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  40c7f8:	4322      	orrs	r2, r4
  40c7fa:	f000 80f8 	beq.w	40c9ee <__ieee754_log+0x20e>
  40c7fe:	2900      	cmp	r1, #0
  40c800:	f2c0 817a 	blt.w	40caf8 <__ieee754_log+0x318>
  40c804:	2200      	movs	r2, #0
  40c806:	4bd6      	ldr	r3, [pc, #856]	; (40cb60 <__ieee754_log+0x380>)
  40c808:	f000 fb9e 	bl	40cf48 <__aeabi_dmul>
  40c80c:	4ad5      	ldr	r2, [pc, #852]	; (40cb64 <__ieee754_log+0x384>)
  40c80e:	460b      	mov	r3, r1
  40c810:	4293      	cmp	r3, r2
  40c812:	4606      	mov	r6, r0
  40c814:	460f      	mov	r7, r1
  40c816:	f06f 0c35 	mvn.w	ip, #53	; 0x35
  40c81a:	dc4a      	bgt.n	40c8b2 <__ieee754_log+0xd2>
  40c81c:	f3c3 0513 	ubfx	r5, r3, #0, #20
  40c820:	f505 2e15 	add.w	lr, r5, #610304	; 0x95000
  40c824:	f60e 7e64 	addw	lr, lr, #3940	; 0xf64
  40c828:	f40e 1e80 	and.w	lr, lr, #1048576	; 0x100000
  40c82c:	f08e 527f 	eor.w	r2, lr, #1069547520	; 0x3fc00000
  40c830:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
  40c834:	151c      	asrs	r4, r3, #20
  40c836:	ea42 0705 	orr.w	r7, r2, r5
  40c83a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40c83e:	4464      	add	r4, ip
  40c840:	2200      	movs	r2, #0
  40c842:	4bc9      	ldr	r3, [pc, #804]	; (40cb68 <__ieee754_log+0x388>)
  40c844:	4630      	mov	r0, r6
  40c846:	4639      	mov	r1, r7
  40c848:	eb04 541e 	add.w	r4, r4, lr, lsr #20
  40c84c:	f000 f9c8 	bl	40cbe0 <__aeabi_dsub>
  40c850:	1cab      	adds	r3, r5, #2
  40c852:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40c856:	2b02      	cmp	r3, #2
  40c858:	4682      	mov	sl, r0
  40c85a:	468b      	mov	fp, r1
  40c85c:	f04f 0200 	mov.w	r2, #0
  40c860:	dc30      	bgt.n	40c8c4 <__ieee754_log+0xe4>
  40c862:	2300      	movs	r3, #0
  40c864:	f000 fdd8 	bl	40d418 <__aeabi_dcmpeq>
  40c868:	2800      	cmp	r0, #0
  40c86a:	f000 80c9 	beq.w	40ca00 <__ieee754_log+0x220>
  40c86e:	2c00      	cmp	r4, #0
  40c870:	f000 814b 	beq.w	40cb0a <__ieee754_log+0x32a>
  40c874:	4620      	mov	r0, r4
  40c876:	f000 fb01 	bl	40ce7c <__aeabi_i2d>
  40c87a:	a3a5      	add	r3, pc, #660	; (adr r3, 40cb10 <__ieee754_log+0x330>)
  40c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c880:	4606      	mov	r6, r0
  40c882:	460f      	mov	r7, r1
  40c884:	f000 fb60 	bl	40cf48 <__aeabi_dmul>
  40c888:	a3a3      	add	r3, pc, #652	; (adr r3, 40cb18 <__ieee754_log+0x338>)
  40c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c88e:	4604      	mov	r4, r0
  40c890:	460d      	mov	r5, r1
  40c892:	4630      	mov	r0, r6
  40c894:	4639      	mov	r1, r7
  40c896:	f000 fb57 	bl	40cf48 <__aeabi_dmul>
  40c89a:	4602      	mov	r2, r0
  40c89c:	460b      	mov	r3, r1
  40c89e:	4620      	mov	r0, r4
  40c8a0:	4629      	mov	r1, r5
  40c8a2:	f000 f99f 	bl	40cbe4 <__adddf3>
  40c8a6:	e00a      	b.n	40c8be <__ieee754_log+0xde>
  40c8a8:	4aae      	ldr	r2, [pc, #696]	; (40cb64 <__ieee754_log+0x384>)
  40c8aa:	4293      	cmp	r3, r2
  40c8ac:	f04f 0c00 	mov.w	ip, #0
  40c8b0:	ddb4      	ble.n	40c81c <__ieee754_log+0x3c>
  40c8b2:	4632      	mov	r2, r6
  40c8b4:	463b      	mov	r3, r7
  40c8b6:	4630      	mov	r0, r6
  40c8b8:	4639      	mov	r1, r7
  40c8ba:	f000 f993 	bl	40cbe4 <__adddf3>
  40c8be:	b005      	add	sp, #20
  40c8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c8c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40c8c8:	f000 f98c 	bl	40cbe4 <__adddf3>
  40c8cc:	4602      	mov	r2, r0
  40c8ce:	460b      	mov	r3, r1
  40c8d0:	4650      	mov	r0, sl
  40c8d2:	4659      	mov	r1, fp
  40c8d4:	f000 fc62 	bl	40d19c <__aeabi_ddiv>
  40c8d8:	4606      	mov	r6, r0
  40c8da:	4620      	mov	r0, r4
  40c8dc:	460f      	mov	r7, r1
  40c8de:	f000 facd 	bl	40ce7c <__aeabi_i2d>
  40c8e2:	4632      	mov	r2, r6
  40c8e4:	e9cd 0100 	strd	r0, r1, [sp]
  40c8e8:	463b      	mov	r3, r7
  40c8ea:	4630      	mov	r0, r6
  40c8ec:	4639      	mov	r1, r7
  40c8ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40c8f2:	f000 fb29 	bl	40cf48 <__aeabi_dmul>
  40c8f6:	4602      	mov	r2, r0
  40c8f8:	460b      	mov	r3, r1
  40c8fa:	4680      	mov	r8, r0
  40c8fc:	4689      	mov	r9, r1
  40c8fe:	f000 fb23 	bl	40cf48 <__aeabi_dmul>
  40c902:	a387      	add	r3, pc, #540	; (adr r3, 40cb20 <__ieee754_log+0x340>)
  40c904:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c908:	4606      	mov	r6, r0
  40c90a:	460f      	mov	r7, r1
  40c90c:	f000 fb1c 	bl	40cf48 <__aeabi_dmul>
  40c910:	a385      	add	r3, pc, #532	; (adr r3, 40cb28 <__ieee754_log+0x348>)
  40c912:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c916:	f000 f965 	bl	40cbe4 <__adddf3>
  40c91a:	4632      	mov	r2, r6
  40c91c:	463b      	mov	r3, r7
  40c91e:	f000 fb13 	bl	40cf48 <__aeabi_dmul>
  40c922:	a383      	add	r3, pc, #524	; (adr r3, 40cb30 <__ieee754_log+0x350>)
  40c924:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c928:	f000 f95c 	bl	40cbe4 <__adddf3>
  40c92c:	4632      	mov	r2, r6
  40c92e:	463b      	mov	r3, r7
  40c930:	f000 fb0a 	bl	40cf48 <__aeabi_dmul>
  40c934:	a380      	add	r3, pc, #512	; (adr r3, 40cb38 <__ieee754_log+0x358>)
  40c936:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c93a:	f000 f953 	bl	40cbe4 <__adddf3>
  40c93e:	4642      	mov	r2, r8
  40c940:	464b      	mov	r3, r9
  40c942:	f000 fb01 	bl	40cf48 <__aeabi_dmul>
  40c946:	a37e      	add	r3, pc, #504	; (adr r3, 40cb40 <__ieee754_log+0x360>)
  40c948:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c94c:	4680      	mov	r8, r0
  40c94e:	4689      	mov	r9, r1
  40c950:	4630      	mov	r0, r6
  40c952:	4639      	mov	r1, r7
  40c954:	f000 faf8 	bl	40cf48 <__aeabi_dmul>
  40c958:	a37b      	add	r3, pc, #492	; (adr r3, 40cb48 <__ieee754_log+0x368>)
  40c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c95e:	f000 f941 	bl	40cbe4 <__adddf3>
  40c962:	4632      	mov	r2, r6
  40c964:	463b      	mov	r3, r7
  40c966:	f000 faef 	bl	40cf48 <__aeabi_dmul>
  40c96a:	a379      	add	r3, pc, #484	; (adr r3, 40cb50 <__ieee754_log+0x370>)
  40c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c970:	f000 f938 	bl	40cbe4 <__adddf3>
  40c974:	4632      	mov	r2, r6
  40c976:	463b      	mov	r3, r7
  40c978:	f000 fae6 	bl	40cf48 <__aeabi_dmul>
  40c97c:	460b      	mov	r3, r1
  40c97e:	4602      	mov	r2, r0
  40c980:	4649      	mov	r1, r9
  40c982:	4640      	mov	r0, r8
  40c984:	f000 f92e 	bl	40cbe4 <__adddf3>
  40c988:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
  40c98c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
  40c990:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
  40c994:	3551      	adds	r5, #81	; 0x51
  40c996:	431d      	orrs	r5, r3
  40c998:	2d00      	cmp	r5, #0
  40c99a:	4680      	mov	r8, r0
  40c99c:	4689      	mov	r9, r1
  40c99e:	dd56      	ble.n	40ca4e <__ieee754_log+0x26e>
  40c9a0:	2200      	movs	r2, #0
  40c9a2:	4b72      	ldr	r3, [pc, #456]	; (40cb6c <__ieee754_log+0x38c>)
  40c9a4:	4650      	mov	r0, sl
  40c9a6:	4659      	mov	r1, fp
  40c9a8:	f000 face 	bl	40cf48 <__aeabi_dmul>
  40c9ac:	4652      	mov	r2, sl
  40c9ae:	465b      	mov	r3, fp
  40c9b0:	f000 faca 	bl	40cf48 <__aeabi_dmul>
  40c9b4:	4606      	mov	r6, r0
  40c9b6:	460f      	mov	r7, r1
  40c9b8:	2c00      	cmp	r4, #0
  40c9ba:	d168      	bne.n	40ca8e <__ieee754_log+0x2ae>
  40c9bc:	4632      	mov	r2, r6
  40c9be:	463b      	mov	r3, r7
  40c9c0:	4640      	mov	r0, r8
  40c9c2:	4649      	mov	r1, r9
  40c9c4:	f000 f90e 	bl	40cbe4 <__adddf3>
  40c9c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c9cc:	f000 fabc 	bl	40cf48 <__aeabi_dmul>
  40c9d0:	4602      	mov	r2, r0
  40c9d2:	460b      	mov	r3, r1
  40c9d4:	4630      	mov	r0, r6
  40c9d6:	4639      	mov	r1, r7
  40c9d8:	f000 f902 	bl	40cbe0 <__aeabi_dsub>
  40c9dc:	4602      	mov	r2, r0
  40c9de:	460b      	mov	r3, r1
  40c9e0:	4650      	mov	r0, sl
  40c9e2:	4659      	mov	r1, fp
  40c9e4:	f000 f8fc 	bl	40cbe0 <__aeabi_dsub>
  40c9e8:	b005      	add	sp, #20
  40c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9ee:	2200      	movs	r2, #0
  40c9f0:	2300      	movs	r3, #0
  40c9f2:	2000      	movs	r0, #0
  40c9f4:	495e      	ldr	r1, [pc, #376]	; (40cb70 <__ieee754_log+0x390>)
  40c9f6:	f000 fbd1 	bl	40d19c <__aeabi_ddiv>
  40c9fa:	b005      	add	sp, #20
  40c9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ca00:	a355      	add	r3, pc, #340	; (adr r3, 40cb58 <__ieee754_log+0x378>)
  40ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca06:	4650      	mov	r0, sl
  40ca08:	4659      	mov	r1, fp
  40ca0a:	f000 fa9d 	bl	40cf48 <__aeabi_dmul>
  40ca0e:	4602      	mov	r2, r0
  40ca10:	460b      	mov	r3, r1
  40ca12:	2000      	movs	r0, #0
  40ca14:	4955      	ldr	r1, [pc, #340]	; (40cb6c <__ieee754_log+0x38c>)
  40ca16:	f000 f8e3 	bl	40cbe0 <__aeabi_dsub>
  40ca1a:	4652      	mov	r2, sl
  40ca1c:	4606      	mov	r6, r0
  40ca1e:	460f      	mov	r7, r1
  40ca20:	465b      	mov	r3, fp
  40ca22:	4650      	mov	r0, sl
  40ca24:	4659      	mov	r1, fp
  40ca26:	f000 fa8f 	bl	40cf48 <__aeabi_dmul>
  40ca2a:	4602      	mov	r2, r0
  40ca2c:	460b      	mov	r3, r1
  40ca2e:	4630      	mov	r0, r6
  40ca30:	4639      	mov	r1, r7
  40ca32:	f000 fa89 	bl	40cf48 <__aeabi_dmul>
  40ca36:	4606      	mov	r6, r0
  40ca38:	460f      	mov	r7, r1
  40ca3a:	2c00      	cmp	r4, #0
  40ca3c:	f040 809a 	bne.w	40cb74 <__ieee754_log+0x394>
  40ca40:	4602      	mov	r2, r0
  40ca42:	460b      	mov	r3, r1
  40ca44:	4650      	mov	r0, sl
  40ca46:	4659      	mov	r1, fp
  40ca48:	f000 f8ca 	bl	40cbe0 <__aeabi_dsub>
  40ca4c:	e737      	b.n	40c8be <__ieee754_log+0xde>
  40ca4e:	2c00      	cmp	r4, #0
  40ca50:	f000 80a4 	beq.w	40cb9c <__ieee754_log+0x3bc>
  40ca54:	a32e      	add	r3, pc, #184	; (adr r3, 40cb10 <__ieee754_log+0x330>)
  40ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca5a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40ca5e:	f000 fa73 	bl	40cf48 <__aeabi_dmul>
  40ca62:	4642      	mov	r2, r8
  40ca64:	464b      	mov	r3, r9
  40ca66:	4604      	mov	r4, r0
  40ca68:	460d      	mov	r5, r1
  40ca6a:	4650      	mov	r0, sl
  40ca6c:	4659      	mov	r1, fp
  40ca6e:	f000 f8b7 	bl	40cbe0 <__aeabi_dsub>
  40ca72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40ca76:	f000 fa67 	bl	40cf48 <__aeabi_dmul>
  40ca7a:	a327      	add	r3, pc, #156	; (adr r3, 40cb18 <__ieee754_log+0x338>)
  40ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca80:	4606      	mov	r6, r0
  40ca82:	460f      	mov	r7, r1
  40ca84:	e9dd 0100 	ldrd	r0, r1, [sp]
  40ca88:	f000 fa5e 	bl	40cf48 <__aeabi_dmul>
  40ca8c:	e021      	b.n	40cad2 <__ieee754_log+0x2f2>
  40ca8e:	a320      	add	r3, pc, #128	; (adr r3, 40cb10 <__ieee754_log+0x330>)
  40ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca94:	e9dd 0100 	ldrd	r0, r1, [sp]
  40ca98:	f000 fa56 	bl	40cf48 <__aeabi_dmul>
  40ca9c:	4632      	mov	r2, r6
  40ca9e:	463b      	mov	r3, r7
  40caa0:	4604      	mov	r4, r0
  40caa2:	460d      	mov	r5, r1
  40caa4:	4640      	mov	r0, r8
  40caa6:	4649      	mov	r1, r9
  40caa8:	f000 f89c 	bl	40cbe4 <__adddf3>
  40caac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40cab0:	f000 fa4a 	bl	40cf48 <__aeabi_dmul>
  40cab4:	a318      	add	r3, pc, #96	; (adr r3, 40cb18 <__ieee754_log+0x338>)
  40cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40caba:	4680      	mov	r8, r0
  40cabc:	4689      	mov	r9, r1
  40cabe:	e9dd 0100 	ldrd	r0, r1, [sp]
  40cac2:	f000 fa41 	bl	40cf48 <__aeabi_dmul>
  40cac6:	4602      	mov	r2, r0
  40cac8:	460b      	mov	r3, r1
  40caca:	4640      	mov	r0, r8
  40cacc:	4649      	mov	r1, r9
  40cace:	f000 f889 	bl	40cbe4 <__adddf3>
  40cad2:	4602      	mov	r2, r0
  40cad4:	460b      	mov	r3, r1
  40cad6:	4630      	mov	r0, r6
  40cad8:	4639      	mov	r1, r7
  40cada:	f000 f881 	bl	40cbe0 <__aeabi_dsub>
  40cade:	4652      	mov	r2, sl
  40cae0:	465b      	mov	r3, fp
  40cae2:	f000 f87d 	bl	40cbe0 <__aeabi_dsub>
  40cae6:	4602      	mov	r2, r0
  40cae8:	460b      	mov	r3, r1
  40caea:	4620      	mov	r0, r4
  40caec:	4629      	mov	r1, r5
  40caee:	f000 f877 	bl	40cbe0 <__aeabi_dsub>
  40caf2:	b005      	add	sp, #20
  40caf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40caf8:	4602      	mov	r2, r0
  40cafa:	460b      	mov	r3, r1
  40cafc:	f000 f870 	bl	40cbe0 <__aeabi_dsub>
  40cb00:	2200      	movs	r2, #0
  40cb02:	2300      	movs	r3, #0
  40cb04:	f000 fb4a 	bl	40d19c <__aeabi_ddiv>
  40cb08:	e6d9      	b.n	40c8be <__ieee754_log+0xde>
  40cb0a:	2000      	movs	r0, #0
  40cb0c:	2100      	movs	r1, #0
  40cb0e:	e6d6      	b.n	40c8be <__ieee754_log+0xde>
  40cb10:	fee00000 	.word	0xfee00000
  40cb14:	3fe62e42 	.word	0x3fe62e42
  40cb18:	35793c76 	.word	0x35793c76
  40cb1c:	3dea39ef 	.word	0x3dea39ef
  40cb20:	df3e5244 	.word	0xdf3e5244
  40cb24:	3fc2f112 	.word	0x3fc2f112
  40cb28:	96cb03de 	.word	0x96cb03de
  40cb2c:	3fc74664 	.word	0x3fc74664
  40cb30:	94229359 	.word	0x94229359
  40cb34:	3fd24924 	.word	0x3fd24924
  40cb38:	55555593 	.word	0x55555593
  40cb3c:	3fe55555 	.word	0x3fe55555
  40cb40:	d078c69f 	.word	0xd078c69f
  40cb44:	3fc39a09 	.word	0x3fc39a09
  40cb48:	1d8e78af 	.word	0x1d8e78af
  40cb4c:	3fcc71c5 	.word	0x3fcc71c5
  40cb50:	9997fa04 	.word	0x9997fa04
  40cb54:	3fd99999 	.word	0x3fd99999
  40cb58:	55555555 	.word	0x55555555
  40cb5c:	3fd55555 	.word	0x3fd55555
  40cb60:	43500000 	.word	0x43500000
  40cb64:	7fefffff 	.word	0x7fefffff
  40cb68:	3ff00000 	.word	0x3ff00000
  40cb6c:	3fe00000 	.word	0x3fe00000
  40cb70:	c3500000 	.word	0xc3500000
  40cb74:	4620      	mov	r0, r4
  40cb76:	f000 f981 	bl	40ce7c <__aeabi_i2d>
  40cb7a:	a30f      	add	r3, pc, #60	; (adr r3, 40cbb8 <__ieee754_log+0x3d8>)
  40cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40cb80:	4680      	mov	r8, r0
  40cb82:	4689      	mov	r9, r1
  40cb84:	f000 f9e0 	bl	40cf48 <__aeabi_dmul>
  40cb88:	a30d      	add	r3, pc, #52	; (adr r3, 40cbc0 <__ieee754_log+0x3e0>)
  40cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40cb8e:	4604      	mov	r4, r0
  40cb90:	460d      	mov	r5, r1
  40cb92:	4640      	mov	r0, r8
  40cb94:	4649      	mov	r1, r9
  40cb96:	f000 f9d7 	bl	40cf48 <__aeabi_dmul>
  40cb9a:	e79a      	b.n	40cad2 <__ieee754_log+0x2f2>
  40cb9c:	4602      	mov	r2, r0
  40cb9e:	460b      	mov	r3, r1
  40cba0:	4650      	mov	r0, sl
  40cba2:	4659      	mov	r1, fp
  40cba4:	f000 f81c 	bl	40cbe0 <__aeabi_dsub>
  40cba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40cbac:	f000 f9cc 	bl	40cf48 <__aeabi_dmul>
  40cbb0:	e714      	b.n	40c9dc <__ieee754_log+0x1fc>
  40cbb2:	bf00      	nop
  40cbb4:	f3af 8000 	nop.w
  40cbb8:	fee00000 	.word	0xfee00000
  40cbbc:	3fe62e42 	.word	0x3fe62e42
  40cbc0:	35793c76 	.word	0x35793c76
  40cbc4:	3dea39ef 	.word	0x3dea39ef

0040cbc8 <matherr>:
  40cbc8:	2000      	movs	r0, #0
  40cbca:	4770      	bx	lr

0040cbcc <nan>:
  40cbcc:	2000      	movs	r0, #0
  40cbce:	4901      	ldr	r1, [pc, #4]	; (40cbd4 <nan+0x8>)
  40cbd0:	4770      	bx	lr
  40cbd2:	bf00      	nop
  40cbd4:	7ff80000 	.word	0x7ff80000

0040cbd8 <__aeabi_drsub>:
  40cbd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40cbdc:	e002      	b.n	40cbe4 <__adddf3>
  40cbde:	bf00      	nop

0040cbe0 <__aeabi_dsub>:
  40cbe0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040cbe4 <__adddf3>:
  40cbe4:	b530      	push	{r4, r5, lr}
  40cbe6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40cbea:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40cbee:	ea94 0f05 	teq	r4, r5
  40cbf2:	bf08      	it	eq
  40cbf4:	ea90 0f02 	teqeq	r0, r2
  40cbf8:	bf1f      	itttt	ne
  40cbfa:	ea54 0c00 	orrsne.w	ip, r4, r0
  40cbfe:	ea55 0c02 	orrsne.w	ip, r5, r2
  40cc02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40cc06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40cc0a:	f000 80e2 	beq.w	40cdd2 <__adddf3+0x1ee>
  40cc0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40cc12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40cc16:	bfb8      	it	lt
  40cc18:	426d      	neglt	r5, r5
  40cc1a:	dd0c      	ble.n	40cc36 <__adddf3+0x52>
  40cc1c:	442c      	add	r4, r5
  40cc1e:	ea80 0202 	eor.w	r2, r0, r2
  40cc22:	ea81 0303 	eor.w	r3, r1, r3
  40cc26:	ea82 0000 	eor.w	r0, r2, r0
  40cc2a:	ea83 0101 	eor.w	r1, r3, r1
  40cc2e:	ea80 0202 	eor.w	r2, r0, r2
  40cc32:	ea81 0303 	eor.w	r3, r1, r3
  40cc36:	2d36      	cmp	r5, #54	; 0x36
  40cc38:	bf88      	it	hi
  40cc3a:	bd30      	pophi	{r4, r5, pc}
  40cc3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40cc40:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40cc44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40cc48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40cc4c:	d002      	beq.n	40cc54 <__adddf3+0x70>
  40cc4e:	4240      	negs	r0, r0
  40cc50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cc54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40cc58:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40cc5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40cc60:	d002      	beq.n	40cc68 <__adddf3+0x84>
  40cc62:	4252      	negs	r2, r2
  40cc64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40cc68:	ea94 0f05 	teq	r4, r5
  40cc6c:	f000 80a7 	beq.w	40cdbe <__adddf3+0x1da>
  40cc70:	f1a4 0401 	sub.w	r4, r4, #1
  40cc74:	f1d5 0e20 	rsbs	lr, r5, #32
  40cc78:	db0d      	blt.n	40cc96 <__adddf3+0xb2>
  40cc7a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40cc7e:	fa22 f205 	lsr.w	r2, r2, r5
  40cc82:	1880      	adds	r0, r0, r2
  40cc84:	f141 0100 	adc.w	r1, r1, #0
  40cc88:	fa03 f20e 	lsl.w	r2, r3, lr
  40cc8c:	1880      	adds	r0, r0, r2
  40cc8e:	fa43 f305 	asr.w	r3, r3, r5
  40cc92:	4159      	adcs	r1, r3
  40cc94:	e00e      	b.n	40ccb4 <__adddf3+0xd0>
  40cc96:	f1a5 0520 	sub.w	r5, r5, #32
  40cc9a:	f10e 0e20 	add.w	lr, lr, #32
  40cc9e:	2a01      	cmp	r2, #1
  40cca0:	fa03 fc0e 	lsl.w	ip, r3, lr
  40cca4:	bf28      	it	cs
  40cca6:	f04c 0c02 	orrcs.w	ip, ip, #2
  40ccaa:	fa43 f305 	asr.w	r3, r3, r5
  40ccae:	18c0      	adds	r0, r0, r3
  40ccb0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40ccb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ccb8:	d507      	bpl.n	40ccca <__adddf3+0xe6>
  40ccba:	f04f 0e00 	mov.w	lr, #0
  40ccbe:	f1dc 0c00 	rsbs	ip, ip, #0
  40ccc2:	eb7e 0000 	sbcs.w	r0, lr, r0
  40ccc6:	eb6e 0101 	sbc.w	r1, lr, r1
  40ccca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40ccce:	d31b      	bcc.n	40cd08 <__adddf3+0x124>
  40ccd0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40ccd4:	d30c      	bcc.n	40ccf0 <__adddf3+0x10c>
  40ccd6:	0849      	lsrs	r1, r1, #1
  40ccd8:	ea5f 0030 	movs.w	r0, r0, rrx
  40ccdc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40cce0:	f104 0401 	add.w	r4, r4, #1
  40cce4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40cce8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40ccec:	f080 809a 	bcs.w	40ce24 <__adddf3+0x240>
  40ccf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40ccf4:	bf08      	it	eq
  40ccf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ccfa:	f150 0000 	adcs.w	r0, r0, #0
  40ccfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40cd02:	ea41 0105 	orr.w	r1, r1, r5
  40cd06:	bd30      	pop	{r4, r5, pc}
  40cd08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40cd0c:	4140      	adcs	r0, r0
  40cd0e:	eb41 0101 	adc.w	r1, r1, r1
  40cd12:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40cd16:	f1a4 0401 	sub.w	r4, r4, #1
  40cd1a:	d1e9      	bne.n	40ccf0 <__adddf3+0x10c>
  40cd1c:	f091 0f00 	teq	r1, #0
  40cd20:	bf04      	itt	eq
  40cd22:	4601      	moveq	r1, r0
  40cd24:	2000      	moveq	r0, #0
  40cd26:	fab1 f381 	clz	r3, r1
  40cd2a:	bf08      	it	eq
  40cd2c:	3320      	addeq	r3, #32
  40cd2e:	f1a3 030b 	sub.w	r3, r3, #11
  40cd32:	f1b3 0220 	subs.w	r2, r3, #32
  40cd36:	da0c      	bge.n	40cd52 <__adddf3+0x16e>
  40cd38:	320c      	adds	r2, #12
  40cd3a:	dd08      	ble.n	40cd4e <__adddf3+0x16a>
  40cd3c:	f102 0c14 	add.w	ip, r2, #20
  40cd40:	f1c2 020c 	rsb	r2, r2, #12
  40cd44:	fa01 f00c 	lsl.w	r0, r1, ip
  40cd48:	fa21 f102 	lsr.w	r1, r1, r2
  40cd4c:	e00c      	b.n	40cd68 <__adddf3+0x184>
  40cd4e:	f102 0214 	add.w	r2, r2, #20
  40cd52:	bfd8      	it	le
  40cd54:	f1c2 0c20 	rsble	ip, r2, #32
  40cd58:	fa01 f102 	lsl.w	r1, r1, r2
  40cd5c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40cd60:	bfdc      	itt	le
  40cd62:	ea41 010c 	orrle.w	r1, r1, ip
  40cd66:	4090      	lslle	r0, r2
  40cd68:	1ae4      	subs	r4, r4, r3
  40cd6a:	bfa2      	ittt	ge
  40cd6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40cd70:	4329      	orrge	r1, r5
  40cd72:	bd30      	popge	{r4, r5, pc}
  40cd74:	ea6f 0404 	mvn.w	r4, r4
  40cd78:	3c1f      	subs	r4, #31
  40cd7a:	da1c      	bge.n	40cdb6 <__adddf3+0x1d2>
  40cd7c:	340c      	adds	r4, #12
  40cd7e:	dc0e      	bgt.n	40cd9e <__adddf3+0x1ba>
  40cd80:	f104 0414 	add.w	r4, r4, #20
  40cd84:	f1c4 0220 	rsb	r2, r4, #32
  40cd88:	fa20 f004 	lsr.w	r0, r0, r4
  40cd8c:	fa01 f302 	lsl.w	r3, r1, r2
  40cd90:	ea40 0003 	orr.w	r0, r0, r3
  40cd94:	fa21 f304 	lsr.w	r3, r1, r4
  40cd98:	ea45 0103 	orr.w	r1, r5, r3
  40cd9c:	bd30      	pop	{r4, r5, pc}
  40cd9e:	f1c4 040c 	rsb	r4, r4, #12
  40cda2:	f1c4 0220 	rsb	r2, r4, #32
  40cda6:	fa20 f002 	lsr.w	r0, r0, r2
  40cdaa:	fa01 f304 	lsl.w	r3, r1, r4
  40cdae:	ea40 0003 	orr.w	r0, r0, r3
  40cdb2:	4629      	mov	r1, r5
  40cdb4:	bd30      	pop	{r4, r5, pc}
  40cdb6:	fa21 f004 	lsr.w	r0, r1, r4
  40cdba:	4629      	mov	r1, r5
  40cdbc:	bd30      	pop	{r4, r5, pc}
  40cdbe:	f094 0f00 	teq	r4, #0
  40cdc2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40cdc6:	bf06      	itte	eq
  40cdc8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40cdcc:	3401      	addeq	r4, #1
  40cdce:	3d01      	subne	r5, #1
  40cdd0:	e74e      	b.n	40cc70 <__adddf3+0x8c>
  40cdd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40cdd6:	bf18      	it	ne
  40cdd8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40cddc:	d029      	beq.n	40ce32 <__adddf3+0x24e>
  40cdde:	ea94 0f05 	teq	r4, r5
  40cde2:	bf08      	it	eq
  40cde4:	ea90 0f02 	teqeq	r0, r2
  40cde8:	d005      	beq.n	40cdf6 <__adddf3+0x212>
  40cdea:	ea54 0c00 	orrs.w	ip, r4, r0
  40cdee:	bf04      	itt	eq
  40cdf0:	4619      	moveq	r1, r3
  40cdf2:	4610      	moveq	r0, r2
  40cdf4:	bd30      	pop	{r4, r5, pc}
  40cdf6:	ea91 0f03 	teq	r1, r3
  40cdfa:	bf1e      	ittt	ne
  40cdfc:	2100      	movne	r1, #0
  40cdfe:	2000      	movne	r0, #0
  40ce00:	bd30      	popne	{r4, r5, pc}
  40ce02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40ce06:	d105      	bne.n	40ce14 <__adddf3+0x230>
  40ce08:	0040      	lsls	r0, r0, #1
  40ce0a:	4149      	adcs	r1, r1
  40ce0c:	bf28      	it	cs
  40ce0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40ce12:	bd30      	pop	{r4, r5, pc}
  40ce14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40ce18:	bf3c      	itt	cc
  40ce1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40ce1e:	bd30      	popcc	{r4, r5, pc}
  40ce20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ce24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40ce28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ce2c:	f04f 0000 	mov.w	r0, #0
  40ce30:	bd30      	pop	{r4, r5, pc}
  40ce32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ce36:	bf1a      	itte	ne
  40ce38:	4619      	movne	r1, r3
  40ce3a:	4610      	movne	r0, r2
  40ce3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40ce40:	bf1c      	itt	ne
  40ce42:	460b      	movne	r3, r1
  40ce44:	4602      	movne	r2, r0
  40ce46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ce4a:	bf06      	itte	eq
  40ce4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ce50:	ea91 0f03 	teqeq	r1, r3
  40ce54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40ce58:	bd30      	pop	{r4, r5, pc}
  40ce5a:	bf00      	nop

0040ce5c <__aeabi_ui2d>:
  40ce5c:	f090 0f00 	teq	r0, #0
  40ce60:	bf04      	itt	eq
  40ce62:	2100      	moveq	r1, #0
  40ce64:	4770      	bxeq	lr
  40ce66:	b530      	push	{r4, r5, lr}
  40ce68:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ce6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ce70:	f04f 0500 	mov.w	r5, #0
  40ce74:	f04f 0100 	mov.w	r1, #0
  40ce78:	e750      	b.n	40cd1c <__adddf3+0x138>
  40ce7a:	bf00      	nop

0040ce7c <__aeabi_i2d>:
  40ce7c:	f090 0f00 	teq	r0, #0
  40ce80:	bf04      	itt	eq
  40ce82:	2100      	moveq	r1, #0
  40ce84:	4770      	bxeq	lr
  40ce86:	b530      	push	{r4, r5, lr}
  40ce88:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ce8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ce90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40ce94:	bf48      	it	mi
  40ce96:	4240      	negmi	r0, r0
  40ce98:	f04f 0100 	mov.w	r1, #0
  40ce9c:	e73e      	b.n	40cd1c <__adddf3+0x138>
  40ce9e:	bf00      	nop

0040cea0 <__aeabi_f2d>:
  40cea0:	0042      	lsls	r2, r0, #1
  40cea2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40cea6:	ea4f 0131 	mov.w	r1, r1, rrx
  40ceaa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40ceae:	bf1f      	itttt	ne
  40ceb0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40ceb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ceb8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40cebc:	4770      	bxne	lr
  40cebe:	f092 0f00 	teq	r2, #0
  40cec2:	bf14      	ite	ne
  40cec4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40cec8:	4770      	bxeq	lr
  40ceca:	b530      	push	{r4, r5, lr}
  40cecc:	f44f 7460 	mov.w	r4, #896	; 0x380
  40ced0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ced4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40ced8:	e720      	b.n	40cd1c <__adddf3+0x138>
  40ceda:	bf00      	nop

0040cedc <__aeabi_ul2d>:
  40cedc:	ea50 0201 	orrs.w	r2, r0, r1
  40cee0:	bf08      	it	eq
  40cee2:	4770      	bxeq	lr
  40cee4:	b530      	push	{r4, r5, lr}
  40cee6:	f04f 0500 	mov.w	r5, #0
  40ceea:	e00a      	b.n	40cf02 <__aeabi_l2d+0x16>

0040ceec <__aeabi_l2d>:
  40ceec:	ea50 0201 	orrs.w	r2, r0, r1
  40cef0:	bf08      	it	eq
  40cef2:	4770      	bxeq	lr
  40cef4:	b530      	push	{r4, r5, lr}
  40cef6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40cefa:	d502      	bpl.n	40cf02 <__aeabi_l2d+0x16>
  40cefc:	4240      	negs	r0, r0
  40cefe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cf02:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40cf06:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40cf0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40cf0e:	f43f aedc 	beq.w	40ccca <__adddf3+0xe6>
  40cf12:	f04f 0203 	mov.w	r2, #3
  40cf16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40cf1a:	bf18      	it	ne
  40cf1c:	3203      	addne	r2, #3
  40cf1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40cf22:	bf18      	it	ne
  40cf24:	3203      	addne	r2, #3
  40cf26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40cf2a:	f1c2 0320 	rsb	r3, r2, #32
  40cf2e:	fa00 fc03 	lsl.w	ip, r0, r3
  40cf32:	fa20 f002 	lsr.w	r0, r0, r2
  40cf36:	fa01 fe03 	lsl.w	lr, r1, r3
  40cf3a:	ea40 000e 	orr.w	r0, r0, lr
  40cf3e:	fa21 f102 	lsr.w	r1, r1, r2
  40cf42:	4414      	add	r4, r2
  40cf44:	e6c1      	b.n	40ccca <__adddf3+0xe6>
  40cf46:	bf00      	nop

0040cf48 <__aeabi_dmul>:
  40cf48:	b570      	push	{r4, r5, r6, lr}
  40cf4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40cf4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40cf52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40cf56:	bf1d      	ittte	ne
  40cf58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40cf5c:	ea94 0f0c 	teqne	r4, ip
  40cf60:	ea95 0f0c 	teqne	r5, ip
  40cf64:	f000 f8de 	bleq	40d124 <__aeabi_dmul+0x1dc>
  40cf68:	442c      	add	r4, r5
  40cf6a:	ea81 0603 	eor.w	r6, r1, r3
  40cf6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40cf72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40cf76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40cf7a:	bf18      	it	ne
  40cf7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40cf80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40cf84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40cf88:	d038      	beq.n	40cffc <__aeabi_dmul+0xb4>
  40cf8a:	fba0 ce02 	umull	ip, lr, r0, r2
  40cf8e:	f04f 0500 	mov.w	r5, #0
  40cf92:	fbe1 e502 	umlal	lr, r5, r1, r2
  40cf96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40cf9a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40cf9e:	f04f 0600 	mov.w	r6, #0
  40cfa2:	fbe1 5603 	umlal	r5, r6, r1, r3
  40cfa6:	f09c 0f00 	teq	ip, #0
  40cfaa:	bf18      	it	ne
  40cfac:	f04e 0e01 	orrne.w	lr, lr, #1
  40cfb0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40cfb4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40cfb8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40cfbc:	d204      	bcs.n	40cfc8 <__aeabi_dmul+0x80>
  40cfbe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40cfc2:	416d      	adcs	r5, r5
  40cfc4:	eb46 0606 	adc.w	r6, r6, r6
  40cfc8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40cfcc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40cfd0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40cfd4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40cfd8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40cfdc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40cfe0:	bf88      	it	hi
  40cfe2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40cfe6:	d81e      	bhi.n	40d026 <__aeabi_dmul+0xde>
  40cfe8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40cfec:	bf08      	it	eq
  40cfee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40cff2:	f150 0000 	adcs.w	r0, r0, #0
  40cff6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40cffa:	bd70      	pop	{r4, r5, r6, pc}
  40cffc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40d000:	ea46 0101 	orr.w	r1, r6, r1
  40d004:	ea40 0002 	orr.w	r0, r0, r2
  40d008:	ea81 0103 	eor.w	r1, r1, r3
  40d00c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40d010:	bfc2      	ittt	gt
  40d012:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d016:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d01a:	bd70      	popgt	{r4, r5, r6, pc}
  40d01c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d020:	f04f 0e00 	mov.w	lr, #0
  40d024:	3c01      	subs	r4, #1
  40d026:	f300 80ab 	bgt.w	40d180 <__aeabi_dmul+0x238>
  40d02a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40d02e:	bfde      	ittt	le
  40d030:	2000      	movle	r0, #0
  40d032:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40d036:	bd70      	pople	{r4, r5, r6, pc}
  40d038:	f1c4 0400 	rsb	r4, r4, #0
  40d03c:	3c20      	subs	r4, #32
  40d03e:	da35      	bge.n	40d0ac <__aeabi_dmul+0x164>
  40d040:	340c      	adds	r4, #12
  40d042:	dc1b      	bgt.n	40d07c <__aeabi_dmul+0x134>
  40d044:	f104 0414 	add.w	r4, r4, #20
  40d048:	f1c4 0520 	rsb	r5, r4, #32
  40d04c:	fa00 f305 	lsl.w	r3, r0, r5
  40d050:	fa20 f004 	lsr.w	r0, r0, r4
  40d054:	fa01 f205 	lsl.w	r2, r1, r5
  40d058:	ea40 0002 	orr.w	r0, r0, r2
  40d05c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40d060:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d064:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d068:	fa21 f604 	lsr.w	r6, r1, r4
  40d06c:	eb42 0106 	adc.w	r1, r2, r6
  40d070:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d074:	bf08      	it	eq
  40d076:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d07a:	bd70      	pop	{r4, r5, r6, pc}
  40d07c:	f1c4 040c 	rsb	r4, r4, #12
  40d080:	f1c4 0520 	rsb	r5, r4, #32
  40d084:	fa00 f304 	lsl.w	r3, r0, r4
  40d088:	fa20 f005 	lsr.w	r0, r0, r5
  40d08c:	fa01 f204 	lsl.w	r2, r1, r4
  40d090:	ea40 0002 	orr.w	r0, r0, r2
  40d094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d098:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d09c:	f141 0100 	adc.w	r1, r1, #0
  40d0a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d0a4:	bf08      	it	eq
  40d0a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d0aa:	bd70      	pop	{r4, r5, r6, pc}
  40d0ac:	f1c4 0520 	rsb	r5, r4, #32
  40d0b0:	fa00 f205 	lsl.w	r2, r0, r5
  40d0b4:	ea4e 0e02 	orr.w	lr, lr, r2
  40d0b8:	fa20 f304 	lsr.w	r3, r0, r4
  40d0bc:	fa01 f205 	lsl.w	r2, r1, r5
  40d0c0:	ea43 0302 	orr.w	r3, r3, r2
  40d0c4:	fa21 f004 	lsr.w	r0, r1, r4
  40d0c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d0cc:	fa21 f204 	lsr.w	r2, r1, r4
  40d0d0:	ea20 0002 	bic.w	r0, r0, r2
  40d0d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40d0d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d0dc:	bf08      	it	eq
  40d0de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d0e2:	bd70      	pop	{r4, r5, r6, pc}
  40d0e4:	f094 0f00 	teq	r4, #0
  40d0e8:	d10f      	bne.n	40d10a <__aeabi_dmul+0x1c2>
  40d0ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40d0ee:	0040      	lsls	r0, r0, #1
  40d0f0:	eb41 0101 	adc.w	r1, r1, r1
  40d0f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d0f8:	bf08      	it	eq
  40d0fa:	3c01      	subeq	r4, #1
  40d0fc:	d0f7      	beq.n	40d0ee <__aeabi_dmul+0x1a6>
  40d0fe:	ea41 0106 	orr.w	r1, r1, r6
  40d102:	f095 0f00 	teq	r5, #0
  40d106:	bf18      	it	ne
  40d108:	4770      	bxne	lr
  40d10a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40d10e:	0052      	lsls	r2, r2, #1
  40d110:	eb43 0303 	adc.w	r3, r3, r3
  40d114:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40d118:	bf08      	it	eq
  40d11a:	3d01      	subeq	r5, #1
  40d11c:	d0f7      	beq.n	40d10e <__aeabi_dmul+0x1c6>
  40d11e:	ea43 0306 	orr.w	r3, r3, r6
  40d122:	4770      	bx	lr
  40d124:	ea94 0f0c 	teq	r4, ip
  40d128:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d12c:	bf18      	it	ne
  40d12e:	ea95 0f0c 	teqne	r5, ip
  40d132:	d00c      	beq.n	40d14e <__aeabi_dmul+0x206>
  40d134:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d138:	bf18      	it	ne
  40d13a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d13e:	d1d1      	bne.n	40d0e4 <__aeabi_dmul+0x19c>
  40d140:	ea81 0103 	eor.w	r1, r1, r3
  40d144:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d148:	f04f 0000 	mov.w	r0, #0
  40d14c:	bd70      	pop	{r4, r5, r6, pc}
  40d14e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d152:	bf06      	itte	eq
  40d154:	4610      	moveq	r0, r2
  40d156:	4619      	moveq	r1, r3
  40d158:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d15c:	d019      	beq.n	40d192 <__aeabi_dmul+0x24a>
  40d15e:	ea94 0f0c 	teq	r4, ip
  40d162:	d102      	bne.n	40d16a <__aeabi_dmul+0x222>
  40d164:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40d168:	d113      	bne.n	40d192 <__aeabi_dmul+0x24a>
  40d16a:	ea95 0f0c 	teq	r5, ip
  40d16e:	d105      	bne.n	40d17c <__aeabi_dmul+0x234>
  40d170:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40d174:	bf1c      	itt	ne
  40d176:	4610      	movne	r0, r2
  40d178:	4619      	movne	r1, r3
  40d17a:	d10a      	bne.n	40d192 <__aeabi_dmul+0x24a>
  40d17c:	ea81 0103 	eor.w	r1, r1, r3
  40d180:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d184:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d188:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d18c:	f04f 0000 	mov.w	r0, #0
  40d190:	bd70      	pop	{r4, r5, r6, pc}
  40d192:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d196:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40d19a:	bd70      	pop	{r4, r5, r6, pc}

0040d19c <__aeabi_ddiv>:
  40d19c:	b570      	push	{r4, r5, r6, lr}
  40d19e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d1a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d1a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d1aa:	bf1d      	ittte	ne
  40d1ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d1b0:	ea94 0f0c 	teqne	r4, ip
  40d1b4:	ea95 0f0c 	teqne	r5, ip
  40d1b8:	f000 f8a7 	bleq	40d30a <__aeabi_ddiv+0x16e>
  40d1bc:	eba4 0405 	sub.w	r4, r4, r5
  40d1c0:	ea81 0e03 	eor.w	lr, r1, r3
  40d1c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d1c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d1cc:	f000 8088 	beq.w	40d2e0 <__aeabi_ddiv+0x144>
  40d1d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d1d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40d1d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40d1dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40d1e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40d1e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40d1e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40d1ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40d1f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40d1f4:	429d      	cmp	r5, r3
  40d1f6:	bf08      	it	eq
  40d1f8:	4296      	cmpeq	r6, r2
  40d1fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40d1fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40d202:	d202      	bcs.n	40d20a <__aeabi_ddiv+0x6e>
  40d204:	085b      	lsrs	r3, r3, #1
  40d206:	ea4f 0232 	mov.w	r2, r2, rrx
  40d20a:	1ab6      	subs	r6, r6, r2
  40d20c:	eb65 0503 	sbc.w	r5, r5, r3
  40d210:	085b      	lsrs	r3, r3, #1
  40d212:	ea4f 0232 	mov.w	r2, r2, rrx
  40d216:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40d21a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40d21e:	ebb6 0e02 	subs.w	lr, r6, r2
  40d222:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d226:	bf22      	ittt	cs
  40d228:	1ab6      	subcs	r6, r6, r2
  40d22a:	4675      	movcs	r5, lr
  40d22c:	ea40 000c 	orrcs.w	r0, r0, ip
  40d230:	085b      	lsrs	r3, r3, #1
  40d232:	ea4f 0232 	mov.w	r2, r2, rrx
  40d236:	ebb6 0e02 	subs.w	lr, r6, r2
  40d23a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d23e:	bf22      	ittt	cs
  40d240:	1ab6      	subcs	r6, r6, r2
  40d242:	4675      	movcs	r5, lr
  40d244:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40d248:	085b      	lsrs	r3, r3, #1
  40d24a:	ea4f 0232 	mov.w	r2, r2, rrx
  40d24e:	ebb6 0e02 	subs.w	lr, r6, r2
  40d252:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d256:	bf22      	ittt	cs
  40d258:	1ab6      	subcs	r6, r6, r2
  40d25a:	4675      	movcs	r5, lr
  40d25c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40d260:	085b      	lsrs	r3, r3, #1
  40d262:	ea4f 0232 	mov.w	r2, r2, rrx
  40d266:	ebb6 0e02 	subs.w	lr, r6, r2
  40d26a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d26e:	bf22      	ittt	cs
  40d270:	1ab6      	subcs	r6, r6, r2
  40d272:	4675      	movcs	r5, lr
  40d274:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40d278:	ea55 0e06 	orrs.w	lr, r5, r6
  40d27c:	d018      	beq.n	40d2b0 <__aeabi_ddiv+0x114>
  40d27e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40d282:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40d286:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40d28a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40d28e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40d292:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40d296:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40d29a:	d1c0      	bne.n	40d21e <__aeabi_ddiv+0x82>
  40d29c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d2a0:	d10b      	bne.n	40d2ba <__aeabi_ddiv+0x11e>
  40d2a2:	ea41 0100 	orr.w	r1, r1, r0
  40d2a6:	f04f 0000 	mov.w	r0, #0
  40d2aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40d2ae:	e7b6      	b.n	40d21e <__aeabi_ddiv+0x82>
  40d2b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d2b4:	bf04      	itt	eq
  40d2b6:	4301      	orreq	r1, r0
  40d2b8:	2000      	moveq	r0, #0
  40d2ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d2be:	bf88      	it	hi
  40d2c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d2c4:	f63f aeaf 	bhi.w	40d026 <__aeabi_dmul+0xde>
  40d2c8:	ebb5 0c03 	subs.w	ip, r5, r3
  40d2cc:	bf04      	itt	eq
  40d2ce:	ebb6 0c02 	subseq.w	ip, r6, r2
  40d2d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d2d6:	f150 0000 	adcs.w	r0, r0, #0
  40d2da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d2de:	bd70      	pop	{r4, r5, r6, pc}
  40d2e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40d2e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40d2e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40d2ec:	bfc2      	ittt	gt
  40d2ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d2f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d2f6:	bd70      	popgt	{r4, r5, r6, pc}
  40d2f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d2fc:	f04f 0e00 	mov.w	lr, #0
  40d300:	3c01      	subs	r4, #1
  40d302:	e690      	b.n	40d026 <__aeabi_dmul+0xde>
  40d304:	ea45 0e06 	orr.w	lr, r5, r6
  40d308:	e68d      	b.n	40d026 <__aeabi_dmul+0xde>
  40d30a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d30e:	ea94 0f0c 	teq	r4, ip
  40d312:	bf08      	it	eq
  40d314:	ea95 0f0c 	teqeq	r5, ip
  40d318:	f43f af3b 	beq.w	40d192 <__aeabi_dmul+0x24a>
  40d31c:	ea94 0f0c 	teq	r4, ip
  40d320:	d10a      	bne.n	40d338 <__aeabi_ddiv+0x19c>
  40d322:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d326:	f47f af34 	bne.w	40d192 <__aeabi_dmul+0x24a>
  40d32a:	ea95 0f0c 	teq	r5, ip
  40d32e:	f47f af25 	bne.w	40d17c <__aeabi_dmul+0x234>
  40d332:	4610      	mov	r0, r2
  40d334:	4619      	mov	r1, r3
  40d336:	e72c      	b.n	40d192 <__aeabi_dmul+0x24a>
  40d338:	ea95 0f0c 	teq	r5, ip
  40d33c:	d106      	bne.n	40d34c <__aeabi_ddiv+0x1b0>
  40d33e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d342:	f43f aefd 	beq.w	40d140 <__aeabi_dmul+0x1f8>
  40d346:	4610      	mov	r0, r2
  40d348:	4619      	mov	r1, r3
  40d34a:	e722      	b.n	40d192 <__aeabi_dmul+0x24a>
  40d34c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d350:	bf18      	it	ne
  40d352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d356:	f47f aec5 	bne.w	40d0e4 <__aeabi_dmul+0x19c>
  40d35a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40d35e:	f47f af0d 	bne.w	40d17c <__aeabi_dmul+0x234>
  40d362:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40d366:	f47f aeeb 	bne.w	40d140 <__aeabi_dmul+0x1f8>
  40d36a:	e712      	b.n	40d192 <__aeabi_dmul+0x24a>

0040d36c <__gedf2>:
  40d36c:	f04f 3cff 	mov.w	ip, #4294967295
  40d370:	e006      	b.n	40d380 <__cmpdf2+0x4>
  40d372:	bf00      	nop

0040d374 <__ledf2>:
  40d374:	f04f 0c01 	mov.w	ip, #1
  40d378:	e002      	b.n	40d380 <__cmpdf2+0x4>
  40d37a:	bf00      	nop

0040d37c <__cmpdf2>:
  40d37c:	f04f 0c01 	mov.w	ip, #1
  40d380:	f84d cd04 	str.w	ip, [sp, #-4]!
  40d384:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d388:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d38c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d390:	bf18      	it	ne
  40d392:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40d396:	d01b      	beq.n	40d3d0 <__cmpdf2+0x54>
  40d398:	b001      	add	sp, #4
  40d39a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40d39e:	bf0c      	ite	eq
  40d3a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40d3a4:	ea91 0f03 	teqne	r1, r3
  40d3a8:	bf02      	ittt	eq
  40d3aa:	ea90 0f02 	teqeq	r0, r2
  40d3ae:	2000      	moveq	r0, #0
  40d3b0:	4770      	bxeq	lr
  40d3b2:	f110 0f00 	cmn.w	r0, #0
  40d3b6:	ea91 0f03 	teq	r1, r3
  40d3ba:	bf58      	it	pl
  40d3bc:	4299      	cmppl	r1, r3
  40d3be:	bf08      	it	eq
  40d3c0:	4290      	cmpeq	r0, r2
  40d3c2:	bf2c      	ite	cs
  40d3c4:	17d8      	asrcs	r0, r3, #31
  40d3c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40d3ca:	f040 0001 	orr.w	r0, r0, #1
  40d3ce:	4770      	bx	lr
  40d3d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d3d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d3d8:	d102      	bne.n	40d3e0 <__cmpdf2+0x64>
  40d3da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40d3de:	d107      	bne.n	40d3f0 <__cmpdf2+0x74>
  40d3e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d3e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d3e8:	d1d6      	bne.n	40d398 <__cmpdf2+0x1c>
  40d3ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40d3ee:	d0d3      	beq.n	40d398 <__cmpdf2+0x1c>
  40d3f0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40d3f4:	4770      	bx	lr
  40d3f6:	bf00      	nop

0040d3f8 <__aeabi_cdrcmple>:
  40d3f8:	4684      	mov	ip, r0
  40d3fa:	4610      	mov	r0, r2
  40d3fc:	4662      	mov	r2, ip
  40d3fe:	468c      	mov	ip, r1
  40d400:	4619      	mov	r1, r3
  40d402:	4663      	mov	r3, ip
  40d404:	e000      	b.n	40d408 <__aeabi_cdcmpeq>
  40d406:	bf00      	nop

0040d408 <__aeabi_cdcmpeq>:
  40d408:	b501      	push	{r0, lr}
  40d40a:	f7ff ffb7 	bl	40d37c <__cmpdf2>
  40d40e:	2800      	cmp	r0, #0
  40d410:	bf48      	it	mi
  40d412:	f110 0f00 	cmnmi.w	r0, #0
  40d416:	bd01      	pop	{r0, pc}

0040d418 <__aeabi_dcmpeq>:
  40d418:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d41c:	f7ff fff4 	bl	40d408 <__aeabi_cdcmpeq>
  40d420:	bf0c      	ite	eq
  40d422:	2001      	moveq	r0, #1
  40d424:	2000      	movne	r0, #0
  40d426:	f85d fb08 	ldr.w	pc, [sp], #8
  40d42a:	bf00      	nop

0040d42c <__aeabi_dcmplt>:
  40d42c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d430:	f7ff ffea 	bl	40d408 <__aeabi_cdcmpeq>
  40d434:	bf34      	ite	cc
  40d436:	2001      	movcc	r0, #1
  40d438:	2000      	movcs	r0, #0
  40d43a:	f85d fb08 	ldr.w	pc, [sp], #8
  40d43e:	bf00      	nop

0040d440 <__aeabi_dcmple>:
  40d440:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d444:	f7ff ffe0 	bl	40d408 <__aeabi_cdcmpeq>
  40d448:	bf94      	ite	ls
  40d44a:	2001      	movls	r0, #1
  40d44c:	2000      	movhi	r0, #0
  40d44e:	f85d fb08 	ldr.w	pc, [sp], #8
  40d452:	bf00      	nop

0040d454 <__aeabi_dcmpge>:
  40d454:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d458:	f7ff ffce 	bl	40d3f8 <__aeabi_cdrcmple>
  40d45c:	bf94      	ite	ls
  40d45e:	2001      	movls	r0, #1
  40d460:	2000      	movhi	r0, #0
  40d462:	f85d fb08 	ldr.w	pc, [sp], #8
  40d466:	bf00      	nop

0040d468 <__aeabi_dcmpgt>:
  40d468:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d46c:	f7ff ffc4 	bl	40d3f8 <__aeabi_cdrcmple>
  40d470:	bf34      	ite	cc
  40d472:	2001      	movcc	r0, #1
  40d474:	2000      	movcs	r0, #0
  40d476:	f85d fb08 	ldr.w	pc, [sp], #8
  40d47a:	bf00      	nop

0040d47c <__aeabi_dcmpun>:
  40d47c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d480:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d484:	d102      	bne.n	40d48c <__aeabi_dcmpun+0x10>
  40d486:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40d48a:	d10a      	bne.n	40d4a2 <__aeabi_dcmpun+0x26>
  40d48c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d490:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d494:	d102      	bne.n	40d49c <__aeabi_dcmpun+0x20>
  40d496:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40d49a:	d102      	bne.n	40d4a2 <__aeabi_dcmpun+0x26>
  40d49c:	f04f 0000 	mov.w	r0, #0
  40d4a0:	4770      	bx	lr
  40d4a2:	f04f 0001 	mov.w	r0, #1
  40d4a6:	4770      	bx	lr

0040d4a8 <__aeabi_d2iz>:
  40d4a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40d4ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40d4b0:	d215      	bcs.n	40d4de <__aeabi_d2iz+0x36>
  40d4b2:	d511      	bpl.n	40d4d8 <__aeabi_d2iz+0x30>
  40d4b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40d4b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40d4bc:	d912      	bls.n	40d4e4 <__aeabi_d2iz+0x3c>
  40d4be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40d4c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40d4c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40d4ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d4ce:	fa23 f002 	lsr.w	r0, r3, r2
  40d4d2:	bf18      	it	ne
  40d4d4:	4240      	negne	r0, r0
  40d4d6:	4770      	bx	lr
  40d4d8:	f04f 0000 	mov.w	r0, #0
  40d4dc:	4770      	bx	lr
  40d4de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40d4e2:	d105      	bne.n	40d4f0 <__aeabi_d2iz+0x48>
  40d4e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40d4e8:	bf08      	it	eq
  40d4ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40d4ee:	4770      	bx	lr
  40d4f0:	f04f 0000 	mov.w	r0, #0
  40d4f4:	4770      	bx	lr
  40d4f6:	bf00      	nop

0040d4f8 <__aeabi_d2uiz>:
  40d4f8:	004a      	lsls	r2, r1, #1
  40d4fa:	d211      	bcs.n	40d520 <__aeabi_d2uiz+0x28>
  40d4fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40d500:	d211      	bcs.n	40d526 <__aeabi_d2uiz+0x2e>
  40d502:	d50d      	bpl.n	40d520 <__aeabi_d2uiz+0x28>
  40d504:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40d508:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40d50c:	d40e      	bmi.n	40d52c <__aeabi_d2uiz+0x34>
  40d50e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40d512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40d516:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40d51a:	fa23 f002 	lsr.w	r0, r3, r2
  40d51e:	4770      	bx	lr
  40d520:	f04f 0000 	mov.w	r0, #0
  40d524:	4770      	bx	lr
  40d526:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40d52a:	d102      	bne.n	40d532 <__aeabi_d2uiz+0x3a>
  40d52c:	f04f 30ff 	mov.w	r0, #4294967295
  40d530:	4770      	bx	lr
  40d532:	f04f 0000 	mov.w	r0, #0
  40d536:	4770      	bx	lr

0040d538 <__aeabi_d2f>:
  40d538:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40d53c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40d540:	bf24      	itt	cs
  40d542:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40d546:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40d54a:	d90d      	bls.n	40d568 <__aeabi_d2f+0x30>
  40d54c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40d550:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40d554:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40d558:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40d55c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40d560:	bf08      	it	eq
  40d562:	f020 0001 	biceq.w	r0, r0, #1
  40d566:	4770      	bx	lr
  40d568:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40d56c:	d121      	bne.n	40d5b2 <__aeabi_d2f+0x7a>
  40d56e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40d572:	bfbc      	itt	lt
  40d574:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40d578:	4770      	bxlt	lr
  40d57a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d57e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40d582:	f1c2 0218 	rsb	r2, r2, #24
  40d586:	f1c2 0c20 	rsb	ip, r2, #32
  40d58a:	fa10 f30c 	lsls.w	r3, r0, ip
  40d58e:	fa20 f002 	lsr.w	r0, r0, r2
  40d592:	bf18      	it	ne
  40d594:	f040 0001 	orrne.w	r0, r0, #1
  40d598:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40d59c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40d5a0:	fa03 fc0c 	lsl.w	ip, r3, ip
  40d5a4:	ea40 000c 	orr.w	r0, r0, ip
  40d5a8:	fa23 f302 	lsr.w	r3, r3, r2
  40d5ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40d5b0:	e7cc      	b.n	40d54c <__aeabi_d2f+0x14>
  40d5b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40d5b6:	d107      	bne.n	40d5c8 <__aeabi_d2f+0x90>
  40d5b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40d5bc:	bf1e      	ittt	ne
  40d5be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40d5c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40d5c6:	4770      	bxne	lr
  40d5c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40d5cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40d5d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40d5d4:	4770      	bx	lr
  40d5d6:	bf00      	nop

0040d5d8 <__aeabi_frsub>:
  40d5d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40d5dc:	e002      	b.n	40d5e4 <__addsf3>
  40d5de:	bf00      	nop

0040d5e0 <__aeabi_fsub>:
  40d5e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040d5e4 <__addsf3>:
  40d5e4:	0042      	lsls	r2, r0, #1
  40d5e6:	bf1f      	itttt	ne
  40d5e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40d5ec:	ea92 0f03 	teqne	r2, r3
  40d5f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40d5f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40d5f8:	d06a      	beq.n	40d6d0 <__addsf3+0xec>
  40d5fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40d5fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40d602:	bfc1      	itttt	gt
  40d604:	18d2      	addgt	r2, r2, r3
  40d606:	4041      	eorgt	r1, r0
  40d608:	4048      	eorgt	r0, r1
  40d60a:	4041      	eorgt	r1, r0
  40d60c:	bfb8      	it	lt
  40d60e:	425b      	neglt	r3, r3
  40d610:	2b19      	cmp	r3, #25
  40d612:	bf88      	it	hi
  40d614:	4770      	bxhi	lr
  40d616:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40d61a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40d61e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40d622:	bf18      	it	ne
  40d624:	4240      	negne	r0, r0
  40d626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d62a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40d62e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40d632:	bf18      	it	ne
  40d634:	4249      	negne	r1, r1
  40d636:	ea92 0f03 	teq	r2, r3
  40d63a:	d03f      	beq.n	40d6bc <__addsf3+0xd8>
  40d63c:	f1a2 0201 	sub.w	r2, r2, #1
  40d640:	fa41 fc03 	asr.w	ip, r1, r3
  40d644:	eb10 000c 	adds.w	r0, r0, ip
  40d648:	f1c3 0320 	rsb	r3, r3, #32
  40d64c:	fa01 f103 	lsl.w	r1, r1, r3
  40d650:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40d654:	d502      	bpl.n	40d65c <__addsf3+0x78>
  40d656:	4249      	negs	r1, r1
  40d658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40d65c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40d660:	d313      	bcc.n	40d68a <__addsf3+0xa6>
  40d662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40d666:	d306      	bcc.n	40d676 <__addsf3+0x92>
  40d668:	0840      	lsrs	r0, r0, #1
  40d66a:	ea4f 0131 	mov.w	r1, r1, rrx
  40d66e:	f102 0201 	add.w	r2, r2, #1
  40d672:	2afe      	cmp	r2, #254	; 0xfe
  40d674:	d251      	bcs.n	40d71a <__addsf3+0x136>
  40d676:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40d67a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40d67e:	bf08      	it	eq
  40d680:	f020 0001 	biceq.w	r0, r0, #1
  40d684:	ea40 0003 	orr.w	r0, r0, r3
  40d688:	4770      	bx	lr
  40d68a:	0049      	lsls	r1, r1, #1
  40d68c:	eb40 0000 	adc.w	r0, r0, r0
  40d690:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40d694:	f1a2 0201 	sub.w	r2, r2, #1
  40d698:	d1ed      	bne.n	40d676 <__addsf3+0x92>
  40d69a:	fab0 fc80 	clz	ip, r0
  40d69e:	f1ac 0c08 	sub.w	ip, ip, #8
  40d6a2:	ebb2 020c 	subs.w	r2, r2, ip
  40d6a6:	fa00 f00c 	lsl.w	r0, r0, ip
  40d6aa:	bfaa      	itet	ge
  40d6ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40d6b0:	4252      	neglt	r2, r2
  40d6b2:	4318      	orrge	r0, r3
  40d6b4:	bfbc      	itt	lt
  40d6b6:	40d0      	lsrlt	r0, r2
  40d6b8:	4318      	orrlt	r0, r3
  40d6ba:	4770      	bx	lr
  40d6bc:	f092 0f00 	teq	r2, #0
  40d6c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40d6c4:	bf06      	itte	eq
  40d6c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40d6ca:	3201      	addeq	r2, #1
  40d6cc:	3b01      	subne	r3, #1
  40d6ce:	e7b5      	b.n	40d63c <__addsf3+0x58>
  40d6d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40d6d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40d6d8:	bf18      	it	ne
  40d6da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40d6de:	d021      	beq.n	40d724 <__addsf3+0x140>
  40d6e0:	ea92 0f03 	teq	r2, r3
  40d6e4:	d004      	beq.n	40d6f0 <__addsf3+0x10c>
  40d6e6:	f092 0f00 	teq	r2, #0
  40d6ea:	bf08      	it	eq
  40d6ec:	4608      	moveq	r0, r1
  40d6ee:	4770      	bx	lr
  40d6f0:	ea90 0f01 	teq	r0, r1
  40d6f4:	bf1c      	itt	ne
  40d6f6:	2000      	movne	r0, #0
  40d6f8:	4770      	bxne	lr
  40d6fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40d6fe:	d104      	bne.n	40d70a <__addsf3+0x126>
  40d700:	0040      	lsls	r0, r0, #1
  40d702:	bf28      	it	cs
  40d704:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40d708:	4770      	bx	lr
  40d70a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40d70e:	bf3c      	itt	cc
  40d710:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40d714:	4770      	bxcc	lr
  40d716:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40d71a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40d71e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40d722:	4770      	bx	lr
  40d724:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40d728:	bf16      	itet	ne
  40d72a:	4608      	movne	r0, r1
  40d72c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40d730:	4601      	movne	r1, r0
  40d732:	0242      	lsls	r2, r0, #9
  40d734:	bf06      	itte	eq
  40d736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40d73a:	ea90 0f01 	teqeq	r0, r1
  40d73e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40d742:	4770      	bx	lr

0040d744 <__aeabi_ui2f>:
  40d744:	f04f 0300 	mov.w	r3, #0
  40d748:	e004      	b.n	40d754 <__aeabi_i2f+0x8>
  40d74a:	bf00      	nop

0040d74c <__aeabi_i2f>:
  40d74c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40d750:	bf48      	it	mi
  40d752:	4240      	negmi	r0, r0
  40d754:	ea5f 0c00 	movs.w	ip, r0
  40d758:	bf08      	it	eq
  40d75a:	4770      	bxeq	lr
  40d75c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40d760:	4601      	mov	r1, r0
  40d762:	f04f 0000 	mov.w	r0, #0
  40d766:	e01c      	b.n	40d7a2 <__aeabi_l2f+0x2a>

0040d768 <__aeabi_ul2f>:
  40d768:	ea50 0201 	orrs.w	r2, r0, r1
  40d76c:	bf08      	it	eq
  40d76e:	4770      	bxeq	lr
  40d770:	f04f 0300 	mov.w	r3, #0
  40d774:	e00a      	b.n	40d78c <__aeabi_l2f+0x14>
  40d776:	bf00      	nop

0040d778 <__aeabi_l2f>:
  40d778:	ea50 0201 	orrs.w	r2, r0, r1
  40d77c:	bf08      	it	eq
  40d77e:	4770      	bxeq	lr
  40d780:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40d784:	d502      	bpl.n	40d78c <__aeabi_l2f+0x14>
  40d786:	4240      	negs	r0, r0
  40d788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d78c:	ea5f 0c01 	movs.w	ip, r1
  40d790:	bf02      	ittt	eq
  40d792:	4684      	moveq	ip, r0
  40d794:	4601      	moveq	r1, r0
  40d796:	2000      	moveq	r0, #0
  40d798:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40d79c:	bf08      	it	eq
  40d79e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40d7a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40d7a6:	fabc f28c 	clz	r2, ip
  40d7aa:	3a08      	subs	r2, #8
  40d7ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40d7b0:	db10      	blt.n	40d7d4 <__aeabi_l2f+0x5c>
  40d7b2:	fa01 fc02 	lsl.w	ip, r1, r2
  40d7b6:	4463      	add	r3, ip
  40d7b8:	fa00 fc02 	lsl.w	ip, r0, r2
  40d7bc:	f1c2 0220 	rsb	r2, r2, #32
  40d7c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40d7c4:	fa20 f202 	lsr.w	r2, r0, r2
  40d7c8:	eb43 0002 	adc.w	r0, r3, r2
  40d7cc:	bf08      	it	eq
  40d7ce:	f020 0001 	biceq.w	r0, r0, #1
  40d7d2:	4770      	bx	lr
  40d7d4:	f102 0220 	add.w	r2, r2, #32
  40d7d8:	fa01 fc02 	lsl.w	ip, r1, r2
  40d7dc:	f1c2 0220 	rsb	r2, r2, #32
  40d7e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40d7e4:	fa21 f202 	lsr.w	r2, r1, r2
  40d7e8:	eb43 0002 	adc.w	r0, r3, r2
  40d7ec:	bf08      	it	eq
  40d7ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40d7f2:	4770      	bx	lr

0040d7f4 <__aeabi_fmul>:
  40d7f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d7f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40d7fc:	bf1e      	ittt	ne
  40d7fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40d802:	ea92 0f0c 	teqne	r2, ip
  40d806:	ea93 0f0c 	teqne	r3, ip
  40d80a:	d06f      	beq.n	40d8ec <__aeabi_fmul+0xf8>
  40d80c:	441a      	add	r2, r3
  40d80e:	ea80 0c01 	eor.w	ip, r0, r1
  40d812:	0240      	lsls	r0, r0, #9
  40d814:	bf18      	it	ne
  40d816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40d81a:	d01e      	beq.n	40d85a <__aeabi_fmul+0x66>
  40d81c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40d820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40d824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40d828:	fba0 3101 	umull	r3, r1, r0, r1
  40d82c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40d830:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40d834:	bf3e      	ittt	cc
  40d836:	0049      	lslcc	r1, r1, #1
  40d838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40d83c:	005b      	lslcc	r3, r3, #1
  40d83e:	ea40 0001 	orr.w	r0, r0, r1
  40d842:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40d846:	2afd      	cmp	r2, #253	; 0xfd
  40d848:	d81d      	bhi.n	40d886 <__aeabi_fmul+0x92>
  40d84a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40d84e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40d852:	bf08      	it	eq
  40d854:	f020 0001 	biceq.w	r0, r0, #1
  40d858:	4770      	bx	lr
  40d85a:	f090 0f00 	teq	r0, #0
  40d85e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40d862:	bf08      	it	eq
  40d864:	0249      	lsleq	r1, r1, #9
  40d866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40d86a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  40d86e:	3a7f      	subs	r2, #127	; 0x7f
  40d870:	bfc2      	ittt	gt
  40d872:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40d876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40d87a:	4770      	bxgt	lr
  40d87c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40d880:	f04f 0300 	mov.w	r3, #0
  40d884:	3a01      	subs	r2, #1
  40d886:	dc5d      	bgt.n	40d944 <__aeabi_fmul+0x150>
  40d888:	f112 0f19 	cmn.w	r2, #25
  40d88c:	bfdc      	itt	le
  40d88e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40d892:	4770      	bxle	lr
  40d894:	f1c2 0200 	rsb	r2, r2, #0
  40d898:	0041      	lsls	r1, r0, #1
  40d89a:	fa21 f102 	lsr.w	r1, r1, r2
  40d89e:	f1c2 0220 	rsb	r2, r2, #32
  40d8a2:	fa00 fc02 	lsl.w	ip, r0, r2
  40d8a6:	ea5f 0031 	movs.w	r0, r1, rrx
  40d8aa:	f140 0000 	adc.w	r0, r0, #0
  40d8ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40d8b2:	bf08      	it	eq
  40d8b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40d8b8:	4770      	bx	lr
  40d8ba:	f092 0f00 	teq	r2, #0
  40d8be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40d8c2:	bf02      	ittt	eq
  40d8c4:	0040      	lsleq	r0, r0, #1
  40d8c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40d8ca:	3a01      	subeq	r2, #1
  40d8cc:	d0f9      	beq.n	40d8c2 <__aeabi_fmul+0xce>
  40d8ce:	ea40 000c 	orr.w	r0, r0, ip
  40d8d2:	f093 0f00 	teq	r3, #0
  40d8d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40d8da:	bf02      	ittt	eq
  40d8dc:	0049      	lsleq	r1, r1, #1
  40d8de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40d8e2:	3b01      	subeq	r3, #1
  40d8e4:	d0f9      	beq.n	40d8da <__aeabi_fmul+0xe6>
  40d8e6:	ea41 010c 	orr.w	r1, r1, ip
  40d8ea:	e78f      	b.n	40d80c <__aeabi_fmul+0x18>
  40d8ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40d8f0:	ea92 0f0c 	teq	r2, ip
  40d8f4:	bf18      	it	ne
  40d8f6:	ea93 0f0c 	teqne	r3, ip
  40d8fa:	d00a      	beq.n	40d912 <__aeabi_fmul+0x11e>
  40d8fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40d900:	bf18      	it	ne
  40d902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40d906:	d1d8      	bne.n	40d8ba <__aeabi_fmul+0xc6>
  40d908:	ea80 0001 	eor.w	r0, r0, r1
  40d90c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40d910:	4770      	bx	lr
  40d912:	f090 0f00 	teq	r0, #0
  40d916:	bf17      	itett	ne
  40d918:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40d91c:	4608      	moveq	r0, r1
  40d91e:	f091 0f00 	teqne	r1, #0
  40d922:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40d926:	d014      	beq.n	40d952 <__aeabi_fmul+0x15e>
  40d928:	ea92 0f0c 	teq	r2, ip
  40d92c:	d101      	bne.n	40d932 <__aeabi_fmul+0x13e>
  40d92e:	0242      	lsls	r2, r0, #9
  40d930:	d10f      	bne.n	40d952 <__aeabi_fmul+0x15e>
  40d932:	ea93 0f0c 	teq	r3, ip
  40d936:	d103      	bne.n	40d940 <__aeabi_fmul+0x14c>
  40d938:	024b      	lsls	r3, r1, #9
  40d93a:	bf18      	it	ne
  40d93c:	4608      	movne	r0, r1
  40d93e:	d108      	bne.n	40d952 <__aeabi_fmul+0x15e>
  40d940:	ea80 0001 	eor.w	r0, r0, r1
  40d944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40d948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40d94c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40d950:	4770      	bx	lr
  40d952:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40d956:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40d95a:	4770      	bx	lr

0040d95c <__aeabi_fdiv>:
  40d95c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40d964:	bf1e      	ittt	ne
  40d966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40d96a:	ea92 0f0c 	teqne	r2, ip
  40d96e:	ea93 0f0c 	teqne	r3, ip
  40d972:	d069      	beq.n	40da48 <__aeabi_fdiv+0xec>
  40d974:	eba2 0203 	sub.w	r2, r2, r3
  40d978:	ea80 0c01 	eor.w	ip, r0, r1
  40d97c:	0249      	lsls	r1, r1, #9
  40d97e:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40d982:	d037      	beq.n	40d9f4 <__aeabi_fdiv+0x98>
  40d984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40d988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  40d98c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  40d990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40d994:	428b      	cmp	r3, r1
  40d996:	bf38      	it	cc
  40d998:	005b      	lslcc	r3, r3, #1
  40d99a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40d99e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40d9a2:	428b      	cmp	r3, r1
  40d9a4:	bf24      	itt	cs
  40d9a6:	1a5b      	subcs	r3, r3, r1
  40d9a8:	ea40 000c 	orrcs.w	r0, r0, ip
  40d9ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  40d9b0:	bf24      	itt	cs
  40d9b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40d9b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40d9ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40d9be:	bf24      	itt	cs
  40d9c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40d9c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40d9c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40d9cc:	bf24      	itt	cs
  40d9ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40d9d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40d9d6:	011b      	lsls	r3, r3, #4
  40d9d8:	bf18      	it	ne
  40d9da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40d9de:	d1e0      	bne.n	40d9a2 <__aeabi_fdiv+0x46>
  40d9e0:	2afd      	cmp	r2, #253	; 0xfd
  40d9e2:	f63f af50 	bhi.w	40d886 <__aeabi_fmul+0x92>
  40d9e6:	428b      	cmp	r3, r1
  40d9e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40d9ec:	bf08      	it	eq
  40d9ee:	f020 0001 	biceq.w	r0, r0, #1
  40d9f2:	4770      	bx	lr
  40d9f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40d9f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40d9fc:	327f      	adds	r2, #127	; 0x7f
  40d9fe:	bfc2      	ittt	gt
  40da00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40da04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40da08:	4770      	bxgt	lr
  40da0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40da0e:	f04f 0300 	mov.w	r3, #0
  40da12:	3a01      	subs	r2, #1
  40da14:	e737      	b.n	40d886 <__aeabi_fmul+0x92>
  40da16:	f092 0f00 	teq	r2, #0
  40da1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40da1e:	bf02      	ittt	eq
  40da20:	0040      	lsleq	r0, r0, #1
  40da22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40da26:	3a01      	subeq	r2, #1
  40da28:	d0f9      	beq.n	40da1e <__aeabi_fdiv+0xc2>
  40da2a:	ea40 000c 	orr.w	r0, r0, ip
  40da2e:	f093 0f00 	teq	r3, #0
  40da32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40da36:	bf02      	ittt	eq
  40da38:	0049      	lsleq	r1, r1, #1
  40da3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40da3e:	3b01      	subeq	r3, #1
  40da40:	d0f9      	beq.n	40da36 <__aeabi_fdiv+0xda>
  40da42:	ea41 010c 	orr.w	r1, r1, ip
  40da46:	e795      	b.n	40d974 <__aeabi_fdiv+0x18>
  40da48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40da4c:	ea92 0f0c 	teq	r2, ip
  40da50:	d108      	bne.n	40da64 <__aeabi_fdiv+0x108>
  40da52:	0242      	lsls	r2, r0, #9
  40da54:	f47f af7d 	bne.w	40d952 <__aeabi_fmul+0x15e>
  40da58:	ea93 0f0c 	teq	r3, ip
  40da5c:	f47f af70 	bne.w	40d940 <__aeabi_fmul+0x14c>
  40da60:	4608      	mov	r0, r1
  40da62:	e776      	b.n	40d952 <__aeabi_fmul+0x15e>
  40da64:	ea93 0f0c 	teq	r3, ip
  40da68:	d104      	bne.n	40da74 <__aeabi_fdiv+0x118>
  40da6a:	024b      	lsls	r3, r1, #9
  40da6c:	f43f af4c 	beq.w	40d908 <__aeabi_fmul+0x114>
  40da70:	4608      	mov	r0, r1
  40da72:	e76e      	b.n	40d952 <__aeabi_fmul+0x15e>
  40da74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40da78:	bf18      	it	ne
  40da7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40da7e:	d1ca      	bne.n	40da16 <__aeabi_fdiv+0xba>
  40da80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40da84:	f47f af5c 	bne.w	40d940 <__aeabi_fmul+0x14c>
  40da88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40da8c:	f47f af3c 	bne.w	40d908 <__aeabi_fmul+0x114>
  40da90:	e75f      	b.n	40d952 <__aeabi_fmul+0x15e>
  40da92:	bf00      	nop

0040da94 <__gesf2>:
  40da94:	f04f 3cff 	mov.w	ip, #4294967295
  40da98:	e006      	b.n	40daa8 <__cmpsf2+0x4>
  40da9a:	bf00      	nop

0040da9c <__lesf2>:
  40da9c:	f04f 0c01 	mov.w	ip, #1
  40daa0:	e002      	b.n	40daa8 <__cmpsf2+0x4>
  40daa2:	bf00      	nop

0040daa4 <__cmpsf2>:
  40daa4:	f04f 0c01 	mov.w	ip, #1
  40daa8:	f84d cd04 	str.w	ip, [sp, #-4]!
  40daac:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40dab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40dab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40dab8:	bf18      	it	ne
  40daba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40dabe:	d011      	beq.n	40dae4 <__cmpsf2+0x40>
  40dac0:	b001      	add	sp, #4
  40dac2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40dac6:	bf18      	it	ne
  40dac8:	ea90 0f01 	teqne	r0, r1
  40dacc:	bf58      	it	pl
  40dace:	ebb2 0003 	subspl.w	r0, r2, r3
  40dad2:	bf88      	it	hi
  40dad4:	17c8      	asrhi	r0, r1, #31
  40dad6:	bf38      	it	cc
  40dad8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40dadc:	bf18      	it	ne
  40dade:	f040 0001 	orrne.w	r0, r0, #1
  40dae2:	4770      	bx	lr
  40dae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40dae8:	d102      	bne.n	40daf0 <__cmpsf2+0x4c>
  40daea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40daee:	d105      	bne.n	40dafc <__cmpsf2+0x58>
  40daf0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40daf4:	d1e4      	bne.n	40dac0 <__cmpsf2+0x1c>
  40daf6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40dafa:	d0e1      	beq.n	40dac0 <__cmpsf2+0x1c>
  40dafc:	f85d 0b04 	ldr.w	r0, [sp], #4
  40db00:	4770      	bx	lr
  40db02:	bf00      	nop

0040db04 <__aeabi_cfrcmple>:
  40db04:	4684      	mov	ip, r0
  40db06:	4608      	mov	r0, r1
  40db08:	4661      	mov	r1, ip
  40db0a:	e7ff      	b.n	40db0c <__aeabi_cfcmpeq>

0040db0c <__aeabi_cfcmpeq>:
  40db0c:	b50f      	push	{r0, r1, r2, r3, lr}
  40db0e:	f7ff ffc9 	bl	40daa4 <__cmpsf2>
  40db12:	2800      	cmp	r0, #0
  40db14:	bf48      	it	mi
  40db16:	f110 0f00 	cmnmi.w	r0, #0
  40db1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040db1c <__aeabi_fcmpeq>:
  40db1c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40db20:	f7ff fff4 	bl	40db0c <__aeabi_cfcmpeq>
  40db24:	bf0c      	ite	eq
  40db26:	2001      	moveq	r0, #1
  40db28:	2000      	movne	r0, #0
  40db2a:	f85d fb08 	ldr.w	pc, [sp], #8
  40db2e:	bf00      	nop

0040db30 <__aeabi_fcmplt>:
  40db30:	f84d ed08 	str.w	lr, [sp, #-8]!
  40db34:	f7ff ffea 	bl	40db0c <__aeabi_cfcmpeq>
  40db38:	bf34      	ite	cc
  40db3a:	2001      	movcc	r0, #1
  40db3c:	2000      	movcs	r0, #0
  40db3e:	f85d fb08 	ldr.w	pc, [sp], #8
  40db42:	bf00      	nop

0040db44 <__aeabi_fcmple>:
  40db44:	f84d ed08 	str.w	lr, [sp, #-8]!
  40db48:	f7ff ffe0 	bl	40db0c <__aeabi_cfcmpeq>
  40db4c:	bf94      	ite	ls
  40db4e:	2001      	movls	r0, #1
  40db50:	2000      	movhi	r0, #0
  40db52:	f85d fb08 	ldr.w	pc, [sp], #8
  40db56:	bf00      	nop

0040db58 <__aeabi_fcmpge>:
  40db58:	f84d ed08 	str.w	lr, [sp, #-8]!
  40db5c:	f7ff ffd2 	bl	40db04 <__aeabi_cfrcmple>
  40db60:	bf94      	ite	ls
  40db62:	2001      	movls	r0, #1
  40db64:	2000      	movhi	r0, #0
  40db66:	f85d fb08 	ldr.w	pc, [sp], #8
  40db6a:	bf00      	nop

0040db6c <__aeabi_fcmpgt>:
  40db6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40db70:	f7ff ffc8 	bl	40db04 <__aeabi_cfrcmple>
  40db74:	bf34      	ite	cc
  40db76:	2001      	movcc	r0, #1
  40db78:	2000      	movcs	r0, #0
  40db7a:	f85d fb08 	ldr.w	pc, [sp], #8
  40db7e:	bf00      	nop

0040db80 <__aeabi_f2iz>:
  40db80:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40db84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40db88:	d30f      	bcc.n	40dbaa <__aeabi_f2iz+0x2a>
  40db8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40db8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40db92:	d90d      	bls.n	40dbb0 <__aeabi_f2iz+0x30>
  40db94:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40db98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40db9c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40dba0:	fa23 f002 	lsr.w	r0, r3, r2
  40dba4:	bf18      	it	ne
  40dba6:	4240      	negne	r0, r0
  40dba8:	4770      	bx	lr
  40dbaa:	f04f 0000 	mov.w	r0, #0
  40dbae:	4770      	bx	lr
  40dbb0:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40dbb4:	d101      	bne.n	40dbba <__aeabi_f2iz+0x3a>
  40dbb6:	0242      	lsls	r2, r0, #9
  40dbb8:	d105      	bne.n	40dbc6 <__aeabi_f2iz+0x46>
  40dbba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40dbbe:	bf08      	it	eq
  40dbc0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40dbc4:	4770      	bx	lr
  40dbc6:	f04f 0000 	mov.w	r0, #0
  40dbca:	4770      	bx	lr

0040dbcc <__aeabi_f2uiz>:
  40dbcc:	0042      	lsls	r2, r0, #1
  40dbce:	d20e      	bcs.n	40dbee <__aeabi_f2uiz+0x22>
  40dbd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40dbd4:	d30b      	bcc.n	40dbee <__aeabi_f2uiz+0x22>
  40dbd6:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40dbda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40dbde:	d409      	bmi.n	40dbf4 <__aeabi_f2uiz+0x28>
  40dbe0:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40dbe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40dbe8:	fa23 f002 	lsr.w	r0, r3, r2
  40dbec:	4770      	bx	lr
  40dbee:	f04f 0000 	mov.w	r0, #0
  40dbf2:	4770      	bx	lr
  40dbf4:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40dbf8:	d101      	bne.n	40dbfe <__aeabi_f2uiz+0x32>
  40dbfa:	0242      	lsls	r2, r0, #9
  40dbfc:	d102      	bne.n	40dc04 <__aeabi_f2uiz+0x38>
  40dbfe:	f04f 30ff 	mov.w	r0, #4294967295
  40dc02:	4770      	bx	lr
  40dc04:	f04f 0000 	mov.w	r0, #0
  40dc08:	4770      	bx	lr
  40dc0a:	bf00      	nop

0040dc0c <__errno>:
  40dc0c:	4b01      	ldr	r3, [pc, #4]	; (40dc14 <__errno+0x8>)
  40dc0e:	6818      	ldr	r0, [r3, #0]
  40dc10:	4770      	bx	lr
  40dc12:	bf00      	nop
  40dc14:	2000004c 	.word	0x2000004c

0040dc18 <__libc_init_array>:
  40dc18:	b570      	push	{r4, r5, r6, lr}
  40dc1a:	4e0f      	ldr	r6, [pc, #60]	; (40dc58 <__libc_init_array+0x40>)
  40dc1c:	4d0f      	ldr	r5, [pc, #60]	; (40dc5c <__libc_init_array+0x44>)
  40dc1e:	1b76      	subs	r6, r6, r5
  40dc20:	10b6      	asrs	r6, r6, #2
  40dc22:	bf18      	it	ne
  40dc24:	2400      	movne	r4, #0
  40dc26:	d005      	beq.n	40dc34 <__libc_init_array+0x1c>
  40dc28:	3401      	adds	r4, #1
  40dc2a:	f855 3b04 	ldr.w	r3, [r5], #4
  40dc2e:	4798      	blx	r3
  40dc30:	42a6      	cmp	r6, r4
  40dc32:	d1f9      	bne.n	40dc28 <__libc_init_array+0x10>
  40dc34:	4e0a      	ldr	r6, [pc, #40]	; (40dc60 <__libc_init_array+0x48>)
  40dc36:	4d0b      	ldr	r5, [pc, #44]	; (40dc64 <__libc_init_array+0x4c>)
  40dc38:	1b76      	subs	r6, r6, r5
  40dc3a:	f005 ff85 	bl	413b48 <_init>
  40dc3e:	10b6      	asrs	r6, r6, #2
  40dc40:	bf18      	it	ne
  40dc42:	2400      	movne	r4, #0
  40dc44:	d006      	beq.n	40dc54 <__libc_init_array+0x3c>
  40dc46:	3401      	adds	r4, #1
  40dc48:	f855 3b04 	ldr.w	r3, [r5], #4
  40dc4c:	4798      	blx	r3
  40dc4e:	42a6      	cmp	r6, r4
  40dc50:	d1f9      	bne.n	40dc46 <__libc_init_array+0x2e>
  40dc52:	bd70      	pop	{r4, r5, r6, pc}
  40dc54:	bd70      	pop	{r4, r5, r6, pc}
  40dc56:	bf00      	nop
  40dc58:	00413b54 	.word	0x00413b54
  40dc5c:	00413b54 	.word	0x00413b54
  40dc60:	00413b5c 	.word	0x00413b5c
  40dc64:	00413b54 	.word	0x00413b54

0040dc68 <memcpy>:
  40dc68:	4684      	mov	ip, r0
  40dc6a:	ea41 0300 	orr.w	r3, r1, r0
  40dc6e:	f013 0303 	ands.w	r3, r3, #3
  40dc72:	d16d      	bne.n	40dd50 <memcpy+0xe8>
  40dc74:	3a40      	subs	r2, #64	; 0x40
  40dc76:	d341      	bcc.n	40dcfc <memcpy+0x94>
  40dc78:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc7c:	f840 3b04 	str.w	r3, [r0], #4
  40dc80:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc84:	f840 3b04 	str.w	r3, [r0], #4
  40dc88:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc8c:	f840 3b04 	str.w	r3, [r0], #4
  40dc90:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc94:	f840 3b04 	str.w	r3, [r0], #4
  40dc98:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc9c:	f840 3b04 	str.w	r3, [r0], #4
  40dca0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dca4:	f840 3b04 	str.w	r3, [r0], #4
  40dca8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcac:	f840 3b04 	str.w	r3, [r0], #4
  40dcb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcb4:	f840 3b04 	str.w	r3, [r0], #4
  40dcb8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcbc:	f840 3b04 	str.w	r3, [r0], #4
  40dcc0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcc4:	f840 3b04 	str.w	r3, [r0], #4
  40dcc8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dccc:	f840 3b04 	str.w	r3, [r0], #4
  40dcd0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcd4:	f840 3b04 	str.w	r3, [r0], #4
  40dcd8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcdc:	f840 3b04 	str.w	r3, [r0], #4
  40dce0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dce4:	f840 3b04 	str.w	r3, [r0], #4
  40dce8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcec:	f840 3b04 	str.w	r3, [r0], #4
  40dcf0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcf4:	f840 3b04 	str.w	r3, [r0], #4
  40dcf8:	3a40      	subs	r2, #64	; 0x40
  40dcfa:	d2bd      	bcs.n	40dc78 <memcpy+0x10>
  40dcfc:	3230      	adds	r2, #48	; 0x30
  40dcfe:	d311      	bcc.n	40dd24 <memcpy+0xbc>
  40dd00:	f851 3b04 	ldr.w	r3, [r1], #4
  40dd04:	f840 3b04 	str.w	r3, [r0], #4
  40dd08:	f851 3b04 	ldr.w	r3, [r1], #4
  40dd0c:	f840 3b04 	str.w	r3, [r0], #4
  40dd10:	f851 3b04 	ldr.w	r3, [r1], #4
  40dd14:	f840 3b04 	str.w	r3, [r0], #4
  40dd18:	f851 3b04 	ldr.w	r3, [r1], #4
  40dd1c:	f840 3b04 	str.w	r3, [r0], #4
  40dd20:	3a10      	subs	r2, #16
  40dd22:	d2ed      	bcs.n	40dd00 <memcpy+0x98>
  40dd24:	320c      	adds	r2, #12
  40dd26:	d305      	bcc.n	40dd34 <memcpy+0xcc>
  40dd28:	f851 3b04 	ldr.w	r3, [r1], #4
  40dd2c:	f840 3b04 	str.w	r3, [r0], #4
  40dd30:	3a04      	subs	r2, #4
  40dd32:	d2f9      	bcs.n	40dd28 <memcpy+0xc0>
  40dd34:	3204      	adds	r2, #4
  40dd36:	d008      	beq.n	40dd4a <memcpy+0xe2>
  40dd38:	07d2      	lsls	r2, r2, #31
  40dd3a:	bf1c      	itt	ne
  40dd3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40dd40:	f800 3b01 	strbne.w	r3, [r0], #1
  40dd44:	d301      	bcc.n	40dd4a <memcpy+0xe2>
  40dd46:	880b      	ldrh	r3, [r1, #0]
  40dd48:	8003      	strh	r3, [r0, #0]
  40dd4a:	4660      	mov	r0, ip
  40dd4c:	4770      	bx	lr
  40dd4e:	bf00      	nop
  40dd50:	2a08      	cmp	r2, #8
  40dd52:	d313      	bcc.n	40dd7c <memcpy+0x114>
  40dd54:	078b      	lsls	r3, r1, #30
  40dd56:	d08d      	beq.n	40dc74 <memcpy+0xc>
  40dd58:	f010 0303 	ands.w	r3, r0, #3
  40dd5c:	d08a      	beq.n	40dc74 <memcpy+0xc>
  40dd5e:	f1c3 0304 	rsb	r3, r3, #4
  40dd62:	1ad2      	subs	r2, r2, r3
  40dd64:	07db      	lsls	r3, r3, #31
  40dd66:	bf1c      	itt	ne
  40dd68:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40dd6c:	f800 3b01 	strbne.w	r3, [r0], #1
  40dd70:	d380      	bcc.n	40dc74 <memcpy+0xc>
  40dd72:	f831 3b02 	ldrh.w	r3, [r1], #2
  40dd76:	f820 3b02 	strh.w	r3, [r0], #2
  40dd7a:	e77b      	b.n	40dc74 <memcpy+0xc>
  40dd7c:	3a04      	subs	r2, #4
  40dd7e:	d3d9      	bcc.n	40dd34 <memcpy+0xcc>
  40dd80:	3a01      	subs	r2, #1
  40dd82:	f811 3b01 	ldrb.w	r3, [r1], #1
  40dd86:	f800 3b01 	strb.w	r3, [r0], #1
  40dd8a:	d2f9      	bcs.n	40dd80 <memcpy+0x118>
  40dd8c:	780b      	ldrb	r3, [r1, #0]
  40dd8e:	7003      	strb	r3, [r0, #0]
  40dd90:	784b      	ldrb	r3, [r1, #1]
  40dd92:	7043      	strb	r3, [r0, #1]
  40dd94:	788b      	ldrb	r3, [r1, #2]
  40dd96:	7083      	strb	r3, [r0, #2]
  40dd98:	4660      	mov	r0, ip
  40dd9a:	4770      	bx	lr

0040dd9c <memset>:
  40dd9c:	b470      	push	{r4, r5, r6}
  40dd9e:	0786      	lsls	r6, r0, #30
  40dda0:	d046      	beq.n	40de30 <memset+0x94>
  40dda2:	1e54      	subs	r4, r2, #1
  40dda4:	2a00      	cmp	r2, #0
  40dda6:	d041      	beq.n	40de2c <memset+0x90>
  40dda8:	b2ca      	uxtb	r2, r1
  40ddaa:	4603      	mov	r3, r0
  40ddac:	e002      	b.n	40ddb4 <memset+0x18>
  40ddae:	f114 34ff 	adds.w	r4, r4, #4294967295
  40ddb2:	d33b      	bcc.n	40de2c <memset+0x90>
  40ddb4:	f803 2b01 	strb.w	r2, [r3], #1
  40ddb8:	079d      	lsls	r5, r3, #30
  40ddba:	d1f8      	bne.n	40ddae <memset+0x12>
  40ddbc:	2c03      	cmp	r4, #3
  40ddbe:	d92e      	bls.n	40de1e <memset+0x82>
  40ddc0:	b2cd      	uxtb	r5, r1
  40ddc2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40ddc6:	2c0f      	cmp	r4, #15
  40ddc8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40ddcc:	d919      	bls.n	40de02 <memset+0x66>
  40ddce:	f103 0210 	add.w	r2, r3, #16
  40ddd2:	4626      	mov	r6, r4
  40ddd4:	3e10      	subs	r6, #16
  40ddd6:	2e0f      	cmp	r6, #15
  40ddd8:	f842 5c10 	str.w	r5, [r2, #-16]
  40dddc:	f842 5c0c 	str.w	r5, [r2, #-12]
  40dde0:	f842 5c08 	str.w	r5, [r2, #-8]
  40dde4:	f842 5c04 	str.w	r5, [r2, #-4]
  40dde8:	f102 0210 	add.w	r2, r2, #16
  40ddec:	d8f2      	bhi.n	40ddd4 <memset+0x38>
  40ddee:	f1a4 0210 	sub.w	r2, r4, #16
  40ddf2:	f022 020f 	bic.w	r2, r2, #15
  40ddf6:	f004 040f 	and.w	r4, r4, #15
  40ddfa:	3210      	adds	r2, #16
  40ddfc:	2c03      	cmp	r4, #3
  40ddfe:	4413      	add	r3, r2
  40de00:	d90d      	bls.n	40de1e <memset+0x82>
  40de02:	461e      	mov	r6, r3
  40de04:	4622      	mov	r2, r4
  40de06:	3a04      	subs	r2, #4
  40de08:	2a03      	cmp	r2, #3
  40de0a:	f846 5b04 	str.w	r5, [r6], #4
  40de0e:	d8fa      	bhi.n	40de06 <memset+0x6a>
  40de10:	1f22      	subs	r2, r4, #4
  40de12:	f022 0203 	bic.w	r2, r2, #3
  40de16:	3204      	adds	r2, #4
  40de18:	4413      	add	r3, r2
  40de1a:	f004 0403 	and.w	r4, r4, #3
  40de1e:	b12c      	cbz	r4, 40de2c <memset+0x90>
  40de20:	b2c9      	uxtb	r1, r1
  40de22:	441c      	add	r4, r3
  40de24:	f803 1b01 	strb.w	r1, [r3], #1
  40de28:	429c      	cmp	r4, r3
  40de2a:	d1fb      	bne.n	40de24 <memset+0x88>
  40de2c:	bc70      	pop	{r4, r5, r6}
  40de2e:	4770      	bx	lr
  40de30:	4614      	mov	r4, r2
  40de32:	4603      	mov	r3, r0
  40de34:	e7c2      	b.n	40ddbc <memset+0x20>
  40de36:	bf00      	nop

0040de38 <sprintf>:
  40de38:	b40e      	push	{r1, r2, r3}
  40de3a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40de3c:	b09c      	sub	sp, #112	; 0x70
  40de3e:	ab21      	add	r3, sp, #132	; 0x84
  40de40:	490f      	ldr	r1, [pc, #60]	; (40de80 <sprintf+0x48>)
  40de42:	f853 2b04 	ldr.w	r2, [r3], #4
  40de46:	9301      	str	r3, [sp, #4]
  40de48:	4605      	mov	r5, r0
  40de4a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40de4e:	6808      	ldr	r0, [r1, #0]
  40de50:	9502      	str	r5, [sp, #8]
  40de52:	f44f 7702 	mov.w	r7, #520	; 0x208
  40de56:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40de5a:	a902      	add	r1, sp, #8
  40de5c:	9506      	str	r5, [sp, #24]
  40de5e:	f8ad 7014 	strh.w	r7, [sp, #20]
  40de62:	9404      	str	r4, [sp, #16]
  40de64:	9407      	str	r4, [sp, #28]
  40de66:	f8ad 6016 	strh.w	r6, [sp, #22]
  40de6a:	f000 f897 	bl	40df9c <_svfprintf_r>
  40de6e:	9b02      	ldr	r3, [sp, #8]
  40de70:	2200      	movs	r2, #0
  40de72:	701a      	strb	r2, [r3, #0]
  40de74:	b01c      	add	sp, #112	; 0x70
  40de76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40de7a:	b003      	add	sp, #12
  40de7c:	4770      	bx	lr
  40de7e:	bf00      	nop
  40de80:	2000004c 	.word	0x2000004c
	...

0040dec0 <strlen>:
  40dec0:	f890 f000 	pld	[r0]
  40dec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40dec8:	f020 0107 	bic.w	r1, r0, #7
  40decc:	f06f 0c00 	mvn.w	ip, #0
  40ded0:	f010 0407 	ands.w	r4, r0, #7
  40ded4:	f891 f020 	pld	[r1, #32]
  40ded8:	f040 8049 	bne.w	40df6e <strlen+0xae>
  40dedc:	f04f 0400 	mov.w	r4, #0
  40dee0:	f06f 0007 	mvn.w	r0, #7
  40dee4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40dee8:	f891 f040 	pld	[r1, #64]	; 0x40
  40deec:	f100 0008 	add.w	r0, r0, #8
  40def0:	fa82 f24c 	uadd8	r2, r2, ip
  40def4:	faa4 f28c 	sel	r2, r4, ip
  40def8:	fa83 f34c 	uadd8	r3, r3, ip
  40defc:	faa2 f38c 	sel	r3, r2, ip
  40df00:	bb4b      	cbnz	r3, 40df56 <strlen+0x96>
  40df02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40df06:	fa82 f24c 	uadd8	r2, r2, ip
  40df0a:	f100 0008 	add.w	r0, r0, #8
  40df0e:	faa4 f28c 	sel	r2, r4, ip
  40df12:	fa83 f34c 	uadd8	r3, r3, ip
  40df16:	faa2 f38c 	sel	r3, r2, ip
  40df1a:	b9e3      	cbnz	r3, 40df56 <strlen+0x96>
  40df1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40df20:	fa82 f24c 	uadd8	r2, r2, ip
  40df24:	f100 0008 	add.w	r0, r0, #8
  40df28:	faa4 f28c 	sel	r2, r4, ip
  40df2c:	fa83 f34c 	uadd8	r3, r3, ip
  40df30:	faa2 f38c 	sel	r3, r2, ip
  40df34:	b97b      	cbnz	r3, 40df56 <strlen+0x96>
  40df36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40df3a:	f101 0120 	add.w	r1, r1, #32
  40df3e:	fa82 f24c 	uadd8	r2, r2, ip
  40df42:	f100 0008 	add.w	r0, r0, #8
  40df46:	faa4 f28c 	sel	r2, r4, ip
  40df4a:	fa83 f34c 	uadd8	r3, r3, ip
  40df4e:	faa2 f38c 	sel	r3, r2, ip
  40df52:	2b00      	cmp	r3, #0
  40df54:	d0c6      	beq.n	40dee4 <strlen+0x24>
  40df56:	2a00      	cmp	r2, #0
  40df58:	bf04      	itt	eq
  40df5a:	3004      	addeq	r0, #4
  40df5c:	461a      	moveq	r2, r3
  40df5e:	ba12      	rev	r2, r2
  40df60:	fab2 f282 	clz	r2, r2
  40df64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40df68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40df6c:	4770      	bx	lr
  40df6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40df72:	f004 0503 	and.w	r5, r4, #3
  40df76:	f1c4 0000 	rsb	r0, r4, #0
  40df7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40df7e:	f014 0f04 	tst.w	r4, #4
  40df82:	f891 f040 	pld	[r1, #64]	; 0x40
  40df86:	fa0c f505 	lsl.w	r5, ip, r5
  40df8a:	ea62 0205 	orn	r2, r2, r5
  40df8e:	bf1c      	itt	ne
  40df90:	ea63 0305 	ornne	r3, r3, r5
  40df94:	4662      	movne	r2, ip
  40df96:	f04f 0400 	mov.w	r4, #0
  40df9a:	e7a9      	b.n	40def0 <strlen+0x30>

0040df9c <_svfprintf_r>:
  40df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dfa0:	b0c3      	sub	sp, #268	; 0x10c
  40dfa2:	460c      	mov	r4, r1
  40dfa4:	910b      	str	r1, [sp, #44]	; 0x2c
  40dfa6:	4692      	mov	sl, r2
  40dfa8:	930f      	str	r3, [sp, #60]	; 0x3c
  40dfaa:	900c      	str	r0, [sp, #48]	; 0x30
  40dfac:	f002 fa0c 	bl	4103c8 <_localeconv_r>
  40dfb0:	6803      	ldr	r3, [r0, #0]
  40dfb2:	931a      	str	r3, [sp, #104]	; 0x68
  40dfb4:	4618      	mov	r0, r3
  40dfb6:	f7ff ff83 	bl	40dec0 <strlen>
  40dfba:	89a3      	ldrh	r3, [r4, #12]
  40dfbc:	9019      	str	r0, [sp, #100]	; 0x64
  40dfbe:	0619      	lsls	r1, r3, #24
  40dfc0:	d503      	bpl.n	40dfca <_svfprintf_r+0x2e>
  40dfc2:	6923      	ldr	r3, [r4, #16]
  40dfc4:	2b00      	cmp	r3, #0
  40dfc6:	f001 8003 	beq.w	40efd0 <_svfprintf_r+0x1034>
  40dfca:	2300      	movs	r3, #0
  40dfcc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40dfd0:	9313      	str	r3, [sp, #76]	; 0x4c
  40dfd2:	9315      	str	r3, [sp, #84]	; 0x54
  40dfd4:	9314      	str	r3, [sp, #80]	; 0x50
  40dfd6:	9327      	str	r3, [sp, #156]	; 0x9c
  40dfd8:	9326      	str	r3, [sp, #152]	; 0x98
  40dfda:	9318      	str	r3, [sp, #96]	; 0x60
  40dfdc:	931b      	str	r3, [sp, #108]	; 0x6c
  40dfde:	9309      	str	r3, [sp, #36]	; 0x24
  40dfe0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40dfe4:	46c8      	mov	r8, r9
  40dfe6:	9316      	str	r3, [sp, #88]	; 0x58
  40dfe8:	9317      	str	r3, [sp, #92]	; 0x5c
  40dfea:	f89a 3000 	ldrb.w	r3, [sl]
  40dfee:	4654      	mov	r4, sl
  40dff0:	b1e3      	cbz	r3, 40e02c <_svfprintf_r+0x90>
  40dff2:	2b25      	cmp	r3, #37	; 0x25
  40dff4:	d102      	bne.n	40dffc <_svfprintf_r+0x60>
  40dff6:	e019      	b.n	40e02c <_svfprintf_r+0x90>
  40dff8:	2b25      	cmp	r3, #37	; 0x25
  40dffa:	d003      	beq.n	40e004 <_svfprintf_r+0x68>
  40dffc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40e000:	2b00      	cmp	r3, #0
  40e002:	d1f9      	bne.n	40dff8 <_svfprintf_r+0x5c>
  40e004:	eba4 050a 	sub.w	r5, r4, sl
  40e008:	b185      	cbz	r5, 40e02c <_svfprintf_r+0x90>
  40e00a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e00c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40e00e:	f8c8 a000 	str.w	sl, [r8]
  40e012:	3301      	adds	r3, #1
  40e014:	442a      	add	r2, r5
  40e016:	2b07      	cmp	r3, #7
  40e018:	f8c8 5004 	str.w	r5, [r8, #4]
  40e01c:	9227      	str	r2, [sp, #156]	; 0x9c
  40e01e:	9326      	str	r3, [sp, #152]	; 0x98
  40e020:	dc7f      	bgt.n	40e122 <_svfprintf_r+0x186>
  40e022:	f108 0808 	add.w	r8, r8, #8
  40e026:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e028:	442b      	add	r3, r5
  40e02a:	9309      	str	r3, [sp, #36]	; 0x24
  40e02c:	7823      	ldrb	r3, [r4, #0]
  40e02e:	2b00      	cmp	r3, #0
  40e030:	d07f      	beq.n	40e132 <_svfprintf_r+0x196>
  40e032:	2300      	movs	r3, #0
  40e034:	461a      	mov	r2, r3
  40e036:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40e03a:	4619      	mov	r1, r3
  40e03c:	930d      	str	r3, [sp, #52]	; 0x34
  40e03e:	469b      	mov	fp, r3
  40e040:	f04f 30ff 	mov.w	r0, #4294967295
  40e044:	7863      	ldrb	r3, [r4, #1]
  40e046:	900a      	str	r0, [sp, #40]	; 0x28
  40e048:	f104 0a01 	add.w	sl, r4, #1
  40e04c:	f10a 0a01 	add.w	sl, sl, #1
  40e050:	f1a3 0020 	sub.w	r0, r3, #32
  40e054:	2858      	cmp	r0, #88	; 0x58
  40e056:	f200 83c1 	bhi.w	40e7dc <_svfprintf_r+0x840>
  40e05a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40e05e:	0238      	.short	0x0238
  40e060:	03bf03bf 	.word	0x03bf03bf
  40e064:	03bf0240 	.word	0x03bf0240
  40e068:	03bf03bf 	.word	0x03bf03bf
  40e06c:	03bf03bf 	.word	0x03bf03bf
  40e070:	024503bf 	.word	0x024503bf
  40e074:	03bf0203 	.word	0x03bf0203
  40e078:	026b005d 	.word	0x026b005d
  40e07c:	028603bf 	.word	0x028603bf
  40e080:	039d039d 	.word	0x039d039d
  40e084:	039d039d 	.word	0x039d039d
  40e088:	039d039d 	.word	0x039d039d
  40e08c:	039d039d 	.word	0x039d039d
  40e090:	03bf039d 	.word	0x03bf039d
  40e094:	03bf03bf 	.word	0x03bf03bf
  40e098:	03bf03bf 	.word	0x03bf03bf
  40e09c:	03bf03bf 	.word	0x03bf03bf
  40e0a0:	03bf03bf 	.word	0x03bf03bf
  40e0a4:	033703bf 	.word	0x033703bf
  40e0a8:	03bf0357 	.word	0x03bf0357
  40e0ac:	03bf0357 	.word	0x03bf0357
  40e0b0:	03bf03bf 	.word	0x03bf03bf
  40e0b4:	039803bf 	.word	0x039803bf
  40e0b8:	03bf03bf 	.word	0x03bf03bf
  40e0bc:	03bf03ad 	.word	0x03bf03ad
  40e0c0:	03bf03bf 	.word	0x03bf03bf
  40e0c4:	03bf03bf 	.word	0x03bf03bf
  40e0c8:	03bf0259 	.word	0x03bf0259
  40e0cc:	031e03bf 	.word	0x031e03bf
  40e0d0:	03bf03bf 	.word	0x03bf03bf
  40e0d4:	03bf03bf 	.word	0x03bf03bf
  40e0d8:	03bf03bf 	.word	0x03bf03bf
  40e0dc:	03bf03bf 	.word	0x03bf03bf
  40e0e0:	03bf03bf 	.word	0x03bf03bf
  40e0e4:	02db02c6 	.word	0x02db02c6
  40e0e8:	03570357 	.word	0x03570357
  40e0ec:	028b0357 	.word	0x028b0357
  40e0f0:	03bf02db 	.word	0x03bf02db
  40e0f4:	029003bf 	.word	0x029003bf
  40e0f8:	029d03bf 	.word	0x029d03bf
  40e0fc:	02b401cc 	.word	0x02b401cc
  40e100:	03bf0208 	.word	0x03bf0208
  40e104:	03bf01e1 	.word	0x03bf01e1
  40e108:	03bf007e 	.word	0x03bf007e
  40e10c:	020d03bf 	.word	0x020d03bf
  40e110:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e112:	930f      	str	r3, [sp, #60]	; 0x3c
  40e114:	4240      	negs	r0, r0
  40e116:	900d      	str	r0, [sp, #52]	; 0x34
  40e118:	f04b 0b04 	orr.w	fp, fp, #4
  40e11c:	f89a 3000 	ldrb.w	r3, [sl]
  40e120:	e794      	b.n	40e04c <_svfprintf_r+0xb0>
  40e122:	aa25      	add	r2, sp, #148	; 0x94
  40e124:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e126:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e128:	f002 ff7a 	bl	411020 <__ssprint_r>
  40e12c:	b940      	cbnz	r0, 40e140 <_svfprintf_r+0x1a4>
  40e12e:	46c8      	mov	r8, r9
  40e130:	e779      	b.n	40e026 <_svfprintf_r+0x8a>
  40e132:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40e134:	b123      	cbz	r3, 40e140 <_svfprintf_r+0x1a4>
  40e136:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e138:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e13a:	aa25      	add	r2, sp, #148	; 0x94
  40e13c:	f002 ff70 	bl	411020 <__ssprint_r>
  40e140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e142:	899b      	ldrh	r3, [r3, #12]
  40e144:	f013 0f40 	tst.w	r3, #64	; 0x40
  40e148:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e14a:	bf18      	it	ne
  40e14c:	f04f 33ff 	movne.w	r3, #4294967295
  40e150:	9309      	str	r3, [sp, #36]	; 0x24
  40e152:	9809      	ldr	r0, [sp, #36]	; 0x24
  40e154:	b043      	add	sp, #268	; 0x10c
  40e156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e15a:	f01b 0f20 	tst.w	fp, #32
  40e15e:	9311      	str	r3, [sp, #68]	; 0x44
  40e160:	f040 81dd 	bne.w	40e51e <_svfprintf_r+0x582>
  40e164:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40e166:	f01b 0f10 	tst.w	fp, #16
  40e16a:	4613      	mov	r3, r2
  40e16c:	f040 856e 	bne.w	40ec4c <_svfprintf_r+0xcb0>
  40e170:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40e174:	f000 856a 	beq.w	40ec4c <_svfprintf_r+0xcb0>
  40e178:	8814      	ldrh	r4, [r2, #0]
  40e17a:	3204      	adds	r2, #4
  40e17c:	2500      	movs	r5, #0
  40e17e:	2301      	movs	r3, #1
  40e180:	920f      	str	r2, [sp, #60]	; 0x3c
  40e182:	2700      	movs	r7, #0
  40e184:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40e188:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e18a:	1c4a      	adds	r2, r1, #1
  40e18c:	f000 8265 	beq.w	40e65a <_svfprintf_r+0x6be>
  40e190:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40e194:	9207      	str	r2, [sp, #28]
  40e196:	ea54 0205 	orrs.w	r2, r4, r5
  40e19a:	f040 8264 	bne.w	40e666 <_svfprintf_r+0x6ca>
  40e19e:	2900      	cmp	r1, #0
  40e1a0:	f040 843c 	bne.w	40ea1c <_svfprintf_r+0xa80>
  40e1a4:	2b00      	cmp	r3, #0
  40e1a6:	f040 84d7 	bne.w	40eb58 <_svfprintf_r+0xbbc>
  40e1aa:	f01b 0301 	ands.w	r3, fp, #1
  40e1ae:	930e      	str	r3, [sp, #56]	; 0x38
  40e1b0:	f000 8604 	beq.w	40edbc <_svfprintf_r+0xe20>
  40e1b4:	ae42      	add	r6, sp, #264	; 0x108
  40e1b6:	2330      	movs	r3, #48	; 0x30
  40e1b8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40e1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e1be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40e1c0:	4293      	cmp	r3, r2
  40e1c2:	bfb8      	it	lt
  40e1c4:	4613      	movlt	r3, r2
  40e1c6:	9308      	str	r3, [sp, #32]
  40e1c8:	2300      	movs	r3, #0
  40e1ca:	9312      	str	r3, [sp, #72]	; 0x48
  40e1cc:	b117      	cbz	r7, 40e1d4 <_svfprintf_r+0x238>
  40e1ce:	9b08      	ldr	r3, [sp, #32]
  40e1d0:	3301      	adds	r3, #1
  40e1d2:	9308      	str	r3, [sp, #32]
  40e1d4:	9b07      	ldr	r3, [sp, #28]
  40e1d6:	f013 0302 	ands.w	r3, r3, #2
  40e1da:	9310      	str	r3, [sp, #64]	; 0x40
  40e1dc:	d002      	beq.n	40e1e4 <_svfprintf_r+0x248>
  40e1de:	9b08      	ldr	r3, [sp, #32]
  40e1e0:	3302      	adds	r3, #2
  40e1e2:	9308      	str	r3, [sp, #32]
  40e1e4:	9b07      	ldr	r3, [sp, #28]
  40e1e6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40e1ea:	f040 830e 	bne.w	40e80a <_svfprintf_r+0x86e>
  40e1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e1f0:	9a08      	ldr	r2, [sp, #32]
  40e1f2:	eba3 0b02 	sub.w	fp, r3, r2
  40e1f6:	f1bb 0f00 	cmp.w	fp, #0
  40e1fa:	f340 8306 	ble.w	40e80a <_svfprintf_r+0x86e>
  40e1fe:	f1bb 0f10 	cmp.w	fp, #16
  40e202:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40e204:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40e206:	dd29      	ble.n	40e25c <_svfprintf_r+0x2c0>
  40e208:	4643      	mov	r3, r8
  40e20a:	4621      	mov	r1, r4
  40e20c:	46a8      	mov	r8, r5
  40e20e:	2710      	movs	r7, #16
  40e210:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40e212:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40e214:	e006      	b.n	40e224 <_svfprintf_r+0x288>
  40e216:	f1ab 0b10 	sub.w	fp, fp, #16
  40e21a:	f1bb 0f10 	cmp.w	fp, #16
  40e21e:	f103 0308 	add.w	r3, r3, #8
  40e222:	dd18      	ble.n	40e256 <_svfprintf_r+0x2ba>
  40e224:	3201      	adds	r2, #1
  40e226:	48b7      	ldr	r0, [pc, #732]	; (40e504 <_svfprintf_r+0x568>)
  40e228:	9226      	str	r2, [sp, #152]	; 0x98
  40e22a:	3110      	adds	r1, #16
  40e22c:	2a07      	cmp	r2, #7
  40e22e:	9127      	str	r1, [sp, #156]	; 0x9c
  40e230:	e883 0081 	stmia.w	r3, {r0, r7}
  40e234:	ddef      	ble.n	40e216 <_svfprintf_r+0x27a>
  40e236:	aa25      	add	r2, sp, #148	; 0x94
  40e238:	4629      	mov	r1, r5
  40e23a:	4620      	mov	r0, r4
  40e23c:	f002 fef0 	bl	411020 <__ssprint_r>
  40e240:	2800      	cmp	r0, #0
  40e242:	f47f af7d 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40e246:	f1ab 0b10 	sub.w	fp, fp, #16
  40e24a:	f1bb 0f10 	cmp.w	fp, #16
  40e24e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40e250:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40e252:	464b      	mov	r3, r9
  40e254:	dce6      	bgt.n	40e224 <_svfprintf_r+0x288>
  40e256:	4645      	mov	r5, r8
  40e258:	460c      	mov	r4, r1
  40e25a:	4698      	mov	r8, r3
  40e25c:	3201      	adds	r2, #1
  40e25e:	4ba9      	ldr	r3, [pc, #676]	; (40e504 <_svfprintf_r+0x568>)
  40e260:	9226      	str	r2, [sp, #152]	; 0x98
  40e262:	445c      	add	r4, fp
  40e264:	2a07      	cmp	r2, #7
  40e266:	9427      	str	r4, [sp, #156]	; 0x9c
  40e268:	e888 0808 	stmia.w	r8, {r3, fp}
  40e26c:	f300 8498 	bgt.w	40eba0 <_svfprintf_r+0xc04>
  40e270:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40e274:	f108 0808 	add.w	r8, r8, #8
  40e278:	b177      	cbz	r7, 40e298 <_svfprintf_r+0x2fc>
  40e27a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e27c:	3301      	adds	r3, #1
  40e27e:	3401      	adds	r4, #1
  40e280:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40e284:	2201      	movs	r2, #1
  40e286:	2b07      	cmp	r3, #7
  40e288:	9427      	str	r4, [sp, #156]	; 0x9c
  40e28a:	9326      	str	r3, [sp, #152]	; 0x98
  40e28c:	e888 0006 	stmia.w	r8, {r1, r2}
  40e290:	f300 83db 	bgt.w	40ea4a <_svfprintf_r+0xaae>
  40e294:	f108 0808 	add.w	r8, r8, #8
  40e298:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e29a:	b16b      	cbz	r3, 40e2b8 <_svfprintf_r+0x31c>
  40e29c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e29e:	3301      	adds	r3, #1
  40e2a0:	3402      	adds	r4, #2
  40e2a2:	a91e      	add	r1, sp, #120	; 0x78
  40e2a4:	2202      	movs	r2, #2
  40e2a6:	2b07      	cmp	r3, #7
  40e2a8:	9427      	str	r4, [sp, #156]	; 0x9c
  40e2aa:	9326      	str	r3, [sp, #152]	; 0x98
  40e2ac:	e888 0006 	stmia.w	r8, {r1, r2}
  40e2b0:	f300 83d6 	bgt.w	40ea60 <_svfprintf_r+0xac4>
  40e2b4:	f108 0808 	add.w	r8, r8, #8
  40e2b8:	2d80      	cmp	r5, #128	; 0x80
  40e2ba:	f000 8315 	beq.w	40e8e8 <_svfprintf_r+0x94c>
  40e2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e2c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40e2c2:	1a9f      	subs	r7, r3, r2
  40e2c4:	2f00      	cmp	r7, #0
  40e2c6:	dd36      	ble.n	40e336 <_svfprintf_r+0x39a>
  40e2c8:	2f10      	cmp	r7, #16
  40e2ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e2cc:	4d8e      	ldr	r5, [pc, #568]	; (40e508 <_svfprintf_r+0x56c>)
  40e2ce:	dd27      	ble.n	40e320 <_svfprintf_r+0x384>
  40e2d0:	4642      	mov	r2, r8
  40e2d2:	4621      	mov	r1, r4
  40e2d4:	46b0      	mov	r8, r6
  40e2d6:	f04f 0b10 	mov.w	fp, #16
  40e2da:	462e      	mov	r6, r5
  40e2dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40e2de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40e2e0:	e004      	b.n	40e2ec <_svfprintf_r+0x350>
  40e2e2:	3f10      	subs	r7, #16
  40e2e4:	2f10      	cmp	r7, #16
  40e2e6:	f102 0208 	add.w	r2, r2, #8
  40e2ea:	dd15      	ble.n	40e318 <_svfprintf_r+0x37c>
  40e2ec:	3301      	adds	r3, #1
  40e2ee:	3110      	adds	r1, #16
  40e2f0:	2b07      	cmp	r3, #7
  40e2f2:	9127      	str	r1, [sp, #156]	; 0x9c
  40e2f4:	9326      	str	r3, [sp, #152]	; 0x98
  40e2f6:	e882 0840 	stmia.w	r2, {r6, fp}
  40e2fa:	ddf2      	ble.n	40e2e2 <_svfprintf_r+0x346>
  40e2fc:	aa25      	add	r2, sp, #148	; 0x94
  40e2fe:	4629      	mov	r1, r5
  40e300:	4620      	mov	r0, r4
  40e302:	f002 fe8d 	bl	411020 <__ssprint_r>
  40e306:	2800      	cmp	r0, #0
  40e308:	f47f af1a 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40e30c:	3f10      	subs	r7, #16
  40e30e:	2f10      	cmp	r7, #16
  40e310:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40e312:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e314:	464a      	mov	r2, r9
  40e316:	dce9      	bgt.n	40e2ec <_svfprintf_r+0x350>
  40e318:	4635      	mov	r5, r6
  40e31a:	460c      	mov	r4, r1
  40e31c:	4646      	mov	r6, r8
  40e31e:	4690      	mov	r8, r2
  40e320:	3301      	adds	r3, #1
  40e322:	443c      	add	r4, r7
  40e324:	2b07      	cmp	r3, #7
  40e326:	9427      	str	r4, [sp, #156]	; 0x9c
  40e328:	9326      	str	r3, [sp, #152]	; 0x98
  40e32a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40e32e:	f300 8381 	bgt.w	40ea34 <_svfprintf_r+0xa98>
  40e332:	f108 0808 	add.w	r8, r8, #8
  40e336:	9b07      	ldr	r3, [sp, #28]
  40e338:	05df      	lsls	r7, r3, #23
  40e33a:	f100 8268 	bmi.w	40e80e <_svfprintf_r+0x872>
  40e33e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e340:	990e      	ldr	r1, [sp, #56]	; 0x38
  40e342:	f8c8 6000 	str.w	r6, [r8]
  40e346:	3301      	adds	r3, #1
  40e348:	440c      	add	r4, r1
  40e34a:	2b07      	cmp	r3, #7
  40e34c:	9427      	str	r4, [sp, #156]	; 0x9c
  40e34e:	f8c8 1004 	str.w	r1, [r8, #4]
  40e352:	9326      	str	r3, [sp, #152]	; 0x98
  40e354:	f300 834d 	bgt.w	40e9f2 <_svfprintf_r+0xa56>
  40e358:	f108 0808 	add.w	r8, r8, #8
  40e35c:	9b07      	ldr	r3, [sp, #28]
  40e35e:	075b      	lsls	r3, r3, #29
  40e360:	d53a      	bpl.n	40e3d8 <_svfprintf_r+0x43c>
  40e362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e364:	9a08      	ldr	r2, [sp, #32]
  40e366:	1a9d      	subs	r5, r3, r2
  40e368:	2d00      	cmp	r5, #0
  40e36a:	dd35      	ble.n	40e3d8 <_svfprintf_r+0x43c>
  40e36c:	2d10      	cmp	r5, #16
  40e36e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e370:	dd20      	ble.n	40e3b4 <_svfprintf_r+0x418>
  40e372:	2610      	movs	r6, #16
  40e374:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40e376:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40e37a:	e004      	b.n	40e386 <_svfprintf_r+0x3ea>
  40e37c:	3d10      	subs	r5, #16
  40e37e:	2d10      	cmp	r5, #16
  40e380:	f108 0808 	add.w	r8, r8, #8
  40e384:	dd16      	ble.n	40e3b4 <_svfprintf_r+0x418>
  40e386:	3301      	adds	r3, #1
  40e388:	4a5e      	ldr	r2, [pc, #376]	; (40e504 <_svfprintf_r+0x568>)
  40e38a:	9326      	str	r3, [sp, #152]	; 0x98
  40e38c:	3410      	adds	r4, #16
  40e38e:	2b07      	cmp	r3, #7
  40e390:	9427      	str	r4, [sp, #156]	; 0x9c
  40e392:	e888 0044 	stmia.w	r8, {r2, r6}
  40e396:	ddf1      	ble.n	40e37c <_svfprintf_r+0x3e0>
  40e398:	aa25      	add	r2, sp, #148	; 0x94
  40e39a:	4659      	mov	r1, fp
  40e39c:	4638      	mov	r0, r7
  40e39e:	f002 fe3f 	bl	411020 <__ssprint_r>
  40e3a2:	2800      	cmp	r0, #0
  40e3a4:	f47f aecc 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40e3a8:	3d10      	subs	r5, #16
  40e3aa:	2d10      	cmp	r5, #16
  40e3ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40e3ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e3b0:	46c8      	mov	r8, r9
  40e3b2:	dce8      	bgt.n	40e386 <_svfprintf_r+0x3ea>
  40e3b4:	3301      	adds	r3, #1
  40e3b6:	4a53      	ldr	r2, [pc, #332]	; (40e504 <_svfprintf_r+0x568>)
  40e3b8:	9326      	str	r3, [sp, #152]	; 0x98
  40e3ba:	442c      	add	r4, r5
  40e3bc:	2b07      	cmp	r3, #7
  40e3be:	9427      	str	r4, [sp, #156]	; 0x9c
  40e3c0:	e888 0024 	stmia.w	r8, {r2, r5}
  40e3c4:	dd08      	ble.n	40e3d8 <_svfprintf_r+0x43c>
  40e3c6:	aa25      	add	r2, sp, #148	; 0x94
  40e3c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e3ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e3cc:	f002 fe28 	bl	411020 <__ssprint_r>
  40e3d0:	2800      	cmp	r0, #0
  40e3d2:	f47f aeb5 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40e3d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40e3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e3da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e3dc:	9908      	ldr	r1, [sp, #32]
  40e3de:	428a      	cmp	r2, r1
  40e3e0:	bfac      	ite	ge
  40e3e2:	189b      	addge	r3, r3, r2
  40e3e4:	185b      	addlt	r3, r3, r1
  40e3e6:	9309      	str	r3, [sp, #36]	; 0x24
  40e3e8:	2c00      	cmp	r4, #0
  40e3ea:	f040 830d 	bne.w	40ea08 <_svfprintf_r+0xa6c>
  40e3ee:	2300      	movs	r3, #0
  40e3f0:	9326      	str	r3, [sp, #152]	; 0x98
  40e3f2:	46c8      	mov	r8, r9
  40e3f4:	e5f9      	b.n	40dfea <_svfprintf_r+0x4e>
  40e3f6:	9311      	str	r3, [sp, #68]	; 0x44
  40e3f8:	f01b 0320 	ands.w	r3, fp, #32
  40e3fc:	f040 81e3 	bne.w	40e7c6 <_svfprintf_r+0x82a>
  40e400:	f01b 0210 	ands.w	r2, fp, #16
  40e404:	f040 842e 	bne.w	40ec64 <_svfprintf_r+0xcc8>
  40e408:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40e40c:	f000 842a 	beq.w	40ec64 <_svfprintf_r+0xcc8>
  40e410:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40e412:	4613      	mov	r3, r2
  40e414:	460a      	mov	r2, r1
  40e416:	3204      	adds	r2, #4
  40e418:	880c      	ldrh	r4, [r1, #0]
  40e41a:	920f      	str	r2, [sp, #60]	; 0x3c
  40e41c:	2500      	movs	r5, #0
  40e41e:	e6b0      	b.n	40e182 <_svfprintf_r+0x1e6>
  40e420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40e422:	9311      	str	r3, [sp, #68]	; 0x44
  40e424:	6816      	ldr	r6, [r2, #0]
  40e426:	2400      	movs	r4, #0
  40e428:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40e42c:	1d15      	adds	r5, r2, #4
  40e42e:	2e00      	cmp	r6, #0
  40e430:	f000 86a7 	beq.w	40f182 <_svfprintf_r+0x11e6>
  40e434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40e436:	1c53      	adds	r3, r2, #1
  40e438:	f000 8609 	beq.w	40f04e <_svfprintf_r+0x10b2>
  40e43c:	4621      	mov	r1, r4
  40e43e:	4630      	mov	r0, r6
  40e440:	f002 fa86 	bl	410950 <memchr>
  40e444:	2800      	cmp	r0, #0
  40e446:	f000 86e1 	beq.w	40f20c <_svfprintf_r+0x1270>
  40e44a:	1b83      	subs	r3, r0, r6
  40e44c:	930e      	str	r3, [sp, #56]	; 0x38
  40e44e:	940a      	str	r4, [sp, #40]	; 0x28
  40e450:	950f      	str	r5, [sp, #60]	; 0x3c
  40e452:	f8cd b01c 	str.w	fp, [sp, #28]
  40e456:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40e45a:	9308      	str	r3, [sp, #32]
  40e45c:	9412      	str	r4, [sp, #72]	; 0x48
  40e45e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40e462:	e6b3      	b.n	40e1cc <_svfprintf_r+0x230>
  40e464:	f89a 3000 	ldrb.w	r3, [sl]
  40e468:	2201      	movs	r2, #1
  40e46a:	212b      	movs	r1, #43	; 0x2b
  40e46c:	e5ee      	b.n	40e04c <_svfprintf_r+0xb0>
  40e46e:	f04b 0b20 	orr.w	fp, fp, #32
  40e472:	f89a 3000 	ldrb.w	r3, [sl]
  40e476:	e5e9      	b.n	40e04c <_svfprintf_r+0xb0>
  40e478:	9311      	str	r3, [sp, #68]	; 0x44
  40e47a:	2a00      	cmp	r2, #0
  40e47c:	f040 8795 	bne.w	40f3aa <_svfprintf_r+0x140e>
  40e480:	4b22      	ldr	r3, [pc, #136]	; (40e50c <_svfprintf_r+0x570>)
  40e482:	9318      	str	r3, [sp, #96]	; 0x60
  40e484:	f01b 0f20 	tst.w	fp, #32
  40e488:	f040 8111 	bne.w	40e6ae <_svfprintf_r+0x712>
  40e48c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40e48e:	f01b 0f10 	tst.w	fp, #16
  40e492:	4613      	mov	r3, r2
  40e494:	f040 83e1 	bne.w	40ec5a <_svfprintf_r+0xcbe>
  40e498:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40e49c:	f000 83dd 	beq.w	40ec5a <_svfprintf_r+0xcbe>
  40e4a0:	3304      	adds	r3, #4
  40e4a2:	8814      	ldrh	r4, [r2, #0]
  40e4a4:	930f      	str	r3, [sp, #60]	; 0x3c
  40e4a6:	2500      	movs	r5, #0
  40e4a8:	f01b 0f01 	tst.w	fp, #1
  40e4ac:	f000 810c 	beq.w	40e6c8 <_svfprintf_r+0x72c>
  40e4b0:	ea54 0305 	orrs.w	r3, r4, r5
  40e4b4:	f000 8108 	beq.w	40e6c8 <_svfprintf_r+0x72c>
  40e4b8:	2330      	movs	r3, #48	; 0x30
  40e4ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40e4be:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40e4c2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40e4c6:	f04b 0b02 	orr.w	fp, fp, #2
  40e4ca:	2302      	movs	r3, #2
  40e4cc:	e659      	b.n	40e182 <_svfprintf_r+0x1e6>
  40e4ce:	f89a 3000 	ldrb.w	r3, [sl]
  40e4d2:	2900      	cmp	r1, #0
  40e4d4:	f47f adba 	bne.w	40e04c <_svfprintf_r+0xb0>
  40e4d8:	2201      	movs	r2, #1
  40e4da:	2120      	movs	r1, #32
  40e4dc:	e5b6      	b.n	40e04c <_svfprintf_r+0xb0>
  40e4de:	f04b 0b01 	orr.w	fp, fp, #1
  40e4e2:	f89a 3000 	ldrb.w	r3, [sl]
  40e4e6:	e5b1      	b.n	40e04c <_svfprintf_r+0xb0>
  40e4e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40e4ea:	6823      	ldr	r3, [r4, #0]
  40e4ec:	930d      	str	r3, [sp, #52]	; 0x34
  40e4ee:	4618      	mov	r0, r3
  40e4f0:	2800      	cmp	r0, #0
  40e4f2:	4623      	mov	r3, r4
  40e4f4:	f103 0304 	add.w	r3, r3, #4
  40e4f8:	f6ff ae0a 	blt.w	40e110 <_svfprintf_r+0x174>
  40e4fc:	930f      	str	r3, [sp, #60]	; 0x3c
  40e4fe:	f89a 3000 	ldrb.w	r3, [sl]
  40e502:	e5a3      	b.n	40e04c <_svfprintf_r+0xb0>
  40e504:	00413910 	.word	0x00413910
  40e508:	00413920 	.word	0x00413920
  40e50c:	004138f0 	.word	0x004138f0
  40e510:	f04b 0b10 	orr.w	fp, fp, #16
  40e514:	f01b 0f20 	tst.w	fp, #32
  40e518:	9311      	str	r3, [sp, #68]	; 0x44
  40e51a:	f43f ae23 	beq.w	40e164 <_svfprintf_r+0x1c8>
  40e51e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40e520:	3507      	adds	r5, #7
  40e522:	f025 0307 	bic.w	r3, r5, #7
  40e526:	f103 0208 	add.w	r2, r3, #8
  40e52a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40e52e:	920f      	str	r2, [sp, #60]	; 0x3c
  40e530:	2301      	movs	r3, #1
  40e532:	e626      	b.n	40e182 <_svfprintf_r+0x1e6>
  40e534:	f89a 3000 	ldrb.w	r3, [sl]
  40e538:	2b2a      	cmp	r3, #42	; 0x2a
  40e53a:	f10a 0401 	add.w	r4, sl, #1
  40e53e:	f000 8727 	beq.w	40f390 <_svfprintf_r+0x13f4>
  40e542:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40e546:	2809      	cmp	r0, #9
  40e548:	46a2      	mov	sl, r4
  40e54a:	f200 86ad 	bhi.w	40f2a8 <_svfprintf_r+0x130c>
  40e54e:	2300      	movs	r3, #0
  40e550:	461c      	mov	r4, r3
  40e552:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e556:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40e55a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40e55e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40e562:	2809      	cmp	r0, #9
  40e564:	d9f5      	bls.n	40e552 <_svfprintf_r+0x5b6>
  40e566:	940a      	str	r4, [sp, #40]	; 0x28
  40e568:	e572      	b.n	40e050 <_svfprintf_r+0xb4>
  40e56a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40e56e:	f89a 3000 	ldrb.w	r3, [sl]
  40e572:	e56b      	b.n	40e04c <_svfprintf_r+0xb0>
  40e574:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40e578:	f89a 3000 	ldrb.w	r3, [sl]
  40e57c:	e566      	b.n	40e04c <_svfprintf_r+0xb0>
  40e57e:	f89a 3000 	ldrb.w	r3, [sl]
  40e582:	2b6c      	cmp	r3, #108	; 0x6c
  40e584:	bf03      	ittte	eq
  40e586:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40e58a:	f04b 0b20 	orreq.w	fp, fp, #32
  40e58e:	f10a 0a01 	addeq.w	sl, sl, #1
  40e592:	f04b 0b10 	orrne.w	fp, fp, #16
  40e596:	e559      	b.n	40e04c <_svfprintf_r+0xb0>
  40e598:	2a00      	cmp	r2, #0
  40e59a:	f040 8711 	bne.w	40f3c0 <_svfprintf_r+0x1424>
  40e59e:	f01b 0f20 	tst.w	fp, #32
  40e5a2:	f040 84f9 	bne.w	40ef98 <_svfprintf_r+0xffc>
  40e5a6:	f01b 0f10 	tst.w	fp, #16
  40e5aa:	f040 84ac 	bne.w	40ef06 <_svfprintf_r+0xf6a>
  40e5ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40e5b2:	f000 84a8 	beq.w	40ef06 <_svfprintf_r+0xf6a>
  40e5b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40e5b8:	6813      	ldr	r3, [r2, #0]
  40e5ba:	3204      	adds	r2, #4
  40e5bc:	920f      	str	r2, [sp, #60]	; 0x3c
  40e5be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40e5c2:	801a      	strh	r2, [r3, #0]
  40e5c4:	e511      	b.n	40dfea <_svfprintf_r+0x4e>
  40e5c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40e5c8:	4bb3      	ldr	r3, [pc, #716]	; (40e898 <_svfprintf_r+0x8fc>)
  40e5ca:	680c      	ldr	r4, [r1, #0]
  40e5cc:	9318      	str	r3, [sp, #96]	; 0x60
  40e5ce:	2230      	movs	r2, #48	; 0x30
  40e5d0:	2378      	movs	r3, #120	; 0x78
  40e5d2:	3104      	adds	r1, #4
  40e5d4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40e5d8:	9311      	str	r3, [sp, #68]	; 0x44
  40e5da:	f04b 0b02 	orr.w	fp, fp, #2
  40e5de:	910f      	str	r1, [sp, #60]	; 0x3c
  40e5e0:	2500      	movs	r5, #0
  40e5e2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40e5e6:	2302      	movs	r3, #2
  40e5e8:	e5cb      	b.n	40e182 <_svfprintf_r+0x1e6>
  40e5ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40e5ec:	9311      	str	r3, [sp, #68]	; 0x44
  40e5ee:	680a      	ldr	r2, [r1, #0]
  40e5f0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40e5f4:	2300      	movs	r3, #0
  40e5f6:	460a      	mov	r2, r1
  40e5f8:	461f      	mov	r7, r3
  40e5fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40e5fe:	3204      	adds	r2, #4
  40e600:	2301      	movs	r3, #1
  40e602:	9308      	str	r3, [sp, #32]
  40e604:	f8cd b01c 	str.w	fp, [sp, #28]
  40e608:	970a      	str	r7, [sp, #40]	; 0x28
  40e60a:	9712      	str	r7, [sp, #72]	; 0x48
  40e60c:	920f      	str	r2, [sp, #60]	; 0x3c
  40e60e:	930e      	str	r3, [sp, #56]	; 0x38
  40e610:	ae28      	add	r6, sp, #160	; 0xa0
  40e612:	e5df      	b.n	40e1d4 <_svfprintf_r+0x238>
  40e614:	9311      	str	r3, [sp, #68]	; 0x44
  40e616:	2a00      	cmp	r2, #0
  40e618:	f040 86ea 	bne.w	40f3f0 <_svfprintf_r+0x1454>
  40e61c:	f01b 0f20 	tst.w	fp, #32
  40e620:	d15d      	bne.n	40e6de <_svfprintf_r+0x742>
  40e622:	f01b 0f10 	tst.w	fp, #16
  40e626:	f040 8308 	bne.w	40ec3a <_svfprintf_r+0xc9e>
  40e62a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40e62e:	f000 8304 	beq.w	40ec3a <_svfprintf_r+0xc9e>
  40e632:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40e634:	f9b1 4000 	ldrsh.w	r4, [r1]
  40e638:	3104      	adds	r1, #4
  40e63a:	17e5      	asrs	r5, r4, #31
  40e63c:	4622      	mov	r2, r4
  40e63e:	462b      	mov	r3, r5
  40e640:	910f      	str	r1, [sp, #60]	; 0x3c
  40e642:	2a00      	cmp	r2, #0
  40e644:	f173 0300 	sbcs.w	r3, r3, #0
  40e648:	db58      	blt.n	40e6fc <_svfprintf_r+0x760>
  40e64a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e64c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40e650:	1c4a      	adds	r2, r1, #1
  40e652:	f04f 0301 	mov.w	r3, #1
  40e656:	f47f ad9b 	bne.w	40e190 <_svfprintf_r+0x1f4>
  40e65a:	ea54 0205 	orrs.w	r2, r4, r5
  40e65e:	f000 81df 	beq.w	40ea20 <_svfprintf_r+0xa84>
  40e662:	f8cd b01c 	str.w	fp, [sp, #28]
  40e666:	2b01      	cmp	r3, #1
  40e668:	f000 827b 	beq.w	40eb62 <_svfprintf_r+0xbc6>
  40e66c:	2b02      	cmp	r3, #2
  40e66e:	f040 8206 	bne.w	40ea7e <_svfprintf_r+0xae2>
  40e672:	9818      	ldr	r0, [sp, #96]	; 0x60
  40e674:	464e      	mov	r6, r9
  40e676:	0923      	lsrs	r3, r4, #4
  40e678:	f004 010f 	and.w	r1, r4, #15
  40e67c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40e680:	092a      	lsrs	r2, r5, #4
  40e682:	461c      	mov	r4, r3
  40e684:	4615      	mov	r5, r2
  40e686:	5c43      	ldrb	r3, [r0, r1]
  40e688:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40e68c:	ea54 0305 	orrs.w	r3, r4, r5
  40e690:	d1f1      	bne.n	40e676 <_svfprintf_r+0x6da>
  40e692:	eba9 0306 	sub.w	r3, r9, r6
  40e696:	930e      	str	r3, [sp, #56]	; 0x38
  40e698:	e590      	b.n	40e1bc <_svfprintf_r+0x220>
  40e69a:	9311      	str	r3, [sp, #68]	; 0x44
  40e69c:	2a00      	cmp	r2, #0
  40e69e:	f040 86a3 	bne.w	40f3e8 <_svfprintf_r+0x144c>
  40e6a2:	4b7e      	ldr	r3, [pc, #504]	; (40e89c <_svfprintf_r+0x900>)
  40e6a4:	9318      	str	r3, [sp, #96]	; 0x60
  40e6a6:	f01b 0f20 	tst.w	fp, #32
  40e6aa:	f43f aeef 	beq.w	40e48c <_svfprintf_r+0x4f0>
  40e6ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40e6b0:	3507      	adds	r5, #7
  40e6b2:	f025 0307 	bic.w	r3, r5, #7
  40e6b6:	f103 0208 	add.w	r2, r3, #8
  40e6ba:	f01b 0f01 	tst.w	fp, #1
  40e6be:	920f      	str	r2, [sp, #60]	; 0x3c
  40e6c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  40e6c4:	f47f aef4 	bne.w	40e4b0 <_svfprintf_r+0x514>
  40e6c8:	2302      	movs	r3, #2
  40e6ca:	e55a      	b.n	40e182 <_svfprintf_r+0x1e6>
  40e6cc:	9311      	str	r3, [sp, #68]	; 0x44
  40e6ce:	2a00      	cmp	r2, #0
  40e6d0:	f040 8686 	bne.w	40f3e0 <_svfprintf_r+0x1444>
  40e6d4:	f04b 0b10 	orr.w	fp, fp, #16
  40e6d8:	f01b 0f20 	tst.w	fp, #32
  40e6dc:	d0a1      	beq.n	40e622 <_svfprintf_r+0x686>
  40e6de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40e6e0:	3507      	adds	r5, #7
  40e6e2:	f025 0507 	bic.w	r5, r5, #7
  40e6e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  40e6ea:	2a00      	cmp	r2, #0
  40e6ec:	f105 0108 	add.w	r1, r5, #8
  40e6f0:	461d      	mov	r5, r3
  40e6f2:	f173 0300 	sbcs.w	r3, r3, #0
  40e6f6:	910f      	str	r1, [sp, #60]	; 0x3c
  40e6f8:	4614      	mov	r4, r2
  40e6fa:	daa6      	bge.n	40e64a <_svfprintf_r+0x6ae>
  40e6fc:	272d      	movs	r7, #45	; 0x2d
  40e6fe:	4264      	negs	r4, r4
  40e700:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40e704:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40e708:	2301      	movs	r3, #1
  40e70a:	e53d      	b.n	40e188 <_svfprintf_r+0x1ec>
  40e70c:	9311      	str	r3, [sp, #68]	; 0x44
  40e70e:	2a00      	cmp	r2, #0
  40e710:	f040 8662 	bne.w	40f3d8 <_svfprintf_r+0x143c>
  40e714:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40e716:	3507      	adds	r5, #7
  40e718:	f025 0307 	bic.w	r3, r5, #7
  40e71c:	f103 0208 	add.w	r2, r3, #8
  40e720:	920f      	str	r2, [sp, #60]	; 0x3c
  40e722:	681a      	ldr	r2, [r3, #0]
  40e724:	9215      	str	r2, [sp, #84]	; 0x54
  40e726:	685b      	ldr	r3, [r3, #4]
  40e728:	9314      	str	r3, [sp, #80]	; 0x50
  40e72a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40e72c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40e72e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40e732:	4628      	mov	r0, r5
  40e734:	4621      	mov	r1, r4
  40e736:	f04f 32ff 	mov.w	r2, #4294967295
  40e73a:	4b59      	ldr	r3, [pc, #356]	; (40e8a0 <_svfprintf_r+0x904>)
  40e73c:	f7fe fe9e 	bl	40d47c <__aeabi_dcmpun>
  40e740:	2800      	cmp	r0, #0
  40e742:	f040 834a 	bne.w	40edda <_svfprintf_r+0xe3e>
  40e746:	4628      	mov	r0, r5
  40e748:	4621      	mov	r1, r4
  40e74a:	f04f 32ff 	mov.w	r2, #4294967295
  40e74e:	4b54      	ldr	r3, [pc, #336]	; (40e8a0 <_svfprintf_r+0x904>)
  40e750:	f7fe fe76 	bl	40d440 <__aeabi_dcmple>
  40e754:	2800      	cmp	r0, #0
  40e756:	f040 8340 	bne.w	40edda <_svfprintf_r+0xe3e>
  40e75a:	a815      	add	r0, sp, #84	; 0x54
  40e75c:	c80d      	ldmia	r0, {r0, r2, r3}
  40e75e:	9914      	ldr	r1, [sp, #80]	; 0x50
  40e760:	f7fe fe64 	bl	40d42c <__aeabi_dcmplt>
  40e764:	2800      	cmp	r0, #0
  40e766:	f040 8530 	bne.w	40f1ca <_svfprintf_r+0x122e>
  40e76a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40e76e:	4e4d      	ldr	r6, [pc, #308]	; (40e8a4 <_svfprintf_r+0x908>)
  40e770:	4b4d      	ldr	r3, [pc, #308]	; (40e8a8 <_svfprintf_r+0x90c>)
  40e772:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40e776:	9007      	str	r0, [sp, #28]
  40e778:	9811      	ldr	r0, [sp, #68]	; 0x44
  40e77a:	2203      	movs	r2, #3
  40e77c:	2100      	movs	r1, #0
  40e77e:	9208      	str	r2, [sp, #32]
  40e780:	910a      	str	r1, [sp, #40]	; 0x28
  40e782:	2847      	cmp	r0, #71	; 0x47
  40e784:	bfd8      	it	le
  40e786:	461e      	movle	r6, r3
  40e788:	920e      	str	r2, [sp, #56]	; 0x38
  40e78a:	9112      	str	r1, [sp, #72]	; 0x48
  40e78c:	e51e      	b.n	40e1cc <_svfprintf_r+0x230>
  40e78e:	f04b 0b08 	orr.w	fp, fp, #8
  40e792:	f89a 3000 	ldrb.w	r3, [sl]
  40e796:	e459      	b.n	40e04c <_svfprintf_r+0xb0>
  40e798:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40e79c:	2300      	movs	r3, #0
  40e79e:	461c      	mov	r4, r3
  40e7a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e7a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40e7a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40e7ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40e7b0:	2809      	cmp	r0, #9
  40e7b2:	d9f5      	bls.n	40e7a0 <_svfprintf_r+0x804>
  40e7b4:	940d      	str	r4, [sp, #52]	; 0x34
  40e7b6:	e44b      	b.n	40e050 <_svfprintf_r+0xb4>
  40e7b8:	f04b 0b10 	orr.w	fp, fp, #16
  40e7bc:	9311      	str	r3, [sp, #68]	; 0x44
  40e7be:	f01b 0320 	ands.w	r3, fp, #32
  40e7c2:	f43f ae1d 	beq.w	40e400 <_svfprintf_r+0x464>
  40e7c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40e7c8:	3507      	adds	r5, #7
  40e7ca:	f025 0307 	bic.w	r3, r5, #7
  40e7ce:	f103 0208 	add.w	r2, r3, #8
  40e7d2:	e9d3 4500 	ldrd	r4, r5, [r3]
  40e7d6:	920f      	str	r2, [sp, #60]	; 0x3c
  40e7d8:	2300      	movs	r3, #0
  40e7da:	e4d2      	b.n	40e182 <_svfprintf_r+0x1e6>
  40e7dc:	9311      	str	r3, [sp, #68]	; 0x44
  40e7de:	2a00      	cmp	r2, #0
  40e7e0:	f040 85e7 	bne.w	40f3b2 <_svfprintf_r+0x1416>
  40e7e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e7e6:	2a00      	cmp	r2, #0
  40e7e8:	f43f aca3 	beq.w	40e132 <_svfprintf_r+0x196>
  40e7ec:	2300      	movs	r3, #0
  40e7ee:	2101      	movs	r1, #1
  40e7f0:	461f      	mov	r7, r3
  40e7f2:	9108      	str	r1, [sp, #32]
  40e7f4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40e7f8:	f8cd b01c 	str.w	fp, [sp, #28]
  40e7fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40e800:	930a      	str	r3, [sp, #40]	; 0x28
  40e802:	9312      	str	r3, [sp, #72]	; 0x48
  40e804:	910e      	str	r1, [sp, #56]	; 0x38
  40e806:	ae28      	add	r6, sp, #160	; 0xa0
  40e808:	e4e4      	b.n	40e1d4 <_svfprintf_r+0x238>
  40e80a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40e80c:	e534      	b.n	40e278 <_svfprintf_r+0x2dc>
  40e80e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e810:	2b65      	cmp	r3, #101	; 0x65
  40e812:	f340 80a7 	ble.w	40e964 <_svfprintf_r+0x9c8>
  40e816:	a815      	add	r0, sp, #84	; 0x54
  40e818:	c80d      	ldmia	r0, {r0, r2, r3}
  40e81a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40e81c:	f7fe fdfc 	bl	40d418 <__aeabi_dcmpeq>
  40e820:	2800      	cmp	r0, #0
  40e822:	f000 8150 	beq.w	40eac6 <_svfprintf_r+0xb2a>
  40e826:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e828:	4a20      	ldr	r2, [pc, #128]	; (40e8ac <_svfprintf_r+0x910>)
  40e82a:	f8c8 2000 	str.w	r2, [r8]
  40e82e:	3301      	adds	r3, #1
  40e830:	3401      	adds	r4, #1
  40e832:	2201      	movs	r2, #1
  40e834:	2b07      	cmp	r3, #7
  40e836:	9427      	str	r4, [sp, #156]	; 0x9c
  40e838:	9326      	str	r3, [sp, #152]	; 0x98
  40e83a:	f8c8 2004 	str.w	r2, [r8, #4]
  40e83e:	f300 836a 	bgt.w	40ef16 <_svfprintf_r+0xf7a>
  40e842:	f108 0808 	add.w	r8, r8, #8
  40e846:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40e848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40e84a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40e84c:	4293      	cmp	r3, r2
  40e84e:	db03      	blt.n	40e858 <_svfprintf_r+0x8bc>
  40e850:	9b07      	ldr	r3, [sp, #28]
  40e852:	07dd      	lsls	r5, r3, #31
  40e854:	f57f ad82 	bpl.w	40e35c <_svfprintf_r+0x3c0>
  40e858:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e85a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40e85c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40e85e:	f8c8 2000 	str.w	r2, [r8]
  40e862:	3301      	adds	r3, #1
  40e864:	440c      	add	r4, r1
  40e866:	2b07      	cmp	r3, #7
  40e868:	f8c8 1004 	str.w	r1, [r8, #4]
  40e86c:	9427      	str	r4, [sp, #156]	; 0x9c
  40e86e:	9326      	str	r3, [sp, #152]	; 0x98
  40e870:	f300 839e 	bgt.w	40efb0 <_svfprintf_r+0x1014>
  40e874:	f108 0808 	add.w	r8, r8, #8
  40e878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40e87a:	1e5e      	subs	r6, r3, #1
  40e87c:	2e00      	cmp	r6, #0
  40e87e:	f77f ad6d 	ble.w	40e35c <_svfprintf_r+0x3c0>
  40e882:	2e10      	cmp	r6, #16
  40e884:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e886:	4d0a      	ldr	r5, [pc, #40]	; (40e8b0 <_svfprintf_r+0x914>)
  40e888:	f340 81f5 	ble.w	40ec76 <_svfprintf_r+0xcda>
  40e88c:	4622      	mov	r2, r4
  40e88e:	2710      	movs	r7, #16
  40e890:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40e894:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40e896:	e013      	b.n	40e8c0 <_svfprintf_r+0x924>
  40e898:	004138f0 	.word	0x004138f0
  40e89c:	004138dc 	.word	0x004138dc
  40e8a0:	7fefffff 	.word	0x7fefffff
  40e8a4:	004138d0 	.word	0x004138d0
  40e8a8:	004138cc 	.word	0x004138cc
  40e8ac:	0041390c 	.word	0x0041390c
  40e8b0:	00413920 	.word	0x00413920
  40e8b4:	f108 0808 	add.w	r8, r8, #8
  40e8b8:	3e10      	subs	r6, #16
  40e8ba:	2e10      	cmp	r6, #16
  40e8bc:	f340 81da 	ble.w	40ec74 <_svfprintf_r+0xcd8>
  40e8c0:	3301      	adds	r3, #1
  40e8c2:	3210      	adds	r2, #16
  40e8c4:	2b07      	cmp	r3, #7
  40e8c6:	9227      	str	r2, [sp, #156]	; 0x9c
  40e8c8:	9326      	str	r3, [sp, #152]	; 0x98
  40e8ca:	e888 00a0 	stmia.w	r8, {r5, r7}
  40e8ce:	ddf1      	ble.n	40e8b4 <_svfprintf_r+0x918>
  40e8d0:	aa25      	add	r2, sp, #148	; 0x94
  40e8d2:	4621      	mov	r1, r4
  40e8d4:	4658      	mov	r0, fp
  40e8d6:	f002 fba3 	bl	411020 <__ssprint_r>
  40e8da:	2800      	cmp	r0, #0
  40e8dc:	f47f ac30 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40e8e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40e8e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e8e4:	46c8      	mov	r8, r9
  40e8e6:	e7e7      	b.n	40e8b8 <_svfprintf_r+0x91c>
  40e8e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e8ea:	9a08      	ldr	r2, [sp, #32]
  40e8ec:	1a9f      	subs	r7, r3, r2
  40e8ee:	2f00      	cmp	r7, #0
  40e8f0:	f77f ace5 	ble.w	40e2be <_svfprintf_r+0x322>
  40e8f4:	2f10      	cmp	r7, #16
  40e8f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e8f8:	4db6      	ldr	r5, [pc, #728]	; (40ebd4 <_svfprintf_r+0xc38>)
  40e8fa:	dd27      	ble.n	40e94c <_svfprintf_r+0x9b0>
  40e8fc:	4642      	mov	r2, r8
  40e8fe:	4621      	mov	r1, r4
  40e900:	46b0      	mov	r8, r6
  40e902:	f04f 0b10 	mov.w	fp, #16
  40e906:	462e      	mov	r6, r5
  40e908:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40e90a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40e90c:	e004      	b.n	40e918 <_svfprintf_r+0x97c>
  40e90e:	3f10      	subs	r7, #16
  40e910:	2f10      	cmp	r7, #16
  40e912:	f102 0208 	add.w	r2, r2, #8
  40e916:	dd15      	ble.n	40e944 <_svfprintf_r+0x9a8>
  40e918:	3301      	adds	r3, #1
  40e91a:	3110      	adds	r1, #16
  40e91c:	2b07      	cmp	r3, #7
  40e91e:	9127      	str	r1, [sp, #156]	; 0x9c
  40e920:	9326      	str	r3, [sp, #152]	; 0x98
  40e922:	e882 0840 	stmia.w	r2, {r6, fp}
  40e926:	ddf2      	ble.n	40e90e <_svfprintf_r+0x972>
  40e928:	aa25      	add	r2, sp, #148	; 0x94
  40e92a:	4629      	mov	r1, r5
  40e92c:	4620      	mov	r0, r4
  40e92e:	f002 fb77 	bl	411020 <__ssprint_r>
  40e932:	2800      	cmp	r0, #0
  40e934:	f47f ac04 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40e938:	3f10      	subs	r7, #16
  40e93a:	2f10      	cmp	r7, #16
  40e93c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40e93e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e940:	464a      	mov	r2, r9
  40e942:	dce9      	bgt.n	40e918 <_svfprintf_r+0x97c>
  40e944:	4635      	mov	r5, r6
  40e946:	460c      	mov	r4, r1
  40e948:	4646      	mov	r6, r8
  40e94a:	4690      	mov	r8, r2
  40e94c:	3301      	adds	r3, #1
  40e94e:	443c      	add	r4, r7
  40e950:	2b07      	cmp	r3, #7
  40e952:	9427      	str	r4, [sp, #156]	; 0x9c
  40e954:	9326      	str	r3, [sp, #152]	; 0x98
  40e956:	e888 00a0 	stmia.w	r8, {r5, r7}
  40e95a:	f300 8232 	bgt.w	40edc2 <_svfprintf_r+0xe26>
  40e95e:	f108 0808 	add.w	r8, r8, #8
  40e962:	e4ac      	b.n	40e2be <_svfprintf_r+0x322>
  40e964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40e966:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40e968:	2b01      	cmp	r3, #1
  40e96a:	f340 81fe 	ble.w	40ed6a <_svfprintf_r+0xdce>
  40e96e:	3701      	adds	r7, #1
  40e970:	3401      	adds	r4, #1
  40e972:	2301      	movs	r3, #1
  40e974:	2f07      	cmp	r7, #7
  40e976:	9427      	str	r4, [sp, #156]	; 0x9c
  40e978:	9726      	str	r7, [sp, #152]	; 0x98
  40e97a:	f8c8 6000 	str.w	r6, [r8]
  40e97e:	f8c8 3004 	str.w	r3, [r8, #4]
  40e982:	f300 8203 	bgt.w	40ed8c <_svfprintf_r+0xdf0>
  40e986:	f108 0808 	add.w	r8, r8, #8
  40e98a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40e98c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40e98e:	f8c8 3000 	str.w	r3, [r8]
  40e992:	3701      	adds	r7, #1
  40e994:	4414      	add	r4, r2
  40e996:	2f07      	cmp	r7, #7
  40e998:	9427      	str	r4, [sp, #156]	; 0x9c
  40e99a:	9726      	str	r7, [sp, #152]	; 0x98
  40e99c:	f8c8 2004 	str.w	r2, [r8, #4]
  40e9a0:	f300 8200 	bgt.w	40eda4 <_svfprintf_r+0xe08>
  40e9a4:	f108 0808 	add.w	r8, r8, #8
  40e9a8:	a815      	add	r0, sp, #84	; 0x54
  40e9aa:	c80d      	ldmia	r0, {r0, r2, r3}
  40e9ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  40e9ae:	f7fe fd33 	bl	40d418 <__aeabi_dcmpeq>
  40e9b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40e9b4:	2800      	cmp	r0, #0
  40e9b6:	f040 8101 	bne.w	40ebbc <_svfprintf_r+0xc20>
  40e9ba:	3b01      	subs	r3, #1
  40e9bc:	3701      	adds	r7, #1
  40e9be:	3601      	adds	r6, #1
  40e9c0:	441c      	add	r4, r3
  40e9c2:	2f07      	cmp	r7, #7
  40e9c4:	9726      	str	r7, [sp, #152]	; 0x98
  40e9c6:	9427      	str	r4, [sp, #156]	; 0x9c
  40e9c8:	f8c8 6000 	str.w	r6, [r8]
  40e9cc:	f8c8 3004 	str.w	r3, [r8, #4]
  40e9d0:	f300 8127 	bgt.w	40ec22 <_svfprintf_r+0xc86>
  40e9d4:	f108 0808 	add.w	r8, r8, #8
  40e9d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40e9da:	f8c8 2004 	str.w	r2, [r8, #4]
  40e9de:	3701      	adds	r7, #1
  40e9e0:	4414      	add	r4, r2
  40e9e2:	ab21      	add	r3, sp, #132	; 0x84
  40e9e4:	2f07      	cmp	r7, #7
  40e9e6:	9427      	str	r4, [sp, #156]	; 0x9c
  40e9e8:	9726      	str	r7, [sp, #152]	; 0x98
  40e9ea:	f8c8 3000 	str.w	r3, [r8]
  40e9ee:	f77f acb3 	ble.w	40e358 <_svfprintf_r+0x3bc>
  40e9f2:	aa25      	add	r2, sp, #148	; 0x94
  40e9f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e9f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e9f8:	f002 fb12 	bl	411020 <__ssprint_r>
  40e9fc:	2800      	cmp	r0, #0
  40e9fe:	f47f ab9f 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ea02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ea04:	46c8      	mov	r8, r9
  40ea06:	e4a9      	b.n	40e35c <_svfprintf_r+0x3c0>
  40ea08:	aa25      	add	r2, sp, #148	; 0x94
  40ea0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ea0c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ea0e:	f002 fb07 	bl	411020 <__ssprint_r>
  40ea12:	2800      	cmp	r0, #0
  40ea14:	f43f aceb 	beq.w	40e3ee <_svfprintf_r+0x452>
  40ea18:	f7ff bb92 	b.w	40e140 <_svfprintf_r+0x1a4>
  40ea1c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40ea20:	2b01      	cmp	r3, #1
  40ea22:	f000 8134 	beq.w	40ec8e <_svfprintf_r+0xcf2>
  40ea26:	2b02      	cmp	r3, #2
  40ea28:	d125      	bne.n	40ea76 <_svfprintf_r+0xada>
  40ea2a:	f8cd b01c 	str.w	fp, [sp, #28]
  40ea2e:	2400      	movs	r4, #0
  40ea30:	2500      	movs	r5, #0
  40ea32:	e61e      	b.n	40e672 <_svfprintf_r+0x6d6>
  40ea34:	aa25      	add	r2, sp, #148	; 0x94
  40ea36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ea38:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ea3a:	f002 faf1 	bl	411020 <__ssprint_r>
  40ea3e:	2800      	cmp	r0, #0
  40ea40:	f47f ab7e 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ea44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ea46:	46c8      	mov	r8, r9
  40ea48:	e475      	b.n	40e336 <_svfprintf_r+0x39a>
  40ea4a:	aa25      	add	r2, sp, #148	; 0x94
  40ea4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ea4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ea50:	f002 fae6 	bl	411020 <__ssprint_r>
  40ea54:	2800      	cmp	r0, #0
  40ea56:	f47f ab73 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ea5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ea5c:	46c8      	mov	r8, r9
  40ea5e:	e41b      	b.n	40e298 <_svfprintf_r+0x2fc>
  40ea60:	aa25      	add	r2, sp, #148	; 0x94
  40ea62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ea64:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ea66:	f002 fadb 	bl	411020 <__ssprint_r>
  40ea6a:	2800      	cmp	r0, #0
  40ea6c:	f47f ab68 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ea70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ea72:	46c8      	mov	r8, r9
  40ea74:	e420      	b.n	40e2b8 <_svfprintf_r+0x31c>
  40ea76:	f8cd b01c 	str.w	fp, [sp, #28]
  40ea7a:	2400      	movs	r4, #0
  40ea7c:	2500      	movs	r5, #0
  40ea7e:	4649      	mov	r1, r9
  40ea80:	e000      	b.n	40ea84 <_svfprintf_r+0xae8>
  40ea82:	4631      	mov	r1, r6
  40ea84:	08e2      	lsrs	r2, r4, #3
  40ea86:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40ea8a:	08e8      	lsrs	r0, r5, #3
  40ea8c:	f004 0307 	and.w	r3, r4, #7
  40ea90:	4605      	mov	r5, r0
  40ea92:	4614      	mov	r4, r2
  40ea94:	3330      	adds	r3, #48	; 0x30
  40ea96:	ea54 0205 	orrs.w	r2, r4, r5
  40ea9a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40ea9e:	f101 36ff 	add.w	r6, r1, #4294967295
  40eaa2:	d1ee      	bne.n	40ea82 <_svfprintf_r+0xae6>
  40eaa4:	9a07      	ldr	r2, [sp, #28]
  40eaa6:	07d2      	lsls	r2, r2, #31
  40eaa8:	f57f adf3 	bpl.w	40e692 <_svfprintf_r+0x6f6>
  40eaac:	2b30      	cmp	r3, #48	; 0x30
  40eaae:	f43f adf0 	beq.w	40e692 <_svfprintf_r+0x6f6>
  40eab2:	3902      	subs	r1, #2
  40eab4:	2330      	movs	r3, #48	; 0x30
  40eab6:	f806 3c01 	strb.w	r3, [r6, #-1]
  40eaba:	eba9 0301 	sub.w	r3, r9, r1
  40eabe:	930e      	str	r3, [sp, #56]	; 0x38
  40eac0:	460e      	mov	r6, r1
  40eac2:	f7ff bb7b 	b.w	40e1bc <_svfprintf_r+0x220>
  40eac6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40eac8:	2900      	cmp	r1, #0
  40eaca:	f340 822e 	ble.w	40ef2a <_svfprintf_r+0xf8e>
  40eace:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ead0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40ead2:	4293      	cmp	r3, r2
  40ead4:	bfa8      	it	ge
  40ead6:	4613      	movge	r3, r2
  40ead8:	2b00      	cmp	r3, #0
  40eada:	461f      	mov	r7, r3
  40eadc:	dd0d      	ble.n	40eafa <_svfprintf_r+0xb5e>
  40eade:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40eae0:	f8c8 6000 	str.w	r6, [r8]
  40eae4:	3301      	adds	r3, #1
  40eae6:	443c      	add	r4, r7
  40eae8:	2b07      	cmp	r3, #7
  40eaea:	9427      	str	r4, [sp, #156]	; 0x9c
  40eaec:	f8c8 7004 	str.w	r7, [r8, #4]
  40eaf0:	9326      	str	r3, [sp, #152]	; 0x98
  40eaf2:	f300 831f 	bgt.w	40f134 <_svfprintf_r+0x1198>
  40eaf6:	f108 0808 	add.w	r8, r8, #8
  40eafa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40eafc:	2f00      	cmp	r7, #0
  40eafe:	bfa8      	it	ge
  40eb00:	1bdb      	subge	r3, r3, r7
  40eb02:	2b00      	cmp	r3, #0
  40eb04:	461f      	mov	r7, r3
  40eb06:	f340 80d6 	ble.w	40ecb6 <_svfprintf_r+0xd1a>
  40eb0a:	2f10      	cmp	r7, #16
  40eb0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40eb0e:	4d31      	ldr	r5, [pc, #196]	; (40ebd4 <_svfprintf_r+0xc38>)
  40eb10:	f340 81ed 	ble.w	40eeee <_svfprintf_r+0xf52>
  40eb14:	4642      	mov	r2, r8
  40eb16:	4621      	mov	r1, r4
  40eb18:	46b0      	mov	r8, r6
  40eb1a:	f04f 0b10 	mov.w	fp, #16
  40eb1e:	462e      	mov	r6, r5
  40eb20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40eb22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40eb24:	e004      	b.n	40eb30 <_svfprintf_r+0xb94>
  40eb26:	3208      	adds	r2, #8
  40eb28:	3f10      	subs	r7, #16
  40eb2a:	2f10      	cmp	r7, #16
  40eb2c:	f340 81db 	ble.w	40eee6 <_svfprintf_r+0xf4a>
  40eb30:	3301      	adds	r3, #1
  40eb32:	3110      	adds	r1, #16
  40eb34:	2b07      	cmp	r3, #7
  40eb36:	9127      	str	r1, [sp, #156]	; 0x9c
  40eb38:	9326      	str	r3, [sp, #152]	; 0x98
  40eb3a:	e882 0840 	stmia.w	r2, {r6, fp}
  40eb3e:	ddf2      	ble.n	40eb26 <_svfprintf_r+0xb8a>
  40eb40:	aa25      	add	r2, sp, #148	; 0x94
  40eb42:	4629      	mov	r1, r5
  40eb44:	4620      	mov	r0, r4
  40eb46:	f002 fa6b 	bl	411020 <__ssprint_r>
  40eb4a:	2800      	cmp	r0, #0
  40eb4c:	f47f aaf8 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40eb50:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40eb52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40eb54:	464a      	mov	r2, r9
  40eb56:	e7e7      	b.n	40eb28 <_svfprintf_r+0xb8c>
  40eb58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40eb5a:	930e      	str	r3, [sp, #56]	; 0x38
  40eb5c:	464e      	mov	r6, r9
  40eb5e:	f7ff bb2d 	b.w	40e1bc <_svfprintf_r+0x220>
  40eb62:	2d00      	cmp	r5, #0
  40eb64:	bf08      	it	eq
  40eb66:	2c0a      	cmpeq	r4, #10
  40eb68:	f0c0 808f 	bcc.w	40ec8a <_svfprintf_r+0xcee>
  40eb6c:	464e      	mov	r6, r9
  40eb6e:	4620      	mov	r0, r4
  40eb70:	4629      	mov	r1, r5
  40eb72:	220a      	movs	r2, #10
  40eb74:	2300      	movs	r3, #0
  40eb76:	f002 fec7 	bl	411908 <__aeabi_uldivmod>
  40eb7a:	3230      	adds	r2, #48	; 0x30
  40eb7c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40eb80:	4620      	mov	r0, r4
  40eb82:	4629      	mov	r1, r5
  40eb84:	2300      	movs	r3, #0
  40eb86:	220a      	movs	r2, #10
  40eb88:	f002 febe 	bl	411908 <__aeabi_uldivmod>
  40eb8c:	4604      	mov	r4, r0
  40eb8e:	460d      	mov	r5, r1
  40eb90:	ea54 0305 	orrs.w	r3, r4, r5
  40eb94:	d1eb      	bne.n	40eb6e <_svfprintf_r+0xbd2>
  40eb96:	eba9 0306 	sub.w	r3, r9, r6
  40eb9a:	930e      	str	r3, [sp, #56]	; 0x38
  40eb9c:	f7ff bb0e 	b.w	40e1bc <_svfprintf_r+0x220>
  40eba0:	aa25      	add	r2, sp, #148	; 0x94
  40eba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40eba4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40eba6:	f002 fa3b 	bl	411020 <__ssprint_r>
  40ebaa:	2800      	cmp	r0, #0
  40ebac:	f47f aac8 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ebb0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40ebb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ebb6:	46c8      	mov	r8, r9
  40ebb8:	f7ff bb5e 	b.w	40e278 <_svfprintf_r+0x2dc>
  40ebbc:	1e5e      	subs	r6, r3, #1
  40ebbe:	2e00      	cmp	r6, #0
  40ebc0:	f77f af0a 	ble.w	40e9d8 <_svfprintf_r+0xa3c>
  40ebc4:	2e10      	cmp	r6, #16
  40ebc6:	4d03      	ldr	r5, [pc, #12]	; (40ebd4 <_svfprintf_r+0xc38>)
  40ebc8:	dd22      	ble.n	40ec10 <_svfprintf_r+0xc74>
  40ebca:	4622      	mov	r2, r4
  40ebcc:	f04f 0b10 	mov.w	fp, #16
  40ebd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ebd2:	e006      	b.n	40ebe2 <_svfprintf_r+0xc46>
  40ebd4:	00413920 	.word	0x00413920
  40ebd8:	3e10      	subs	r6, #16
  40ebda:	2e10      	cmp	r6, #16
  40ebdc:	f108 0808 	add.w	r8, r8, #8
  40ebe0:	dd15      	ble.n	40ec0e <_svfprintf_r+0xc72>
  40ebe2:	3701      	adds	r7, #1
  40ebe4:	3210      	adds	r2, #16
  40ebe6:	2f07      	cmp	r7, #7
  40ebe8:	9227      	str	r2, [sp, #156]	; 0x9c
  40ebea:	9726      	str	r7, [sp, #152]	; 0x98
  40ebec:	e888 0820 	stmia.w	r8, {r5, fp}
  40ebf0:	ddf2      	ble.n	40ebd8 <_svfprintf_r+0xc3c>
  40ebf2:	aa25      	add	r2, sp, #148	; 0x94
  40ebf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ebf6:	4620      	mov	r0, r4
  40ebf8:	f002 fa12 	bl	411020 <__ssprint_r>
  40ebfc:	2800      	cmp	r0, #0
  40ebfe:	f47f aa9f 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ec02:	3e10      	subs	r6, #16
  40ec04:	2e10      	cmp	r6, #16
  40ec06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40ec08:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40ec0a:	46c8      	mov	r8, r9
  40ec0c:	dce9      	bgt.n	40ebe2 <_svfprintf_r+0xc46>
  40ec0e:	4614      	mov	r4, r2
  40ec10:	3701      	adds	r7, #1
  40ec12:	4434      	add	r4, r6
  40ec14:	2f07      	cmp	r7, #7
  40ec16:	9427      	str	r4, [sp, #156]	; 0x9c
  40ec18:	9726      	str	r7, [sp, #152]	; 0x98
  40ec1a:	e888 0060 	stmia.w	r8, {r5, r6}
  40ec1e:	f77f aed9 	ble.w	40e9d4 <_svfprintf_r+0xa38>
  40ec22:	aa25      	add	r2, sp, #148	; 0x94
  40ec24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ec26:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ec28:	f002 f9fa 	bl	411020 <__ssprint_r>
  40ec2c:	2800      	cmp	r0, #0
  40ec2e:	f47f aa87 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ec32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ec34:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40ec36:	46c8      	mov	r8, r9
  40ec38:	e6ce      	b.n	40e9d8 <_svfprintf_r+0xa3c>
  40ec3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ec3c:	6814      	ldr	r4, [r2, #0]
  40ec3e:	4613      	mov	r3, r2
  40ec40:	3304      	adds	r3, #4
  40ec42:	17e5      	asrs	r5, r4, #31
  40ec44:	930f      	str	r3, [sp, #60]	; 0x3c
  40ec46:	4622      	mov	r2, r4
  40ec48:	462b      	mov	r3, r5
  40ec4a:	e4fa      	b.n	40e642 <_svfprintf_r+0x6a6>
  40ec4c:	3204      	adds	r2, #4
  40ec4e:	681c      	ldr	r4, [r3, #0]
  40ec50:	920f      	str	r2, [sp, #60]	; 0x3c
  40ec52:	2301      	movs	r3, #1
  40ec54:	2500      	movs	r5, #0
  40ec56:	f7ff ba94 	b.w	40e182 <_svfprintf_r+0x1e6>
  40ec5a:	681c      	ldr	r4, [r3, #0]
  40ec5c:	3304      	adds	r3, #4
  40ec5e:	930f      	str	r3, [sp, #60]	; 0x3c
  40ec60:	2500      	movs	r5, #0
  40ec62:	e421      	b.n	40e4a8 <_svfprintf_r+0x50c>
  40ec64:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40ec66:	460a      	mov	r2, r1
  40ec68:	3204      	adds	r2, #4
  40ec6a:	680c      	ldr	r4, [r1, #0]
  40ec6c:	920f      	str	r2, [sp, #60]	; 0x3c
  40ec6e:	2500      	movs	r5, #0
  40ec70:	f7ff ba87 	b.w	40e182 <_svfprintf_r+0x1e6>
  40ec74:	4614      	mov	r4, r2
  40ec76:	3301      	adds	r3, #1
  40ec78:	4434      	add	r4, r6
  40ec7a:	2b07      	cmp	r3, #7
  40ec7c:	9427      	str	r4, [sp, #156]	; 0x9c
  40ec7e:	9326      	str	r3, [sp, #152]	; 0x98
  40ec80:	e888 0060 	stmia.w	r8, {r5, r6}
  40ec84:	f77f ab68 	ble.w	40e358 <_svfprintf_r+0x3bc>
  40ec88:	e6b3      	b.n	40e9f2 <_svfprintf_r+0xa56>
  40ec8a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40ec8e:	f8cd b01c 	str.w	fp, [sp, #28]
  40ec92:	ae42      	add	r6, sp, #264	; 0x108
  40ec94:	3430      	adds	r4, #48	; 0x30
  40ec96:	2301      	movs	r3, #1
  40ec98:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40ec9c:	930e      	str	r3, [sp, #56]	; 0x38
  40ec9e:	f7ff ba8d 	b.w	40e1bc <_svfprintf_r+0x220>
  40eca2:	aa25      	add	r2, sp, #148	; 0x94
  40eca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40eca6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40eca8:	f002 f9ba 	bl	411020 <__ssprint_r>
  40ecac:	2800      	cmp	r0, #0
  40ecae:	f47f aa47 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ecb2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ecb4:	46c8      	mov	r8, r9
  40ecb6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40ecb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ecba:	429a      	cmp	r2, r3
  40ecbc:	db44      	blt.n	40ed48 <_svfprintf_r+0xdac>
  40ecbe:	9b07      	ldr	r3, [sp, #28]
  40ecc0:	07d9      	lsls	r1, r3, #31
  40ecc2:	d441      	bmi.n	40ed48 <_svfprintf_r+0xdac>
  40ecc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ecc6:	9812      	ldr	r0, [sp, #72]	; 0x48
  40ecc8:	1a9a      	subs	r2, r3, r2
  40ecca:	1a1d      	subs	r5, r3, r0
  40eccc:	4295      	cmp	r5, r2
  40ecce:	bfa8      	it	ge
  40ecd0:	4615      	movge	r5, r2
  40ecd2:	2d00      	cmp	r5, #0
  40ecd4:	dd0e      	ble.n	40ecf4 <_svfprintf_r+0xd58>
  40ecd6:	9926      	ldr	r1, [sp, #152]	; 0x98
  40ecd8:	f8c8 5004 	str.w	r5, [r8, #4]
  40ecdc:	3101      	adds	r1, #1
  40ecde:	4406      	add	r6, r0
  40ece0:	442c      	add	r4, r5
  40ece2:	2907      	cmp	r1, #7
  40ece4:	f8c8 6000 	str.w	r6, [r8]
  40ece8:	9427      	str	r4, [sp, #156]	; 0x9c
  40ecea:	9126      	str	r1, [sp, #152]	; 0x98
  40ecec:	f300 823b 	bgt.w	40f166 <_svfprintf_r+0x11ca>
  40ecf0:	f108 0808 	add.w	r8, r8, #8
  40ecf4:	2d00      	cmp	r5, #0
  40ecf6:	bfac      	ite	ge
  40ecf8:	1b56      	subge	r6, r2, r5
  40ecfa:	4616      	movlt	r6, r2
  40ecfc:	2e00      	cmp	r6, #0
  40ecfe:	f77f ab2d 	ble.w	40e35c <_svfprintf_r+0x3c0>
  40ed02:	2e10      	cmp	r6, #16
  40ed04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ed06:	4db0      	ldr	r5, [pc, #704]	; (40efc8 <_svfprintf_r+0x102c>)
  40ed08:	ddb5      	ble.n	40ec76 <_svfprintf_r+0xcda>
  40ed0a:	4622      	mov	r2, r4
  40ed0c:	2710      	movs	r7, #16
  40ed0e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40ed12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ed14:	e004      	b.n	40ed20 <_svfprintf_r+0xd84>
  40ed16:	f108 0808 	add.w	r8, r8, #8
  40ed1a:	3e10      	subs	r6, #16
  40ed1c:	2e10      	cmp	r6, #16
  40ed1e:	dda9      	ble.n	40ec74 <_svfprintf_r+0xcd8>
  40ed20:	3301      	adds	r3, #1
  40ed22:	3210      	adds	r2, #16
  40ed24:	2b07      	cmp	r3, #7
  40ed26:	9227      	str	r2, [sp, #156]	; 0x9c
  40ed28:	9326      	str	r3, [sp, #152]	; 0x98
  40ed2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40ed2e:	ddf2      	ble.n	40ed16 <_svfprintf_r+0xd7a>
  40ed30:	aa25      	add	r2, sp, #148	; 0x94
  40ed32:	4621      	mov	r1, r4
  40ed34:	4658      	mov	r0, fp
  40ed36:	f002 f973 	bl	411020 <__ssprint_r>
  40ed3a:	2800      	cmp	r0, #0
  40ed3c:	f47f aa00 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ed40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40ed42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ed44:	46c8      	mov	r8, r9
  40ed46:	e7e8      	b.n	40ed1a <_svfprintf_r+0xd7e>
  40ed48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ed4a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40ed4c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40ed4e:	f8c8 1000 	str.w	r1, [r8]
  40ed52:	3301      	adds	r3, #1
  40ed54:	4404      	add	r4, r0
  40ed56:	2b07      	cmp	r3, #7
  40ed58:	9427      	str	r4, [sp, #156]	; 0x9c
  40ed5a:	f8c8 0004 	str.w	r0, [r8, #4]
  40ed5e:	9326      	str	r3, [sp, #152]	; 0x98
  40ed60:	f300 81f5 	bgt.w	40f14e <_svfprintf_r+0x11b2>
  40ed64:	f108 0808 	add.w	r8, r8, #8
  40ed68:	e7ac      	b.n	40ecc4 <_svfprintf_r+0xd28>
  40ed6a:	9b07      	ldr	r3, [sp, #28]
  40ed6c:	07da      	lsls	r2, r3, #31
  40ed6e:	f53f adfe 	bmi.w	40e96e <_svfprintf_r+0x9d2>
  40ed72:	3701      	adds	r7, #1
  40ed74:	3401      	adds	r4, #1
  40ed76:	2301      	movs	r3, #1
  40ed78:	2f07      	cmp	r7, #7
  40ed7a:	9427      	str	r4, [sp, #156]	; 0x9c
  40ed7c:	9726      	str	r7, [sp, #152]	; 0x98
  40ed7e:	f8c8 6000 	str.w	r6, [r8]
  40ed82:	f8c8 3004 	str.w	r3, [r8, #4]
  40ed86:	f77f ae25 	ble.w	40e9d4 <_svfprintf_r+0xa38>
  40ed8a:	e74a      	b.n	40ec22 <_svfprintf_r+0xc86>
  40ed8c:	aa25      	add	r2, sp, #148	; 0x94
  40ed8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ed90:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ed92:	f002 f945 	bl	411020 <__ssprint_r>
  40ed96:	2800      	cmp	r0, #0
  40ed98:	f47f a9d2 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ed9c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ed9e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40eda0:	46c8      	mov	r8, r9
  40eda2:	e5f2      	b.n	40e98a <_svfprintf_r+0x9ee>
  40eda4:	aa25      	add	r2, sp, #148	; 0x94
  40eda6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40eda8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40edaa:	f002 f939 	bl	411020 <__ssprint_r>
  40edae:	2800      	cmp	r0, #0
  40edb0:	f47f a9c6 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40edb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40edb6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40edb8:	46c8      	mov	r8, r9
  40edba:	e5f5      	b.n	40e9a8 <_svfprintf_r+0xa0c>
  40edbc:	464e      	mov	r6, r9
  40edbe:	f7ff b9fd 	b.w	40e1bc <_svfprintf_r+0x220>
  40edc2:	aa25      	add	r2, sp, #148	; 0x94
  40edc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40edc6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40edc8:	f002 f92a 	bl	411020 <__ssprint_r>
  40edcc:	2800      	cmp	r0, #0
  40edce:	f47f a9b7 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40edd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40edd4:	46c8      	mov	r8, r9
  40edd6:	f7ff ba72 	b.w	40e2be <_svfprintf_r+0x322>
  40edda:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40eddc:	4622      	mov	r2, r4
  40edde:	4620      	mov	r0, r4
  40ede0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40ede2:	4623      	mov	r3, r4
  40ede4:	4621      	mov	r1, r4
  40ede6:	f7fe fb49 	bl	40d47c <__aeabi_dcmpun>
  40edea:	2800      	cmp	r0, #0
  40edec:	f040 8286 	bne.w	40f2fc <_svfprintf_r+0x1360>
  40edf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40edf2:	3301      	adds	r3, #1
  40edf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40edf6:	f023 0320 	bic.w	r3, r3, #32
  40edfa:	930e      	str	r3, [sp, #56]	; 0x38
  40edfc:	f000 81e2 	beq.w	40f1c4 <_svfprintf_r+0x1228>
  40ee00:	2b47      	cmp	r3, #71	; 0x47
  40ee02:	f000 811e 	beq.w	40f042 <_svfprintf_r+0x10a6>
  40ee06:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40ee0a:	9307      	str	r3, [sp, #28]
  40ee0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ee0e:	1e1f      	subs	r7, r3, #0
  40ee10:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40ee12:	9308      	str	r3, [sp, #32]
  40ee14:	bfbb      	ittet	lt
  40ee16:	463b      	movlt	r3, r7
  40ee18:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40ee1c:	2300      	movge	r3, #0
  40ee1e:	232d      	movlt	r3, #45	; 0x2d
  40ee20:	9310      	str	r3, [sp, #64]	; 0x40
  40ee22:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ee24:	2b66      	cmp	r3, #102	; 0x66
  40ee26:	f000 81bb 	beq.w	40f1a0 <_svfprintf_r+0x1204>
  40ee2a:	2b46      	cmp	r3, #70	; 0x46
  40ee2c:	f000 80df 	beq.w	40efee <_svfprintf_r+0x1052>
  40ee30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ee32:	9a08      	ldr	r2, [sp, #32]
  40ee34:	2b45      	cmp	r3, #69	; 0x45
  40ee36:	bf0c      	ite	eq
  40ee38:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40ee3a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40ee3c:	a823      	add	r0, sp, #140	; 0x8c
  40ee3e:	a920      	add	r1, sp, #128	; 0x80
  40ee40:	bf08      	it	eq
  40ee42:	1c5d      	addeq	r5, r3, #1
  40ee44:	9004      	str	r0, [sp, #16]
  40ee46:	9103      	str	r1, [sp, #12]
  40ee48:	a81f      	add	r0, sp, #124	; 0x7c
  40ee4a:	2102      	movs	r1, #2
  40ee4c:	463b      	mov	r3, r7
  40ee4e:	9002      	str	r0, [sp, #8]
  40ee50:	9501      	str	r5, [sp, #4]
  40ee52:	9100      	str	r1, [sp, #0]
  40ee54:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ee56:	f000 fb73 	bl	40f540 <_dtoa_r>
  40ee5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ee5c:	2b67      	cmp	r3, #103	; 0x67
  40ee5e:	4606      	mov	r6, r0
  40ee60:	f040 81e0 	bne.w	40f224 <_svfprintf_r+0x1288>
  40ee64:	f01b 0f01 	tst.w	fp, #1
  40ee68:	f000 8246 	beq.w	40f2f8 <_svfprintf_r+0x135c>
  40ee6c:	1974      	adds	r4, r6, r5
  40ee6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40ee70:	9808      	ldr	r0, [sp, #32]
  40ee72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ee74:	4639      	mov	r1, r7
  40ee76:	f7fe facf 	bl	40d418 <__aeabi_dcmpeq>
  40ee7a:	2800      	cmp	r0, #0
  40ee7c:	f040 8165 	bne.w	40f14a <_svfprintf_r+0x11ae>
  40ee80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40ee82:	42a3      	cmp	r3, r4
  40ee84:	d206      	bcs.n	40ee94 <_svfprintf_r+0xef8>
  40ee86:	2130      	movs	r1, #48	; 0x30
  40ee88:	1c5a      	adds	r2, r3, #1
  40ee8a:	9223      	str	r2, [sp, #140]	; 0x8c
  40ee8c:	7019      	strb	r1, [r3, #0]
  40ee8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40ee90:	429c      	cmp	r4, r3
  40ee92:	d8f9      	bhi.n	40ee88 <_svfprintf_r+0xeec>
  40ee94:	1b9b      	subs	r3, r3, r6
  40ee96:	9313      	str	r3, [sp, #76]	; 0x4c
  40ee98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ee9a:	2b47      	cmp	r3, #71	; 0x47
  40ee9c:	f000 80e9 	beq.w	40f072 <_svfprintf_r+0x10d6>
  40eea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40eea2:	2b65      	cmp	r3, #101	; 0x65
  40eea4:	f340 81cd 	ble.w	40f242 <_svfprintf_r+0x12a6>
  40eea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40eeaa:	2b66      	cmp	r3, #102	; 0x66
  40eeac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40eeae:	9312      	str	r3, [sp, #72]	; 0x48
  40eeb0:	f000 819e 	beq.w	40f1f0 <_svfprintf_r+0x1254>
  40eeb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40eeb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40eeb8:	4619      	mov	r1, r3
  40eeba:	4291      	cmp	r1, r2
  40eebc:	f300 818a 	bgt.w	40f1d4 <_svfprintf_r+0x1238>
  40eec0:	f01b 0f01 	tst.w	fp, #1
  40eec4:	f040 8213 	bne.w	40f2ee <_svfprintf_r+0x1352>
  40eec8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40eecc:	9308      	str	r3, [sp, #32]
  40eece:	2367      	movs	r3, #103	; 0x67
  40eed0:	920e      	str	r2, [sp, #56]	; 0x38
  40eed2:	9311      	str	r3, [sp, #68]	; 0x44
  40eed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40eed6:	2b00      	cmp	r3, #0
  40eed8:	f040 80c4 	bne.w	40f064 <_svfprintf_r+0x10c8>
  40eedc:	930a      	str	r3, [sp, #40]	; 0x28
  40eede:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40eee2:	f7ff b973 	b.w	40e1cc <_svfprintf_r+0x230>
  40eee6:	4635      	mov	r5, r6
  40eee8:	460c      	mov	r4, r1
  40eeea:	4646      	mov	r6, r8
  40eeec:	4690      	mov	r8, r2
  40eeee:	3301      	adds	r3, #1
  40eef0:	443c      	add	r4, r7
  40eef2:	2b07      	cmp	r3, #7
  40eef4:	9427      	str	r4, [sp, #156]	; 0x9c
  40eef6:	9326      	str	r3, [sp, #152]	; 0x98
  40eef8:	e888 00a0 	stmia.w	r8, {r5, r7}
  40eefc:	f73f aed1 	bgt.w	40eca2 <_svfprintf_r+0xd06>
  40ef00:	f108 0808 	add.w	r8, r8, #8
  40ef04:	e6d7      	b.n	40ecb6 <_svfprintf_r+0xd1a>
  40ef06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ef08:	6813      	ldr	r3, [r2, #0]
  40ef0a:	3204      	adds	r2, #4
  40ef0c:	920f      	str	r2, [sp, #60]	; 0x3c
  40ef0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ef10:	601a      	str	r2, [r3, #0]
  40ef12:	f7ff b86a 	b.w	40dfea <_svfprintf_r+0x4e>
  40ef16:	aa25      	add	r2, sp, #148	; 0x94
  40ef18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ef1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ef1c:	f002 f880 	bl	411020 <__ssprint_r>
  40ef20:	2800      	cmp	r0, #0
  40ef22:	f47f a90d 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40ef26:	46c8      	mov	r8, r9
  40ef28:	e48d      	b.n	40e846 <_svfprintf_r+0x8aa>
  40ef2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ef2c:	4a27      	ldr	r2, [pc, #156]	; (40efcc <_svfprintf_r+0x1030>)
  40ef2e:	f8c8 2000 	str.w	r2, [r8]
  40ef32:	3301      	adds	r3, #1
  40ef34:	3401      	adds	r4, #1
  40ef36:	2201      	movs	r2, #1
  40ef38:	2b07      	cmp	r3, #7
  40ef3a:	9427      	str	r4, [sp, #156]	; 0x9c
  40ef3c:	9326      	str	r3, [sp, #152]	; 0x98
  40ef3e:	f8c8 2004 	str.w	r2, [r8, #4]
  40ef42:	dc72      	bgt.n	40f02a <_svfprintf_r+0x108e>
  40ef44:	f108 0808 	add.w	r8, r8, #8
  40ef48:	b929      	cbnz	r1, 40ef56 <_svfprintf_r+0xfba>
  40ef4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ef4c:	b91b      	cbnz	r3, 40ef56 <_svfprintf_r+0xfba>
  40ef4e:	9b07      	ldr	r3, [sp, #28]
  40ef50:	07d8      	lsls	r0, r3, #31
  40ef52:	f57f aa03 	bpl.w	40e35c <_svfprintf_r+0x3c0>
  40ef56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ef58:	9819      	ldr	r0, [sp, #100]	; 0x64
  40ef5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40ef5c:	f8c8 2000 	str.w	r2, [r8]
  40ef60:	3301      	adds	r3, #1
  40ef62:	4602      	mov	r2, r0
  40ef64:	4422      	add	r2, r4
  40ef66:	2b07      	cmp	r3, #7
  40ef68:	9227      	str	r2, [sp, #156]	; 0x9c
  40ef6a:	f8c8 0004 	str.w	r0, [r8, #4]
  40ef6e:	9326      	str	r3, [sp, #152]	; 0x98
  40ef70:	f300 818d 	bgt.w	40f28e <_svfprintf_r+0x12f2>
  40ef74:	f108 0808 	add.w	r8, r8, #8
  40ef78:	2900      	cmp	r1, #0
  40ef7a:	f2c0 8165 	blt.w	40f248 <_svfprintf_r+0x12ac>
  40ef7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40ef80:	f8c8 6000 	str.w	r6, [r8]
  40ef84:	3301      	adds	r3, #1
  40ef86:	188c      	adds	r4, r1, r2
  40ef88:	2b07      	cmp	r3, #7
  40ef8a:	9427      	str	r4, [sp, #156]	; 0x9c
  40ef8c:	9326      	str	r3, [sp, #152]	; 0x98
  40ef8e:	f8c8 1004 	str.w	r1, [r8, #4]
  40ef92:	f77f a9e1 	ble.w	40e358 <_svfprintf_r+0x3bc>
  40ef96:	e52c      	b.n	40e9f2 <_svfprintf_r+0xa56>
  40ef98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ef9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ef9c:	6813      	ldr	r3, [r2, #0]
  40ef9e:	17cd      	asrs	r5, r1, #31
  40efa0:	4608      	mov	r0, r1
  40efa2:	3204      	adds	r2, #4
  40efa4:	4629      	mov	r1, r5
  40efa6:	920f      	str	r2, [sp, #60]	; 0x3c
  40efa8:	e9c3 0100 	strd	r0, r1, [r3]
  40efac:	f7ff b81d 	b.w	40dfea <_svfprintf_r+0x4e>
  40efb0:	aa25      	add	r2, sp, #148	; 0x94
  40efb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40efb4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40efb6:	f002 f833 	bl	411020 <__ssprint_r>
  40efba:	2800      	cmp	r0, #0
  40efbc:	f47f a8c0 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40efc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40efc2:	46c8      	mov	r8, r9
  40efc4:	e458      	b.n	40e878 <_svfprintf_r+0x8dc>
  40efc6:	bf00      	nop
  40efc8:	00413920 	.word	0x00413920
  40efcc:	0041390c 	.word	0x0041390c
  40efd0:	2140      	movs	r1, #64	; 0x40
  40efd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40efd4:	f001 fa0a 	bl	4103ec <_malloc_r>
  40efd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40efda:	6010      	str	r0, [r2, #0]
  40efdc:	6110      	str	r0, [r2, #16]
  40efde:	2800      	cmp	r0, #0
  40efe0:	f000 81f2 	beq.w	40f3c8 <_svfprintf_r+0x142c>
  40efe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40efe6:	2340      	movs	r3, #64	; 0x40
  40efe8:	6153      	str	r3, [r2, #20]
  40efea:	f7fe bfee 	b.w	40dfca <_svfprintf_r+0x2e>
  40efee:	a823      	add	r0, sp, #140	; 0x8c
  40eff0:	a920      	add	r1, sp, #128	; 0x80
  40eff2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40eff4:	9004      	str	r0, [sp, #16]
  40eff6:	9103      	str	r1, [sp, #12]
  40eff8:	a81f      	add	r0, sp, #124	; 0x7c
  40effa:	2103      	movs	r1, #3
  40effc:	9002      	str	r0, [sp, #8]
  40effe:	9a08      	ldr	r2, [sp, #32]
  40f000:	9401      	str	r4, [sp, #4]
  40f002:	463b      	mov	r3, r7
  40f004:	9100      	str	r1, [sp, #0]
  40f006:	980c      	ldr	r0, [sp, #48]	; 0x30
  40f008:	f000 fa9a 	bl	40f540 <_dtoa_r>
  40f00c:	4625      	mov	r5, r4
  40f00e:	4606      	mov	r6, r0
  40f010:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f012:	2b46      	cmp	r3, #70	; 0x46
  40f014:	eb06 0405 	add.w	r4, r6, r5
  40f018:	f47f af29 	bne.w	40ee6e <_svfprintf_r+0xed2>
  40f01c:	7833      	ldrb	r3, [r6, #0]
  40f01e:	2b30      	cmp	r3, #48	; 0x30
  40f020:	f000 8178 	beq.w	40f314 <_svfprintf_r+0x1378>
  40f024:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40f026:	442c      	add	r4, r5
  40f028:	e721      	b.n	40ee6e <_svfprintf_r+0xed2>
  40f02a:	aa25      	add	r2, sp, #148	; 0x94
  40f02c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40f02e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40f030:	f001 fff6 	bl	411020 <__ssprint_r>
  40f034:	2800      	cmp	r0, #0
  40f036:	f47f a883 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40f03a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40f03c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40f03e:	46c8      	mov	r8, r9
  40f040:	e782      	b.n	40ef48 <_svfprintf_r+0xfac>
  40f042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f044:	2b00      	cmp	r3, #0
  40f046:	bf08      	it	eq
  40f048:	2301      	moveq	r3, #1
  40f04a:	930a      	str	r3, [sp, #40]	; 0x28
  40f04c:	e6db      	b.n	40ee06 <_svfprintf_r+0xe6a>
  40f04e:	4630      	mov	r0, r6
  40f050:	940a      	str	r4, [sp, #40]	; 0x28
  40f052:	f7fe ff35 	bl	40dec0 <strlen>
  40f056:	950f      	str	r5, [sp, #60]	; 0x3c
  40f058:	900e      	str	r0, [sp, #56]	; 0x38
  40f05a:	f8cd b01c 	str.w	fp, [sp, #28]
  40f05e:	4603      	mov	r3, r0
  40f060:	f7ff b9f9 	b.w	40e456 <_svfprintf_r+0x4ba>
  40f064:	272d      	movs	r7, #45	; 0x2d
  40f066:	2300      	movs	r3, #0
  40f068:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40f06c:	930a      	str	r3, [sp, #40]	; 0x28
  40f06e:	f7ff b8ae 	b.w	40e1ce <_svfprintf_r+0x232>
  40f072:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40f074:	9312      	str	r3, [sp, #72]	; 0x48
  40f076:	461a      	mov	r2, r3
  40f078:	3303      	adds	r3, #3
  40f07a:	db04      	blt.n	40f086 <_svfprintf_r+0x10ea>
  40f07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f07e:	4619      	mov	r1, r3
  40f080:	4291      	cmp	r1, r2
  40f082:	f6bf af17 	bge.w	40eeb4 <_svfprintf_r+0xf18>
  40f086:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f088:	3b02      	subs	r3, #2
  40f08a:	9311      	str	r3, [sp, #68]	; 0x44
  40f08c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40f090:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40f094:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f096:	3b01      	subs	r3, #1
  40f098:	2b00      	cmp	r3, #0
  40f09a:	931f      	str	r3, [sp, #124]	; 0x7c
  40f09c:	bfbd      	ittte	lt
  40f09e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40f0a0:	f1c3 0301 	rsblt	r3, r3, #1
  40f0a4:	222d      	movlt	r2, #45	; 0x2d
  40f0a6:	222b      	movge	r2, #43	; 0x2b
  40f0a8:	2b09      	cmp	r3, #9
  40f0aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40f0ae:	f340 8116 	ble.w	40f2de <_svfprintf_r+0x1342>
  40f0b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40f0b6:	4620      	mov	r0, r4
  40f0b8:	4dab      	ldr	r5, [pc, #684]	; (40f368 <_svfprintf_r+0x13cc>)
  40f0ba:	e000      	b.n	40f0be <_svfprintf_r+0x1122>
  40f0bc:	4610      	mov	r0, r2
  40f0be:	fb85 1203 	smull	r1, r2, r5, r3
  40f0c2:	17d9      	asrs	r1, r3, #31
  40f0c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40f0c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40f0cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40f0d0:	3230      	adds	r2, #48	; 0x30
  40f0d2:	2909      	cmp	r1, #9
  40f0d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  40f0d8:	460b      	mov	r3, r1
  40f0da:	f100 32ff 	add.w	r2, r0, #4294967295
  40f0de:	dced      	bgt.n	40f0bc <_svfprintf_r+0x1120>
  40f0e0:	3330      	adds	r3, #48	; 0x30
  40f0e2:	3802      	subs	r0, #2
  40f0e4:	b2d9      	uxtb	r1, r3
  40f0e6:	4284      	cmp	r4, r0
  40f0e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  40f0ec:	f240 8165 	bls.w	40f3ba <_svfprintf_r+0x141e>
  40f0f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40f0f4:	4613      	mov	r3, r2
  40f0f6:	e001      	b.n	40f0fc <_svfprintf_r+0x1160>
  40f0f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  40f0fc:	f800 1b01 	strb.w	r1, [r0], #1
  40f100:	42a3      	cmp	r3, r4
  40f102:	d1f9      	bne.n	40f0f8 <_svfprintf_r+0x115c>
  40f104:	3301      	adds	r3, #1
  40f106:	1a9b      	subs	r3, r3, r2
  40f108:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40f10c:	4413      	add	r3, r2
  40f10e:	aa21      	add	r2, sp, #132	; 0x84
  40f110:	1a9b      	subs	r3, r3, r2
  40f112:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40f114:	931b      	str	r3, [sp, #108]	; 0x6c
  40f116:	2a01      	cmp	r2, #1
  40f118:	4413      	add	r3, r2
  40f11a:	930e      	str	r3, [sp, #56]	; 0x38
  40f11c:	f340 8119 	ble.w	40f352 <_svfprintf_r+0x13b6>
  40f120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f122:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40f124:	4413      	add	r3, r2
  40f126:	930e      	str	r3, [sp, #56]	; 0x38
  40f128:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40f12c:	9308      	str	r3, [sp, #32]
  40f12e:	2300      	movs	r3, #0
  40f130:	9312      	str	r3, [sp, #72]	; 0x48
  40f132:	e6cf      	b.n	40eed4 <_svfprintf_r+0xf38>
  40f134:	aa25      	add	r2, sp, #148	; 0x94
  40f136:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40f138:	980c      	ldr	r0, [sp, #48]	; 0x30
  40f13a:	f001 ff71 	bl	411020 <__ssprint_r>
  40f13e:	2800      	cmp	r0, #0
  40f140:	f47e affe 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40f144:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40f146:	46c8      	mov	r8, r9
  40f148:	e4d7      	b.n	40eafa <_svfprintf_r+0xb5e>
  40f14a:	4623      	mov	r3, r4
  40f14c:	e6a2      	b.n	40ee94 <_svfprintf_r+0xef8>
  40f14e:	aa25      	add	r2, sp, #148	; 0x94
  40f150:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40f152:	980c      	ldr	r0, [sp, #48]	; 0x30
  40f154:	f001 ff64 	bl	411020 <__ssprint_r>
  40f158:	2800      	cmp	r0, #0
  40f15a:	f47e aff1 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40f15e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40f160:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40f162:	46c8      	mov	r8, r9
  40f164:	e5ae      	b.n	40ecc4 <_svfprintf_r+0xd28>
  40f166:	aa25      	add	r2, sp, #148	; 0x94
  40f168:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40f16a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40f16c:	f001 ff58 	bl	411020 <__ssprint_r>
  40f170:	2800      	cmp	r0, #0
  40f172:	f47e afe5 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40f176:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40f178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40f17a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40f17c:	1a9a      	subs	r2, r3, r2
  40f17e:	46c8      	mov	r8, r9
  40f180:	e5b8      	b.n	40ecf4 <_svfprintf_r+0xd58>
  40f182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f184:	9612      	str	r6, [sp, #72]	; 0x48
  40f186:	2b06      	cmp	r3, #6
  40f188:	bf28      	it	cs
  40f18a:	2306      	movcs	r3, #6
  40f18c:	960a      	str	r6, [sp, #40]	; 0x28
  40f18e:	4637      	mov	r7, r6
  40f190:	9308      	str	r3, [sp, #32]
  40f192:	950f      	str	r5, [sp, #60]	; 0x3c
  40f194:	f8cd b01c 	str.w	fp, [sp, #28]
  40f198:	930e      	str	r3, [sp, #56]	; 0x38
  40f19a:	4e74      	ldr	r6, [pc, #464]	; (40f36c <_svfprintf_r+0x13d0>)
  40f19c:	f7ff b816 	b.w	40e1cc <_svfprintf_r+0x230>
  40f1a0:	a823      	add	r0, sp, #140	; 0x8c
  40f1a2:	a920      	add	r1, sp, #128	; 0x80
  40f1a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40f1a6:	9004      	str	r0, [sp, #16]
  40f1a8:	9103      	str	r1, [sp, #12]
  40f1aa:	a81f      	add	r0, sp, #124	; 0x7c
  40f1ac:	2103      	movs	r1, #3
  40f1ae:	9002      	str	r0, [sp, #8]
  40f1b0:	9a08      	ldr	r2, [sp, #32]
  40f1b2:	9501      	str	r5, [sp, #4]
  40f1b4:	463b      	mov	r3, r7
  40f1b6:	9100      	str	r1, [sp, #0]
  40f1b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40f1ba:	f000 f9c1 	bl	40f540 <_dtoa_r>
  40f1be:	4606      	mov	r6, r0
  40f1c0:	1944      	adds	r4, r0, r5
  40f1c2:	e72b      	b.n	40f01c <_svfprintf_r+0x1080>
  40f1c4:	2306      	movs	r3, #6
  40f1c6:	930a      	str	r3, [sp, #40]	; 0x28
  40f1c8:	e61d      	b.n	40ee06 <_svfprintf_r+0xe6a>
  40f1ca:	272d      	movs	r7, #45	; 0x2d
  40f1cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40f1d0:	f7ff bacd 	b.w	40e76e <_svfprintf_r+0x7d2>
  40f1d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40f1d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40f1d8:	4413      	add	r3, r2
  40f1da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40f1dc:	930e      	str	r3, [sp, #56]	; 0x38
  40f1de:	2a00      	cmp	r2, #0
  40f1e0:	f340 80b0 	ble.w	40f344 <_svfprintf_r+0x13a8>
  40f1e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40f1e8:	9308      	str	r3, [sp, #32]
  40f1ea:	2367      	movs	r3, #103	; 0x67
  40f1ec:	9311      	str	r3, [sp, #68]	; 0x44
  40f1ee:	e671      	b.n	40eed4 <_svfprintf_r+0xf38>
  40f1f0:	2b00      	cmp	r3, #0
  40f1f2:	f340 80c3 	ble.w	40f37c <_svfprintf_r+0x13e0>
  40f1f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f1f8:	2a00      	cmp	r2, #0
  40f1fa:	f040 8099 	bne.w	40f330 <_svfprintf_r+0x1394>
  40f1fe:	f01b 0f01 	tst.w	fp, #1
  40f202:	f040 8095 	bne.w	40f330 <_svfprintf_r+0x1394>
  40f206:	9308      	str	r3, [sp, #32]
  40f208:	930e      	str	r3, [sp, #56]	; 0x38
  40f20a:	e663      	b.n	40eed4 <_svfprintf_r+0xf38>
  40f20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f20e:	9308      	str	r3, [sp, #32]
  40f210:	930e      	str	r3, [sp, #56]	; 0x38
  40f212:	900a      	str	r0, [sp, #40]	; 0x28
  40f214:	950f      	str	r5, [sp, #60]	; 0x3c
  40f216:	f8cd b01c 	str.w	fp, [sp, #28]
  40f21a:	9012      	str	r0, [sp, #72]	; 0x48
  40f21c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40f220:	f7fe bfd4 	b.w	40e1cc <_svfprintf_r+0x230>
  40f224:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f226:	2b47      	cmp	r3, #71	; 0x47
  40f228:	f47f ae20 	bne.w	40ee6c <_svfprintf_r+0xed0>
  40f22c:	f01b 0f01 	tst.w	fp, #1
  40f230:	f47f aeee 	bne.w	40f010 <_svfprintf_r+0x1074>
  40f234:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f236:	1b9b      	subs	r3, r3, r6
  40f238:	9313      	str	r3, [sp, #76]	; 0x4c
  40f23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f23c:	2b47      	cmp	r3, #71	; 0x47
  40f23e:	f43f af18 	beq.w	40f072 <_svfprintf_r+0x10d6>
  40f242:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40f244:	9312      	str	r3, [sp, #72]	; 0x48
  40f246:	e721      	b.n	40f08c <_svfprintf_r+0x10f0>
  40f248:	424f      	negs	r7, r1
  40f24a:	3110      	adds	r1, #16
  40f24c:	4d48      	ldr	r5, [pc, #288]	; (40f370 <_svfprintf_r+0x13d4>)
  40f24e:	da2f      	bge.n	40f2b0 <_svfprintf_r+0x1314>
  40f250:	2410      	movs	r4, #16
  40f252:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40f256:	e004      	b.n	40f262 <_svfprintf_r+0x12c6>
  40f258:	f108 0808 	add.w	r8, r8, #8
  40f25c:	3f10      	subs	r7, #16
  40f25e:	2f10      	cmp	r7, #16
  40f260:	dd26      	ble.n	40f2b0 <_svfprintf_r+0x1314>
  40f262:	3301      	adds	r3, #1
  40f264:	3210      	adds	r2, #16
  40f266:	2b07      	cmp	r3, #7
  40f268:	9227      	str	r2, [sp, #156]	; 0x9c
  40f26a:	9326      	str	r3, [sp, #152]	; 0x98
  40f26c:	f8c8 5000 	str.w	r5, [r8]
  40f270:	f8c8 4004 	str.w	r4, [r8, #4]
  40f274:	ddf0      	ble.n	40f258 <_svfprintf_r+0x12bc>
  40f276:	aa25      	add	r2, sp, #148	; 0x94
  40f278:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40f27a:	4658      	mov	r0, fp
  40f27c:	f001 fed0 	bl	411020 <__ssprint_r>
  40f280:	2800      	cmp	r0, #0
  40f282:	f47e af5d 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40f286:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40f288:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40f28a:	46c8      	mov	r8, r9
  40f28c:	e7e6      	b.n	40f25c <_svfprintf_r+0x12c0>
  40f28e:	aa25      	add	r2, sp, #148	; 0x94
  40f290:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40f292:	980c      	ldr	r0, [sp, #48]	; 0x30
  40f294:	f001 fec4 	bl	411020 <__ssprint_r>
  40f298:	2800      	cmp	r0, #0
  40f29a:	f47e af51 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40f29e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40f2a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40f2a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40f2a4:	46c8      	mov	r8, r9
  40f2a6:	e667      	b.n	40ef78 <_svfprintf_r+0xfdc>
  40f2a8:	2000      	movs	r0, #0
  40f2aa:	900a      	str	r0, [sp, #40]	; 0x28
  40f2ac:	f7fe bed0 	b.w	40e050 <_svfprintf_r+0xb4>
  40f2b0:	3301      	adds	r3, #1
  40f2b2:	443a      	add	r2, r7
  40f2b4:	2b07      	cmp	r3, #7
  40f2b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  40f2ba:	9227      	str	r2, [sp, #156]	; 0x9c
  40f2bc:	9326      	str	r3, [sp, #152]	; 0x98
  40f2be:	f108 0808 	add.w	r8, r8, #8
  40f2c2:	f77f ae5c 	ble.w	40ef7e <_svfprintf_r+0xfe2>
  40f2c6:	aa25      	add	r2, sp, #148	; 0x94
  40f2c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40f2ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  40f2cc:	f001 fea8 	bl	411020 <__ssprint_r>
  40f2d0:	2800      	cmp	r0, #0
  40f2d2:	f47e af35 	bne.w	40e140 <_svfprintf_r+0x1a4>
  40f2d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40f2d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40f2da:	46c8      	mov	r8, r9
  40f2dc:	e64f      	b.n	40ef7e <_svfprintf_r+0xfe2>
  40f2de:	3330      	adds	r3, #48	; 0x30
  40f2e0:	2230      	movs	r2, #48	; 0x30
  40f2e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40f2e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40f2ea:	ab22      	add	r3, sp, #136	; 0x88
  40f2ec:	e70f      	b.n	40f10e <_svfprintf_r+0x1172>
  40f2ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f2f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40f2f2:	4413      	add	r3, r2
  40f2f4:	930e      	str	r3, [sp, #56]	; 0x38
  40f2f6:	e775      	b.n	40f1e4 <_svfprintf_r+0x1248>
  40f2f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f2fa:	e5cb      	b.n	40ee94 <_svfprintf_r+0xef8>
  40f2fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f2fe:	4e1d      	ldr	r6, [pc, #116]	; (40f374 <_svfprintf_r+0x13d8>)
  40f300:	2b00      	cmp	r3, #0
  40f302:	bfb6      	itet	lt
  40f304:	272d      	movlt	r7, #45	; 0x2d
  40f306:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40f30a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40f30e:	4b1a      	ldr	r3, [pc, #104]	; (40f378 <_svfprintf_r+0x13dc>)
  40f310:	f7ff ba2f 	b.w	40e772 <_svfprintf_r+0x7d6>
  40f314:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40f316:	9808      	ldr	r0, [sp, #32]
  40f318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40f31a:	4639      	mov	r1, r7
  40f31c:	f7fe f87c 	bl	40d418 <__aeabi_dcmpeq>
  40f320:	2800      	cmp	r0, #0
  40f322:	f47f ae7f 	bne.w	40f024 <_svfprintf_r+0x1088>
  40f326:	f1c5 0501 	rsb	r5, r5, #1
  40f32a:	951f      	str	r5, [sp, #124]	; 0x7c
  40f32c:	442c      	add	r4, r5
  40f32e:	e59e      	b.n	40ee6e <_svfprintf_r+0xed2>
  40f330:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f332:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40f334:	4413      	add	r3, r2
  40f336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f338:	441a      	add	r2, r3
  40f33a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40f33e:	920e      	str	r2, [sp, #56]	; 0x38
  40f340:	9308      	str	r3, [sp, #32]
  40f342:	e5c7      	b.n	40eed4 <_svfprintf_r+0xf38>
  40f344:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40f348:	f1c3 0301 	rsb	r3, r3, #1
  40f34c:	441a      	add	r2, r3
  40f34e:	4613      	mov	r3, r2
  40f350:	e7d0      	b.n	40f2f4 <_svfprintf_r+0x1358>
  40f352:	f01b 0301 	ands.w	r3, fp, #1
  40f356:	9312      	str	r3, [sp, #72]	; 0x48
  40f358:	f47f aee2 	bne.w	40f120 <_svfprintf_r+0x1184>
  40f35c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f35e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40f362:	9308      	str	r3, [sp, #32]
  40f364:	e5b6      	b.n	40eed4 <_svfprintf_r+0xf38>
  40f366:	bf00      	nop
  40f368:	66666667 	.word	0x66666667
  40f36c:	00413904 	.word	0x00413904
  40f370:	00413920 	.word	0x00413920
  40f374:	004138d8 	.word	0x004138d8
  40f378:	004138d4 	.word	0x004138d4
  40f37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f37e:	b913      	cbnz	r3, 40f386 <_svfprintf_r+0x13ea>
  40f380:	f01b 0f01 	tst.w	fp, #1
  40f384:	d002      	beq.n	40f38c <_svfprintf_r+0x13f0>
  40f386:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40f388:	3301      	adds	r3, #1
  40f38a:	e7d4      	b.n	40f336 <_svfprintf_r+0x139a>
  40f38c:	2301      	movs	r3, #1
  40f38e:	e73a      	b.n	40f206 <_svfprintf_r+0x126a>
  40f390:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40f392:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40f396:	6828      	ldr	r0, [r5, #0]
  40f398:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40f39c:	900a      	str	r0, [sp, #40]	; 0x28
  40f39e:	4628      	mov	r0, r5
  40f3a0:	3004      	adds	r0, #4
  40f3a2:	46a2      	mov	sl, r4
  40f3a4:	900f      	str	r0, [sp, #60]	; 0x3c
  40f3a6:	f7fe be51 	b.w	40e04c <_svfprintf_r+0xb0>
  40f3aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40f3ae:	f7ff b867 	b.w	40e480 <_svfprintf_r+0x4e4>
  40f3b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40f3b6:	f7ff ba15 	b.w	40e7e4 <_svfprintf_r+0x848>
  40f3ba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40f3be:	e6a6      	b.n	40f10e <_svfprintf_r+0x1172>
  40f3c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40f3c4:	f7ff b8eb 	b.w	40e59e <_svfprintf_r+0x602>
  40f3c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f3ca:	230c      	movs	r3, #12
  40f3cc:	6013      	str	r3, [r2, #0]
  40f3ce:	f04f 33ff 	mov.w	r3, #4294967295
  40f3d2:	9309      	str	r3, [sp, #36]	; 0x24
  40f3d4:	f7fe bebd 	b.w	40e152 <_svfprintf_r+0x1b6>
  40f3d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40f3dc:	f7ff b99a 	b.w	40e714 <_svfprintf_r+0x778>
  40f3e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40f3e4:	f7ff b976 	b.w	40e6d4 <_svfprintf_r+0x738>
  40f3e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40f3ec:	f7ff b959 	b.w	40e6a2 <_svfprintf_r+0x706>
  40f3f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40f3f4:	f7ff b912 	b.w	40e61c <_svfprintf_r+0x680>

0040f3f8 <register_fini>:
  40f3f8:	4b02      	ldr	r3, [pc, #8]	; (40f404 <register_fini+0xc>)
  40f3fa:	b113      	cbz	r3, 40f402 <register_fini+0xa>
  40f3fc:	4802      	ldr	r0, [pc, #8]	; (40f408 <register_fini+0x10>)
  40f3fe:	f000 b805 	b.w	40f40c <atexit>
  40f402:	4770      	bx	lr
  40f404:	00000000 	.word	0x00000000
  40f408:	00410395 	.word	0x00410395

0040f40c <atexit>:
  40f40c:	2300      	movs	r3, #0
  40f40e:	4601      	mov	r1, r0
  40f410:	461a      	mov	r2, r3
  40f412:	4618      	mov	r0, r3
  40f414:	f001 be82 	b.w	41111c <__register_exitproc>

0040f418 <quorem>:
  40f418:	6902      	ldr	r2, [r0, #16]
  40f41a:	690b      	ldr	r3, [r1, #16]
  40f41c:	4293      	cmp	r3, r2
  40f41e:	f300 808d 	bgt.w	40f53c <quorem+0x124>
  40f422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f426:	f103 38ff 	add.w	r8, r3, #4294967295
  40f42a:	f101 0714 	add.w	r7, r1, #20
  40f42e:	f100 0b14 	add.w	fp, r0, #20
  40f432:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40f436:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40f43a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40f43e:	b083      	sub	sp, #12
  40f440:	3201      	adds	r2, #1
  40f442:	fbb3 f9f2 	udiv	r9, r3, r2
  40f446:	eb0b 0304 	add.w	r3, fp, r4
  40f44a:	9400      	str	r4, [sp, #0]
  40f44c:	eb07 0a04 	add.w	sl, r7, r4
  40f450:	9301      	str	r3, [sp, #4]
  40f452:	f1b9 0f00 	cmp.w	r9, #0
  40f456:	d039      	beq.n	40f4cc <quorem+0xb4>
  40f458:	2500      	movs	r5, #0
  40f45a:	462e      	mov	r6, r5
  40f45c:	46bc      	mov	ip, r7
  40f45e:	46de      	mov	lr, fp
  40f460:	f85c 4b04 	ldr.w	r4, [ip], #4
  40f464:	f8de 3000 	ldr.w	r3, [lr]
  40f468:	b2a2      	uxth	r2, r4
  40f46a:	fb09 5502 	mla	r5, r9, r2, r5
  40f46e:	0c22      	lsrs	r2, r4, #16
  40f470:	0c2c      	lsrs	r4, r5, #16
  40f472:	fb09 4202 	mla	r2, r9, r2, r4
  40f476:	b2ad      	uxth	r5, r5
  40f478:	1b75      	subs	r5, r6, r5
  40f47a:	b296      	uxth	r6, r2
  40f47c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40f480:	fa15 f383 	uxtah	r3, r5, r3
  40f484:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40f488:	b29b      	uxth	r3, r3
  40f48a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40f48e:	45e2      	cmp	sl, ip
  40f490:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40f494:	f84e 3b04 	str.w	r3, [lr], #4
  40f498:	ea4f 4626 	mov.w	r6, r6, asr #16
  40f49c:	d2e0      	bcs.n	40f460 <quorem+0x48>
  40f49e:	9b00      	ldr	r3, [sp, #0]
  40f4a0:	f85b 3003 	ldr.w	r3, [fp, r3]
  40f4a4:	b993      	cbnz	r3, 40f4cc <quorem+0xb4>
  40f4a6:	9c01      	ldr	r4, [sp, #4]
  40f4a8:	1f23      	subs	r3, r4, #4
  40f4aa:	459b      	cmp	fp, r3
  40f4ac:	d20c      	bcs.n	40f4c8 <quorem+0xb0>
  40f4ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40f4b2:	b94b      	cbnz	r3, 40f4c8 <quorem+0xb0>
  40f4b4:	f1a4 0308 	sub.w	r3, r4, #8
  40f4b8:	e002      	b.n	40f4c0 <quorem+0xa8>
  40f4ba:	681a      	ldr	r2, [r3, #0]
  40f4bc:	3b04      	subs	r3, #4
  40f4be:	b91a      	cbnz	r2, 40f4c8 <quorem+0xb0>
  40f4c0:	459b      	cmp	fp, r3
  40f4c2:	f108 38ff 	add.w	r8, r8, #4294967295
  40f4c6:	d3f8      	bcc.n	40f4ba <quorem+0xa2>
  40f4c8:	f8c0 8010 	str.w	r8, [r0, #16]
  40f4cc:	4604      	mov	r4, r0
  40f4ce:	f001 fc99 	bl	410e04 <__mcmp>
  40f4d2:	2800      	cmp	r0, #0
  40f4d4:	db2e      	blt.n	40f534 <quorem+0x11c>
  40f4d6:	f109 0901 	add.w	r9, r9, #1
  40f4da:	465d      	mov	r5, fp
  40f4dc:	2300      	movs	r3, #0
  40f4de:	f857 1b04 	ldr.w	r1, [r7], #4
  40f4e2:	6828      	ldr	r0, [r5, #0]
  40f4e4:	b28a      	uxth	r2, r1
  40f4e6:	1a9a      	subs	r2, r3, r2
  40f4e8:	0c0b      	lsrs	r3, r1, #16
  40f4ea:	fa12 f280 	uxtah	r2, r2, r0
  40f4ee:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40f4f2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40f4f6:	b292      	uxth	r2, r2
  40f4f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40f4fc:	45ba      	cmp	sl, r7
  40f4fe:	f845 2b04 	str.w	r2, [r5], #4
  40f502:	ea4f 4323 	mov.w	r3, r3, asr #16
  40f506:	d2ea      	bcs.n	40f4de <quorem+0xc6>
  40f508:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40f50c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40f510:	b982      	cbnz	r2, 40f534 <quorem+0x11c>
  40f512:	1f1a      	subs	r2, r3, #4
  40f514:	4593      	cmp	fp, r2
  40f516:	d20b      	bcs.n	40f530 <quorem+0x118>
  40f518:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40f51c:	b942      	cbnz	r2, 40f530 <quorem+0x118>
  40f51e:	3b08      	subs	r3, #8
  40f520:	e002      	b.n	40f528 <quorem+0x110>
  40f522:	681a      	ldr	r2, [r3, #0]
  40f524:	3b04      	subs	r3, #4
  40f526:	b91a      	cbnz	r2, 40f530 <quorem+0x118>
  40f528:	459b      	cmp	fp, r3
  40f52a:	f108 38ff 	add.w	r8, r8, #4294967295
  40f52e:	d3f8      	bcc.n	40f522 <quorem+0x10a>
  40f530:	f8c4 8010 	str.w	r8, [r4, #16]
  40f534:	4648      	mov	r0, r9
  40f536:	b003      	add	sp, #12
  40f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f53c:	2000      	movs	r0, #0
  40f53e:	4770      	bx	lr

0040f540 <_dtoa_r>:
  40f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f544:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40f546:	b09b      	sub	sp, #108	; 0x6c
  40f548:	4604      	mov	r4, r0
  40f54a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40f54c:	4692      	mov	sl, r2
  40f54e:	469b      	mov	fp, r3
  40f550:	b141      	cbz	r1, 40f564 <_dtoa_r+0x24>
  40f552:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40f554:	604a      	str	r2, [r1, #4]
  40f556:	2301      	movs	r3, #1
  40f558:	4093      	lsls	r3, r2
  40f55a:	608b      	str	r3, [r1, #8]
  40f55c:	f001 fa7a 	bl	410a54 <_Bfree>
  40f560:	2300      	movs	r3, #0
  40f562:	6423      	str	r3, [r4, #64]	; 0x40
  40f564:	f1bb 0f00 	cmp.w	fp, #0
  40f568:	465d      	mov	r5, fp
  40f56a:	db35      	blt.n	40f5d8 <_dtoa_r+0x98>
  40f56c:	2300      	movs	r3, #0
  40f56e:	6033      	str	r3, [r6, #0]
  40f570:	4b9d      	ldr	r3, [pc, #628]	; (40f7e8 <_dtoa_r+0x2a8>)
  40f572:	43ab      	bics	r3, r5
  40f574:	d015      	beq.n	40f5a2 <_dtoa_r+0x62>
  40f576:	4650      	mov	r0, sl
  40f578:	4659      	mov	r1, fp
  40f57a:	2200      	movs	r2, #0
  40f57c:	2300      	movs	r3, #0
  40f57e:	f7fd ff4b 	bl	40d418 <__aeabi_dcmpeq>
  40f582:	4680      	mov	r8, r0
  40f584:	2800      	cmp	r0, #0
  40f586:	d02d      	beq.n	40f5e4 <_dtoa_r+0xa4>
  40f588:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40f58a:	2301      	movs	r3, #1
  40f58c:	6013      	str	r3, [r2, #0]
  40f58e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40f590:	2b00      	cmp	r3, #0
  40f592:	f000 80bd 	beq.w	40f710 <_dtoa_r+0x1d0>
  40f596:	4895      	ldr	r0, [pc, #596]	; (40f7ec <_dtoa_r+0x2ac>)
  40f598:	6018      	str	r0, [r3, #0]
  40f59a:	3801      	subs	r0, #1
  40f59c:	b01b      	add	sp, #108	; 0x6c
  40f59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f5a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40f5a4:	f242 730f 	movw	r3, #9999	; 0x270f
  40f5a8:	6013      	str	r3, [r2, #0]
  40f5aa:	f1ba 0f00 	cmp.w	sl, #0
  40f5ae:	d10d      	bne.n	40f5cc <_dtoa_r+0x8c>
  40f5b0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40f5b4:	b955      	cbnz	r5, 40f5cc <_dtoa_r+0x8c>
  40f5b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40f5b8:	488d      	ldr	r0, [pc, #564]	; (40f7f0 <_dtoa_r+0x2b0>)
  40f5ba:	2b00      	cmp	r3, #0
  40f5bc:	d0ee      	beq.n	40f59c <_dtoa_r+0x5c>
  40f5be:	f100 0308 	add.w	r3, r0, #8
  40f5c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40f5c4:	6013      	str	r3, [r2, #0]
  40f5c6:	b01b      	add	sp, #108	; 0x6c
  40f5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f5cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40f5ce:	4889      	ldr	r0, [pc, #548]	; (40f7f4 <_dtoa_r+0x2b4>)
  40f5d0:	2b00      	cmp	r3, #0
  40f5d2:	d0e3      	beq.n	40f59c <_dtoa_r+0x5c>
  40f5d4:	1cc3      	adds	r3, r0, #3
  40f5d6:	e7f4      	b.n	40f5c2 <_dtoa_r+0x82>
  40f5d8:	2301      	movs	r3, #1
  40f5da:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40f5de:	6033      	str	r3, [r6, #0]
  40f5e0:	46ab      	mov	fp, r5
  40f5e2:	e7c5      	b.n	40f570 <_dtoa_r+0x30>
  40f5e4:	aa18      	add	r2, sp, #96	; 0x60
  40f5e6:	ab19      	add	r3, sp, #100	; 0x64
  40f5e8:	9201      	str	r2, [sp, #4]
  40f5ea:	9300      	str	r3, [sp, #0]
  40f5ec:	4652      	mov	r2, sl
  40f5ee:	465b      	mov	r3, fp
  40f5f0:	4620      	mov	r0, r4
  40f5f2:	f001 fca7 	bl	410f44 <__d2b>
  40f5f6:	0d2b      	lsrs	r3, r5, #20
  40f5f8:	4681      	mov	r9, r0
  40f5fa:	d071      	beq.n	40f6e0 <_dtoa_r+0x1a0>
  40f5fc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40f600:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40f604:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40f606:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40f60a:	4650      	mov	r0, sl
  40f60c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40f610:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40f614:	2200      	movs	r2, #0
  40f616:	4b78      	ldr	r3, [pc, #480]	; (40f7f8 <_dtoa_r+0x2b8>)
  40f618:	f7fd fae2 	bl	40cbe0 <__aeabi_dsub>
  40f61c:	a36c      	add	r3, pc, #432	; (adr r3, 40f7d0 <_dtoa_r+0x290>)
  40f61e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f622:	f7fd fc91 	bl	40cf48 <__aeabi_dmul>
  40f626:	a36c      	add	r3, pc, #432	; (adr r3, 40f7d8 <_dtoa_r+0x298>)
  40f628:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f62c:	f7fd fada 	bl	40cbe4 <__adddf3>
  40f630:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40f634:	4630      	mov	r0, r6
  40f636:	f7fd fc21 	bl	40ce7c <__aeabi_i2d>
  40f63a:	a369      	add	r3, pc, #420	; (adr r3, 40f7e0 <_dtoa_r+0x2a0>)
  40f63c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f640:	f7fd fc82 	bl	40cf48 <__aeabi_dmul>
  40f644:	4602      	mov	r2, r0
  40f646:	460b      	mov	r3, r1
  40f648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40f64c:	f7fd faca 	bl	40cbe4 <__adddf3>
  40f650:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40f654:	f7fd ff28 	bl	40d4a8 <__aeabi_d2iz>
  40f658:	2200      	movs	r2, #0
  40f65a:	9002      	str	r0, [sp, #8]
  40f65c:	2300      	movs	r3, #0
  40f65e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f662:	f7fd fee3 	bl	40d42c <__aeabi_dcmplt>
  40f666:	2800      	cmp	r0, #0
  40f668:	f040 8173 	bne.w	40f952 <_dtoa_r+0x412>
  40f66c:	9d02      	ldr	r5, [sp, #8]
  40f66e:	2d16      	cmp	r5, #22
  40f670:	f200 815d 	bhi.w	40f92e <_dtoa_r+0x3ee>
  40f674:	4b61      	ldr	r3, [pc, #388]	; (40f7fc <_dtoa_r+0x2bc>)
  40f676:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40f67a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40f67e:	4652      	mov	r2, sl
  40f680:	465b      	mov	r3, fp
  40f682:	f7fd fef1 	bl	40d468 <__aeabi_dcmpgt>
  40f686:	2800      	cmp	r0, #0
  40f688:	f000 81c5 	beq.w	40fa16 <_dtoa_r+0x4d6>
  40f68c:	1e6b      	subs	r3, r5, #1
  40f68e:	9302      	str	r3, [sp, #8]
  40f690:	2300      	movs	r3, #0
  40f692:	930e      	str	r3, [sp, #56]	; 0x38
  40f694:	1bbf      	subs	r7, r7, r6
  40f696:	1e7b      	subs	r3, r7, #1
  40f698:	9306      	str	r3, [sp, #24]
  40f69a:	f100 8154 	bmi.w	40f946 <_dtoa_r+0x406>
  40f69e:	2300      	movs	r3, #0
  40f6a0:	9308      	str	r3, [sp, #32]
  40f6a2:	9b02      	ldr	r3, [sp, #8]
  40f6a4:	2b00      	cmp	r3, #0
  40f6a6:	f2c0 8145 	blt.w	40f934 <_dtoa_r+0x3f4>
  40f6aa:	9a06      	ldr	r2, [sp, #24]
  40f6ac:	930d      	str	r3, [sp, #52]	; 0x34
  40f6ae:	4611      	mov	r1, r2
  40f6b0:	4419      	add	r1, r3
  40f6b2:	2300      	movs	r3, #0
  40f6b4:	9106      	str	r1, [sp, #24]
  40f6b6:	930c      	str	r3, [sp, #48]	; 0x30
  40f6b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f6ba:	2b09      	cmp	r3, #9
  40f6bc:	d82a      	bhi.n	40f714 <_dtoa_r+0x1d4>
  40f6be:	2b05      	cmp	r3, #5
  40f6c0:	f340 865b 	ble.w	41037a <_dtoa_r+0xe3a>
  40f6c4:	3b04      	subs	r3, #4
  40f6c6:	9324      	str	r3, [sp, #144]	; 0x90
  40f6c8:	2500      	movs	r5, #0
  40f6ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f6cc:	3b02      	subs	r3, #2
  40f6ce:	2b03      	cmp	r3, #3
  40f6d0:	f200 8642 	bhi.w	410358 <_dtoa_r+0xe18>
  40f6d4:	e8df f013 	tbh	[pc, r3, lsl #1]
  40f6d8:	02c903d4 	.word	0x02c903d4
  40f6dc:	046103df 	.word	0x046103df
  40f6e0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40f6e2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40f6e4:	443e      	add	r6, r7
  40f6e6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40f6ea:	2b20      	cmp	r3, #32
  40f6ec:	f340 818e 	ble.w	40fa0c <_dtoa_r+0x4cc>
  40f6f0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40f6f4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40f6f8:	409d      	lsls	r5, r3
  40f6fa:	fa2a f000 	lsr.w	r0, sl, r0
  40f6fe:	4328      	orrs	r0, r5
  40f700:	f7fd fbac 	bl	40ce5c <__aeabi_ui2d>
  40f704:	2301      	movs	r3, #1
  40f706:	3e01      	subs	r6, #1
  40f708:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40f70c:	9314      	str	r3, [sp, #80]	; 0x50
  40f70e:	e781      	b.n	40f614 <_dtoa_r+0xd4>
  40f710:	483b      	ldr	r0, [pc, #236]	; (40f800 <_dtoa_r+0x2c0>)
  40f712:	e743      	b.n	40f59c <_dtoa_r+0x5c>
  40f714:	2100      	movs	r1, #0
  40f716:	6461      	str	r1, [r4, #68]	; 0x44
  40f718:	4620      	mov	r0, r4
  40f71a:	9125      	str	r1, [sp, #148]	; 0x94
  40f71c:	f001 f974 	bl	410a08 <_Balloc>
  40f720:	f04f 33ff 	mov.w	r3, #4294967295
  40f724:	930a      	str	r3, [sp, #40]	; 0x28
  40f726:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40f728:	930f      	str	r3, [sp, #60]	; 0x3c
  40f72a:	2301      	movs	r3, #1
  40f72c:	9004      	str	r0, [sp, #16]
  40f72e:	6420      	str	r0, [r4, #64]	; 0x40
  40f730:	9224      	str	r2, [sp, #144]	; 0x90
  40f732:	930b      	str	r3, [sp, #44]	; 0x2c
  40f734:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40f736:	2b00      	cmp	r3, #0
  40f738:	f2c0 80d9 	blt.w	40f8ee <_dtoa_r+0x3ae>
  40f73c:	9a02      	ldr	r2, [sp, #8]
  40f73e:	2a0e      	cmp	r2, #14
  40f740:	f300 80d5 	bgt.w	40f8ee <_dtoa_r+0x3ae>
  40f744:	4b2d      	ldr	r3, [pc, #180]	; (40f7fc <_dtoa_r+0x2bc>)
  40f746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f74e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40f752:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40f754:	2b00      	cmp	r3, #0
  40f756:	f2c0 83ba 	blt.w	40fece <_dtoa_r+0x98e>
  40f75a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40f75e:	4650      	mov	r0, sl
  40f760:	462a      	mov	r2, r5
  40f762:	4633      	mov	r3, r6
  40f764:	4659      	mov	r1, fp
  40f766:	f7fd fd19 	bl	40d19c <__aeabi_ddiv>
  40f76a:	f7fd fe9d 	bl	40d4a8 <__aeabi_d2iz>
  40f76e:	4680      	mov	r8, r0
  40f770:	f7fd fb84 	bl	40ce7c <__aeabi_i2d>
  40f774:	462a      	mov	r2, r5
  40f776:	4633      	mov	r3, r6
  40f778:	f7fd fbe6 	bl	40cf48 <__aeabi_dmul>
  40f77c:	460b      	mov	r3, r1
  40f77e:	4602      	mov	r2, r0
  40f780:	4659      	mov	r1, fp
  40f782:	4650      	mov	r0, sl
  40f784:	f7fd fa2c 	bl	40cbe0 <__aeabi_dsub>
  40f788:	9d04      	ldr	r5, [sp, #16]
  40f78a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40f78e:	702b      	strb	r3, [r5, #0]
  40f790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f792:	2b01      	cmp	r3, #1
  40f794:	4606      	mov	r6, r0
  40f796:	460f      	mov	r7, r1
  40f798:	f105 0501 	add.w	r5, r5, #1
  40f79c:	d068      	beq.n	40f870 <_dtoa_r+0x330>
  40f79e:	2200      	movs	r2, #0
  40f7a0:	4b18      	ldr	r3, [pc, #96]	; (40f804 <_dtoa_r+0x2c4>)
  40f7a2:	f7fd fbd1 	bl	40cf48 <__aeabi_dmul>
  40f7a6:	2200      	movs	r2, #0
  40f7a8:	2300      	movs	r3, #0
  40f7aa:	4606      	mov	r6, r0
  40f7ac:	460f      	mov	r7, r1
  40f7ae:	f7fd fe33 	bl	40d418 <__aeabi_dcmpeq>
  40f7b2:	2800      	cmp	r0, #0
  40f7b4:	f040 8088 	bne.w	40f8c8 <_dtoa_r+0x388>
  40f7b8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40f7bc:	f04f 0a00 	mov.w	sl, #0
  40f7c0:	f8df b040 	ldr.w	fp, [pc, #64]	; 40f804 <_dtoa_r+0x2c4>
  40f7c4:	940c      	str	r4, [sp, #48]	; 0x30
  40f7c6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40f7ca:	e028      	b.n	40f81e <_dtoa_r+0x2de>
  40f7cc:	f3af 8000 	nop.w
  40f7d0:	636f4361 	.word	0x636f4361
  40f7d4:	3fd287a7 	.word	0x3fd287a7
  40f7d8:	8b60c8b3 	.word	0x8b60c8b3
  40f7dc:	3fc68a28 	.word	0x3fc68a28
  40f7e0:	509f79fb 	.word	0x509f79fb
  40f7e4:	3fd34413 	.word	0x3fd34413
  40f7e8:	7ff00000 	.word	0x7ff00000
  40f7ec:	0041390d 	.word	0x0041390d
  40f7f0:	00413930 	.word	0x00413930
  40f7f4:	0041393c 	.word	0x0041393c
  40f7f8:	3ff80000 	.word	0x3ff80000
  40f7fc:	00413968 	.word	0x00413968
  40f800:	0041390c 	.word	0x0041390c
  40f804:	40240000 	.word	0x40240000
  40f808:	f7fd fb9e 	bl	40cf48 <__aeabi_dmul>
  40f80c:	2200      	movs	r2, #0
  40f80e:	2300      	movs	r3, #0
  40f810:	4606      	mov	r6, r0
  40f812:	460f      	mov	r7, r1
  40f814:	f7fd fe00 	bl	40d418 <__aeabi_dcmpeq>
  40f818:	2800      	cmp	r0, #0
  40f81a:	f040 83c1 	bne.w	40ffa0 <_dtoa_r+0xa60>
  40f81e:	4642      	mov	r2, r8
  40f820:	464b      	mov	r3, r9
  40f822:	4630      	mov	r0, r6
  40f824:	4639      	mov	r1, r7
  40f826:	f7fd fcb9 	bl	40d19c <__aeabi_ddiv>
  40f82a:	f7fd fe3d 	bl	40d4a8 <__aeabi_d2iz>
  40f82e:	4604      	mov	r4, r0
  40f830:	f7fd fb24 	bl	40ce7c <__aeabi_i2d>
  40f834:	4642      	mov	r2, r8
  40f836:	464b      	mov	r3, r9
  40f838:	f7fd fb86 	bl	40cf48 <__aeabi_dmul>
  40f83c:	4602      	mov	r2, r0
  40f83e:	460b      	mov	r3, r1
  40f840:	4630      	mov	r0, r6
  40f842:	4639      	mov	r1, r7
  40f844:	f7fd f9cc 	bl	40cbe0 <__aeabi_dsub>
  40f848:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40f84c:	9e04      	ldr	r6, [sp, #16]
  40f84e:	f805 eb01 	strb.w	lr, [r5], #1
  40f852:	eba5 0e06 	sub.w	lr, r5, r6
  40f856:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40f858:	45b6      	cmp	lr, r6
  40f85a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40f85e:	4652      	mov	r2, sl
  40f860:	465b      	mov	r3, fp
  40f862:	d1d1      	bne.n	40f808 <_dtoa_r+0x2c8>
  40f864:	46a0      	mov	r8, r4
  40f866:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40f86a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40f86c:	4606      	mov	r6, r0
  40f86e:	460f      	mov	r7, r1
  40f870:	4632      	mov	r2, r6
  40f872:	463b      	mov	r3, r7
  40f874:	4630      	mov	r0, r6
  40f876:	4639      	mov	r1, r7
  40f878:	f7fd f9b4 	bl	40cbe4 <__adddf3>
  40f87c:	4606      	mov	r6, r0
  40f87e:	460f      	mov	r7, r1
  40f880:	4602      	mov	r2, r0
  40f882:	460b      	mov	r3, r1
  40f884:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f888:	f7fd fdd0 	bl	40d42c <__aeabi_dcmplt>
  40f88c:	b948      	cbnz	r0, 40f8a2 <_dtoa_r+0x362>
  40f88e:	4632      	mov	r2, r6
  40f890:	463b      	mov	r3, r7
  40f892:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f896:	f7fd fdbf 	bl	40d418 <__aeabi_dcmpeq>
  40f89a:	b1a8      	cbz	r0, 40f8c8 <_dtoa_r+0x388>
  40f89c:	f018 0f01 	tst.w	r8, #1
  40f8a0:	d012      	beq.n	40f8c8 <_dtoa_r+0x388>
  40f8a2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40f8a6:	9a04      	ldr	r2, [sp, #16]
  40f8a8:	1e6b      	subs	r3, r5, #1
  40f8aa:	e004      	b.n	40f8b6 <_dtoa_r+0x376>
  40f8ac:	429a      	cmp	r2, r3
  40f8ae:	f000 8401 	beq.w	4100b4 <_dtoa_r+0xb74>
  40f8b2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40f8b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40f8ba:	f103 0501 	add.w	r5, r3, #1
  40f8be:	d0f5      	beq.n	40f8ac <_dtoa_r+0x36c>
  40f8c0:	f108 0801 	add.w	r8, r8, #1
  40f8c4:	f883 8000 	strb.w	r8, [r3]
  40f8c8:	4649      	mov	r1, r9
  40f8ca:	4620      	mov	r0, r4
  40f8cc:	f001 f8c2 	bl	410a54 <_Bfree>
  40f8d0:	2200      	movs	r2, #0
  40f8d2:	9b02      	ldr	r3, [sp, #8]
  40f8d4:	702a      	strb	r2, [r5, #0]
  40f8d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40f8d8:	3301      	adds	r3, #1
  40f8da:	6013      	str	r3, [r2, #0]
  40f8dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40f8de:	2b00      	cmp	r3, #0
  40f8e0:	f000 839e 	beq.w	410020 <_dtoa_r+0xae0>
  40f8e4:	9804      	ldr	r0, [sp, #16]
  40f8e6:	601d      	str	r5, [r3, #0]
  40f8e8:	b01b      	add	sp, #108	; 0x6c
  40f8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f8ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40f8f0:	2a00      	cmp	r2, #0
  40f8f2:	d03e      	beq.n	40f972 <_dtoa_r+0x432>
  40f8f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40f8f6:	2a01      	cmp	r2, #1
  40f8f8:	f340 8311 	ble.w	40ff1e <_dtoa_r+0x9de>
  40f8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f8fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f900:	1e5f      	subs	r7, r3, #1
  40f902:	42ba      	cmp	r2, r7
  40f904:	f2c0 838f 	blt.w	410026 <_dtoa_r+0xae6>
  40f908:	1bd7      	subs	r7, r2, r7
  40f90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f90c:	2b00      	cmp	r3, #0
  40f90e:	f2c0 848b 	blt.w	410228 <_dtoa_r+0xce8>
  40f912:	9d08      	ldr	r5, [sp, #32]
  40f914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f916:	9a08      	ldr	r2, [sp, #32]
  40f918:	441a      	add	r2, r3
  40f91a:	9208      	str	r2, [sp, #32]
  40f91c:	9a06      	ldr	r2, [sp, #24]
  40f91e:	2101      	movs	r1, #1
  40f920:	441a      	add	r2, r3
  40f922:	4620      	mov	r0, r4
  40f924:	9206      	str	r2, [sp, #24]
  40f926:	f001 f92f 	bl	410b88 <__i2b>
  40f92a:	4606      	mov	r6, r0
  40f92c:	e024      	b.n	40f978 <_dtoa_r+0x438>
  40f92e:	2301      	movs	r3, #1
  40f930:	930e      	str	r3, [sp, #56]	; 0x38
  40f932:	e6af      	b.n	40f694 <_dtoa_r+0x154>
  40f934:	9a08      	ldr	r2, [sp, #32]
  40f936:	9b02      	ldr	r3, [sp, #8]
  40f938:	1ad2      	subs	r2, r2, r3
  40f93a:	425b      	negs	r3, r3
  40f93c:	930c      	str	r3, [sp, #48]	; 0x30
  40f93e:	2300      	movs	r3, #0
  40f940:	9208      	str	r2, [sp, #32]
  40f942:	930d      	str	r3, [sp, #52]	; 0x34
  40f944:	e6b8      	b.n	40f6b8 <_dtoa_r+0x178>
  40f946:	f1c7 0301 	rsb	r3, r7, #1
  40f94a:	9308      	str	r3, [sp, #32]
  40f94c:	2300      	movs	r3, #0
  40f94e:	9306      	str	r3, [sp, #24]
  40f950:	e6a7      	b.n	40f6a2 <_dtoa_r+0x162>
  40f952:	9d02      	ldr	r5, [sp, #8]
  40f954:	4628      	mov	r0, r5
  40f956:	f7fd fa91 	bl	40ce7c <__aeabi_i2d>
  40f95a:	4602      	mov	r2, r0
  40f95c:	460b      	mov	r3, r1
  40f95e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f962:	f7fd fd59 	bl	40d418 <__aeabi_dcmpeq>
  40f966:	2800      	cmp	r0, #0
  40f968:	f47f ae80 	bne.w	40f66c <_dtoa_r+0x12c>
  40f96c:	1e6b      	subs	r3, r5, #1
  40f96e:	9302      	str	r3, [sp, #8]
  40f970:	e67c      	b.n	40f66c <_dtoa_r+0x12c>
  40f972:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40f974:	9d08      	ldr	r5, [sp, #32]
  40f976:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40f978:	2d00      	cmp	r5, #0
  40f97a:	dd0c      	ble.n	40f996 <_dtoa_r+0x456>
  40f97c:	9906      	ldr	r1, [sp, #24]
  40f97e:	2900      	cmp	r1, #0
  40f980:	460b      	mov	r3, r1
  40f982:	dd08      	ble.n	40f996 <_dtoa_r+0x456>
  40f984:	42a9      	cmp	r1, r5
  40f986:	9a08      	ldr	r2, [sp, #32]
  40f988:	bfa8      	it	ge
  40f98a:	462b      	movge	r3, r5
  40f98c:	1ad2      	subs	r2, r2, r3
  40f98e:	1aed      	subs	r5, r5, r3
  40f990:	1acb      	subs	r3, r1, r3
  40f992:	9208      	str	r2, [sp, #32]
  40f994:	9306      	str	r3, [sp, #24]
  40f996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f998:	b1d3      	cbz	r3, 40f9d0 <_dtoa_r+0x490>
  40f99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f99c:	2b00      	cmp	r3, #0
  40f99e:	f000 82b7 	beq.w	40ff10 <_dtoa_r+0x9d0>
  40f9a2:	2f00      	cmp	r7, #0
  40f9a4:	dd10      	ble.n	40f9c8 <_dtoa_r+0x488>
  40f9a6:	4631      	mov	r1, r6
  40f9a8:	463a      	mov	r2, r7
  40f9aa:	4620      	mov	r0, r4
  40f9ac:	f001 f988 	bl	410cc0 <__pow5mult>
  40f9b0:	464a      	mov	r2, r9
  40f9b2:	4601      	mov	r1, r0
  40f9b4:	4606      	mov	r6, r0
  40f9b6:	4620      	mov	r0, r4
  40f9b8:	f001 f8f0 	bl	410b9c <__multiply>
  40f9bc:	4649      	mov	r1, r9
  40f9be:	4680      	mov	r8, r0
  40f9c0:	4620      	mov	r0, r4
  40f9c2:	f001 f847 	bl	410a54 <_Bfree>
  40f9c6:	46c1      	mov	r9, r8
  40f9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f9ca:	1bda      	subs	r2, r3, r7
  40f9cc:	f040 82a1 	bne.w	40ff12 <_dtoa_r+0x9d2>
  40f9d0:	2101      	movs	r1, #1
  40f9d2:	4620      	mov	r0, r4
  40f9d4:	f001 f8d8 	bl	410b88 <__i2b>
  40f9d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f9da:	2b00      	cmp	r3, #0
  40f9dc:	4680      	mov	r8, r0
  40f9de:	dd1c      	ble.n	40fa1a <_dtoa_r+0x4da>
  40f9e0:	4601      	mov	r1, r0
  40f9e2:	461a      	mov	r2, r3
  40f9e4:	4620      	mov	r0, r4
  40f9e6:	f001 f96b 	bl	410cc0 <__pow5mult>
  40f9ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f9ec:	2b01      	cmp	r3, #1
  40f9ee:	4680      	mov	r8, r0
  40f9f0:	f340 8254 	ble.w	40fe9c <_dtoa_r+0x95c>
  40f9f4:	2300      	movs	r3, #0
  40f9f6:	930c      	str	r3, [sp, #48]	; 0x30
  40f9f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40f9fc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40fa00:	6918      	ldr	r0, [r3, #16]
  40fa02:	f001 f871 	bl	410ae8 <__hi0bits>
  40fa06:	f1c0 0020 	rsb	r0, r0, #32
  40fa0a:	e010      	b.n	40fa2e <_dtoa_r+0x4ee>
  40fa0c:	f1c3 0520 	rsb	r5, r3, #32
  40fa10:	fa0a f005 	lsl.w	r0, sl, r5
  40fa14:	e674      	b.n	40f700 <_dtoa_r+0x1c0>
  40fa16:	900e      	str	r0, [sp, #56]	; 0x38
  40fa18:	e63c      	b.n	40f694 <_dtoa_r+0x154>
  40fa1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40fa1c:	2b01      	cmp	r3, #1
  40fa1e:	f340 8287 	ble.w	40ff30 <_dtoa_r+0x9f0>
  40fa22:	2300      	movs	r3, #0
  40fa24:	930c      	str	r3, [sp, #48]	; 0x30
  40fa26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fa28:	2001      	movs	r0, #1
  40fa2a:	2b00      	cmp	r3, #0
  40fa2c:	d1e4      	bne.n	40f9f8 <_dtoa_r+0x4b8>
  40fa2e:	9a06      	ldr	r2, [sp, #24]
  40fa30:	4410      	add	r0, r2
  40fa32:	f010 001f 	ands.w	r0, r0, #31
  40fa36:	f000 80a1 	beq.w	40fb7c <_dtoa_r+0x63c>
  40fa3a:	f1c0 0320 	rsb	r3, r0, #32
  40fa3e:	2b04      	cmp	r3, #4
  40fa40:	f340 849e 	ble.w	410380 <_dtoa_r+0xe40>
  40fa44:	9b08      	ldr	r3, [sp, #32]
  40fa46:	f1c0 001c 	rsb	r0, r0, #28
  40fa4a:	4403      	add	r3, r0
  40fa4c:	9308      	str	r3, [sp, #32]
  40fa4e:	4613      	mov	r3, r2
  40fa50:	4403      	add	r3, r0
  40fa52:	4405      	add	r5, r0
  40fa54:	9306      	str	r3, [sp, #24]
  40fa56:	9b08      	ldr	r3, [sp, #32]
  40fa58:	2b00      	cmp	r3, #0
  40fa5a:	dd05      	ble.n	40fa68 <_dtoa_r+0x528>
  40fa5c:	4649      	mov	r1, r9
  40fa5e:	461a      	mov	r2, r3
  40fa60:	4620      	mov	r0, r4
  40fa62:	f001 f97d 	bl	410d60 <__lshift>
  40fa66:	4681      	mov	r9, r0
  40fa68:	9b06      	ldr	r3, [sp, #24]
  40fa6a:	2b00      	cmp	r3, #0
  40fa6c:	dd05      	ble.n	40fa7a <_dtoa_r+0x53a>
  40fa6e:	4641      	mov	r1, r8
  40fa70:	461a      	mov	r2, r3
  40fa72:	4620      	mov	r0, r4
  40fa74:	f001 f974 	bl	410d60 <__lshift>
  40fa78:	4680      	mov	r8, r0
  40fa7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40fa7c:	2b00      	cmp	r3, #0
  40fa7e:	f040 8086 	bne.w	40fb8e <_dtoa_r+0x64e>
  40fa82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fa84:	2b00      	cmp	r3, #0
  40fa86:	f340 8266 	ble.w	40ff56 <_dtoa_r+0xa16>
  40fa8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40fa8c:	2b00      	cmp	r3, #0
  40fa8e:	f000 8098 	beq.w	40fbc2 <_dtoa_r+0x682>
  40fa92:	2d00      	cmp	r5, #0
  40fa94:	dd05      	ble.n	40faa2 <_dtoa_r+0x562>
  40fa96:	4631      	mov	r1, r6
  40fa98:	462a      	mov	r2, r5
  40fa9a:	4620      	mov	r0, r4
  40fa9c:	f001 f960 	bl	410d60 <__lshift>
  40faa0:	4606      	mov	r6, r0
  40faa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40faa4:	2b00      	cmp	r3, #0
  40faa6:	f040 8337 	bne.w	410118 <_dtoa_r+0xbd8>
  40faaa:	9606      	str	r6, [sp, #24]
  40faac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40faae:	9a04      	ldr	r2, [sp, #16]
  40fab0:	f8dd b018 	ldr.w	fp, [sp, #24]
  40fab4:	3b01      	subs	r3, #1
  40fab6:	18d3      	adds	r3, r2, r3
  40fab8:	930b      	str	r3, [sp, #44]	; 0x2c
  40faba:	f00a 0301 	and.w	r3, sl, #1
  40fabe:	930c      	str	r3, [sp, #48]	; 0x30
  40fac0:	4617      	mov	r7, r2
  40fac2:	46c2      	mov	sl, r8
  40fac4:	4651      	mov	r1, sl
  40fac6:	4648      	mov	r0, r9
  40fac8:	f7ff fca6 	bl	40f418 <quorem>
  40facc:	4631      	mov	r1, r6
  40face:	4605      	mov	r5, r0
  40fad0:	4648      	mov	r0, r9
  40fad2:	f001 f997 	bl	410e04 <__mcmp>
  40fad6:	465a      	mov	r2, fp
  40fad8:	900a      	str	r0, [sp, #40]	; 0x28
  40fada:	4651      	mov	r1, sl
  40fadc:	4620      	mov	r0, r4
  40fade:	f001 f9ad 	bl	410e3c <__mdiff>
  40fae2:	68c2      	ldr	r2, [r0, #12]
  40fae4:	4680      	mov	r8, r0
  40fae6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40faea:	2a00      	cmp	r2, #0
  40faec:	f040 822b 	bne.w	40ff46 <_dtoa_r+0xa06>
  40faf0:	4601      	mov	r1, r0
  40faf2:	4648      	mov	r0, r9
  40faf4:	9308      	str	r3, [sp, #32]
  40faf6:	f001 f985 	bl	410e04 <__mcmp>
  40fafa:	4641      	mov	r1, r8
  40fafc:	9006      	str	r0, [sp, #24]
  40fafe:	4620      	mov	r0, r4
  40fb00:	f000 ffa8 	bl	410a54 <_Bfree>
  40fb04:	9a06      	ldr	r2, [sp, #24]
  40fb06:	9b08      	ldr	r3, [sp, #32]
  40fb08:	b932      	cbnz	r2, 40fb18 <_dtoa_r+0x5d8>
  40fb0a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40fb0c:	b921      	cbnz	r1, 40fb18 <_dtoa_r+0x5d8>
  40fb0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40fb10:	2a00      	cmp	r2, #0
  40fb12:	f000 83ef 	beq.w	4102f4 <_dtoa_r+0xdb4>
  40fb16:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40fb18:	990a      	ldr	r1, [sp, #40]	; 0x28
  40fb1a:	2900      	cmp	r1, #0
  40fb1c:	f2c0 829f 	blt.w	41005e <_dtoa_r+0xb1e>
  40fb20:	d105      	bne.n	40fb2e <_dtoa_r+0x5ee>
  40fb22:	9924      	ldr	r1, [sp, #144]	; 0x90
  40fb24:	b919      	cbnz	r1, 40fb2e <_dtoa_r+0x5ee>
  40fb26:	990c      	ldr	r1, [sp, #48]	; 0x30
  40fb28:	2900      	cmp	r1, #0
  40fb2a:	f000 8298 	beq.w	41005e <_dtoa_r+0xb1e>
  40fb2e:	2a00      	cmp	r2, #0
  40fb30:	f300 8306 	bgt.w	410140 <_dtoa_r+0xc00>
  40fb34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40fb36:	703b      	strb	r3, [r7, #0]
  40fb38:	f107 0801 	add.w	r8, r7, #1
  40fb3c:	4297      	cmp	r7, r2
  40fb3e:	4645      	mov	r5, r8
  40fb40:	f000 830c 	beq.w	41015c <_dtoa_r+0xc1c>
  40fb44:	4649      	mov	r1, r9
  40fb46:	2300      	movs	r3, #0
  40fb48:	220a      	movs	r2, #10
  40fb4a:	4620      	mov	r0, r4
  40fb4c:	f000 ff8c 	bl	410a68 <__multadd>
  40fb50:	455e      	cmp	r6, fp
  40fb52:	4681      	mov	r9, r0
  40fb54:	4631      	mov	r1, r6
  40fb56:	f04f 0300 	mov.w	r3, #0
  40fb5a:	f04f 020a 	mov.w	r2, #10
  40fb5e:	4620      	mov	r0, r4
  40fb60:	f000 81eb 	beq.w	40ff3a <_dtoa_r+0x9fa>
  40fb64:	f000 ff80 	bl	410a68 <__multadd>
  40fb68:	4659      	mov	r1, fp
  40fb6a:	4606      	mov	r6, r0
  40fb6c:	2300      	movs	r3, #0
  40fb6e:	220a      	movs	r2, #10
  40fb70:	4620      	mov	r0, r4
  40fb72:	f000 ff79 	bl	410a68 <__multadd>
  40fb76:	4647      	mov	r7, r8
  40fb78:	4683      	mov	fp, r0
  40fb7a:	e7a3      	b.n	40fac4 <_dtoa_r+0x584>
  40fb7c:	201c      	movs	r0, #28
  40fb7e:	9b08      	ldr	r3, [sp, #32]
  40fb80:	4403      	add	r3, r0
  40fb82:	9308      	str	r3, [sp, #32]
  40fb84:	9b06      	ldr	r3, [sp, #24]
  40fb86:	4403      	add	r3, r0
  40fb88:	4405      	add	r5, r0
  40fb8a:	9306      	str	r3, [sp, #24]
  40fb8c:	e763      	b.n	40fa56 <_dtoa_r+0x516>
  40fb8e:	4641      	mov	r1, r8
  40fb90:	4648      	mov	r0, r9
  40fb92:	f001 f937 	bl	410e04 <__mcmp>
  40fb96:	2800      	cmp	r0, #0
  40fb98:	f6bf af73 	bge.w	40fa82 <_dtoa_r+0x542>
  40fb9c:	9f02      	ldr	r7, [sp, #8]
  40fb9e:	4649      	mov	r1, r9
  40fba0:	2300      	movs	r3, #0
  40fba2:	220a      	movs	r2, #10
  40fba4:	4620      	mov	r0, r4
  40fba6:	3f01      	subs	r7, #1
  40fba8:	9702      	str	r7, [sp, #8]
  40fbaa:	f000 ff5d 	bl	410a68 <__multadd>
  40fbae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40fbb0:	4681      	mov	r9, r0
  40fbb2:	2b00      	cmp	r3, #0
  40fbb4:	f040 83b6 	bne.w	410324 <_dtoa_r+0xde4>
  40fbb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40fbba:	2b00      	cmp	r3, #0
  40fbbc:	f340 83bf 	ble.w	41033e <_dtoa_r+0xdfe>
  40fbc0:	930a      	str	r3, [sp, #40]	; 0x28
  40fbc2:	f8dd b010 	ldr.w	fp, [sp, #16]
  40fbc6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40fbc8:	465d      	mov	r5, fp
  40fbca:	e002      	b.n	40fbd2 <_dtoa_r+0x692>
  40fbcc:	f000 ff4c 	bl	410a68 <__multadd>
  40fbd0:	4681      	mov	r9, r0
  40fbd2:	4641      	mov	r1, r8
  40fbd4:	4648      	mov	r0, r9
  40fbd6:	f7ff fc1f 	bl	40f418 <quorem>
  40fbda:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40fbde:	f805 ab01 	strb.w	sl, [r5], #1
  40fbe2:	eba5 030b 	sub.w	r3, r5, fp
  40fbe6:	42bb      	cmp	r3, r7
  40fbe8:	f04f 020a 	mov.w	r2, #10
  40fbec:	f04f 0300 	mov.w	r3, #0
  40fbf0:	4649      	mov	r1, r9
  40fbf2:	4620      	mov	r0, r4
  40fbf4:	dbea      	blt.n	40fbcc <_dtoa_r+0x68c>
  40fbf6:	9b04      	ldr	r3, [sp, #16]
  40fbf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fbfa:	2a01      	cmp	r2, #1
  40fbfc:	bfac      	ite	ge
  40fbfe:	189b      	addge	r3, r3, r2
  40fc00:	3301      	addlt	r3, #1
  40fc02:	461d      	mov	r5, r3
  40fc04:	f04f 0b00 	mov.w	fp, #0
  40fc08:	4649      	mov	r1, r9
  40fc0a:	2201      	movs	r2, #1
  40fc0c:	4620      	mov	r0, r4
  40fc0e:	f001 f8a7 	bl	410d60 <__lshift>
  40fc12:	4641      	mov	r1, r8
  40fc14:	4681      	mov	r9, r0
  40fc16:	f001 f8f5 	bl	410e04 <__mcmp>
  40fc1a:	2800      	cmp	r0, #0
  40fc1c:	f340 823d 	ble.w	41009a <_dtoa_r+0xb5a>
  40fc20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40fc24:	9904      	ldr	r1, [sp, #16]
  40fc26:	1e6b      	subs	r3, r5, #1
  40fc28:	e004      	b.n	40fc34 <_dtoa_r+0x6f4>
  40fc2a:	428b      	cmp	r3, r1
  40fc2c:	f000 81ae 	beq.w	40ff8c <_dtoa_r+0xa4c>
  40fc30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40fc34:	2a39      	cmp	r2, #57	; 0x39
  40fc36:	f103 0501 	add.w	r5, r3, #1
  40fc3a:	d0f6      	beq.n	40fc2a <_dtoa_r+0x6ea>
  40fc3c:	3201      	adds	r2, #1
  40fc3e:	701a      	strb	r2, [r3, #0]
  40fc40:	4641      	mov	r1, r8
  40fc42:	4620      	mov	r0, r4
  40fc44:	f000 ff06 	bl	410a54 <_Bfree>
  40fc48:	2e00      	cmp	r6, #0
  40fc4a:	f43f ae3d 	beq.w	40f8c8 <_dtoa_r+0x388>
  40fc4e:	f1bb 0f00 	cmp.w	fp, #0
  40fc52:	d005      	beq.n	40fc60 <_dtoa_r+0x720>
  40fc54:	45b3      	cmp	fp, r6
  40fc56:	d003      	beq.n	40fc60 <_dtoa_r+0x720>
  40fc58:	4659      	mov	r1, fp
  40fc5a:	4620      	mov	r0, r4
  40fc5c:	f000 fefa 	bl	410a54 <_Bfree>
  40fc60:	4631      	mov	r1, r6
  40fc62:	4620      	mov	r0, r4
  40fc64:	f000 fef6 	bl	410a54 <_Bfree>
  40fc68:	e62e      	b.n	40f8c8 <_dtoa_r+0x388>
  40fc6a:	2300      	movs	r3, #0
  40fc6c:	930b      	str	r3, [sp, #44]	; 0x2c
  40fc6e:	9b02      	ldr	r3, [sp, #8]
  40fc70:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40fc72:	4413      	add	r3, r2
  40fc74:	930f      	str	r3, [sp, #60]	; 0x3c
  40fc76:	3301      	adds	r3, #1
  40fc78:	2b01      	cmp	r3, #1
  40fc7a:	461f      	mov	r7, r3
  40fc7c:	461e      	mov	r6, r3
  40fc7e:	930a      	str	r3, [sp, #40]	; 0x28
  40fc80:	bfb8      	it	lt
  40fc82:	2701      	movlt	r7, #1
  40fc84:	2100      	movs	r1, #0
  40fc86:	2f17      	cmp	r7, #23
  40fc88:	6461      	str	r1, [r4, #68]	; 0x44
  40fc8a:	d90a      	bls.n	40fca2 <_dtoa_r+0x762>
  40fc8c:	2201      	movs	r2, #1
  40fc8e:	2304      	movs	r3, #4
  40fc90:	005b      	lsls	r3, r3, #1
  40fc92:	f103 0014 	add.w	r0, r3, #20
  40fc96:	4287      	cmp	r7, r0
  40fc98:	4611      	mov	r1, r2
  40fc9a:	f102 0201 	add.w	r2, r2, #1
  40fc9e:	d2f7      	bcs.n	40fc90 <_dtoa_r+0x750>
  40fca0:	6461      	str	r1, [r4, #68]	; 0x44
  40fca2:	4620      	mov	r0, r4
  40fca4:	f000 feb0 	bl	410a08 <_Balloc>
  40fca8:	2e0e      	cmp	r6, #14
  40fcaa:	9004      	str	r0, [sp, #16]
  40fcac:	6420      	str	r0, [r4, #64]	; 0x40
  40fcae:	f63f ad41 	bhi.w	40f734 <_dtoa_r+0x1f4>
  40fcb2:	2d00      	cmp	r5, #0
  40fcb4:	f43f ad3e 	beq.w	40f734 <_dtoa_r+0x1f4>
  40fcb8:	9902      	ldr	r1, [sp, #8]
  40fcba:	2900      	cmp	r1, #0
  40fcbc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40fcc0:	f340 8202 	ble.w	4100c8 <_dtoa_r+0xb88>
  40fcc4:	4bb8      	ldr	r3, [pc, #736]	; (40ffa8 <_dtoa_r+0xa68>)
  40fcc6:	f001 020f 	and.w	r2, r1, #15
  40fcca:	110d      	asrs	r5, r1, #4
  40fccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40fcd0:	06e9      	lsls	r1, r5, #27
  40fcd2:	e9d3 6700 	ldrd	r6, r7, [r3]
  40fcd6:	f140 81ae 	bpl.w	410036 <_dtoa_r+0xaf6>
  40fcda:	4bb4      	ldr	r3, [pc, #720]	; (40ffac <_dtoa_r+0xa6c>)
  40fcdc:	4650      	mov	r0, sl
  40fcde:	4659      	mov	r1, fp
  40fce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40fce4:	f7fd fa5a 	bl	40d19c <__aeabi_ddiv>
  40fce8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40fcec:	f005 050f 	and.w	r5, r5, #15
  40fcf0:	f04f 0a03 	mov.w	sl, #3
  40fcf4:	b18d      	cbz	r5, 40fd1a <_dtoa_r+0x7da>
  40fcf6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40ffac <_dtoa_r+0xa6c>
  40fcfa:	07ea      	lsls	r2, r5, #31
  40fcfc:	d509      	bpl.n	40fd12 <_dtoa_r+0x7d2>
  40fcfe:	4630      	mov	r0, r6
  40fd00:	4639      	mov	r1, r7
  40fd02:	e9d8 2300 	ldrd	r2, r3, [r8]
  40fd06:	f7fd f91f 	bl	40cf48 <__aeabi_dmul>
  40fd0a:	f10a 0a01 	add.w	sl, sl, #1
  40fd0e:	4606      	mov	r6, r0
  40fd10:	460f      	mov	r7, r1
  40fd12:	106d      	asrs	r5, r5, #1
  40fd14:	f108 0808 	add.w	r8, r8, #8
  40fd18:	d1ef      	bne.n	40fcfa <_dtoa_r+0x7ba>
  40fd1a:	463b      	mov	r3, r7
  40fd1c:	4632      	mov	r2, r6
  40fd1e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40fd22:	f7fd fa3b 	bl	40d19c <__aeabi_ddiv>
  40fd26:	4607      	mov	r7, r0
  40fd28:	4688      	mov	r8, r1
  40fd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40fd2c:	b143      	cbz	r3, 40fd40 <_dtoa_r+0x800>
  40fd2e:	2200      	movs	r2, #0
  40fd30:	4b9f      	ldr	r3, [pc, #636]	; (40ffb0 <_dtoa_r+0xa70>)
  40fd32:	4638      	mov	r0, r7
  40fd34:	4641      	mov	r1, r8
  40fd36:	f7fd fb79 	bl	40d42c <__aeabi_dcmplt>
  40fd3a:	2800      	cmp	r0, #0
  40fd3c:	f040 8286 	bne.w	41024c <_dtoa_r+0xd0c>
  40fd40:	4650      	mov	r0, sl
  40fd42:	f7fd f89b 	bl	40ce7c <__aeabi_i2d>
  40fd46:	463a      	mov	r2, r7
  40fd48:	4643      	mov	r3, r8
  40fd4a:	f7fd f8fd 	bl	40cf48 <__aeabi_dmul>
  40fd4e:	4b99      	ldr	r3, [pc, #612]	; (40ffb4 <_dtoa_r+0xa74>)
  40fd50:	2200      	movs	r2, #0
  40fd52:	f7fc ff47 	bl	40cbe4 <__adddf3>
  40fd56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fd58:	4605      	mov	r5, r0
  40fd5a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40fd5e:	2b00      	cmp	r3, #0
  40fd60:	f000 813e 	beq.w	40ffe0 <_dtoa_r+0xaa0>
  40fd64:	9b02      	ldr	r3, [sp, #8]
  40fd66:	9315      	str	r3, [sp, #84]	; 0x54
  40fd68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fd6a:	9312      	str	r3, [sp, #72]	; 0x48
  40fd6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40fd6e:	2b00      	cmp	r3, #0
  40fd70:	f000 81fa 	beq.w	410168 <_dtoa_r+0xc28>
  40fd74:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40fd76:	4b8c      	ldr	r3, [pc, #560]	; (40ffa8 <_dtoa_r+0xa68>)
  40fd78:	498f      	ldr	r1, [pc, #572]	; (40ffb8 <_dtoa_r+0xa78>)
  40fd7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40fd7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40fd82:	2000      	movs	r0, #0
  40fd84:	f7fd fa0a 	bl	40d19c <__aeabi_ddiv>
  40fd88:	462a      	mov	r2, r5
  40fd8a:	4633      	mov	r3, r6
  40fd8c:	f7fc ff28 	bl	40cbe0 <__aeabi_dsub>
  40fd90:	4682      	mov	sl, r0
  40fd92:	468b      	mov	fp, r1
  40fd94:	4638      	mov	r0, r7
  40fd96:	4641      	mov	r1, r8
  40fd98:	f7fd fb86 	bl	40d4a8 <__aeabi_d2iz>
  40fd9c:	4605      	mov	r5, r0
  40fd9e:	f7fd f86d 	bl	40ce7c <__aeabi_i2d>
  40fda2:	4602      	mov	r2, r0
  40fda4:	460b      	mov	r3, r1
  40fda6:	4638      	mov	r0, r7
  40fda8:	4641      	mov	r1, r8
  40fdaa:	f7fc ff19 	bl	40cbe0 <__aeabi_dsub>
  40fdae:	3530      	adds	r5, #48	; 0x30
  40fdb0:	fa5f f885 	uxtb.w	r8, r5
  40fdb4:	9d04      	ldr	r5, [sp, #16]
  40fdb6:	4606      	mov	r6, r0
  40fdb8:	460f      	mov	r7, r1
  40fdba:	f885 8000 	strb.w	r8, [r5]
  40fdbe:	4602      	mov	r2, r0
  40fdc0:	460b      	mov	r3, r1
  40fdc2:	4650      	mov	r0, sl
  40fdc4:	4659      	mov	r1, fp
  40fdc6:	3501      	adds	r5, #1
  40fdc8:	f7fd fb4e 	bl	40d468 <__aeabi_dcmpgt>
  40fdcc:	2800      	cmp	r0, #0
  40fdce:	d154      	bne.n	40fe7a <_dtoa_r+0x93a>
  40fdd0:	4632      	mov	r2, r6
  40fdd2:	463b      	mov	r3, r7
  40fdd4:	2000      	movs	r0, #0
  40fdd6:	4976      	ldr	r1, [pc, #472]	; (40ffb0 <_dtoa_r+0xa70>)
  40fdd8:	f7fc ff02 	bl	40cbe0 <__aeabi_dsub>
  40fddc:	4602      	mov	r2, r0
  40fdde:	460b      	mov	r3, r1
  40fde0:	4650      	mov	r0, sl
  40fde2:	4659      	mov	r1, fp
  40fde4:	f7fd fb40 	bl	40d468 <__aeabi_dcmpgt>
  40fde8:	2800      	cmp	r0, #0
  40fdea:	f040 8270 	bne.w	4102ce <_dtoa_r+0xd8e>
  40fdee:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40fdf0:	2a01      	cmp	r2, #1
  40fdf2:	f000 8111 	beq.w	410018 <_dtoa_r+0xad8>
  40fdf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40fdf8:	9a04      	ldr	r2, [sp, #16]
  40fdfa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40fdfe:	4413      	add	r3, r2
  40fe00:	4699      	mov	r9, r3
  40fe02:	e00d      	b.n	40fe20 <_dtoa_r+0x8e0>
  40fe04:	2000      	movs	r0, #0
  40fe06:	496a      	ldr	r1, [pc, #424]	; (40ffb0 <_dtoa_r+0xa70>)
  40fe08:	f7fc feea 	bl	40cbe0 <__aeabi_dsub>
  40fe0c:	4652      	mov	r2, sl
  40fe0e:	465b      	mov	r3, fp
  40fe10:	f7fd fb0c 	bl	40d42c <__aeabi_dcmplt>
  40fe14:	2800      	cmp	r0, #0
  40fe16:	f040 8258 	bne.w	4102ca <_dtoa_r+0xd8a>
  40fe1a:	454d      	cmp	r5, r9
  40fe1c:	f000 80fa 	beq.w	410014 <_dtoa_r+0xad4>
  40fe20:	4650      	mov	r0, sl
  40fe22:	4659      	mov	r1, fp
  40fe24:	2200      	movs	r2, #0
  40fe26:	4b65      	ldr	r3, [pc, #404]	; (40ffbc <_dtoa_r+0xa7c>)
  40fe28:	f7fd f88e 	bl	40cf48 <__aeabi_dmul>
  40fe2c:	2200      	movs	r2, #0
  40fe2e:	4b63      	ldr	r3, [pc, #396]	; (40ffbc <_dtoa_r+0xa7c>)
  40fe30:	4682      	mov	sl, r0
  40fe32:	468b      	mov	fp, r1
  40fe34:	4630      	mov	r0, r6
  40fe36:	4639      	mov	r1, r7
  40fe38:	f7fd f886 	bl	40cf48 <__aeabi_dmul>
  40fe3c:	460f      	mov	r7, r1
  40fe3e:	4606      	mov	r6, r0
  40fe40:	f7fd fb32 	bl	40d4a8 <__aeabi_d2iz>
  40fe44:	4680      	mov	r8, r0
  40fe46:	f7fd f819 	bl	40ce7c <__aeabi_i2d>
  40fe4a:	4602      	mov	r2, r0
  40fe4c:	460b      	mov	r3, r1
  40fe4e:	4630      	mov	r0, r6
  40fe50:	4639      	mov	r1, r7
  40fe52:	f7fc fec5 	bl	40cbe0 <__aeabi_dsub>
  40fe56:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40fe5a:	fa5f f888 	uxtb.w	r8, r8
  40fe5e:	4652      	mov	r2, sl
  40fe60:	465b      	mov	r3, fp
  40fe62:	f805 8b01 	strb.w	r8, [r5], #1
  40fe66:	4606      	mov	r6, r0
  40fe68:	460f      	mov	r7, r1
  40fe6a:	f7fd fadf 	bl	40d42c <__aeabi_dcmplt>
  40fe6e:	4632      	mov	r2, r6
  40fe70:	463b      	mov	r3, r7
  40fe72:	2800      	cmp	r0, #0
  40fe74:	d0c6      	beq.n	40fe04 <_dtoa_r+0x8c4>
  40fe76:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40fe7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40fe7c:	9302      	str	r3, [sp, #8]
  40fe7e:	e523      	b.n	40f8c8 <_dtoa_r+0x388>
  40fe80:	2300      	movs	r3, #0
  40fe82:	930b      	str	r3, [sp, #44]	; 0x2c
  40fe84:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40fe86:	2b00      	cmp	r3, #0
  40fe88:	f340 80dc 	ble.w	410044 <_dtoa_r+0xb04>
  40fe8c:	461f      	mov	r7, r3
  40fe8e:	461e      	mov	r6, r3
  40fe90:	930f      	str	r3, [sp, #60]	; 0x3c
  40fe92:	930a      	str	r3, [sp, #40]	; 0x28
  40fe94:	e6f6      	b.n	40fc84 <_dtoa_r+0x744>
  40fe96:	2301      	movs	r3, #1
  40fe98:	930b      	str	r3, [sp, #44]	; 0x2c
  40fe9a:	e7f3      	b.n	40fe84 <_dtoa_r+0x944>
  40fe9c:	f1ba 0f00 	cmp.w	sl, #0
  40fea0:	f47f ada8 	bne.w	40f9f4 <_dtoa_r+0x4b4>
  40fea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40fea8:	2b00      	cmp	r3, #0
  40feaa:	f47f adba 	bne.w	40fa22 <_dtoa_r+0x4e2>
  40feae:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40feb2:	0d3f      	lsrs	r7, r7, #20
  40feb4:	053f      	lsls	r7, r7, #20
  40feb6:	2f00      	cmp	r7, #0
  40feb8:	f000 820d 	beq.w	4102d6 <_dtoa_r+0xd96>
  40febc:	9b08      	ldr	r3, [sp, #32]
  40febe:	3301      	adds	r3, #1
  40fec0:	9308      	str	r3, [sp, #32]
  40fec2:	9b06      	ldr	r3, [sp, #24]
  40fec4:	3301      	adds	r3, #1
  40fec6:	9306      	str	r3, [sp, #24]
  40fec8:	2301      	movs	r3, #1
  40feca:	930c      	str	r3, [sp, #48]	; 0x30
  40fecc:	e5ab      	b.n	40fa26 <_dtoa_r+0x4e6>
  40fece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fed0:	2b00      	cmp	r3, #0
  40fed2:	f73f ac42 	bgt.w	40f75a <_dtoa_r+0x21a>
  40fed6:	f040 8221 	bne.w	41031c <_dtoa_r+0xddc>
  40feda:	2200      	movs	r2, #0
  40fedc:	4b38      	ldr	r3, [pc, #224]	; (40ffc0 <_dtoa_r+0xa80>)
  40fede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40fee2:	f7fd f831 	bl	40cf48 <__aeabi_dmul>
  40fee6:	4652      	mov	r2, sl
  40fee8:	465b      	mov	r3, fp
  40feea:	f7fd fab3 	bl	40d454 <__aeabi_dcmpge>
  40feee:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40fef2:	4646      	mov	r6, r8
  40fef4:	2800      	cmp	r0, #0
  40fef6:	d041      	beq.n	40ff7c <_dtoa_r+0xa3c>
  40fef8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40fefa:	9d04      	ldr	r5, [sp, #16]
  40fefc:	43db      	mvns	r3, r3
  40fefe:	9302      	str	r3, [sp, #8]
  40ff00:	4641      	mov	r1, r8
  40ff02:	4620      	mov	r0, r4
  40ff04:	f000 fda6 	bl	410a54 <_Bfree>
  40ff08:	2e00      	cmp	r6, #0
  40ff0a:	f43f acdd 	beq.w	40f8c8 <_dtoa_r+0x388>
  40ff0e:	e6a7      	b.n	40fc60 <_dtoa_r+0x720>
  40ff10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ff12:	4649      	mov	r1, r9
  40ff14:	4620      	mov	r0, r4
  40ff16:	f000 fed3 	bl	410cc0 <__pow5mult>
  40ff1a:	4681      	mov	r9, r0
  40ff1c:	e558      	b.n	40f9d0 <_dtoa_r+0x490>
  40ff1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40ff20:	2a00      	cmp	r2, #0
  40ff22:	f000 8187 	beq.w	410234 <_dtoa_r+0xcf4>
  40ff26:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40ff2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40ff2c:	9d08      	ldr	r5, [sp, #32]
  40ff2e:	e4f2      	b.n	40f916 <_dtoa_r+0x3d6>
  40ff30:	f1ba 0f00 	cmp.w	sl, #0
  40ff34:	f47f ad75 	bne.w	40fa22 <_dtoa_r+0x4e2>
  40ff38:	e7b4      	b.n	40fea4 <_dtoa_r+0x964>
  40ff3a:	f000 fd95 	bl	410a68 <__multadd>
  40ff3e:	4647      	mov	r7, r8
  40ff40:	4606      	mov	r6, r0
  40ff42:	4683      	mov	fp, r0
  40ff44:	e5be      	b.n	40fac4 <_dtoa_r+0x584>
  40ff46:	4601      	mov	r1, r0
  40ff48:	4620      	mov	r0, r4
  40ff4a:	9306      	str	r3, [sp, #24]
  40ff4c:	f000 fd82 	bl	410a54 <_Bfree>
  40ff50:	2201      	movs	r2, #1
  40ff52:	9b06      	ldr	r3, [sp, #24]
  40ff54:	e5e0      	b.n	40fb18 <_dtoa_r+0x5d8>
  40ff56:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ff58:	2b02      	cmp	r3, #2
  40ff5a:	f77f ad96 	ble.w	40fa8a <_dtoa_r+0x54a>
  40ff5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ff60:	2b00      	cmp	r3, #0
  40ff62:	d1c9      	bne.n	40fef8 <_dtoa_r+0x9b8>
  40ff64:	4641      	mov	r1, r8
  40ff66:	2205      	movs	r2, #5
  40ff68:	4620      	mov	r0, r4
  40ff6a:	f000 fd7d 	bl	410a68 <__multadd>
  40ff6e:	4601      	mov	r1, r0
  40ff70:	4680      	mov	r8, r0
  40ff72:	4648      	mov	r0, r9
  40ff74:	f000 ff46 	bl	410e04 <__mcmp>
  40ff78:	2800      	cmp	r0, #0
  40ff7a:	ddbd      	ble.n	40fef8 <_dtoa_r+0x9b8>
  40ff7c:	9a02      	ldr	r2, [sp, #8]
  40ff7e:	9904      	ldr	r1, [sp, #16]
  40ff80:	2331      	movs	r3, #49	; 0x31
  40ff82:	3201      	adds	r2, #1
  40ff84:	9202      	str	r2, [sp, #8]
  40ff86:	700b      	strb	r3, [r1, #0]
  40ff88:	1c4d      	adds	r5, r1, #1
  40ff8a:	e7b9      	b.n	40ff00 <_dtoa_r+0x9c0>
  40ff8c:	9a02      	ldr	r2, [sp, #8]
  40ff8e:	3201      	adds	r2, #1
  40ff90:	9202      	str	r2, [sp, #8]
  40ff92:	9a04      	ldr	r2, [sp, #16]
  40ff94:	2331      	movs	r3, #49	; 0x31
  40ff96:	7013      	strb	r3, [r2, #0]
  40ff98:	e652      	b.n	40fc40 <_dtoa_r+0x700>
  40ff9a:	2301      	movs	r3, #1
  40ff9c:	930b      	str	r3, [sp, #44]	; 0x2c
  40ff9e:	e666      	b.n	40fc6e <_dtoa_r+0x72e>
  40ffa0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40ffa4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ffa6:	e48f      	b.n	40f8c8 <_dtoa_r+0x388>
  40ffa8:	00413968 	.word	0x00413968
  40ffac:	00413940 	.word	0x00413940
  40ffb0:	3ff00000 	.word	0x3ff00000
  40ffb4:	401c0000 	.word	0x401c0000
  40ffb8:	3fe00000 	.word	0x3fe00000
  40ffbc:	40240000 	.word	0x40240000
  40ffc0:	40140000 	.word	0x40140000
  40ffc4:	4650      	mov	r0, sl
  40ffc6:	f7fc ff59 	bl	40ce7c <__aeabi_i2d>
  40ffca:	463a      	mov	r2, r7
  40ffcc:	4643      	mov	r3, r8
  40ffce:	f7fc ffbb 	bl	40cf48 <__aeabi_dmul>
  40ffd2:	2200      	movs	r2, #0
  40ffd4:	4bc1      	ldr	r3, [pc, #772]	; (4102dc <_dtoa_r+0xd9c>)
  40ffd6:	f7fc fe05 	bl	40cbe4 <__adddf3>
  40ffda:	4605      	mov	r5, r0
  40ffdc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40ffe0:	4641      	mov	r1, r8
  40ffe2:	2200      	movs	r2, #0
  40ffe4:	4bbe      	ldr	r3, [pc, #760]	; (4102e0 <_dtoa_r+0xda0>)
  40ffe6:	4638      	mov	r0, r7
  40ffe8:	f7fc fdfa 	bl	40cbe0 <__aeabi_dsub>
  40ffec:	462a      	mov	r2, r5
  40ffee:	4633      	mov	r3, r6
  40fff0:	4682      	mov	sl, r0
  40fff2:	468b      	mov	fp, r1
  40fff4:	f7fd fa38 	bl	40d468 <__aeabi_dcmpgt>
  40fff8:	4680      	mov	r8, r0
  40fffa:	2800      	cmp	r0, #0
  40fffc:	f040 8110 	bne.w	410220 <_dtoa_r+0xce0>
  410000:	462a      	mov	r2, r5
  410002:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  410006:	4650      	mov	r0, sl
  410008:	4659      	mov	r1, fp
  41000a:	f7fd fa0f 	bl	40d42c <__aeabi_dcmplt>
  41000e:	b118      	cbz	r0, 410018 <_dtoa_r+0xad8>
  410010:	4646      	mov	r6, r8
  410012:	e771      	b.n	40fef8 <_dtoa_r+0x9b8>
  410014:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  410018:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  41001c:	f7ff bb8a 	b.w	40f734 <_dtoa_r+0x1f4>
  410020:	9804      	ldr	r0, [sp, #16]
  410022:	f7ff babb 	b.w	40f59c <_dtoa_r+0x5c>
  410026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  410028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  41002a:	970c      	str	r7, [sp, #48]	; 0x30
  41002c:	1afb      	subs	r3, r7, r3
  41002e:	441a      	add	r2, r3
  410030:	920d      	str	r2, [sp, #52]	; 0x34
  410032:	2700      	movs	r7, #0
  410034:	e469      	b.n	40f90a <_dtoa_r+0x3ca>
  410036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  41003a:	f04f 0a02 	mov.w	sl, #2
  41003e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  410042:	e657      	b.n	40fcf4 <_dtoa_r+0x7b4>
  410044:	2100      	movs	r1, #0
  410046:	2301      	movs	r3, #1
  410048:	6461      	str	r1, [r4, #68]	; 0x44
  41004a:	4620      	mov	r0, r4
  41004c:	9325      	str	r3, [sp, #148]	; 0x94
  41004e:	f000 fcdb 	bl	410a08 <_Balloc>
  410052:	9b25      	ldr	r3, [sp, #148]	; 0x94
  410054:	9004      	str	r0, [sp, #16]
  410056:	6420      	str	r0, [r4, #64]	; 0x40
  410058:	930a      	str	r3, [sp, #40]	; 0x28
  41005a:	930f      	str	r3, [sp, #60]	; 0x3c
  41005c:	e629      	b.n	40fcb2 <_dtoa_r+0x772>
  41005e:	2a00      	cmp	r2, #0
  410060:	46d0      	mov	r8, sl
  410062:	f8cd b018 	str.w	fp, [sp, #24]
  410066:	469a      	mov	sl, r3
  410068:	dd11      	ble.n	41008e <_dtoa_r+0xb4e>
  41006a:	4649      	mov	r1, r9
  41006c:	2201      	movs	r2, #1
  41006e:	4620      	mov	r0, r4
  410070:	f000 fe76 	bl	410d60 <__lshift>
  410074:	4641      	mov	r1, r8
  410076:	4681      	mov	r9, r0
  410078:	f000 fec4 	bl	410e04 <__mcmp>
  41007c:	2800      	cmp	r0, #0
  41007e:	f340 8146 	ble.w	41030e <_dtoa_r+0xdce>
  410082:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  410086:	f000 8106 	beq.w	410296 <_dtoa_r+0xd56>
  41008a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  41008e:	46b3      	mov	fp, r6
  410090:	f887 a000 	strb.w	sl, [r7]
  410094:	1c7d      	adds	r5, r7, #1
  410096:	9e06      	ldr	r6, [sp, #24]
  410098:	e5d2      	b.n	40fc40 <_dtoa_r+0x700>
  41009a:	d104      	bne.n	4100a6 <_dtoa_r+0xb66>
  41009c:	f01a 0f01 	tst.w	sl, #1
  4100a0:	d001      	beq.n	4100a6 <_dtoa_r+0xb66>
  4100a2:	e5bd      	b.n	40fc20 <_dtoa_r+0x6e0>
  4100a4:	4615      	mov	r5, r2
  4100a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4100aa:	2b30      	cmp	r3, #48	; 0x30
  4100ac:	f105 32ff 	add.w	r2, r5, #4294967295
  4100b0:	d0f8      	beq.n	4100a4 <_dtoa_r+0xb64>
  4100b2:	e5c5      	b.n	40fc40 <_dtoa_r+0x700>
  4100b4:	9904      	ldr	r1, [sp, #16]
  4100b6:	2230      	movs	r2, #48	; 0x30
  4100b8:	700a      	strb	r2, [r1, #0]
  4100ba:	9a02      	ldr	r2, [sp, #8]
  4100bc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4100c0:	3201      	adds	r2, #1
  4100c2:	9202      	str	r2, [sp, #8]
  4100c4:	f7ff bbfc 	b.w	40f8c0 <_dtoa_r+0x380>
  4100c8:	f000 80bb 	beq.w	410242 <_dtoa_r+0xd02>
  4100cc:	9b02      	ldr	r3, [sp, #8]
  4100ce:	425d      	negs	r5, r3
  4100d0:	4b84      	ldr	r3, [pc, #528]	; (4102e4 <_dtoa_r+0xda4>)
  4100d2:	f005 020f 	and.w	r2, r5, #15
  4100d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4100da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4100de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4100e2:	f7fc ff31 	bl	40cf48 <__aeabi_dmul>
  4100e6:	112d      	asrs	r5, r5, #4
  4100e8:	4607      	mov	r7, r0
  4100ea:	4688      	mov	r8, r1
  4100ec:	f000 812c 	beq.w	410348 <_dtoa_r+0xe08>
  4100f0:	4e7d      	ldr	r6, [pc, #500]	; (4102e8 <_dtoa_r+0xda8>)
  4100f2:	f04f 0a02 	mov.w	sl, #2
  4100f6:	07eb      	lsls	r3, r5, #31
  4100f8:	d509      	bpl.n	41010e <_dtoa_r+0xbce>
  4100fa:	4638      	mov	r0, r7
  4100fc:	4641      	mov	r1, r8
  4100fe:	e9d6 2300 	ldrd	r2, r3, [r6]
  410102:	f7fc ff21 	bl	40cf48 <__aeabi_dmul>
  410106:	f10a 0a01 	add.w	sl, sl, #1
  41010a:	4607      	mov	r7, r0
  41010c:	4688      	mov	r8, r1
  41010e:	106d      	asrs	r5, r5, #1
  410110:	f106 0608 	add.w	r6, r6, #8
  410114:	d1ef      	bne.n	4100f6 <_dtoa_r+0xbb6>
  410116:	e608      	b.n	40fd2a <_dtoa_r+0x7ea>
  410118:	6871      	ldr	r1, [r6, #4]
  41011a:	4620      	mov	r0, r4
  41011c:	f000 fc74 	bl	410a08 <_Balloc>
  410120:	6933      	ldr	r3, [r6, #16]
  410122:	3302      	adds	r3, #2
  410124:	009a      	lsls	r2, r3, #2
  410126:	4605      	mov	r5, r0
  410128:	f106 010c 	add.w	r1, r6, #12
  41012c:	300c      	adds	r0, #12
  41012e:	f7fd fd9b 	bl	40dc68 <memcpy>
  410132:	4629      	mov	r1, r5
  410134:	2201      	movs	r2, #1
  410136:	4620      	mov	r0, r4
  410138:	f000 fe12 	bl	410d60 <__lshift>
  41013c:	9006      	str	r0, [sp, #24]
  41013e:	e4b5      	b.n	40faac <_dtoa_r+0x56c>
  410140:	2b39      	cmp	r3, #57	; 0x39
  410142:	f8cd b018 	str.w	fp, [sp, #24]
  410146:	46d0      	mov	r8, sl
  410148:	f000 80a5 	beq.w	410296 <_dtoa_r+0xd56>
  41014c:	f103 0a01 	add.w	sl, r3, #1
  410150:	46b3      	mov	fp, r6
  410152:	f887 a000 	strb.w	sl, [r7]
  410156:	1c7d      	adds	r5, r7, #1
  410158:	9e06      	ldr	r6, [sp, #24]
  41015a:	e571      	b.n	40fc40 <_dtoa_r+0x700>
  41015c:	465a      	mov	r2, fp
  41015e:	46d0      	mov	r8, sl
  410160:	46b3      	mov	fp, r6
  410162:	469a      	mov	sl, r3
  410164:	4616      	mov	r6, r2
  410166:	e54f      	b.n	40fc08 <_dtoa_r+0x6c8>
  410168:	9b12      	ldr	r3, [sp, #72]	; 0x48
  41016a:	495e      	ldr	r1, [pc, #376]	; (4102e4 <_dtoa_r+0xda4>)
  41016c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  410170:	462a      	mov	r2, r5
  410172:	4633      	mov	r3, r6
  410174:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  410178:	f7fc fee6 	bl	40cf48 <__aeabi_dmul>
  41017c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  410180:	4638      	mov	r0, r7
  410182:	4641      	mov	r1, r8
  410184:	f7fd f990 	bl	40d4a8 <__aeabi_d2iz>
  410188:	4605      	mov	r5, r0
  41018a:	f7fc fe77 	bl	40ce7c <__aeabi_i2d>
  41018e:	460b      	mov	r3, r1
  410190:	4602      	mov	r2, r0
  410192:	4641      	mov	r1, r8
  410194:	4638      	mov	r0, r7
  410196:	f7fc fd23 	bl	40cbe0 <__aeabi_dsub>
  41019a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  41019c:	460f      	mov	r7, r1
  41019e:	9904      	ldr	r1, [sp, #16]
  4101a0:	3530      	adds	r5, #48	; 0x30
  4101a2:	2b01      	cmp	r3, #1
  4101a4:	700d      	strb	r5, [r1, #0]
  4101a6:	4606      	mov	r6, r0
  4101a8:	f101 0501 	add.w	r5, r1, #1
  4101ac:	d026      	beq.n	4101fc <_dtoa_r+0xcbc>
  4101ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4101b0:	9a04      	ldr	r2, [sp, #16]
  4101b2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4102f0 <_dtoa_r+0xdb0>
  4101b6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4101ba:	4413      	add	r3, r2
  4101bc:	f04f 0a00 	mov.w	sl, #0
  4101c0:	4699      	mov	r9, r3
  4101c2:	4652      	mov	r2, sl
  4101c4:	465b      	mov	r3, fp
  4101c6:	4630      	mov	r0, r6
  4101c8:	4639      	mov	r1, r7
  4101ca:	f7fc febd 	bl	40cf48 <__aeabi_dmul>
  4101ce:	460f      	mov	r7, r1
  4101d0:	4606      	mov	r6, r0
  4101d2:	f7fd f969 	bl	40d4a8 <__aeabi_d2iz>
  4101d6:	4680      	mov	r8, r0
  4101d8:	f7fc fe50 	bl	40ce7c <__aeabi_i2d>
  4101dc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4101e0:	4602      	mov	r2, r0
  4101e2:	460b      	mov	r3, r1
  4101e4:	4630      	mov	r0, r6
  4101e6:	4639      	mov	r1, r7
  4101e8:	f7fc fcfa 	bl	40cbe0 <__aeabi_dsub>
  4101ec:	f805 8b01 	strb.w	r8, [r5], #1
  4101f0:	454d      	cmp	r5, r9
  4101f2:	4606      	mov	r6, r0
  4101f4:	460f      	mov	r7, r1
  4101f6:	d1e4      	bne.n	4101c2 <_dtoa_r+0xc82>
  4101f8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4101fc:	4b3b      	ldr	r3, [pc, #236]	; (4102ec <_dtoa_r+0xdac>)
  4101fe:	2200      	movs	r2, #0
  410200:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  410204:	f7fc fcee 	bl	40cbe4 <__adddf3>
  410208:	4632      	mov	r2, r6
  41020a:	463b      	mov	r3, r7
  41020c:	f7fd f90e 	bl	40d42c <__aeabi_dcmplt>
  410210:	2800      	cmp	r0, #0
  410212:	d046      	beq.n	4102a2 <_dtoa_r+0xd62>
  410214:	9b15      	ldr	r3, [sp, #84]	; 0x54
  410216:	9302      	str	r3, [sp, #8]
  410218:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  41021c:	f7ff bb43 	b.w	40f8a6 <_dtoa_r+0x366>
  410220:	f04f 0800 	mov.w	r8, #0
  410224:	4646      	mov	r6, r8
  410226:	e6a9      	b.n	40ff7c <_dtoa_r+0xa3c>
  410228:	9b08      	ldr	r3, [sp, #32]
  41022a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41022c:	1a9d      	subs	r5, r3, r2
  41022e:	2300      	movs	r3, #0
  410230:	f7ff bb71 	b.w	40f916 <_dtoa_r+0x3d6>
  410234:	9b18      	ldr	r3, [sp, #96]	; 0x60
  410236:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  410238:	9d08      	ldr	r5, [sp, #32]
  41023a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  41023e:	f7ff bb6a 	b.w	40f916 <_dtoa_r+0x3d6>
  410242:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  410246:	f04f 0a02 	mov.w	sl, #2
  41024a:	e56e      	b.n	40fd2a <_dtoa_r+0x7ea>
  41024c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41024e:	2b00      	cmp	r3, #0
  410250:	f43f aeb8 	beq.w	40ffc4 <_dtoa_r+0xa84>
  410254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410256:	2b00      	cmp	r3, #0
  410258:	f77f aede 	ble.w	410018 <_dtoa_r+0xad8>
  41025c:	2200      	movs	r2, #0
  41025e:	4b24      	ldr	r3, [pc, #144]	; (4102f0 <_dtoa_r+0xdb0>)
  410260:	4638      	mov	r0, r7
  410262:	4641      	mov	r1, r8
  410264:	f7fc fe70 	bl	40cf48 <__aeabi_dmul>
  410268:	4607      	mov	r7, r0
  41026a:	4688      	mov	r8, r1
  41026c:	f10a 0001 	add.w	r0, sl, #1
  410270:	f7fc fe04 	bl	40ce7c <__aeabi_i2d>
  410274:	463a      	mov	r2, r7
  410276:	4643      	mov	r3, r8
  410278:	f7fc fe66 	bl	40cf48 <__aeabi_dmul>
  41027c:	2200      	movs	r2, #0
  41027e:	4b17      	ldr	r3, [pc, #92]	; (4102dc <_dtoa_r+0xd9c>)
  410280:	f7fc fcb0 	bl	40cbe4 <__adddf3>
  410284:	9a02      	ldr	r2, [sp, #8]
  410286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410288:	9312      	str	r3, [sp, #72]	; 0x48
  41028a:	3a01      	subs	r2, #1
  41028c:	4605      	mov	r5, r0
  41028e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  410292:	9215      	str	r2, [sp, #84]	; 0x54
  410294:	e56a      	b.n	40fd6c <_dtoa_r+0x82c>
  410296:	2239      	movs	r2, #57	; 0x39
  410298:	46b3      	mov	fp, r6
  41029a:	703a      	strb	r2, [r7, #0]
  41029c:	9e06      	ldr	r6, [sp, #24]
  41029e:	1c7d      	adds	r5, r7, #1
  4102a0:	e4c0      	b.n	40fc24 <_dtoa_r+0x6e4>
  4102a2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4102a6:	2000      	movs	r0, #0
  4102a8:	4910      	ldr	r1, [pc, #64]	; (4102ec <_dtoa_r+0xdac>)
  4102aa:	f7fc fc99 	bl	40cbe0 <__aeabi_dsub>
  4102ae:	4632      	mov	r2, r6
  4102b0:	463b      	mov	r3, r7
  4102b2:	f7fd f8d9 	bl	40d468 <__aeabi_dcmpgt>
  4102b6:	b908      	cbnz	r0, 4102bc <_dtoa_r+0xd7c>
  4102b8:	e6ae      	b.n	410018 <_dtoa_r+0xad8>
  4102ba:	4615      	mov	r5, r2
  4102bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4102c0:	2b30      	cmp	r3, #48	; 0x30
  4102c2:	f105 32ff 	add.w	r2, r5, #4294967295
  4102c6:	d0f8      	beq.n	4102ba <_dtoa_r+0xd7a>
  4102c8:	e5d7      	b.n	40fe7a <_dtoa_r+0x93a>
  4102ca:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4102ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4102d0:	9302      	str	r3, [sp, #8]
  4102d2:	f7ff bae8 	b.w	40f8a6 <_dtoa_r+0x366>
  4102d6:	970c      	str	r7, [sp, #48]	; 0x30
  4102d8:	f7ff bba5 	b.w	40fa26 <_dtoa_r+0x4e6>
  4102dc:	401c0000 	.word	0x401c0000
  4102e0:	40140000 	.word	0x40140000
  4102e4:	00413968 	.word	0x00413968
  4102e8:	00413940 	.word	0x00413940
  4102ec:	3fe00000 	.word	0x3fe00000
  4102f0:	40240000 	.word	0x40240000
  4102f4:	2b39      	cmp	r3, #57	; 0x39
  4102f6:	f8cd b018 	str.w	fp, [sp, #24]
  4102fa:	46d0      	mov	r8, sl
  4102fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  410300:	469a      	mov	sl, r3
  410302:	d0c8      	beq.n	410296 <_dtoa_r+0xd56>
  410304:	f1bb 0f00 	cmp.w	fp, #0
  410308:	f73f aebf 	bgt.w	41008a <_dtoa_r+0xb4a>
  41030c:	e6bf      	b.n	41008e <_dtoa_r+0xb4e>
  41030e:	f47f aebe 	bne.w	41008e <_dtoa_r+0xb4e>
  410312:	f01a 0f01 	tst.w	sl, #1
  410316:	f43f aeba 	beq.w	41008e <_dtoa_r+0xb4e>
  41031a:	e6b2      	b.n	410082 <_dtoa_r+0xb42>
  41031c:	f04f 0800 	mov.w	r8, #0
  410320:	4646      	mov	r6, r8
  410322:	e5e9      	b.n	40fef8 <_dtoa_r+0x9b8>
  410324:	4631      	mov	r1, r6
  410326:	2300      	movs	r3, #0
  410328:	220a      	movs	r2, #10
  41032a:	4620      	mov	r0, r4
  41032c:	f000 fb9c 	bl	410a68 <__multadd>
  410330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410332:	2b00      	cmp	r3, #0
  410334:	4606      	mov	r6, r0
  410336:	dd0a      	ble.n	41034e <_dtoa_r+0xe0e>
  410338:	930a      	str	r3, [sp, #40]	; 0x28
  41033a:	f7ff bbaa 	b.w	40fa92 <_dtoa_r+0x552>
  41033e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410340:	2b02      	cmp	r3, #2
  410342:	dc23      	bgt.n	41038c <_dtoa_r+0xe4c>
  410344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410346:	e43b      	b.n	40fbc0 <_dtoa_r+0x680>
  410348:	f04f 0a02 	mov.w	sl, #2
  41034c:	e4ed      	b.n	40fd2a <_dtoa_r+0x7ea>
  41034e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410350:	2b02      	cmp	r3, #2
  410352:	dc1b      	bgt.n	41038c <_dtoa_r+0xe4c>
  410354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410356:	e7ef      	b.n	410338 <_dtoa_r+0xdf8>
  410358:	2500      	movs	r5, #0
  41035a:	6465      	str	r5, [r4, #68]	; 0x44
  41035c:	4629      	mov	r1, r5
  41035e:	4620      	mov	r0, r4
  410360:	f000 fb52 	bl	410a08 <_Balloc>
  410364:	f04f 33ff 	mov.w	r3, #4294967295
  410368:	930a      	str	r3, [sp, #40]	; 0x28
  41036a:	930f      	str	r3, [sp, #60]	; 0x3c
  41036c:	2301      	movs	r3, #1
  41036e:	9004      	str	r0, [sp, #16]
  410370:	9525      	str	r5, [sp, #148]	; 0x94
  410372:	6420      	str	r0, [r4, #64]	; 0x40
  410374:	930b      	str	r3, [sp, #44]	; 0x2c
  410376:	f7ff b9dd 	b.w	40f734 <_dtoa_r+0x1f4>
  41037a:	2501      	movs	r5, #1
  41037c:	f7ff b9a5 	b.w	40f6ca <_dtoa_r+0x18a>
  410380:	f43f ab69 	beq.w	40fa56 <_dtoa_r+0x516>
  410384:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  410388:	f7ff bbf9 	b.w	40fb7e <_dtoa_r+0x63e>
  41038c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41038e:	930a      	str	r3, [sp, #40]	; 0x28
  410390:	e5e5      	b.n	40ff5e <_dtoa_r+0xa1e>
  410392:	bf00      	nop

00410394 <__libc_fini_array>:
  410394:	b538      	push	{r3, r4, r5, lr}
  410396:	4c0a      	ldr	r4, [pc, #40]	; (4103c0 <__libc_fini_array+0x2c>)
  410398:	4d0a      	ldr	r5, [pc, #40]	; (4103c4 <__libc_fini_array+0x30>)
  41039a:	1b64      	subs	r4, r4, r5
  41039c:	10a4      	asrs	r4, r4, #2
  41039e:	d00a      	beq.n	4103b6 <__libc_fini_array+0x22>
  4103a0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4103a4:	3b01      	subs	r3, #1
  4103a6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4103aa:	3c01      	subs	r4, #1
  4103ac:	f855 3904 	ldr.w	r3, [r5], #-4
  4103b0:	4798      	blx	r3
  4103b2:	2c00      	cmp	r4, #0
  4103b4:	d1f9      	bne.n	4103aa <__libc_fini_array+0x16>
  4103b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4103ba:	f003 bbcf 	b.w	413b5c <_fini>
  4103be:	bf00      	nop
  4103c0:	00413b6c 	.word	0x00413b6c
  4103c4:	00413b68 	.word	0x00413b68

004103c8 <_localeconv_r>:
  4103c8:	4a04      	ldr	r2, [pc, #16]	; (4103dc <_localeconv_r+0x14>)
  4103ca:	4b05      	ldr	r3, [pc, #20]	; (4103e0 <_localeconv_r+0x18>)
  4103cc:	6812      	ldr	r2, [r2, #0]
  4103ce:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4103d0:	2800      	cmp	r0, #0
  4103d2:	bf08      	it	eq
  4103d4:	4618      	moveq	r0, r3
  4103d6:	30f0      	adds	r0, #240	; 0xf0
  4103d8:	4770      	bx	lr
  4103da:	bf00      	nop
  4103dc:	2000004c 	.word	0x2000004c
  4103e0:	2000088c 	.word	0x2000088c

004103e4 <__retarget_lock_acquire_recursive>:
  4103e4:	4770      	bx	lr
  4103e6:	bf00      	nop

004103e8 <__retarget_lock_release_recursive>:
  4103e8:	4770      	bx	lr
  4103ea:	bf00      	nop

004103ec <_malloc_r>:
  4103ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4103f0:	f101 060b 	add.w	r6, r1, #11
  4103f4:	2e16      	cmp	r6, #22
  4103f6:	b083      	sub	sp, #12
  4103f8:	4605      	mov	r5, r0
  4103fa:	f240 809e 	bls.w	41053a <_malloc_r+0x14e>
  4103fe:	f036 0607 	bics.w	r6, r6, #7
  410402:	f100 80bd 	bmi.w	410580 <_malloc_r+0x194>
  410406:	42b1      	cmp	r1, r6
  410408:	f200 80ba 	bhi.w	410580 <_malloc_r+0x194>
  41040c:	f000 faf0 	bl	4109f0 <__malloc_lock>
  410410:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  410414:	f0c0 8293 	bcc.w	41093e <_malloc_r+0x552>
  410418:	0a73      	lsrs	r3, r6, #9
  41041a:	f000 80b8 	beq.w	41058e <_malloc_r+0x1a2>
  41041e:	2b04      	cmp	r3, #4
  410420:	f200 8179 	bhi.w	410716 <_malloc_r+0x32a>
  410424:	09b3      	lsrs	r3, r6, #6
  410426:	f103 0039 	add.w	r0, r3, #57	; 0x39
  41042a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  41042e:	00c3      	lsls	r3, r0, #3
  410430:	4fbf      	ldr	r7, [pc, #764]	; (410730 <_malloc_r+0x344>)
  410432:	443b      	add	r3, r7
  410434:	f1a3 0108 	sub.w	r1, r3, #8
  410438:	685c      	ldr	r4, [r3, #4]
  41043a:	42a1      	cmp	r1, r4
  41043c:	d106      	bne.n	41044c <_malloc_r+0x60>
  41043e:	e00c      	b.n	41045a <_malloc_r+0x6e>
  410440:	2a00      	cmp	r2, #0
  410442:	f280 80aa 	bge.w	41059a <_malloc_r+0x1ae>
  410446:	68e4      	ldr	r4, [r4, #12]
  410448:	42a1      	cmp	r1, r4
  41044a:	d006      	beq.n	41045a <_malloc_r+0x6e>
  41044c:	6863      	ldr	r3, [r4, #4]
  41044e:	f023 0303 	bic.w	r3, r3, #3
  410452:	1b9a      	subs	r2, r3, r6
  410454:	2a0f      	cmp	r2, #15
  410456:	ddf3      	ble.n	410440 <_malloc_r+0x54>
  410458:	4670      	mov	r0, lr
  41045a:	693c      	ldr	r4, [r7, #16]
  41045c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 410744 <_malloc_r+0x358>
  410460:	4574      	cmp	r4, lr
  410462:	f000 81ab 	beq.w	4107bc <_malloc_r+0x3d0>
  410466:	6863      	ldr	r3, [r4, #4]
  410468:	f023 0303 	bic.w	r3, r3, #3
  41046c:	1b9a      	subs	r2, r3, r6
  41046e:	2a0f      	cmp	r2, #15
  410470:	f300 8190 	bgt.w	410794 <_malloc_r+0x3a8>
  410474:	2a00      	cmp	r2, #0
  410476:	f8c7 e014 	str.w	lr, [r7, #20]
  41047a:	f8c7 e010 	str.w	lr, [r7, #16]
  41047e:	f280 809d 	bge.w	4105bc <_malloc_r+0x1d0>
  410482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  410486:	f080 8161 	bcs.w	41074c <_malloc_r+0x360>
  41048a:	08db      	lsrs	r3, r3, #3
  41048c:	f103 0c01 	add.w	ip, r3, #1
  410490:	1099      	asrs	r1, r3, #2
  410492:	687a      	ldr	r2, [r7, #4]
  410494:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  410498:	f8c4 8008 	str.w	r8, [r4, #8]
  41049c:	2301      	movs	r3, #1
  41049e:	408b      	lsls	r3, r1
  4104a0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4104a4:	4313      	orrs	r3, r2
  4104a6:	3908      	subs	r1, #8
  4104a8:	60e1      	str	r1, [r4, #12]
  4104aa:	607b      	str	r3, [r7, #4]
  4104ac:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4104b0:	f8c8 400c 	str.w	r4, [r8, #12]
  4104b4:	1082      	asrs	r2, r0, #2
  4104b6:	2401      	movs	r4, #1
  4104b8:	4094      	lsls	r4, r2
  4104ba:	429c      	cmp	r4, r3
  4104bc:	f200 808b 	bhi.w	4105d6 <_malloc_r+0x1ea>
  4104c0:	421c      	tst	r4, r3
  4104c2:	d106      	bne.n	4104d2 <_malloc_r+0xe6>
  4104c4:	f020 0003 	bic.w	r0, r0, #3
  4104c8:	0064      	lsls	r4, r4, #1
  4104ca:	421c      	tst	r4, r3
  4104cc:	f100 0004 	add.w	r0, r0, #4
  4104d0:	d0fa      	beq.n	4104c8 <_malloc_r+0xdc>
  4104d2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4104d6:	46cc      	mov	ip, r9
  4104d8:	4680      	mov	r8, r0
  4104da:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4104de:	459c      	cmp	ip, r3
  4104e0:	d107      	bne.n	4104f2 <_malloc_r+0x106>
  4104e2:	e16d      	b.n	4107c0 <_malloc_r+0x3d4>
  4104e4:	2a00      	cmp	r2, #0
  4104e6:	f280 817b 	bge.w	4107e0 <_malloc_r+0x3f4>
  4104ea:	68db      	ldr	r3, [r3, #12]
  4104ec:	459c      	cmp	ip, r3
  4104ee:	f000 8167 	beq.w	4107c0 <_malloc_r+0x3d4>
  4104f2:	6859      	ldr	r1, [r3, #4]
  4104f4:	f021 0103 	bic.w	r1, r1, #3
  4104f8:	1b8a      	subs	r2, r1, r6
  4104fa:	2a0f      	cmp	r2, #15
  4104fc:	ddf2      	ble.n	4104e4 <_malloc_r+0xf8>
  4104fe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  410502:	f8d3 8008 	ldr.w	r8, [r3, #8]
  410506:	9300      	str	r3, [sp, #0]
  410508:	199c      	adds	r4, r3, r6
  41050a:	4628      	mov	r0, r5
  41050c:	f046 0601 	orr.w	r6, r6, #1
  410510:	f042 0501 	orr.w	r5, r2, #1
  410514:	605e      	str	r6, [r3, #4]
  410516:	f8c8 c00c 	str.w	ip, [r8, #12]
  41051a:	f8cc 8008 	str.w	r8, [ip, #8]
  41051e:	617c      	str	r4, [r7, #20]
  410520:	613c      	str	r4, [r7, #16]
  410522:	f8c4 e00c 	str.w	lr, [r4, #12]
  410526:	f8c4 e008 	str.w	lr, [r4, #8]
  41052a:	6065      	str	r5, [r4, #4]
  41052c:	505a      	str	r2, [r3, r1]
  41052e:	f000 fa65 	bl	4109fc <__malloc_unlock>
  410532:	9b00      	ldr	r3, [sp, #0]
  410534:	f103 0408 	add.w	r4, r3, #8
  410538:	e01e      	b.n	410578 <_malloc_r+0x18c>
  41053a:	2910      	cmp	r1, #16
  41053c:	d820      	bhi.n	410580 <_malloc_r+0x194>
  41053e:	f000 fa57 	bl	4109f0 <__malloc_lock>
  410542:	2610      	movs	r6, #16
  410544:	2318      	movs	r3, #24
  410546:	2002      	movs	r0, #2
  410548:	4f79      	ldr	r7, [pc, #484]	; (410730 <_malloc_r+0x344>)
  41054a:	443b      	add	r3, r7
  41054c:	f1a3 0208 	sub.w	r2, r3, #8
  410550:	685c      	ldr	r4, [r3, #4]
  410552:	4294      	cmp	r4, r2
  410554:	f000 813d 	beq.w	4107d2 <_malloc_r+0x3e6>
  410558:	6863      	ldr	r3, [r4, #4]
  41055a:	68e1      	ldr	r1, [r4, #12]
  41055c:	68a6      	ldr	r6, [r4, #8]
  41055e:	f023 0303 	bic.w	r3, r3, #3
  410562:	4423      	add	r3, r4
  410564:	4628      	mov	r0, r5
  410566:	685a      	ldr	r2, [r3, #4]
  410568:	60f1      	str	r1, [r6, #12]
  41056a:	f042 0201 	orr.w	r2, r2, #1
  41056e:	608e      	str	r6, [r1, #8]
  410570:	605a      	str	r2, [r3, #4]
  410572:	f000 fa43 	bl	4109fc <__malloc_unlock>
  410576:	3408      	adds	r4, #8
  410578:	4620      	mov	r0, r4
  41057a:	b003      	add	sp, #12
  41057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410580:	2400      	movs	r4, #0
  410582:	230c      	movs	r3, #12
  410584:	4620      	mov	r0, r4
  410586:	602b      	str	r3, [r5, #0]
  410588:	b003      	add	sp, #12
  41058a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41058e:	2040      	movs	r0, #64	; 0x40
  410590:	f44f 7300 	mov.w	r3, #512	; 0x200
  410594:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  410598:	e74a      	b.n	410430 <_malloc_r+0x44>
  41059a:	4423      	add	r3, r4
  41059c:	68e1      	ldr	r1, [r4, #12]
  41059e:	685a      	ldr	r2, [r3, #4]
  4105a0:	68a6      	ldr	r6, [r4, #8]
  4105a2:	f042 0201 	orr.w	r2, r2, #1
  4105a6:	60f1      	str	r1, [r6, #12]
  4105a8:	4628      	mov	r0, r5
  4105aa:	608e      	str	r6, [r1, #8]
  4105ac:	605a      	str	r2, [r3, #4]
  4105ae:	f000 fa25 	bl	4109fc <__malloc_unlock>
  4105b2:	3408      	adds	r4, #8
  4105b4:	4620      	mov	r0, r4
  4105b6:	b003      	add	sp, #12
  4105b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4105bc:	4423      	add	r3, r4
  4105be:	4628      	mov	r0, r5
  4105c0:	685a      	ldr	r2, [r3, #4]
  4105c2:	f042 0201 	orr.w	r2, r2, #1
  4105c6:	605a      	str	r2, [r3, #4]
  4105c8:	f000 fa18 	bl	4109fc <__malloc_unlock>
  4105cc:	3408      	adds	r4, #8
  4105ce:	4620      	mov	r0, r4
  4105d0:	b003      	add	sp, #12
  4105d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4105d6:	68bc      	ldr	r4, [r7, #8]
  4105d8:	6863      	ldr	r3, [r4, #4]
  4105da:	f023 0803 	bic.w	r8, r3, #3
  4105de:	45b0      	cmp	r8, r6
  4105e0:	d304      	bcc.n	4105ec <_malloc_r+0x200>
  4105e2:	eba8 0306 	sub.w	r3, r8, r6
  4105e6:	2b0f      	cmp	r3, #15
  4105e8:	f300 8085 	bgt.w	4106f6 <_malloc_r+0x30a>
  4105ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 410748 <_malloc_r+0x35c>
  4105f0:	4b50      	ldr	r3, [pc, #320]	; (410734 <_malloc_r+0x348>)
  4105f2:	f8d9 2000 	ldr.w	r2, [r9]
  4105f6:	681b      	ldr	r3, [r3, #0]
  4105f8:	3201      	adds	r2, #1
  4105fa:	4433      	add	r3, r6
  4105fc:	eb04 0a08 	add.w	sl, r4, r8
  410600:	f000 8155 	beq.w	4108ae <_malloc_r+0x4c2>
  410604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  410608:	330f      	adds	r3, #15
  41060a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  41060e:	f02b 0b0f 	bic.w	fp, fp, #15
  410612:	4659      	mov	r1, fp
  410614:	4628      	mov	r0, r5
  410616:	f000 fcf1 	bl	410ffc <_sbrk_r>
  41061a:	1c41      	adds	r1, r0, #1
  41061c:	4602      	mov	r2, r0
  41061e:	f000 80fc 	beq.w	41081a <_malloc_r+0x42e>
  410622:	4582      	cmp	sl, r0
  410624:	f200 80f7 	bhi.w	410816 <_malloc_r+0x42a>
  410628:	4b43      	ldr	r3, [pc, #268]	; (410738 <_malloc_r+0x34c>)
  41062a:	6819      	ldr	r1, [r3, #0]
  41062c:	4459      	add	r1, fp
  41062e:	6019      	str	r1, [r3, #0]
  410630:	f000 814d 	beq.w	4108ce <_malloc_r+0x4e2>
  410634:	f8d9 0000 	ldr.w	r0, [r9]
  410638:	3001      	adds	r0, #1
  41063a:	bf1b      	ittet	ne
  41063c:	eba2 0a0a 	subne.w	sl, r2, sl
  410640:	4451      	addne	r1, sl
  410642:	f8c9 2000 	streq.w	r2, [r9]
  410646:	6019      	strne	r1, [r3, #0]
  410648:	f012 0107 	ands.w	r1, r2, #7
  41064c:	f000 8115 	beq.w	41087a <_malloc_r+0x48e>
  410650:	f1c1 0008 	rsb	r0, r1, #8
  410654:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  410658:	4402      	add	r2, r0
  41065a:	3108      	adds	r1, #8
  41065c:	eb02 090b 	add.w	r9, r2, fp
  410660:	f3c9 090b 	ubfx	r9, r9, #0, #12
  410664:	eba1 0909 	sub.w	r9, r1, r9
  410668:	4649      	mov	r1, r9
  41066a:	4628      	mov	r0, r5
  41066c:	9301      	str	r3, [sp, #4]
  41066e:	9200      	str	r2, [sp, #0]
  410670:	f000 fcc4 	bl	410ffc <_sbrk_r>
  410674:	1c43      	adds	r3, r0, #1
  410676:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41067a:	f000 8143 	beq.w	410904 <_malloc_r+0x518>
  41067e:	1a80      	subs	r0, r0, r2
  410680:	4448      	add	r0, r9
  410682:	f040 0001 	orr.w	r0, r0, #1
  410686:	6819      	ldr	r1, [r3, #0]
  410688:	60ba      	str	r2, [r7, #8]
  41068a:	4449      	add	r1, r9
  41068c:	42bc      	cmp	r4, r7
  41068e:	6050      	str	r0, [r2, #4]
  410690:	6019      	str	r1, [r3, #0]
  410692:	d017      	beq.n	4106c4 <_malloc_r+0x2d8>
  410694:	f1b8 0f0f 	cmp.w	r8, #15
  410698:	f240 80fb 	bls.w	410892 <_malloc_r+0x4a6>
  41069c:	6860      	ldr	r0, [r4, #4]
  41069e:	f1a8 020c 	sub.w	r2, r8, #12
  4106a2:	f022 0207 	bic.w	r2, r2, #7
  4106a6:	eb04 0e02 	add.w	lr, r4, r2
  4106aa:	f000 0001 	and.w	r0, r0, #1
  4106ae:	f04f 0c05 	mov.w	ip, #5
  4106b2:	4310      	orrs	r0, r2
  4106b4:	2a0f      	cmp	r2, #15
  4106b6:	6060      	str	r0, [r4, #4]
  4106b8:	f8ce c004 	str.w	ip, [lr, #4]
  4106bc:	f8ce c008 	str.w	ip, [lr, #8]
  4106c0:	f200 8117 	bhi.w	4108f2 <_malloc_r+0x506>
  4106c4:	4b1d      	ldr	r3, [pc, #116]	; (41073c <_malloc_r+0x350>)
  4106c6:	68bc      	ldr	r4, [r7, #8]
  4106c8:	681a      	ldr	r2, [r3, #0]
  4106ca:	4291      	cmp	r1, r2
  4106cc:	bf88      	it	hi
  4106ce:	6019      	strhi	r1, [r3, #0]
  4106d0:	4b1b      	ldr	r3, [pc, #108]	; (410740 <_malloc_r+0x354>)
  4106d2:	681a      	ldr	r2, [r3, #0]
  4106d4:	4291      	cmp	r1, r2
  4106d6:	6862      	ldr	r2, [r4, #4]
  4106d8:	bf88      	it	hi
  4106da:	6019      	strhi	r1, [r3, #0]
  4106dc:	f022 0203 	bic.w	r2, r2, #3
  4106e0:	4296      	cmp	r6, r2
  4106e2:	eba2 0306 	sub.w	r3, r2, r6
  4106e6:	d801      	bhi.n	4106ec <_malloc_r+0x300>
  4106e8:	2b0f      	cmp	r3, #15
  4106ea:	dc04      	bgt.n	4106f6 <_malloc_r+0x30a>
  4106ec:	4628      	mov	r0, r5
  4106ee:	f000 f985 	bl	4109fc <__malloc_unlock>
  4106f2:	2400      	movs	r4, #0
  4106f4:	e740      	b.n	410578 <_malloc_r+0x18c>
  4106f6:	19a2      	adds	r2, r4, r6
  4106f8:	f043 0301 	orr.w	r3, r3, #1
  4106fc:	f046 0601 	orr.w	r6, r6, #1
  410700:	6066      	str	r6, [r4, #4]
  410702:	4628      	mov	r0, r5
  410704:	60ba      	str	r2, [r7, #8]
  410706:	6053      	str	r3, [r2, #4]
  410708:	f000 f978 	bl	4109fc <__malloc_unlock>
  41070c:	3408      	adds	r4, #8
  41070e:	4620      	mov	r0, r4
  410710:	b003      	add	sp, #12
  410712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410716:	2b14      	cmp	r3, #20
  410718:	d971      	bls.n	4107fe <_malloc_r+0x412>
  41071a:	2b54      	cmp	r3, #84	; 0x54
  41071c:	f200 80a3 	bhi.w	410866 <_malloc_r+0x47a>
  410720:	0b33      	lsrs	r3, r6, #12
  410722:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  410726:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  41072a:	00c3      	lsls	r3, r0, #3
  41072c:	e680      	b.n	410430 <_malloc_r+0x44>
  41072e:	bf00      	nop
  410730:	2000047c 	.word	0x2000047c
  410734:	20000efc 	.word	0x20000efc
  410738:	20000ecc 	.word	0x20000ecc
  41073c:	20000ef4 	.word	0x20000ef4
  410740:	20000ef8 	.word	0x20000ef8
  410744:	20000484 	.word	0x20000484
  410748:	20000884 	.word	0x20000884
  41074c:	0a5a      	lsrs	r2, r3, #9
  41074e:	2a04      	cmp	r2, #4
  410750:	d95b      	bls.n	41080a <_malloc_r+0x41e>
  410752:	2a14      	cmp	r2, #20
  410754:	f200 80ae 	bhi.w	4108b4 <_malloc_r+0x4c8>
  410758:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  41075c:	00c9      	lsls	r1, r1, #3
  41075e:	325b      	adds	r2, #91	; 0x5b
  410760:	eb07 0c01 	add.w	ip, r7, r1
  410764:	5879      	ldr	r1, [r7, r1]
  410766:	f1ac 0c08 	sub.w	ip, ip, #8
  41076a:	458c      	cmp	ip, r1
  41076c:	f000 8088 	beq.w	410880 <_malloc_r+0x494>
  410770:	684a      	ldr	r2, [r1, #4]
  410772:	f022 0203 	bic.w	r2, r2, #3
  410776:	4293      	cmp	r3, r2
  410778:	d273      	bcs.n	410862 <_malloc_r+0x476>
  41077a:	6889      	ldr	r1, [r1, #8]
  41077c:	458c      	cmp	ip, r1
  41077e:	d1f7      	bne.n	410770 <_malloc_r+0x384>
  410780:	f8dc 200c 	ldr.w	r2, [ip, #12]
  410784:	687b      	ldr	r3, [r7, #4]
  410786:	60e2      	str	r2, [r4, #12]
  410788:	f8c4 c008 	str.w	ip, [r4, #8]
  41078c:	6094      	str	r4, [r2, #8]
  41078e:	f8cc 400c 	str.w	r4, [ip, #12]
  410792:	e68f      	b.n	4104b4 <_malloc_r+0xc8>
  410794:	19a1      	adds	r1, r4, r6
  410796:	f046 0c01 	orr.w	ip, r6, #1
  41079a:	f042 0601 	orr.w	r6, r2, #1
  41079e:	f8c4 c004 	str.w	ip, [r4, #4]
  4107a2:	4628      	mov	r0, r5
  4107a4:	6179      	str	r1, [r7, #20]
  4107a6:	6139      	str	r1, [r7, #16]
  4107a8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4107ac:	f8c1 e008 	str.w	lr, [r1, #8]
  4107b0:	604e      	str	r6, [r1, #4]
  4107b2:	50e2      	str	r2, [r4, r3]
  4107b4:	f000 f922 	bl	4109fc <__malloc_unlock>
  4107b8:	3408      	adds	r4, #8
  4107ba:	e6dd      	b.n	410578 <_malloc_r+0x18c>
  4107bc:	687b      	ldr	r3, [r7, #4]
  4107be:	e679      	b.n	4104b4 <_malloc_r+0xc8>
  4107c0:	f108 0801 	add.w	r8, r8, #1
  4107c4:	f018 0f03 	tst.w	r8, #3
  4107c8:	f10c 0c08 	add.w	ip, ip, #8
  4107cc:	f47f ae85 	bne.w	4104da <_malloc_r+0xee>
  4107d0:	e02d      	b.n	41082e <_malloc_r+0x442>
  4107d2:	68dc      	ldr	r4, [r3, #12]
  4107d4:	42a3      	cmp	r3, r4
  4107d6:	bf08      	it	eq
  4107d8:	3002      	addeq	r0, #2
  4107da:	f43f ae3e 	beq.w	41045a <_malloc_r+0x6e>
  4107de:	e6bb      	b.n	410558 <_malloc_r+0x16c>
  4107e0:	4419      	add	r1, r3
  4107e2:	461c      	mov	r4, r3
  4107e4:	684a      	ldr	r2, [r1, #4]
  4107e6:	68db      	ldr	r3, [r3, #12]
  4107e8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4107ec:	f042 0201 	orr.w	r2, r2, #1
  4107f0:	604a      	str	r2, [r1, #4]
  4107f2:	4628      	mov	r0, r5
  4107f4:	60f3      	str	r3, [r6, #12]
  4107f6:	609e      	str	r6, [r3, #8]
  4107f8:	f000 f900 	bl	4109fc <__malloc_unlock>
  4107fc:	e6bc      	b.n	410578 <_malloc_r+0x18c>
  4107fe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  410802:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  410806:	00c3      	lsls	r3, r0, #3
  410808:	e612      	b.n	410430 <_malloc_r+0x44>
  41080a:	099a      	lsrs	r2, r3, #6
  41080c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  410810:	00c9      	lsls	r1, r1, #3
  410812:	3238      	adds	r2, #56	; 0x38
  410814:	e7a4      	b.n	410760 <_malloc_r+0x374>
  410816:	42bc      	cmp	r4, r7
  410818:	d054      	beq.n	4108c4 <_malloc_r+0x4d8>
  41081a:	68bc      	ldr	r4, [r7, #8]
  41081c:	6862      	ldr	r2, [r4, #4]
  41081e:	f022 0203 	bic.w	r2, r2, #3
  410822:	e75d      	b.n	4106e0 <_malloc_r+0x2f4>
  410824:	f859 3908 	ldr.w	r3, [r9], #-8
  410828:	4599      	cmp	r9, r3
  41082a:	f040 8086 	bne.w	41093a <_malloc_r+0x54e>
  41082e:	f010 0f03 	tst.w	r0, #3
  410832:	f100 30ff 	add.w	r0, r0, #4294967295
  410836:	d1f5      	bne.n	410824 <_malloc_r+0x438>
  410838:	687b      	ldr	r3, [r7, #4]
  41083a:	ea23 0304 	bic.w	r3, r3, r4
  41083e:	607b      	str	r3, [r7, #4]
  410840:	0064      	lsls	r4, r4, #1
  410842:	429c      	cmp	r4, r3
  410844:	f63f aec7 	bhi.w	4105d6 <_malloc_r+0x1ea>
  410848:	2c00      	cmp	r4, #0
  41084a:	f43f aec4 	beq.w	4105d6 <_malloc_r+0x1ea>
  41084e:	421c      	tst	r4, r3
  410850:	4640      	mov	r0, r8
  410852:	f47f ae3e 	bne.w	4104d2 <_malloc_r+0xe6>
  410856:	0064      	lsls	r4, r4, #1
  410858:	421c      	tst	r4, r3
  41085a:	f100 0004 	add.w	r0, r0, #4
  41085e:	d0fa      	beq.n	410856 <_malloc_r+0x46a>
  410860:	e637      	b.n	4104d2 <_malloc_r+0xe6>
  410862:	468c      	mov	ip, r1
  410864:	e78c      	b.n	410780 <_malloc_r+0x394>
  410866:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  41086a:	d815      	bhi.n	410898 <_malloc_r+0x4ac>
  41086c:	0bf3      	lsrs	r3, r6, #15
  41086e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  410872:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  410876:	00c3      	lsls	r3, r0, #3
  410878:	e5da      	b.n	410430 <_malloc_r+0x44>
  41087a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  41087e:	e6ed      	b.n	41065c <_malloc_r+0x270>
  410880:	687b      	ldr	r3, [r7, #4]
  410882:	1092      	asrs	r2, r2, #2
  410884:	2101      	movs	r1, #1
  410886:	fa01 f202 	lsl.w	r2, r1, r2
  41088a:	4313      	orrs	r3, r2
  41088c:	607b      	str	r3, [r7, #4]
  41088e:	4662      	mov	r2, ip
  410890:	e779      	b.n	410786 <_malloc_r+0x39a>
  410892:	2301      	movs	r3, #1
  410894:	6053      	str	r3, [r2, #4]
  410896:	e729      	b.n	4106ec <_malloc_r+0x300>
  410898:	f240 5254 	movw	r2, #1364	; 0x554
  41089c:	4293      	cmp	r3, r2
  41089e:	d822      	bhi.n	4108e6 <_malloc_r+0x4fa>
  4108a0:	0cb3      	lsrs	r3, r6, #18
  4108a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4108a6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4108aa:	00c3      	lsls	r3, r0, #3
  4108ac:	e5c0      	b.n	410430 <_malloc_r+0x44>
  4108ae:	f103 0b10 	add.w	fp, r3, #16
  4108b2:	e6ae      	b.n	410612 <_malloc_r+0x226>
  4108b4:	2a54      	cmp	r2, #84	; 0x54
  4108b6:	d829      	bhi.n	41090c <_malloc_r+0x520>
  4108b8:	0b1a      	lsrs	r2, r3, #12
  4108ba:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4108be:	00c9      	lsls	r1, r1, #3
  4108c0:	326e      	adds	r2, #110	; 0x6e
  4108c2:	e74d      	b.n	410760 <_malloc_r+0x374>
  4108c4:	4b20      	ldr	r3, [pc, #128]	; (410948 <_malloc_r+0x55c>)
  4108c6:	6819      	ldr	r1, [r3, #0]
  4108c8:	4459      	add	r1, fp
  4108ca:	6019      	str	r1, [r3, #0]
  4108cc:	e6b2      	b.n	410634 <_malloc_r+0x248>
  4108ce:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4108d2:	2800      	cmp	r0, #0
  4108d4:	f47f aeae 	bne.w	410634 <_malloc_r+0x248>
  4108d8:	eb08 030b 	add.w	r3, r8, fp
  4108dc:	68ba      	ldr	r2, [r7, #8]
  4108de:	f043 0301 	orr.w	r3, r3, #1
  4108e2:	6053      	str	r3, [r2, #4]
  4108e4:	e6ee      	b.n	4106c4 <_malloc_r+0x2d8>
  4108e6:	207f      	movs	r0, #127	; 0x7f
  4108e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4108ec:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4108f0:	e59e      	b.n	410430 <_malloc_r+0x44>
  4108f2:	f104 0108 	add.w	r1, r4, #8
  4108f6:	4628      	mov	r0, r5
  4108f8:	9300      	str	r3, [sp, #0]
  4108fa:	f000 fcf1 	bl	4112e0 <_free_r>
  4108fe:	9b00      	ldr	r3, [sp, #0]
  410900:	6819      	ldr	r1, [r3, #0]
  410902:	e6df      	b.n	4106c4 <_malloc_r+0x2d8>
  410904:	2001      	movs	r0, #1
  410906:	f04f 0900 	mov.w	r9, #0
  41090a:	e6bc      	b.n	410686 <_malloc_r+0x29a>
  41090c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  410910:	d805      	bhi.n	41091e <_malloc_r+0x532>
  410912:	0bda      	lsrs	r2, r3, #15
  410914:	f102 0178 	add.w	r1, r2, #120	; 0x78
  410918:	00c9      	lsls	r1, r1, #3
  41091a:	3277      	adds	r2, #119	; 0x77
  41091c:	e720      	b.n	410760 <_malloc_r+0x374>
  41091e:	f240 5154 	movw	r1, #1364	; 0x554
  410922:	428a      	cmp	r2, r1
  410924:	d805      	bhi.n	410932 <_malloc_r+0x546>
  410926:	0c9a      	lsrs	r2, r3, #18
  410928:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  41092c:	00c9      	lsls	r1, r1, #3
  41092e:	327c      	adds	r2, #124	; 0x7c
  410930:	e716      	b.n	410760 <_malloc_r+0x374>
  410932:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  410936:	227e      	movs	r2, #126	; 0x7e
  410938:	e712      	b.n	410760 <_malloc_r+0x374>
  41093a:	687b      	ldr	r3, [r7, #4]
  41093c:	e780      	b.n	410840 <_malloc_r+0x454>
  41093e:	08f0      	lsrs	r0, r6, #3
  410940:	f106 0308 	add.w	r3, r6, #8
  410944:	e600      	b.n	410548 <_malloc_r+0x15c>
  410946:	bf00      	nop
  410948:	20000ecc 	.word	0x20000ecc
  41094c:	00000000 	.word	0x00000000

00410950 <memchr>:
  410950:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  410954:	2a10      	cmp	r2, #16
  410956:	db2b      	blt.n	4109b0 <memchr+0x60>
  410958:	f010 0f07 	tst.w	r0, #7
  41095c:	d008      	beq.n	410970 <memchr+0x20>
  41095e:	f810 3b01 	ldrb.w	r3, [r0], #1
  410962:	3a01      	subs	r2, #1
  410964:	428b      	cmp	r3, r1
  410966:	d02d      	beq.n	4109c4 <memchr+0x74>
  410968:	f010 0f07 	tst.w	r0, #7
  41096c:	b342      	cbz	r2, 4109c0 <memchr+0x70>
  41096e:	d1f6      	bne.n	41095e <memchr+0xe>
  410970:	b4f0      	push	{r4, r5, r6, r7}
  410972:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  410976:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  41097a:	f022 0407 	bic.w	r4, r2, #7
  41097e:	f07f 0700 	mvns.w	r7, #0
  410982:	2300      	movs	r3, #0
  410984:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  410988:	3c08      	subs	r4, #8
  41098a:	ea85 0501 	eor.w	r5, r5, r1
  41098e:	ea86 0601 	eor.w	r6, r6, r1
  410992:	fa85 f547 	uadd8	r5, r5, r7
  410996:	faa3 f587 	sel	r5, r3, r7
  41099a:	fa86 f647 	uadd8	r6, r6, r7
  41099e:	faa5 f687 	sel	r6, r5, r7
  4109a2:	b98e      	cbnz	r6, 4109c8 <memchr+0x78>
  4109a4:	d1ee      	bne.n	410984 <memchr+0x34>
  4109a6:	bcf0      	pop	{r4, r5, r6, r7}
  4109a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4109ac:	f002 0207 	and.w	r2, r2, #7
  4109b0:	b132      	cbz	r2, 4109c0 <memchr+0x70>
  4109b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4109b6:	3a01      	subs	r2, #1
  4109b8:	ea83 0301 	eor.w	r3, r3, r1
  4109bc:	b113      	cbz	r3, 4109c4 <memchr+0x74>
  4109be:	d1f8      	bne.n	4109b2 <memchr+0x62>
  4109c0:	2000      	movs	r0, #0
  4109c2:	4770      	bx	lr
  4109c4:	3801      	subs	r0, #1
  4109c6:	4770      	bx	lr
  4109c8:	2d00      	cmp	r5, #0
  4109ca:	bf06      	itte	eq
  4109cc:	4635      	moveq	r5, r6
  4109ce:	3803      	subeq	r0, #3
  4109d0:	3807      	subne	r0, #7
  4109d2:	f015 0f01 	tst.w	r5, #1
  4109d6:	d107      	bne.n	4109e8 <memchr+0x98>
  4109d8:	3001      	adds	r0, #1
  4109da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4109de:	bf02      	ittt	eq
  4109e0:	3001      	addeq	r0, #1
  4109e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4109e6:	3001      	addeq	r0, #1
  4109e8:	bcf0      	pop	{r4, r5, r6, r7}
  4109ea:	3801      	subs	r0, #1
  4109ec:	4770      	bx	lr
  4109ee:	bf00      	nop

004109f0 <__malloc_lock>:
  4109f0:	4801      	ldr	r0, [pc, #4]	; (4109f8 <__malloc_lock+0x8>)
  4109f2:	f7ff bcf7 	b.w	4103e4 <__retarget_lock_acquire_recursive>
  4109f6:	bf00      	nop
  4109f8:	200017dc 	.word	0x200017dc

004109fc <__malloc_unlock>:
  4109fc:	4801      	ldr	r0, [pc, #4]	; (410a04 <__malloc_unlock+0x8>)
  4109fe:	f7ff bcf3 	b.w	4103e8 <__retarget_lock_release_recursive>
  410a02:	bf00      	nop
  410a04:	200017dc 	.word	0x200017dc

00410a08 <_Balloc>:
  410a08:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  410a0a:	b570      	push	{r4, r5, r6, lr}
  410a0c:	4605      	mov	r5, r0
  410a0e:	460c      	mov	r4, r1
  410a10:	b14b      	cbz	r3, 410a26 <_Balloc+0x1e>
  410a12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  410a16:	b180      	cbz	r0, 410a3a <_Balloc+0x32>
  410a18:	6802      	ldr	r2, [r0, #0]
  410a1a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  410a1e:	2300      	movs	r3, #0
  410a20:	6103      	str	r3, [r0, #16]
  410a22:	60c3      	str	r3, [r0, #12]
  410a24:	bd70      	pop	{r4, r5, r6, pc}
  410a26:	2221      	movs	r2, #33	; 0x21
  410a28:	2104      	movs	r1, #4
  410a2a:	f000 fbd9 	bl	4111e0 <_calloc_r>
  410a2e:	64e8      	str	r0, [r5, #76]	; 0x4c
  410a30:	4603      	mov	r3, r0
  410a32:	2800      	cmp	r0, #0
  410a34:	d1ed      	bne.n	410a12 <_Balloc+0xa>
  410a36:	2000      	movs	r0, #0
  410a38:	bd70      	pop	{r4, r5, r6, pc}
  410a3a:	2101      	movs	r1, #1
  410a3c:	fa01 f604 	lsl.w	r6, r1, r4
  410a40:	1d72      	adds	r2, r6, #5
  410a42:	4628      	mov	r0, r5
  410a44:	0092      	lsls	r2, r2, #2
  410a46:	f000 fbcb 	bl	4111e0 <_calloc_r>
  410a4a:	2800      	cmp	r0, #0
  410a4c:	d0f3      	beq.n	410a36 <_Balloc+0x2e>
  410a4e:	6044      	str	r4, [r0, #4]
  410a50:	6086      	str	r6, [r0, #8]
  410a52:	e7e4      	b.n	410a1e <_Balloc+0x16>

00410a54 <_Bfree>:
  410a54:	b131      	cbz	r1, 410a64 <_Bfree+0x10>
  410a56:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  410a58:	684a      	ldr	r2, [r1, #4]
  410a5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  410a5e:	6008      	str	r0, [r1, #0]
  410a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  410a64:	4770      	bx	lr
  410a66:	bf00      	nop

00410a68 <__multadd>:
  410a68:	b5f0      	push	{r4, r5, r6, r7, lr}
  410a6a:	690c      	ldr	r4, [r1, #16]
  410a6c:	b083      	sub	sp, #12
  410a6e:	460d      	mov	r5, r1
  410a70:	4606      	mov	r6, r0
  410a72:	f101 0e14 	add.w	lr, r1, #20
  410a76:	2700      	movs	r7, #0
  410a78:	f8de 0000 	ldr.w	r0, [lr]
  410a7c:	b281      	uxth	r1, r0
  410a7e:	fb02 3301 	mla	r3, r2, r1, r3
  410a82:	0c01      	lsrs	r1, r0, #16
  410a84:	0c18      	lsrs	r0, r3, #16
  410a86:	fb02 0101 	mla	r1, r2, r1, r0
  410a8a:	b29b      	uxth	r3, r3
  410a8c:	3701      	adds	r7, #1
  410a8e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  410a92:	42bc      	cmp	r4, r7
  410a94:	f84e 3b04 	str.w	r3, [lr], #4
  410a98:	ea4f 4311 	mov.w	r3, r1, lsr #16
  410a9c:	dcec      	bgt.n	410a78 <__multadd+0x10>
  410a9e:	b13b      	cbz	r3, 410ab0 <__multadd+0x48>
  410aa0:	68aa      	ldr	r2, [r5, #8]
  410aa2:	4294      	cmp	r4, r2
  410aa4:	da07      	bge.n	410ab6 <__multadd+0x4e>
  410aa6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  410aaa:	3401      	adds	r4, #1
  410aac:	6153      	str	r3, [r2, #20]
  410aae:	612c      	str	r4, [r5, #16]
  410ab0:	4628      	mov	r0, r5
  410ab2:	b003      	add	sp, #12
  410ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410ab6:	6869      	ldr	r1, [r5, #4]
  410ab8:	9301      	str	r3, [sp, #4]
  410aba:	3101      	adds	r1, #1
  410abc:	4630      	mov	r0, r6
  410abe:	f7ff ffa3 	bl	410a08 <_Balloc>
  410ac2:	692a      	ldr	r2, [r5, #16]
  410ac4:	3202      	adds	r2, #2
  410ac6:	f105 010c 	add.w	r1, r5, #12
  410aca:	4607      	mov	r7, r0
  410acc:	0092      	lsls	r2, r2, #2
  410ace:	300c      	adds	r0, #12
  410ad0:	f7fd f8ca 	bl	40dc68 <memcpy>
  410ad4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  410ad6:	6869      	ldr	r1, [r5, #4]
  410ad8:	9b01      	ldr	r3, [sp, #4]
  410ada:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  410ade:	6028      	str	r0, [r5, #0]
  410ae0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  410ae4:	463d      	mov	r5, r7
  410ae6:	e7de      	b.n	410aa6 <__multadd+0x3e>

00410ae8 <__hi0bits>:
  410ae8:	0c02      	lsrs	r2, r0, #16
  410aea:	0412      	lsls	r2, r2, #16
  410aec:	4603      	mov	r3, r0
  410aee:	b9b2      	cbnz	r2, 410b1e <__hi0bits+0x36>
  410af0:	0403      	lsls	r3, r0, #16
  410af2:	2010      	movs	r0, #16
  410af4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  410af8:	bf04      	itt	eq
  410afa:	021b      	lsleq	r3, r3, #8
  410afc:	3008      	addeq	r0, #8
  410afe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  410b02:	bf04      	itt	eq
  410b04:	011b      	lsleq	r3, r3, #4
  410b06:	3004      	addeq	r0, #4
  410b08:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  410b0c:	bf04      	itt	eq
  410b0e:	009b      	lsleq	r3, r3, #2
  410b10:	3002      	addeq	r0, #2
  410b12:	2b00      	cmp	r3, #0
  410b14:	db02      	blt.n	410b1c <__hi0bits+0x34>
  410b16:	005b      	lsls	r3, r3, #1
  410b18:	d403      	bmi.n	410b22 <__hi0bits+0x3a>
  410b1a:	2020      	movs	r0, #32
  410b1c:	4770      	bx	lr
  410b1e:	2000      	movs	r0, #0
  410b20:	e7e8      	b.n	410af4 <__hi0bits+0xc>
  410b22:	3001      	adds	r0, #1
  410b24:	4770      	bx	lr
  410b26:	bf00      	nop

00410b28 <__lo0bits>:
  410b28:	6803      	ldr	r3, [r0, #0]
  410b2a:	f013 0207 	ands.w	r2, r3, #7
  410b2e:	4601      	mov	r1, r0
  410b30:	d007      	beq.n	410b42 <__lo0bits+0x1a>
  410b32:	07da      	lsls	r2, r3, #31
  410b34:	d421      	bmi.n	410b7a <__lo0bits+0x52>
  410b36:	0798      	lsls	r0, r3, #30
  410b38:	d421      	bmi.n	410b7e <__lo0bits+0x56>
  410b3a:	089b      	lsrs	r3, r3, #2
  410b3c:	600b      	str	r3, [r1, #0]
  410b3e:	2002      	movs	r0, #2
  410b40:	4770      	bx	lr
  410b42:	b298      	uxth	r0, r3
  410b44:	b198      	cbz	r0, 410b6e <__lo0bits+0x46>
  410b46:	4610      	mov	r0, r2
  410b48:	f013 0fff 	tst.w	r3, #255	; 0xff
  410b4c:	bf04      	itt	eq
  410b4e:	0a1b      	lsreq	r3, r3, #8
  410b50:	3008      	addeq	r0, #8
  410b52:	071a      	lsls	r2, r3, #28
  410b54:	bf04      	itt	eq
  410b56:	091b      	lsreq	r3, r3, #4
  410b58:	3004      	addeq	r0, #4
  410b5a:	079a      	lsls	r2, r3, #30
  410b5c:	bf04      	itt	eq
  410b5e:	089b      	lsreq	r3, r3, #2
  410b60:	3002      	addeq	r0, #2
  410b62:	07da      	lsls	r2, r3, #31
  410b64:	d407      	bmi.n	410b76 <__lo0bits+0x4e>
  410b66:	085b      	lsrs	r3, r3, #1
  410b68:	d104      	bne.n	410b74 <__lo0bits+0x4c>
  410b6a:	2020      	movs	r0, #32
  410b6c:	4770      	bx	lr
  410b6e:	0c1b      	lsrs	r3, r3, #16
  410b70:	2010      	movs	r0, #16
  410b72:	e7e9      	b.n	410b48 <__lo0bits+0x20>
  410b74:	3001      	adds	r0, #1
  410b76:	600b      	str	r3, [r1, #0]
  410b78:	4770      	bx	lr
  410b7a:	2000      	movs	r0, #0
  410b7c:	4770      	bx	lr
  410b7e:	085b      	lsrs	r3, r3, #1
  410b80:	600b      	str	r3, [r1, #0]
  410b82:	2001      	movs	r0, #1
  410b84:	4770      	bx	lr
  410b86:	bf00      	nop

00410b88 <__i2b>:
  410b88:	b510      	push	{r4, lr}
  410b8a:	460c      	mov	r4, r1
  410b8c:	2101      	movs	r1, #1
  410b8e:	f7ff ff3b 	bl	410a08 <_Balloc>
  410b92:	2201      	movs	r2, #1
  410b94:	6144      	str	r4, [r0, #20]
  410b96:	6102      	str	r2, [r0, #16]
  410b98:	bd10      	pop	{r4, pc}
  410b9a:	bf00      	nop

00410b9c <__multiply>:
  410b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410ba0:	690c      	ldr	r4, [r1, #16]
  410ba2:	6915      	ldr	r5, [r2, #16]
  410ba4:	42ac      	cmp	r4, r5
  410ba6:	b083      	sub	sp, #12
  410ba8:	468b      	mov	fp, r1
  410baa:	4616      	mov	r6, r2
  410bac:	da04      	bge.n	410bb8 <__multiply+0x1c>
  410bae:	4622      	mov	r2, r4
  410bb0:	46b3      	mov	fp, r6
  410bb2:	462c      	mov	r4, r5
  410bb4:	460e      	mov	r6, r1
  410bb6:	4615      	mov	r5, r2
  410bb8:	f8db 3008 	ldr.w	r3, [fp, #8]
  410bbc:	f8db 1004 	ldr.w	r1, [fp, #4]
  410bc0:	eb04 0805 	add.w	r8, r4, r5
  410bc4:	4598      	cmp	r8, r3
  410bc6:	bfc8      	it	gt
  410bc8:	3101      	addgt	r1, #1
  410bca:	f7ff ff1d 	bl	410a08 <_Balloc>
  410bce:	f100 0914 	add.w	r9, r0, #20
  410bd2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  410bd6:	45d1      	cmp	r9, sl
  410bd8:	9000      	str	r0, [sp, #0]
  410bda:	d205      	bcs.n	410be8 <__multiply+0x4c>
  410bdc:	464b      	mov	r3, r9
  410bde:	2100      	movs	r1, #0
  410be0:	f843 1b04 	str.w	r1, [r3], #4
  410be4:	459a      	cmp	sl, r3
  410be6:	d8fb      	bhi.n	410be0 <__multiply+0x44>
  410be8:	f106 0c14 	add.w	ip, r6, #20
  410bec:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  410bf0:	f10b 0b14 	add.w	fp, fp, #20
  410bf4:	459c      	cmp	ip, r3
  410bf6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  410bfa:	d24c      	bcs.n	410c96 <__multiply+0xfa>
  410bfc:	f8cd a004 	str.w	sl, [sp, #4]
  410c00:	469a      	mov	sl, r3
  410c02:	f8dc 5000 	ldr.w	r5, [ip]
  410c06:	b2af      	uxth	r7, r5
  410c08:	b1ef      	cbz	r7, 410c46 <__multiply+0xaa>
  410c0a:	2100      	movs	r1, #0
  410c0c:	464d      	mov	r5, r9
  410c0e:	465e      	mov	r6, fp
  410c10:	460c      	mov	r4, r1
  410c12:	f856 2b04 	ldr.w	r2, [r6], #4
  410c16:	6828      	ldr	r0, [r5, #0]
  410c18:	b293      	uxth	r3, r2
  410c1a:	b281      	uxth	r1, r0
  410c1c:	fb07 1303 	mla	r3, r7, r3, r1
  410c20:	0c12      	lsrs	r2, r2, #16
  410c22:	0c01      	lsrs	r1, r0, #16
  410c24:	4423      	add	r3, r4
  410c26:	fb07 1102 	mla	r1, r7, r2, r1
  410c2a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  410c2e:	b29b      	uxth	r3, r3
  410c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  410c34:	45b6      	cmp	lr, r6
  410c36:	f845 3b04 	str.w	r3, [r5], #4
  410c3a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  410c3e:	d8e8      	bhi.n	410c12 <__multiply+0x76>
  410c40:	602c      	str	r4, [r5, #0]
  410c42:	f8dc 5000 	ldr.w	r5, [ip]
  410c46:	0c2d      	lsrs	r5, r5, #16
  410c48:	d01d      	beq.n	410c86 <__multiply+0xea>
  410c4a:	f8d9 3000 	ldr.w	r3, [r9]
  410c4e:	4648      	mov	r0, r9
  410c50:	461c      	mov	r4, r3
  410c52:	4659      	mov	r1, fp
  410c54:	2200      	movs	r2, #0
  410c56:	880e      	ldrh	r6, [r1, #0]
  410c58:	0c24      	lsrs	r4, r4, #16
  410c5a:	fb05 4406 	mla	r4, r5, r6, r4
  410c5e:	4422      	add	r2, r4
  410c60:	b29b      	uxth	r3, r3
  410c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  410c66:	f840 3b04 	str.w	r3, [r0], #4
  410c6a:	f851 3b04 	ldr.w	r3, [r1], #4
  410c6e:	6804      	ldr	r4, [r0, #0]
  410c70:	0c1b      	lsrs	r3, r3, #16
  410c72:	b2a6      	uxth	r6, r4
  410c74:	fb05 6303 	mla	r3, r5, r3, r6
  410c78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  410c7c:	458e      	cmp	lr, r1
  410c7e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  410c82:	d8e8      	bhi.n	410c56 <__multiply+0xba>
  410c84:	6003      	str	r3, [r0, #0]
  410c86:	f10c 0c04 	add.w	ip, ip, #4
  410c8a:	45e2      	cmp	sl, ip
  410c8c:	f109 0904 	add.w	r9, r9, #4
  410c90:	d8b7      	bhi.n	410c02 <__multiply+0x66>
  410c92:	f8dd a004 	ldr.w	sl, [sp, #4]
  410c96:	f1b8 0f00 	cmp.w	r8, #0
  410c9a:	dd0b      	ble.n	410cb4 <__multiply+0x118>
  410c9c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  410ca0:	f1aa 0a04 	sub.w	sl, sl, #4
  410ca4:	b11b      	cbz	r3, 410cae <__multiply+0x112>
  410ca6:	e005      	b.n	410cb4 <__multiply+0x118>
  410ca8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  410cac:	b913      	cbnz	r3, 410cb4 <__multiply+0x118>
  410cae:	f1b8 0801 	subs.w	r8, r8, #1
  410cb2:	d1f9      	bne.n	410ca8 <__multiply+0x10c>
  410cb4:	9800      	ldr	r0, [sp, #0]
  410cb6:	f8c0 8010 	str.w	r8, [r0, #16]
  410cba:	b003      	add	sp, #12
  410cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410cc0 <__pow5mult>:
  410cc0:	f012 0303 	ands.w	r3, r2, #3
  410cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410cc8:	4614      	mov	r4, r2
  410cca:	4607      	mov	r7, r0
  410ccc:	d12e      	bne.n	410d2c <__pow5mult+0x6c>
  410cce:	460d      	mov	r5, r1
  410cd0:	10a4      	asrs	r4, r4, #2
  410cd2:	d01c      	beq.n	410d0e <__pow5mult+0x4e>
  410cd4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  410cd6:	b396      	cbz	r6, 410d3e <__pow5mult+0x7e>
  410cd8:	07e3      	lsls	r3, r4, #31
  410cda:	f04f 0800 	mov.w	r8, #0
  410cde:	d406      	bmi.n	410cee <__pow5mult+0x2e>
  410ce0:	1064      	asrs	r4, r4, #1
  410ce2:	d014      	beq.n	410d0e <__pow5mult+0x4e>
  410ce4:	6830      	ldr	r0, [r6, #0]
  410ce6:	b1a8      	cbz	r0, 410d14 <__pow5mult+0x54>
  410ce8:	4606      	mov	r6, r0
  410cea:	07e3      	lsls	r3, r4, #31
  410cec:	d5f8      	bpl.n	410ce0 <__pow5mult+0x20>
  410cee:	4632      	mov	r2, r6
  410cf0:	4629      	mov	r1, r5
  410cf2:	4638      	mov	r0, r7
  410cf4:	f7ff ff52 	bl	410b9c <__multiply>
  410cf8:	b1b5      	cbz	r5, 410d28 <__pow5mult+0x68>
  410cfa:	686a      	ldr	r2, [r5, #4]
  410cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  410cfe:	1064      	asrs	r4, r4, #1
  410d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  410d04:	6029      	str	r1, [r5, #0]
  410d06:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  410d0a:	4605      	mov	r5, r0
  410d0c:	d1ea      	bne.n	410ce4 <__pow5mult+0x24>
  410d0e:	4628      	mov	r0, r5
  410d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410d14:	4632      	mov	r2, r6
  410d16:	4631      	mov	r1, r6
  410d18:	4638      	mov	r0, r7
  410d1a:	f7ff ff3f 	bl	410b9c <__multiply>
  410d1e:	6030      	str	r0, [r6, #0]
  410d20:	f8c0 8000 	str.w	r8, [r0]
  410d24:	4606      	mov	r6, r0
  410d26:	e7e0      	b.n	410cea <__pow5mult+0x2a>
  410d28:	4605      	mov	r5, r0
  410d2a:	e7d9      	b.n	410ce0 <__pow5mult+0x20>
  410d2c:	1e5a      	subs	r2, r3, #1
  410d2e:	4d0b      	ldr	r5, [pc, #44]	; (410d5c <__pow5mult+0x9c>)
  410d30:	2300      	movs	r3, #0
  410d32:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  410d36:	f7ff fe97 	bl	410a68 <__multadd>
  410d3a:	4605      	mov	r5, r0
  410d3c:	e7c8      	b.n	410cd0 <__pow5mult+0x10>
  410d3e:	2101      	movs	r1, #1
  410d40:	4638      	mov	r0, r7
  410d42:	f7ff fe61 	bl	410a08 <_Balloc>
  410d46:	f240 2171 	movw	r1, #625	; 0x271
  410d4a:	2201      	movs	r2, #1
  410d4c:	2300      	movs	r3, #0
  410d4e:	6141      	str	r1, [r0, #20]
  410d50:	6102      	str	r2, [r0, #16]
  410d52:	4606      	mov	r6, r0
  410d54:	64b8      	str	r0, [r7, #72]	; 0x48
  410d56:	6003      	str	r3, [r0, #0]
  410d58:	e7be      	b.n	410cd8 <__pow5mult+0x18>
  410d5a:	bf00      	nop
  410d5c:	00413a30 	.word	0x00413a30

00410d60 <__lshift>:
  410d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  410d64:	4691      	mov	r9, r2
  410d66:	690a      	ldr	r2, [r1, #16]
  410d68:	688b      	ldr	r3, [r1, #8]
  410d6a:	ea4f 1469 	mov.w	r4, r9, asr #5
  410d6e:	eb04 0802 	add.w	r8, r4, r2
  410d72:	f108 0501 	add.w	r5, r8, #1
  410d76:	429d      	cmp	r5, r3
  410d78:	460e      	mov	r6, r1
  410d7a:	4607      	mov	r7, r0
  410d7c:	6849      	ldr	r1, [r1, #4]
  410d7e:	dd04      	ble.n	410d8a <__lshift+0x2a>
  410d80:	005b      	lsls	r3, r3, #1
  410d82:	429d      	cmp	r5, r3
  410d84:	f101 0101 	add.w	r1, r1, #1
  410d88:	dcfa      	bgt.n	410d80 <__lshift+0x20>
  410d8a:	4638      	mov	r0, r7
  410d8c:	f7ff fe3c 	bl	410a08 <_Balloc>
  410d90:	2c00      	cmp	r4, #0
  410d92:	f100 0314 	add.w	r3, r0, #20
  410d96:	dd06      	ble.n	410da6 <__lshift+0x46>
  410d98:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  410d9c:	2100      	movs	r1, #0
  410d9e:	f843 1b04 	str.w	r1, [r3], #4
  410da2:	429a      	cmp	r2, r3
  410da4:	d1fb      	bne.n	410d9e <__lshift+0x3e>
  410da6:	6934      	ldr	r4, [r6, #16]
  410da8:	f106 0114 	add.w	r1, r6, #20
  410dac:	f019 091f 	ands.w	r9, r9, #31
  410db0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  410db4:	d01d      	beq.n	410df2 <__lshift+0x92>
  410db6:	f1c9 0c20 	rsb	ip, r9, #32
  410dba:	2200      	movs	r2, #0
  410dbc:	680c      	ldr	r4, [r1, #0]
  410dbe:	fa04 f409 	lsl.w	r4, r4, r9
  410dc2:	4314      	orrs	r4, r2
  410dc4:	f843 4b04 	str.w	r4, [r3], #4
  410dc8:	f851 2b04 	ldr.w	r2, [r1], #4
  410dcc:	458e      	cmp	lr, r1
  410dce:	fa22 f20c 	lsr.w	r2, r2, ip
  410dd2:	d8f3      	bhi.n	410dbc <__lshift+0x5c>
  410dd4:	601a      	str	r2, [r3, #0]
  410dd6:	b10a      	cbz	r2, 410ddc <__lshift+0x7c>
  410dd8:	f108 0502 	add.w	r5, r8, #2
  410ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  410dde:	6872      	ldr	r2, [r6, #4]
  410de0:	3d01      	subs	r5, #1
  410de2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  410de6:	6105      	str	r5, [r0, #16]
  410de8:	6031      	str	r1, [r6, #0]
  410dea:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  410dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  410df2:	3b04      	subs	r3, #4
  410df4:	f851 2b04 	ldr.w	r2, [r1], #4
  410df8:	f843 2f04 	str.w	r2, [r3, #4]!
  410dfc:	458e      	cmp	lr, r1
  410dfe:	d8f9      	bhi.n	410df4 <__lshift+0x94>
  410e00:	e7ec      	b.n	410ddc <__lshift+0x7c>
  410e02:	bf00      	nop

00410e04 <__mcmp>:
  410e04:	b430      	push	{r4, r5}
  410e06:	690b      	ldr	r3, [r1, #16]
  410e08:	4605      	mov	r5, r0
  410e0a:	6900      	ldr	r0, [r0, #16]
  410e0c:	1ac0      	subs	r0, r0, r3
  410e0e:	d10f      	bne.n	410e30 <__mcmp+0x2c>
  410e10:	009b      	lsls	r3, r3, #2
  410e12:	3514      	adds	r5, #20
  410e14:	3114      	adds	r1, #20
  410e16:	4419      	add	r1, r3
  410e18:	442b      	add	r3, r5
  410e1a:	e001      	b.n	410e20 <__mcmp+0x1c>
  410e1c:	429d      	cmp	r5, r3
  410e1e:	d207      	bcs.n	410e30 <__mcmp+0x2c>
  410e20:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  410e24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  410e28:	4294      	cmp	r4, r2
  410e2a:	d0f7      	beq.n	410e1c <__mcmp+0x18>
  410e2c:	d302      	bcc.n	410e34 <__mcmp+0x30>
  410e2e:	2001      	movs	r0, #1
  410e30:	bc30      	pop	{r4, r5}
  410e32:	4770      	bx	lr
  410e34:	f04f 30ff 	mov.w	r0, #4294967295
  410e38:	e7fa      	b.n	410e30 <__mcmp+0x2c>
  410e3a:	bf00      	nop

00410e3c <__mdiff>:
  410e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410e40:	690f      	ldr	r7, [r1, #16]
  410e42:	460e      	mov	r6, r1
  410e44:	6911      	ldr	r1, [r2, #16]
  410e46:	1a7f      	subs	r7, r7, r1
  410e48:	2f00      	cmp	r7, #0
  410e4a:	4690      	mov	r8, r2
  410e4c:	d117      	bne.n	410e7e <__mdiff+0x42>
  410e4e:	0089      	lsls	r1, r1, #2
  410e50:	f106 0514 	add.w	r5, r6, #20
  410e54:	f102 0e14 	add.w	lr, r2, #20
  410e58:	186b      	adds	r3, r5, r1
  410e5a:	4471      	add	r1, lr
  410e5c:	e001      	b.n	410e62 <__mdiff+0x26>
  410e5e:	429d      	cmp	r5, r3
  410e60:	d25c      	bcs.n	410f1c <__mdiff+0xe0>
  410e62:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  410e66:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  410e6a:	42a2      	cmp	r2, r4
  410e6c:	d0f7      	beq.n	410e5e <__mdiff+0x22>
  410e6e:	d25e      	bcs.n	410f2e <__mdiff+0xf2>
  410e70:	4633      	mov	r3, r6
  410e72:	462c      	mov	r4, r5
  410e74:	4646      	mov	r6, r8
  410e76:	4675      	mov	r5, lr
  410e78:	4698      	mov	r8, r3
  410e7a:	2701      	movs	r7, #1
  410e7c:	e005      	b.n	410e8a <__mdiff+0x4e>
  410e7e:	db58      	blt.n	410f32 <__mdiff+0xf6>
  410e80:	f106 0514 	add.w	r5, r6, #20
  410e84:	f108 0414 	add.w	r4, r8, #20
  410e88:	2700      	movs	r7, #0
  410e8a:	6871      	ldr	r1, [r6, #4]
  410e8c:	f7ff fdbc 	bl	410a08 <_Balloc>
  410e90:	f8d8 3010 	ldr.w	r3, [r8, #16]
  410e94:	6936      	ldr	r6, [r6, #16]
  410e96:	60c7      	str	r7, [r0, #12]
  410e98:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  410e9c:	46a6      	mov	lr, r4
  410e9e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  410ea2:	f100 0414 	add.w	r4, r0, #20
  410ea6:	2300      	movs	r3, #0
  410ea8:	f85e 1b04 	ldr.w	r1, [lr], #4
  410eac:	f855 8b04 	ldr.w	r8, [r5], #4
  410eb0:	b28a      	uxth	r2, r1
  410eb2:	fa13 f388 	uxtah	r3, r3, r8
  410eb6:	0c09      	lsrs	r1, r1, #16
  410eb8:	1a9a      	subs	r2, r3, r2
  410eba:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  410ebe:	eb03 4322 	add.w	r3, r3, r2, asr #16
  410ec2:	b292      	uxth	r2, r2
  410ec4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  410ec8:	45f4      	cmp	ip, lr
  410eca:	f844 2b04 	str.w	r2, [r4], #4
  410ece:	ea4f 4323 	mov.w	r3, r3, asr #16
  410ed2:	d8e9      	bhi.n	410ea8 <__mdiff+0x6c>
  410ed4:	42af      	cmp	r7, r5
  410ed6:	d917      	bls.n	410f08 <__mdiff+0xcc>
  410ed8:	46a4      	mov	ip, r4
  410eda:	46ae      	mov	lr, r5
  410edc:	f85e 2b04 	ldr.w	r2, [lr], #4
  410ee0:	fa13 f382 	uxtah	r3, r3, r2
  410ee4:	1419      	asrs	r1, r3, #16
  410ee6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  410eea:	b29b      	uxth	r3, r3
  410eec:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  410ef0:	4577      	cmp	r7, lr
  410ef2:	f84c 2b04 	str.w	r2, [ip], #4
  410ef6:	ea4f 4321 	mov.w	r3, r1, asr #16
  410efa:	d8ef      	bhi.n	410edc <__mdiff+0xa0>
  410efc:	43ed      	mvns	r5, r5
  410efe:	442f      	add	r7, r5
  410f00:	f027 0703 	bic.w	r7, r7, #3
  410f04:	3704      	adds	r7, #4
  410f06:	443c      	add	r4, r7
  410f08:	3c04      	subs	r4, #4
  410f0a:	b922      	cbnz	r2, 410f16 <__mdiff+0xda>
  410f0c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  410f10:	3e01      	subs	r6, #1
  410f12:	2b00      	cmp	r3, #0
  410f14:	d0fa      	beq.n	410f0c <__mdiff+0xd0>
  410f16:	6106      	str	r6, [r0, #16]
  410f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410f1c:	2100      	movs	r1, #0
  410f1e:	f7ff fd73 	bl	410a08 <_Balloc>
  410f22:	2201      	movs	r2, #1
  410f24:	2300      	movs	r3, #0
  410f26:	6102      	str	r2, [r0, #16]
  410f28:	6143      	str	r3, [r0, #20]
  410f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410f2e:	4674      	mov	r4, lr
  410f30:	e7ab      	b.n	410e8a <__mdiff+0x4e>
  410f32:	4633      	mov	r3, r6
  410f34:	f106 0414 	add.w	r4, r6, #20
  410f38:	f102 0514 	add.w	r5, r2, #20
  410f3c:	4616      	mov	r6, r2
  410f3e:	2701      	movs	r7, #1
  410f40:	4698      	mov	r8, r3
  410f42:	e7a2      	b.n	410e8a <__mdiff+0x4e>

00410f44 <__d2b>:
  410f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410f48:	b082      	sub	sp, #8
  410f4a:	2101      	movs	r1, #1
  410f4c:	461c      	mov	r4, r3
  410f4e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  410f52:	4615      	mov	r5, r2
  410f54:	9e08      	ldr	r6, [sp, #32]
  410f56:	f7ff fd57 	bl	410a08 <_Balloc>
  410f5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  410f5e:	4680      	mov	r8, r0
  410f60:	b10f      	cbz	r7, 410f66 <__d2b+0x22>
  410f62:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  410f66:	9401      	str	r4, [sp, #4]
  410f68:	b31d      	cbz	r5, 410fb2 <__d2b+0x6e>
  410f6a:	a802      	add	r0, sp, #8
  410f6c:	f840 5d08 	str.w	r5, [r0, #-8]!
  410f70:	f7ff fdda 	bl	410b28 <__lo0bits>
  410f74:	2800      	cmp	r0, #0
  410f76:	d134      	bne.n	410fe2 <__d2b+0x9e>
  410f78:	e89d 000c 	ldmia.w	sp, {r2, r3}
  410f7c:	f8c8 2014 	str.w	r2, [r8, #20]
  410f80:	2b00      	cmp	r3, #0
  410f82:	bf0c      	ite	eq
  410f84:	2101      	moveq	r1, #1
  410f86:	2102      	movne	r1, #2
  410f88:	f8c8 3018 	str.w	r3, [r8, #24]
  410f8c:	f8c8 1010 	str.w	r1, [r8, #16]
  410f90:	b9df      	cbnz	r7, 410fca <__d2b+0x86>
  410f92:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  410f96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  410f9a:	6030      	str	r0, [r6, #0]
  410f9c:	6918      	ldr	r0, [r3, #16]
  410f9e:	f7ff fda3 	bl	410ae8 <__hi0bits>
  410fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410fa4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  410fa8:	6018      	str	r0, [r3, #0]
  410faa:	4640      	mov	r0, r8
  410fac:	b002      	add	sp, #8
  410fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410fb2:	a801      	add	r0, sp, #4
  410fb4:	f7ff fdb8 	bl	410b28 <__lo0bits>
  410fb8:	9b01      	ldr	r3, [sp, #4]
  410fba:	f8c8 3014 	str.w	r3, [r8, #20]
  410fbe:	2101      	movs	r1, #1
  410fc0:	3020      	adds	r0, #32
  410fc2:	f8c8 1010 	str.w	r1, [r8, #16]
  410fc6:	2f00      	cmp	r7, #0
  410fc8:	d0e3      	beq.n	410f92 <__d2b+0x4e>
  410fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410fcc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  410fd0:	4407      	add	r7, r0
  410fd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  410fd6:	6037      	str	r7, [r6, #0]
  410fd8:	6018      	str	r0, [r3, #0]
  410fda:	4640      	mov	r0, r8
  410fdc:	b002      	add	sp, #8
  410fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410fe2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  410fe6:	f1c0 0220 	rsb	r2, r0, #32
  410fea:	fa03 f202 	lsl.w	r2, r3, r2
  410fee:	430a      	orrs	r2, r1
  410ff0:	40c3      	lsrs	r3, r0
  410ff2:	9301      	str	r3, [sp, #4]
  410ff4:	f8c8 2014 	str.w	r2, [r8, #20]
  410ff8:	e7c2      	b.n	410f80 <__d2b+0x3c>
  410ffa:	bf00      	nop

00410ffc <_sbrk_r>:
  410ffc:	b538      	push	{r3, r4, r5, lr}
  410ffe:	4c07      	ldr	r4, [pc, #28]	; (41101c <_sbrk_r+0x20>)
  411000:	2300      	movs	r3, #0
  411002:	4605      	mov	r5, r0
  411004:	4608      	mov	r0, r1
  411006:	6023      	str	r3, [r4, #0]
  411008:	f7f8 fb12 	bl	409630 <_sbrk>
  41100c:	1c43      	adds	r3, r0, #1
  41100e:	d000      	beq.n	411012 <_sbrk_r+0x16>
  411010:	bd38      	pop	{r3, r4, r5, pc}
  411012:	6823      	ldr	r3, [r4, #0]
  411014:	2b00      	cmp	r3, #0
  411016:	d0fb      	beq.n	411010 <_sbrk_r+0x14>
  411018:	602b      	str	r3, [r5, #0]
  41101a:	bd38      	pop	{r3, r4, r5, pc}
  41101c:	200017f0 	.word	0x200017f0

00411020 <__ssprint_r>:
  411020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411024:	6893      	ldr	r3, [r2, #8]
  411026:	b083      	sub	sp, #12
  411028:	4690      	mov	r8, r2
  41102a:	2b00      	cmp	r3, #0
  41102c:	d070      	beq.n	411110 <__ssprint_r+0xf0>
  41102e:	4682      	mov	sl, r0
  411030:	460c      	mov	r4, r1
  411032:	6817      	ldr	r7, [r2, #0]
  411034:	688d      	ldr	r5, [r1, #8]
  411036:	6808      	ldr	r0, [r1, #0]
  411038:	e042      	b.n	4110c0 <__ssprint_r+0xa0>
  41103a:	89a3      	ldrh	r3, [r4, #12]
  41103c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  411040:	d02e      	beq.n	4110a0 <__ssprint_r+0x80>
  411042:	6965      	ldr	r5, [r4, #20]
  411044:	6921      	ldr	r1, [r4, #16]
  411046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  41104a:	eba0 0b01 	sub.w	fp, r0, r1
  41104e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  411052:	f10b 0001 	add.w	r0, fp, #1
  411056:	106d      	asrs	r5, r5, #1
  411058:	4430      	add	r0, r6
  41105a:	42a8      	cmp	r0, r5
  41105c:	462a      	mov	r2, r5
  41105e:	bf84      	itt	hi
  411060:	4605      	movhi	r5, r0
  411062:	462a      	movhi	r2, r5
  411064:	055b      	lsls	r3, r3, #21
  411066:	d538      	bpl.n	4110da <__ssprint_r+0xba>
  411068:	4611      	mov	r1, r2
  41106a:	4650      	mov	r0, sl
  41106c:	f7ff f9be 	bl	4103ec <_malloc_r>
  411070:	2800      	cmp	r0, #0
  411072:	d03c      	beq.n	4110ee <__ssprint_r+0xce>
  411074:	465a      	mov	r2, fp
  411076:	6921      	ldr	r1, [r4, #16]
  411078:	9001      	str	r0, [sp, #4]
  41107a:	f7fc fdf5 	bl	40dc68 <memcpy>
  41107e:	89a2      	ldrh	r2, [r4, #12]
  411080:	9b01      	ldr	r3, [sp, #4]
  411082:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  411086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  41108a:	81a2      	strh	r2, [r4, #12]
  41108c:	eba5 020b 	sub.w	r2, r5, fp
  411090:	eb03 000b 	add.w	r0, r3, fp
  411094:	6165      	str	r5, [r4, #20]
  411096:	6123      	str	r3, [r4, #16]
  411098:	6020      	str	r0, [r4, #0]
  41109a:	60a2      	str	r2, [r4, #8]
  41109c:	4635      	mov	r5, r6
  41109e:	46b3      	mov	fp, r6
  4110a0:	465a      	mov	r2, fp
  4110a2:	4649      	mov	r1, r9
  4110a4:	f000 fa18 	bl	4114d8 <memmove>
  4110a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4110ac:	68a2      	ldr	r2, [r4, #8]
  4110ae:	6820      	ldr	r0, [r4, #0]
  4110b0:	1b55      	subs	r5, r2, r5
  4110b2:	4458      	add	r0, fp
  4110b4:	1b9e      	subs	r6, r3, r6
  4110b6:	60a5      	str	r5, [r4, #8]
  4110b8:	6020      	str	r0, [r4, #0]
  4110ba:	f8c8 6008 	str.w	r6, [r8, #8]
  4110be:	b33e      	cbz	r6, 411110 <__ssprint_r+0xf0>
  4110c0:	687e      	ldr	r6, [r7, #4]
  4110c2:	463b      	mov	r3, r7
  4110c4:	3708      	adds	r7, #8
  4110c6:	2e00      	cmp	r6, #0
  4110c8:	d0fa      	beq.n	4110c0 <__ssprint_r+0xa0>
  4110ca:	42ae      	cmp	r6, r5
  4110cc:	f8d3 9000 	ldr.w	r9, [r3]
  4110d0:	46ab      	mov	fp, r5
  4110d2:	d2b2      	bcs.n	41103a <__ssprint_r+0x1a>
  4110d4:	4635      	mov	r5, r6
  4110d6:	46b3      	mov	fp, r6
  4110d8:	e7e2      	b.n	4110a0 <__ssprint_r+0x80>
  4110da:	4650      	mov	r0, sl
  4110dc:	f000 fa60 	bl	4115a0 <_realloc_r>
  4110e0:	4603      	mov	r3, r0
  4110e2:	2800      	cmp	r0, #0
  4110e4:	d1d2      	bne.n	41108c <__ssprint_r+0x6c>
  4110e6:	6921      	ldr	r1, [r4, #16]
  4110e8:	4650      	mov	r0, sl
  4110ea:	f000 f8f9 	bl	4112e0 <_free_r>
  4110ee:	230c      	movs	r3, #12
  4110f0:	f8ca 3000 	str.w	r3, [sl]
  4110f4:	89a3      	ldrh	r3, [r4, #12]
  4110f6:	2200      	movs	r2, #0
  4110f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4110fc:	f04f 30ff 	mov.w	r0, #4294967295
  411100:	81a3      	strh	r3, [r4, #12]
  411102:	f8c8 2008 	str.w	r2, [r8, #8]
  411106:	f8c8 2004 	str.w	r2, [r8, #4]
  41110a:	b003      	add	sp, #12
  41110c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411110:	2000      	movs	r0, #0
  411112:	f8c8 0004 	str.w	r0, [r8, #4]
  411116:	b003      	add	sp, #12
  411118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041111c <__register_exitproc>:
  41111c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  411120:	4d2c      	ldr	r5, [pc, #176]	; (4111d4 <__register_exitproc+0xb8>)
  411122:	4606      	mov	r6, r0
  411124:	6828      	ldr	r0, [r5, #0]
  411126:	4698      	mov	r8, r3
  411128:	460f      	mov	r7, r1
  41112a:	4691      	mov	r9, r2
  41112c:	f7ff f95a 	bl	4103e4 <__retarget_lock_acquire_recursive>
  411130:	4b29      	ldr	r3, [pc, #164]	; (4111d8 <__register_exitproc+0xbc>)
  411132:	681c      	ldr	r4, [r3, #0]
  411134:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  411138:	2b00      	cmp	r3, #0
  41113a:	d03e      	beq.n	4111ba <__register_exitproc+0x9e>
  41113c:	685a      	ldr	r2, [r3, #4]
  41113e:	2a1f      	cmp	r2, #31
  411140:	dc1c      	bgt.n	41117c <__register_exitproc+0x60>
  411142:	f102 0e01 	add.w	lr, r2, #1
  411146:	b176      	cbz	r6, 411166 <__register_exitproc+0x4a>
  411148:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  41114c:	2401      	movs	r4, #1
  41114e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  411152:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  411156:	4094      	lsls	r4, r2
  411158:	4320      	orrs	r0, r4
  41115a:	2e02      	cmp	r6, #2
  41115c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  411160:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  411164:	d023      	beq.n	4111ae <__register_exitproc+0x92>
  411166:	3202      	adds	r2, #2
  411168:	f8c3 e004 	str.w	lr, [r3, #4]
  41116c:	6828      	ldr	r0, [r5, #0]
  41116e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  411172:	f7ff f939 	bl	4103e8 <__retarget_lock_release_recursive>
  411176:	2000      	movs	r0, #0
  411178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41117c:	4b17      	ldr	r3, [pc, #92]	; (4111dc <__register_exitproc+0xc0>)
  41117e:	b30b      	cbz	r3, 4111c4 <__register_exitproc+0xa8>
  411180:	f44f 70c8 	mov.w	r0, #400	; 0x190
  411184:	f3af 8000 	nop.w
  411188:	4603      	mov	r3, r0
  41118a:	b1d8      	cbz	r0, 4111c4 <__register_exitproc+0xa8>
  41118c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  411190:	6002      	str	r2, [r0, #0]
  411192:	2100      	movs	r1, #0
  411194:	6041      	str	r1, [r0, #4]
  411196:	460a      	mov	r2, r1
  411198:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  41119c:	f04f 0e01 	mov.w	lr, #1
  4111a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4111a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4111a8:	2e00      	cmp	r6, #0
  4111aa:	d0dc      	beq.n	411166 <__register_exitproc+0x4a>
  4111ac:	e7cc      	b.n	411148 <__register_exitproc+0x2c>
  4111ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4111b2:	430c      	orrs	r4, r1
  4111b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4111b8:	e7d5      	b.n	411166 <__register_exitproc+0x4a>
  4111ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4111be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4111c2:	e7bb      	b.n	41113c <__register_exitproc+0x20>
  4111c4:	6828      	ldr	r0, [r5, #0]
  4111c6:	f7ff f90f 	bl	4103e8 <__retarget_lock_release_recursive>
  4111ca:	f04f 30ff 	mov.w	r0, #4294967295
  4111ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4111d2:	bf00      	nop
  4111d4:	20000478 	.word	0x20000478
  4111d8:	004138c8 	.word	0x004138c8
  4111dc:	00000000 	.word	0x00000000

004111e0 <_calloc_r>:
  4111e0:	b510      	push	{r4, lr}
  4111e2:	fb02 f101 	mul.w	r1, r2, r1
  4111e6:	f7ff f901 	bl	4103ec <_malloc_r>
  4111ea:	4604      	mov	r4, r0
  4111ec:	b1d8      	cbz	r0, 411226 <_calloc_r+0x46>
  4111ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4111f2:	f022 0203 	bic.w	r2, r2, #3
  4111f6:	3a04      	subs	r2, #4
  4111f8:	2a24      	cmp	r2, #36	; 0x24
  4111fa:	d818      	bhi.n	41122e <_calloc_r+0x4e>
  4111fc:	2a13      	cmp	r2, #19
  4111fe:	d914      	bls.n	41122a <_calloc_r+0x4a>
  411200:	2300      	movs	r3, #0
  411202:	2a1b      	cmp	r2, #27
  411204:	6003      	str	r3, [r0, #0]
  411206:	6043      	str	r3, [r0, #4]
  411208:	d916      	bls.n	411238 <_calloc_r+0x58>
  41120a:	2a24      	cmp	r2, #36	; 0x24
  41120c:	6083      	str	r3, [r0, #8]
  41120e:	60c3      	str	r3, [r0, #12]
  411210:	bf11      	iteee	ne
  411212:	f100 0210 	addne.w	r2, r0, #16
  411216:	6103      	streq	r3, [r0, #16]
  411218:	6143      	streq	r3, [r0, #20]
  41121a:	f100 0218 	addeq.w	r2, r0, #24
  41121e:	2300      	movs	r3, #0
  411220:	6013      	str	r3, [r2, #0]
  411222:	6053      	str	r3, [r2, #4]
  411224:	6093      	str	r3, [r2, #8]
  411226:	4620      	mov	r0, r4
  411228:	bd10      	pop	{r4, pc}
  41122a:	4602      	mov	r2, r0
  41122c:	e7f7      	b.n	41121e <_calloc_r+0x3e>
  41122e:	2100      	movs	r1, #0
  411230:	f7fc fdb4 	bl	40dd9c <memset>
  411234:	4620      	mov	r0, r4
  411236:	bd10      	pop	{r4, pc}
  411238:	f100 0208 	add.w	r2, r0, #8
  41123c:	e7ef      	b.n	41121e <_calloc_r+0x3e>
  41123e:	bf00      	nop

00411240 <_malloc_trim_r>:
  411240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411242:	4f24      	ldr	r7, [pc, #144]	; (4112d4 <_malloc_trim_r+0x94>)
  411244:	460c      	mov	r4, r1
  411246:	4606      	mov	r6, r0
  411248:	f7ff fbd2 	bl	4109f0 <__malloc_lock>
  41124c:	68bb      	ldr	r3, [r7, #8]
  41124e:	685d      	ldr	r5, [r3, #4]
  411250:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  411254:	310f      	adds	r1, #15
  411256:	f025 0503 	bic.w	r5, r5, #3
  41125a:	4429      	add	r1, r5
  41125c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  411260:	f021 010f 	bic.w	r1, r1, #15
  411264:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  411268:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  41126c:	db07      	blt.n	41127e <_malloc_trim_r+0x3e>
  41126e:	2100      	movs	r1, #0
  411270:	4630      	mov	r0, r6
  411272:	f7ff fec3 	bl	410ffc <_sbrk_r>
  411276:	68bb      	ldr	r3, [r7, #8]
  411278:	442b      	add	r3, r5
  41127a:	4298      	cmp	r0, r3
  41127c:	d004      	beq.n	411288 <_malloc_trim_r+0x48>
  41127e:	4630      	mov	r0, r6
  411280:	f7ff fbbc 	bl	4109fc <__malloc_unlock>
  411284:	2000      	movs	r0, #0
  411286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  411288:	4261      	negs	r1, r4
  41128a:	4630      	mov	r0, r6
  41128c:	f7ff feb6 	bl	410ffc <_sbrk_r>
  411290:	3001      	adds	r0, #1
  411292:	d00d      	beq.n	4112b0 <_malloc_trim_r+0x70>
  411294:	4b10      	ldr	r3, [pc, #64]	; (4112d8 <_malloc_trim_r+0x98>)
  411296:	68ba      	ldr	r2, [r7, #8]
  411298:	6819      	ldr	r1, [r3, #0]
  41129a:	1b2d      	subs	r5, r5, r4
  41129c:	f045 0501 	orr.w	r5, r5, #1
  4112a0:	4630      	mov	r0, r6
  4112a2:	1b09      	subs	r1, r1, r4
  4112a4:	6055      	str	r5, [r2, #4]
  4112a6:	6019      	str	r1, [r3, #0]
  4112a8:	f7ff fba8 	bl	4109fc <__malloc_unlock>
  4112ac:	2001      	movs	r0, #1
  4112ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4112b0:	2100      	movs	r1, #0
  4112b2:	4630      	mov	r0, r6
  4112b4:	f7ff fea2 	bl	410ffc <_sbrk_r>
  4112b8:	68ba      	ldr	r2, [r7, #8]
  4112ba:	1a83      	subs	r3, r0, r2
  4112bc:	2b0f      	cmp	r3, #15
  4112be:	ddde      	ble.n	41127e <_malloc_trim_r+0x3e>
  4112c0:	4c06      	ldr	r4, [pc, #24]	; (4112dc <_malloc_trim_r+0x9c>)
  4112c2:	4905      	ldr	r1, [pc, #20]	; (4112d8 <_malloc_trim_r+0x98>)
  4112c4:	6824      	ldr	r4, [r4, #0]
  4112c6:	f043 0301 	orr.w	r3, r3, #1
  4112ca:	1b00      	subs	r0, r0, r4
  4112cc:	6053      	str	r3, [r2, #4]
  4112ce:	6008      	str	r0, [r1, #0]
  4112d0:	e7d5      	b.n	41127e <_malloc_trim_r+0x3e>
  4112d2:	bf00      	nop
  4112d4:	2000047c 	.word	0x2000047c
  4112d8:	20000ecc 	.word	0x20000ecc
  4112dc:	20000884 	.word	0x20000884

004112e0 <_free_r>:
  4112e0:	2900      	cmp	r1, #0
  4112e2:	d044      	beq.n	41136e <_free_r+0x8e>
  4112e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4112e8:	460d      	mov	r5, r1
  4112ea:	4680      	mov	r8, r0
  4112ec:	f7ff fb80 	bl	4109f0 <__malloc_lock>
  4112f0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4112f4:	4969      	ldr	r1, [pc, #420]	; (41149c <_free_r+0x1bc>)
  4112f6:	f027 0301 	bic.w	r3, r7, #1
  4112fa:	f1a5 0408 	sub.w	r4, r5, #8
  4112fe:	18e2      	adds	r2, r4, r3
  411300:	688e      	ldr	r6, [r1, #8]
  411302:	6850      	ldr	r0, [r2, #4]
  411304:	42b2      	cmp	r2, r6
  411306:	f020 0003 	bic.w	r0, r0, #3
  41130a:	d05e      	beq.n	4113ca <_free_r+0xea>
  41130c:	07fe      	lsls	r6, r7, #31
  41130e:	6050      	str	r0, [r2, #4]
  411310:	d40b      	bmi.n	41132a <_free_r+0x4a>
  411312:	f855 7c08 	ldr.w	r7, [r5, #-8]
  411316:	1be4      	subs	r4, r4, r7
  411318:	f101 0e08 	add.w	lr, r1, #8
  41131c:	68a5      	ldr	r5, [r4, #8]
  41131e:	4575      	cmp	r5, lr
  411320:	443b      	add	r3, r7
  411322:	d06d      	beq.n	411400 <_free_r+0x120>
  411324:	68e7      	ldr	r7, [r4, #12]
  411326:	60ef      	str	r7, [r5, #12]
  411328:	60bd      	str	r5, [r7, #8]
  41132a:	1815      	adds	r5, r2, r0
  41132c:	686d      	ldr	r5, [r5, #4]
  41132e:	07ed      	lsls	r5, r5, #31
  411330:	d53e      	bpl.n	4113b0 <_free_r+0xd0>
  411332:	f043 0201 	orr.w	r2, r3, #1
  411336:	6062      	str	r2, [r4, #4]
  411338:	50e3      	str	r3, [r4, r3]
  41133a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41133e:	d217      	bcs.n	411370 <_free_r+0x90>
  411340:	08db      	lsrs	r3, r3, #3
  411342:	1c58      	adds	r0, r3, #1
  411344:	109a      	asrs	r2, r3, #2
  411346:	684d      	ldr	r5, [r1, #4]
  411348:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  41134c:	60a7      	str	r7, [r4, #8]
  41134e:	2301      	movs	r3, #1
  411350:	4093      	lsls	r3, r2
  411352:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  411356:	432b      	orrs	r3, r5
  411358:	3a08      	subs	r2, #8
  41135a:	60e2      	str	r2, [r4, #12]
  41135c:	604b      	str	r3, [r1, #4]
  41135e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  411362:	60fc      	str	r4, [r7, #12]
  411364:	4640      	mov	r0, r8
  411366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41136a:	f7ff bb47 	b.w	4109fc <__malloc_unlock>
  41136e:	4770      	bx	lr
  411370:	0a5a      	lsrs	r2, r3, #9
  411372:	2a04      	cmp	r2, #4
  411374:	d852      	bhi.n	41141c <_free_r+0x13c>
  411376:	099a      	lsrs	r2, r3, #6
  411378:	f102 0739 	add.w	r7, r2, #57	; 0x39
  41137c:	00ff      	lsls	r7, r7, #3
  41137e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  411382:	19c8      	adds	r0, r1, r7
  411384:	59ca      	ldr	r2, [r1, r7]
  411386:	3808      	subs	r0, #8
  411388:	4290      	cmp	r0, r2
  41138a:	d04f      	beq.n	41142c <_free_r+0x14c>
  41138c:	6851      	ldr	r1, [r2, #4]
  41138e:	f021 0103 	bic.w	r1, r1, #3
  411392:	428b      	cmp	r3, r1
  411394:	d232      	bcs.n	4113fc <_free_r+0x11c>
  411396:	6892      	ldr	r2, [r2, #8]
  411398:	4290      	cmp	r0, r2
  41139a:	d1f7      	bne.n	41138c <_free_r+0xac>
  41139c:	68c3      	ldr	r3, [r0, #12]
  41139e:	60a0      	str	r0, [r4, #8]
  4113a0:	60e3      	str	r3, [r4, #12]
  4113a2:	609c      	str	r4, [r3, #8]
  4113a4:	60c4      	str	r4, [r0, #12]
  4113a6:	4640      	mov	r0, r8
  4113a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4113ac:	f7ff bb26 	b.w	4109fc <__malloc_unlock>
  4113b0:	6895      	ldr	r5, [r2, #8]
  4113b2:	4f3b      	ldr	r7, [pc, #236]	; (4114a0 <_free_r+0x1c0>)
  4113b4:	42bd      	cmp	r5, r7
  4113b6:	4403      	add	r3, r0
  4113b8:	d040      	beq.n	41143c <_free_r+0x15c>
  4113ba:	68d0      	ldr	r0, [r2, #12]
  4113bc:	60e8      	str	r0, [r5, #12]
  4113be:	f043 0201 	orr.w	r2, r3, #1
  4113c2:	6085      	str	r5, [r0, #8]
  4113c4:	6062      	str	r2, [r4, #4]
  4113c6:	50e3      	str	r3, [r4, r3]
  4113c8:	e7b7      	b.n	41133a <_free_r+0x5a>
  4113ca:	07ff      	lsls	r7, r7, #31
  4113cc:	4403      	add	r3, r0
  4113ce:	d407      	bmi.n	4113e0 <_free_r+0x100>
  4113d0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4113d4:	1aa4      	subs	r4, r4, r2
  4113d6:	4413      	add	r3, r2
  4113d8:	68a0      	ldr	r0, [r4, #8]
  4113da:	68e2      	ldr	r2, [r4, #12]
  4113dc:	60c2      	str	r2, [r0, #12]
  4113de:	6090      	str	r0, [r2, #8]
  4113e0:	4a30      	ldr	r2, [pc, #192]	; (4114a4 <_free_r+0x1c4>)
  4113e2:	6812      	ldr	r2, [r2, #0]
  4113e4:	f043 0001 	orr.w	r0, r3, #1
  4113e8:	4293      	cmp	r3, r2
  4113ea:	6060      	str	r0, [r4, #4]
  4113ec:	608c      	str	r4, [r1, #8]
  4113ee:	d3b9      	bcc.n	411364 <_free_r+0x84>
  4113f0:	4b2d      	ldr	r3, [pc, #180]	; (4114a8 <_free_r+0x1c8>)
  4113f2:	4640      	mov	r0, r8
  4113f4:	6819      	ldr	r1, [r3, #0]
  4113f6:	f7ff ff23 	bl	411240 <_malloc_trim_r>
  4113fa:	e7b3      	b.n	411364 <_free_r+0x84>
  4113fc:	4610      	mov	r0, r2
  4113fe:	e7cd      	b.n	41139c <_free_r+0xbc>
  411400:	1811      	adds	r1, r2, r0
  411402:	6849      	ldr	r1, [r1, #4]
  411404:	07c9      	lsls	r1, r1, #31
  411406:	d444      	bmi.n	411492 <_free_r+0x1b2>
  411408:	6891      	ldr	r1, [r2, #8]
  41140a:	68d2      	ldr	r2, [r2, #12]
  41140c:	60ca      	str	r2, [r1, #12]
  41140e:	4403      	add	r3, r0
  411410:	f043 0001 	orr.w	r0, r3, #1
  411414:	6091      	str	r1, [r2, #8]
  411416:	6060      	str	r0, [r4, #4]
  411418:	50e3      	str	r3, [r4, r3]
  41141a:	e7a3      	b.n	411364 <_free_r+0x84>
  41141c:	2a14      	cmp	r2, #20
  41141e:	d816      	bhi.n	41144e <_free_r+0x16e>
  411420:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  411424:	00ff      	lsls	r7, r7, #3
  411426:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  41142a:	e7aa      	b.n	411382 <_free_r+0xa2>
  41142c:	10aa      	asrs	r2, r5, #2
  41142e:	2301      	movs	r3, #1
  411430:	684d      	ldr	r5, [r1, #4]
  411432:	4093      	lsls	r3, r2
  411434:	432b      	orrs	r3, r5
  411436:	604b      	str	r3, [r1, #4]
  411438:	4603      	mov	r3, r0
  41143a:	e7b0      	b.n	41139e <_free_r+0xbe>
  41143c:	f043 0201 	orr.w	r2, r3, #1
  411440:	614c      	str	r4, [r1, #20]
  411442:	610c      	str	r4, [r1, #16]
  411444:	60e5      	str	r5, [r4, #12]
  411446:	60a5      	str	r5, [r4, #8]
  411448:	6062      	str	r2, [r4, #4]
  41144a:	50e3      	str	r3, [r4, r3]
  41144c:	e78a      	b.n	411364 <_free_r+0x84>
  41144e:	2a54      	cmp	r2, #84	; 0x54
  411450:	d806      	bhi.n	411460 <_free_r+0x180>
  411452:	0b1a      	lsrs	r2, r3, #12
  411454:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  411458:	00ff      	lsls	r7, r7, #3
  41145a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  41145e:	e790      	b.n	411382 <_free_r+0xa2>
  411460:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  411464:	d806      	bhi.n	411474 <_free_r+0x194>
  411466:	0bda      	lsrs	r2, r3, #15
  411468:	f102 0778 	add.w	r7, r2, #120	; 0x78
  41146c:	00ff      	lsls	r7, r7, #3
  41146e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  411472:	e786      	b.n	411382 <_free_r+0xa2>
  411474:	f240 5054 	movw	r0, #1364	; 0x554
  411478:	4282      	cmp	r2, r0
  41147a:	d806      	bhi.n	41148a <_free_r+0x1aa>
  41147c:	0c9a      	lsrs	r2, r3, #18
  41147e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  411482:	00ff      	lsls	r7, r7, #3
  411484:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  411488:	e77b      	b.n	411382 <_free_r+0xa2>
  41148a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  41148e:	257e      	movs	r5, #126	; 0x7e
  411490:	e777      	b.n	411382 <_free_r+0xa2>
  411492:	f043 0101 	orr.w	r1, r3, #1
  411496:	6061      	str	r1, [r4, #4]
  411498:	6013      	str	r3, [r2, #0]
  41149a:	e763      	b.n	411364 <_free_r+0x84>
  41149c:	2000047c 	.word	0x2000047c
  4114a0:	20000484 	.word	0x20000484
  4114a4:	20000888 	.word	0x20000888
  4114a8:	20000efc 	.word	0x20000efc

004114ac <__ascii_mbtowc>:
  4114ac:	b082      	sub	sp, #8
  4114ae:	b149      	cbz	r1, 4114c4 <__ascii_mbtowc+0x18>
  4114b0:	b15a      	cbz	r2, 4114ca <__ascii_mbtowc+0x1e>
  4114b2:	b16b      	cbz	r3, 4114d0 <__ascii_mbtowc+0x24>
  4114b4:	7813      	ldrb	r3, [r2, #0]
  4114b6:	600b      	str	r3, [r1, #0]
  4114b8:	7812      	ldrb	r2, [r2, #0]
  4114ba:	1c10      	adds	r0, r2, #0
  4114bc:	bf18      	it	ne
  4114be:	2001      	movne	r0, #1
  4114c0:	b002      	add	sp, #8
  4114c2:	4770      	bx	lr
  4114c4:	a901      	add	r1, sp, #4
  4114c6:	2a00      	cmp	r2, #0
  4114c8:	d1f3      	bne.n	4114b2 <__ascii_mbtowc+0x6>
  4114ca:	4610      	mov	r0, r2
  4114cc:	b002      	add	sp, #8
  4114ce:	4770      	bx	lr
  4114d0:	f06f 0001 	mvn.w	r0, #1
  4114d4:	e7f4      	b.n	4114c0 <__ascii_mbtowc+0x14>
  4114d6:	bf00      	nop

004114d8 <memmove>:
  4114d8:	4288      	cmp	r0, r1
  4114da:	b5f0      	push	{r4, r5, r6, r7, lr}
  4114dc:	d90d      	bls.n	4114fa <memmove+0x22>
  4114de:	188b      	adds	r3, r1, r2
  4114e0:	4298      	cmp	r0, r3
  4114e2:	d20a      	bcs.n	4114fa <memmove+0x22>
  4114e4:	1884      	adds	r4, r0, r2
  4114e6:	2a00      	cmp	r2, #0
  4114e8:	d051      	beq.n	41158e <memmove+0xb6>
  4114ea:	4622      	mov	r2, r4
  4114ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4114f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4114f4:	4299      	cmp	r1, r3
  4114f6:	d1f9      	bne.n	4114ec <memmove+0x14>
  4114f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4114fa:	2a0f      	cmp	r2, #15
  4114fc:	d948      	bls.n	411590 <memmove+0xb8>
  4114fe:	ea41 0300 	orr.w	r3, r1, r0
  411502:	079b      	lsls	r3, r3, #30
  411504:	d146      	bne.n	411594 <memmove+0xbc>
  411506:	f100 0410 	add.w	r4, r0, #16
  41150a:	f101 0310 	add.w	r3, r1, #16
  41150e:	4615      	mov	r5, r2
  411510:	f853 6c10 	ldr.w	r6, [r3, #-16]
  411514:	f844 6c10 	str.w	r6, [r4, #-16]
  411518:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  41151c:	f844 6c0c 	str.w	r6, [r4, #-12]
  411520:	f853 6c08 	ldr.w	r6, [r3, #-8]
  411524:	f844 6c08 	str.w	r6, [r4, #-8]
  411528:	3d10      	subs	r5, #16
  41152a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  41152e:	f844 6c04 	str.w	r6, [r4, #-4]
  411532:	2d0f      	cmp	r5, #15
  411534:	f103 0310 	add.w	r3, r3, #16
  411538:	f104 0410 	add.w	r4, r4, #16
  41153c:	d8e8      	bhi.n	411510 <memmove+0x38>
  41153e:	f1a2 0310 	sub.w	r3, r2, #16
  411542:	f023 030f 	bic.w	r3, r3, #15
  411546:	f002 0e0f 	and.w	lr, r2, #15
  41154a:	3310      	adds	r3, #16
  41154c:	f1be 0f03 	cmp.w	lr, #3
  411550:	4419      	add	r1, r3
  411552:	4403      	add	r3, r0
  411554:	d921      	bls.n	41159a <memmove+0xc2>
  411556:	1f1e      	subs	r6, r3, #4
  411558:	460d      	mov	r5, r1
  41155a:	4674      	mov	r4, lr
  41155c:	3c04      	subs	r4, #4
  41155e:	f855 7b04 	ldr.w	r7, [r5], #4
  411562:	f846 7f04 	str.w	r7, [r6, #4]!
  411566:	2c03      	cmp	r4, #3
  411568:	d8f8      	bhi.n	41155c <memmove+0x84>
  41156a:	f1ae 0404 	sub.w	r4, lr, #4
  41156e:	f024 0403 	bic.w	r4, r4, #3
  411572:	3404      	adds	r4, #4
  411574:	4421      	add	r1, r4
  411576:	4423      	add	r3, r4
  411578:	f002 0203 	and.w	r2, r2, #3
  41157c:	b162      	cbz	r2, 411598 <memmove+0xc0>
  41157e:	3b01      	subs	r3, #1
  411580:	440a      	add	r2, r1
  411582:	f811 4b01 	ldrb.w	r4, [r1], #1
  411586:	f803 4f01 	strb.w	r4, [r3, #1]!
  41158a:	428a      	cmp	r2, r1
  41158c:	d1f9      	bne.n	411582 <memmove+0xaa>
  41158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411590:	4603      	mov	r3, r0
  411592:	e7f3      	b.n	41157c <memmove+0xa4>
  411594:	4603      	mov	r3, r0
  411596:	e7f2      	b.n	41157e <memmove+0xa6>
  411598:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41159a:	4672      	mov	r2, lr
  41159c:	e7ee      	b.n	41157c <memmove+0xa4>
  41159e:	bf00      	nop

004115a0 <_realloc_r>:
  4115a0:	2900      	cmp	r1, #0
  4115a2:	f000 8095 	beq.w	4116d0 <_realloc_r+0x130>
  4115a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4115aa:	460d      	mov	r5, r1
  4115ac:	4616      	mov	r6, r2
  4115ae:	b083      	sub	sp, #12
  4115b0:	4680      	mov	r8, r0
  4115b2:	f106 070b 	add.w	r7, r6, #11
  4115b6:	f7ff fa1b 	bl	4109f0 <__malloc_lock>
  4115ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4115be:	2f16      	cmp	r7, #22
  4115c0:	f02e 0403 	bic.w	r4, lr, #3
  4115c4:	f1a5 0908 	sub.w	r9, r5, #8
  4115c8:	d83c      	bhi.n	411644 <_realloc_r+0xa4>
  4115ca:	2210      	movs	r2, #16
  4115cc:	4617      	mov	r7, r2
  4115ce:	42be      	cmp	r6, r7
  4115d0:	d83d      	bhi.n	41164e <_realloc_r+0xae>
  4115d2:	4294      	cmp	r4, r2
  4115d4:	da43      	bge.n	41165e <_realloc_r+0xbe>
  4115d6:	4bc4      	ldr	r3, [pc, #784]	; (4118e8 <_realloc_r+0x348>)
  4115d8:	6899      	ldr	r1, [r3, #8]
  4115da:	eb09 0004 	add.w	r0, r9, r4
  4115de:	4288      	cmp	r0, r1
  4115e0:	f000 80b4 	beq.w	41174c <_realloc_r+0x1ac>
  4115e4:	6843      	ldr	r3, [r0, #4]
  4115e6:	f023 0101 	bic.w	r1, r3, #1
  4115ea:	4401      	add	r1, r0
  4115ec:	6849      	ldr	r1, [r1, #4]
  4115ee:	07c9      	lsls	r1, r1, #31
  4115f0:	d54c      	bpl.n	41168c <_realloc_r+0xec>
  4115f2:	f01e 0f01 	tst.w	lr, #1
  4115f6:	f000 809b 	beq.w	411730 <_realloc_r+0x190>
  4115fa:	4631      	mov	r1, r6
  4115fc:	4640      	mov	r0, r8
  4115fe:	f7fe fef5 	bl	4103ec <_malloc_r>
  411602:	4606      	mov	r6, r0
  411604:	2800      	cmp	r0, #0
  411606:	d03a      	beq.n	41167e <_realloc_r+0xde>
  411608:	f855 3c04 	ldr.w	r3, [r5, #-4]
  41160c:	f023 0301 	bic.w	r3, r3, #1
  411610:	444b      	add	r3, r9
  411612:	f1a0 0208 	sub.w	r2, r0, #8
  411616:	429a      	cmp	r2, r3
  411618:	f000 8121 	beq.w	41185e <_realloc_r+0x2be>
  41161c:	1f22      	subs	r2, r4, #4
  41161e:	2a24      	cmp	r2, #36	; 0x24
  411620:	f200 8107 	bhi.w	411832 <_realloc_r+0x292>
  411624:	2a13      	cmp	r2, #19
  411626:	f200 80db 	bhi.w	4117e0 <_realloc_r+0x240>
  41162a:	4603      	mov	r3, r0
  41162c:	462a      	mov	r2, r5
  41162e:	6811      	ldr	r1, [r2, #0]
  411630:	6019      	str	r1, [r3, #0]
  411632:	6851      	ldr	r1, [r2, #4]
  411634:	6059      	str	r1, [r3, #4]
  411636:	6892      	ldr	r2, [r2, #8]
  411638:	609a      	str	r2, [r3, #8]
  41163a:	4629      	mov	r1, r5
  41163c:	4640      	mov	r0, r8
  41163e:	f7ff fe4f 	bl	4112e0 <_free_r>
  411642:	e01c      	b.n	41167e <_realloc_r+0xde>
  411644:	f027 0707 	bic.w	r7, r7, #7
  411648:	2f00      	cmp	r7, #0
  41164a:	463a      	mov	r2, r7
  41164c:	dabf      	bge.n	4115ce <_realloc_r+0x2e>
  41164e:	2600      	movs	r6, #0
  411650:	230c      	movs	r3, #12
  411652:	4630      	mov	r0, r6
  411654:	f8c8 3000 	str.w	r3, [r8]
  411658:	b003      	add	sp, #12
  41165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41165e:	462e      	mov	r6, r5
  411660:	1be3      	subs	r3, r4, r7
  411662:	2b0f      	cmp	r3, #15
  411664:	d81e      	bhi.n	4116a4 <_realloc_r+0x104>
  411666:	f8d9 3004 	ldr.w	r3, [r9, #4]
  41166a:	f003 0301 	and.w	r3, r3, #1
  41166e:	4323      	orrs	r3, r4
  411670:	444c      	add	r4, r9
  411672:	f8c9 3004 	str.w	r3, [r9, #4]
  411676:	6863      	ldr	r3, [r4, #4]
  411678:	f043 0301 	orr.w	r3, r3, #1
  41167c:	6063      	str	r3, [r4, #4]
  41167e:	4640      	mov	r0, r8
  411680:	f7ff f9bc 	bl	4109fc <__malloc_unlock>
  411684:	4630      	mov	r0, r6
  411686:	b003      	add	sp, #12
  411688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41168c:	f023 0303 	bic.w	r3, r3, #3
  411690:	18e1      	adds	r1, r4, r3
  411692:	4291      	cmp	r1, r2
  411694:	db1f      	blt.n	4116d6 <_realloc_r+0x136>
  411696:	68c3      	ldr	r3, [r0, #12]
  411698:	6882      	ldr	r2, [r0, #8]
  41169a:	462e      	mov	r6, r5
  41169c:	60d3      	str	r3, [r2, #12]
  41169e:	460c      	mov	r4, r1
  4116a0:	609a      	str	r2, [r3, #8]
  4116a2:	e7dd      	b.n	411660 <_realloc_r+0xc0>
  4116a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4116a8:	eb09 0107 	add.w	r1, r9, r7
  4116ac:	f002 0201 	and.w	r2, r2, #1
  4116b0:	444c      	add	r4, r9
  4116b2:	f043 0301 	orr.w	r3, r3, #1
  4116b6:	4317      	orrs	r7, r2
  4116b8:	f8c9 7004 	str.w	r7, [r9, #4]
  4116bc:	604b      	str	r3, [r1, #4]
  4116be:	6863      	ldr	r3, [r4, #4]
  4116c0:	f043 0301 	orr.w	r3, r3, #1
  4116c4:	3108      	adds	r1, #8
  4116c6:	6063      	str	r3, [r4, #4]
  4116c8:	4640      	mov	r0, r8
  4116ca:	f7ff fe09 	bl	4112e0 <_free_r>
  4116ce:	e7d6      	b.n	41167e <_realloc_r+0xde>
  4116d0:	4611      	mov	r1, r2
  4116d2:	f7fe be8b 	b.w	4103ec <_malloc_r>
  4116d6:	f01e 0f01 	tst.w	lr, #1
  4116da:	d18e      	bne.n	4115fa <_realloc_r+0x5a>
  4116dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4116e0:	eba9 0a01 	sub.w	sl, r9, r1
  4116e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4116e8:	f021 0103 	bic.w	r1, r1, #3
  4116ec:	440b      	add	r3, r1
  4116ee:	4423      	add	r3, r4
  4116f0:	4293      	cmp	r3, r2
  4116f2:	db25      	blt.n	411740 <_realloc_r+0x1a0>
  4116f4:	68c2      	ldr	r2, [r0, #12]
  4116f6:	6881      	ldr	r1, [r0, #8]
  4116f8:	4656      	mov	r6, sl
  4116fa:	60ca      	str	r2, [r1, #12]
  4116fc:	6091      	str	r1, [r2, #8]
  4116fe:	f8da 100c 	ldr.w	r1, [sl, #12]
  411702:	f856 0f08 	ldr.w	r0, [r6, #8]!
  411706:	1f22      	subs	r2, r4, #4
  411708:	2a24      	cmp	r2, #36	; 0x24
  41170a:	60c1      	str	r1, [r0, #12]
  41170c:	6088      	str	r0, [r1, #8]
  41170e:	f200 8094 	bhi.w	41183a <_realloc_r+0x29a>
  411712:	2a13      	cmp	r2, #19
  411714:	d96f      	bls.n	4117f6 <_realloc_r+0x256>
  411716:	6829      	ldr	r1, [r5, #0]
  411718:	f8ca 1008 	str.w	r1, [sl, #8]
  41171c:	6869      	ldr	r1, [r5, #4]
  41171e:	f8ca 100c 	str.w	r1, [sl, #12]
  411722:	2a1b      	cmp	r2, #27
  411724:	f200 80a2 	bhi.w	41186c <_realloc_r+0x2cc>
  411728:	3508      	adds	r5, #8
  41172a:	f10a 0210 	add.w	r2, sl, #16
  41172e:	e063      	b.n	4117f8 <_realloc_r+0x258>
  411730:	f855 3c08 	ldr.w	r3, [r5, #-8]
  411734:	eba9 0a03 	sub.w	sl, r9, r3
  411738:	f8da 1004 	ldr.w	r1, [sl, #4]
  41173c:	f021 0103 	bic.w	r1, r1, #3
  411740:	1863      	adds	r3, r4, r1
  411742:	4293      	cmp	r3, r2
  411744:	f6ff af59 	blt.w	4115fa <_realloc_r+0x5a>
  411748:	4656      	mov	r6, sl
  41174a:	e7d8      	b.n	4116fe <_realloc_r+0x15e>
  41174c:	6841      	ldr	r1, [r0, #4]
  41174e:	f021 0b03 	bic.w	fp, r1, #3
  411752:	44a3      	add	fp, r4
  411754:	f107 0010 	add.w	r0, r7, #16
  411758:	4583      	cmp	fp, r0
  41175a:	da56      	bge.n	41180a <_realloc_r+0x26a>
  41175c:	f01e 0f01 	tst.w	lr, #1
  411760:	f47f af4b 	bne.w	4115fa <_realloc_r+0x5a>
  411764:	f855 1c08 	ldr.w	r1, [r5, #-8]
  411768:	eba9 0a01 	sub.w	sl, r9, r1
  41176c:	f8da 1004 	ldr.w	r1, [sl, #4]
  411770:	f021 0103 	bic.w	r1, r1, #3
  411774:	448b      	add	fp, r1
  411776:	4558      	cmp	r0, fp
  411778:	dce2      	bgt.n	411740 <_realloc_r+0x1a0>
  41177a:	4656      	mov	r6, sl
  41177c:	f8da 100c 	ldr.w	r1, [sl, #12]
  411780:	f856 0f08 	ldr.w	r0, [r6, #8]!
  411784:	1f22      	subs	r2, r4, #4
  411786:	2a24      	cmp	r2, #36	; 0x24
  411788:	60c1      	str	r1, [r0, #12]
  41178a:	6088      	str	r0, [r1, #8]
  41178c:	f200 808f 	bhi.w	4118ae <_realloc_r+0x30e>
  411790:	2a13      	cmp	r2, #19
  411792:	f240 808a 	bls.w	4118aa <_realloc_r+0x30a>
  411796:	6829      	ldr	r1, [r5, #0]
  411798:	f8ca 1008 	str.w	r1, [sl, #8]
  41179c:	6869      	ldr	r1, [r5, #4]
  41179e:	f8ca 100c 	str.w	r1, [sl, #12]
  4117a2:	2a1b      	cmp	r2, #27
  4117a4:	f200 808a 	bhi.w	4118bc <_realloc_r+0x31c>
  4117a8:	3508      	adds	r5, #8
  4117aa:	f10a 0210 	add.w	r2, sl, #16
  4117ae:	6829      	ldr	r1, [r5, #0]
  4117b0:	6011      	str	r1, [r2, #0]
  4117b2:	6869      	ldr	r1, [r5, #4]
  4117b4:	6051      	str	r1, [r2, #4]
  4117b6:	68a9      	ldr	r1, [r5, #8]
  4117b8:	6091      	str	r1, [r2, #8]
  4117ba:	eb0a 0107 	add.w	r1, sl, r7
  4117be:	ebab 0207 	sub.w	r2, fp, r7
  4117c2:	f042 0201 	orr.w	r2, r2, #1
  4117c6:	6099      	str	r1, [r3, #8]
  4117c8:	604a      	str	r2, [r1, #4]
  4117ca:	f8da 3004 	ldr.w	r3, [sl, #4]
  4117ce:	f003 0301 	and.w	r3, r3, #1
  4117d2:	431f      	orrs	r7, r3
  4117d4:	4640      	mov	r0, r8
  4117d6:	f8ca 7004 	str.w	r7, [sl, #4]
  4117da:	f7ff f90f 	bl	4109fc <__malloc_unlock>
  4117de:	e751      	b.n	411684 <_realloc_r+0xe4>
  4117e0:	682b      	ldr	r3, [r5, #0]
  4117e2:	6003      	str	r3, [r0, #0]
  4117e4:	686b      	ldr	r3, [r5, #4]
  4117e6:	6043      	str	r3, [r0, #4]
  4117e8:	2a1b      	cmp	r2, #27
  4117ea:	d82d      	bhi.n	411848 <_realloc_r+0x2a8>
  4117ec:	f100 0308 	add.w	r3, r0, #8
  4117f0:	f105 0208 	add.w	r2, r5, #8
  4117f4:	e71b      	b.n	41162e <_realloc_r+0x8e>
  4117f6:	4632      	mov	r2, r6
  4117f8:	6829      	ldr	r1, [r5, #0]
  4117fa:	6011      	str	r1, [r2, #0]
  4117fc:	6869      	ldr	r1, [r5, #4]
  4117fe:	6051      	str	r1, [r2, #4]
  411800:	68a9      	ldr	r1, [r5, #8]
  411802:	6091      	str	r1, [r2, #8]
  411804:	461c      	mov	r4, r3
  411806:	46d1      	mov	r9, sl
  411808:	e72a      	b.n	411660 <_realloc_r+0xc0>
  41180a:	eb09 0107 	add.w	r1, r9, r7
  41180e:	ebab 0b07 	sub.w	fp, fp, r7
  411812:	f04b 0201 	orr.w	r2, fp, #1
  411816:	6099      	str	r1, [r3, #8]
  411818:	604a      	str	r2, [r1, #4]
  41181a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  41181e:	f003 0301 	and.w	r3, r3, #1
  411822:	431f      	orrs	r7, r3
  411824:	4640      	mov	r0, r8
  411826:	f845 7c04 	str.w	r7, [r5, #-4]
  41182a:	f7ff f8e7 	bl	4109fc <__malloc_unlock>
  41182e:	462e      	mov	r6, r5
  411830:	e728      	b.n	411684 <_realloc_r+0xe4>
  411832:	4629      	mov	r1, r5
  411834:	f7ff fe50 	bl	4114d8 <memmove>
  411838:	e6ff      	b.n	41163a <_realloc_r+0x9a>
  41183a:	4629      	mov	r1, r5
  41183c:	4630      	mov	r0, r6
  41183e:	461c      	mov	r4, r3
  411840:	46d1      	mov	r9, sl
  411842:	f7ff fe49 	bl	4114d8 <memmove>
  411846:	e70b      	b.n	411660 <_realloc_r+0xc0>
  411848:	68ab      	ldr	r3, [r5, #8]
  41184a:	6083      	str	r3, [r0, #8]
  41184c:	68eb      	ldr	r3, [r5, #12]
  41184e:	60c3      	str	r3, [r0, #12]
  411850:	2a24      	cmp	r2, #36	; 0x24
  411852:	d017      	beq.n	411884 <_realloc_r+0x2e4>
  411854:	f100 0310 	add.w	r3, r0, #16
  411858:	f105 0210 	add.w	r2, r5, #16
  41185c:	e6e7      	b.n	41162e <_realloc_r+0x8e>
  41185e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  411862:	f023 0303 	bic.w	r3, r3, #3
  411866:	441c      	add	r4, r3
  411868:	462e      	mov	r6, r5
  41186a:	e6f9      	b.n	411660 <_realloc_r+0xc0>
  41186c:	68a9      	ldr	r1, [r5, #8]
  41186e:	f8ca 1010 	str.w	r1, [sl, #16]
  411872:	68e9      	ldr	r1, [r5, #12]
  411874:	f8ca 1014 	str.w	r1, [sl, #20]
  411878:	2a24      	cmp	r2, #36	; 0x24
  41187a:	d00c      	beq.n	411896 <_realloc_r+0x2f6>
  41187c:	3510      	adds	r5, #16
  41187e:	f10a 0218 	add.w	r2, sl, #24
  411882:	e7b9      	b.n	4117f8 <_realloc_r+0x258>
  411884:	692b      	ldr	r3, [r5, #16]
  411886:	6103      	str	r3, [r0, #16]
  411888:	696b      	ldr	r3, [r5, #20]
  41188a:	6143      	str	r3, [r0, #20]
  41188c:	f105 0218 	add.w	r2, r5, #24
  411890:	f100 0318 	add.w	r3, r0, #24
  411894:	e6cb      	b.n	41162e <_realloc_r+0x8e>
  411896:	692a      	ldr	r2, [r5, #16]
  411898:	f8ca 2018 	str.w	r2, [sl, #24]
  41189c:	696a      	ldr	r2, [r5, #20]
  41189e:	f8ca 201c 	str.w	r2, [sl, #28]
  4118a2:	3518      	adds	r5, #24
  4118a4:	f10a 0220 	add.w	r2, sl, #32
  4118a8:	e7a6      	b.n	4117f8 <_realloc_r+0x258>
  4118aa:	4632      	mov	r2, r6
  4118ac:	e77f      	b.n	4117ae <_realloc_r+0x20e>
  4118ae:	4629      	mov	r1, r5
  4118b0:	4630      	mov	r0, r6
  4118b2:	9301      	str	r3, [sp, #4]
  4118b4:	f7ff fe10 	bl	4114d8 <memmove>
  4118b8:	9b01      	ldr	r3, [sp, #4]
  4118ba:	e77e      	b.n	4117ba <_realloc_r+0x21a>
  4118bc:	68a9      	ldr	r1, [r5, #8]
  4118be:	f8ca 1010 	str.w	r1, [sl, #16]
  4118c2:	68e9      	ldr	r1, [r5, #12]
  4118c4:	f8ca 1014 	str.w	r1, [sl, #20]
  4118c8:	2a24      	cmp	r2, #36	; 0x24
  4118ca:	d003      	beq.n	4118d4 <_realloc_r+0x334>
  4118cc:	3510      	adds	r5, #16
  4118ce:	f10a 0218 	add.w	r2, sl, #24
  4118d2:	e76c      	b.n	4117ae <_realloc_r+0x20e>
  4118d4:	692a      	ldr	r2, [r5, #16]
  4118d6:	f8ca 2018 	str.w	r2, [sl, #24]
  4118da:	696a      	ldr	r2, [r5, #20]
  4118dc:	f8ca 201c 	str.w	r2, [sl, #28]
  4118e0:	3518      	adds	r5, #24
  4118e2:	f10a 0220 	add.w	r2, sl, #32
  4118e6:	e762      	b.n	4117ae <_realloc_r+0x20e>
  4118e8:	2000047c 	.word	0x2000047c

004118ec <__ascii_wctomb>:
  4118ec:	b121      	cbz	r1, 4118f8 <__ascii_wctomb+0xc>
  4118ee:	2aff      	cmp	r2, #255	; 0xff
  4118f0:	d804      	bhi.n	4118fc <__ascii_wctomb+0x10>
  4118f2:	700a      	strb	r2, [r1, #0]
  4118f4:	2001      	movs	r0, #1
  4118f6:	4770      	bx	lr
  4118f8:	4608      	mov	r0, r1
  4118fa:	4770      	bx	lr
  4118fc:	238a      	movs	r3, #138	; 0x8a
  4118fe:	6003      	str	r3, [r0, #0]
  411900:	f04f 30ff 	mov.w	r0, #4294967295
  411904:	4770      	bx	lr
  411906:	bf00      	nop

00411908 <__aeabi_uldivmod>:
  411908:	b953      	cbnz	r3, 411920 <__aeabi_uldivmod+0x18>
  41190a:	b94a      	cbnz	r2, 411920 <__aeabi_uldivmod+0x18>
  41190c:	2900      	cmp	r1, #0
  41190e:	bf08      	it	eq
  411910:	2800      	cmpeq	r0, #0
  411912:	bf1c      	itt	ne
  411914:	f04f 31ff 	movne.w	r1, #4294967295
  411918:	f04f 30ff 	movne.w	r0, #4294967295
  41191c:	f000 b97a 	b.w	411c14 <__aeabi_idiv0>
  411920:	f1ad 0c08 	sub.w	ip, sp, #8
  411924:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  411928:	f000 f806 	bl	411938 <__udivmoddi4>
  41192c:	f8dd e004 	ldr.w	lr, [sp, #4]
  411930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  411934:	b004      	add	sp, #16
  411936:	4770      	bx	lr

00411938 <__udivmoddi4>:
  411938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41193c:	468c      	mov	ip, r1
  41193e:	460d      	mov	r5, r1
  411940:	4604      	mov	r4, r0
  411942:	9e08      	ldr	r6, [sp, #32]
  411944:	2b00      	cmp	r3, #0
  411946:	d151      	bne.n	4119ec <__udivmoddi4+0xb4>
  411948:	428a      	cmp	r2, r1
  41194a:	4617      	mov	r7, r2
  41194c:	d96d      	bls.n	411a2a <__udivmoddi4+0xf2>
  41194e:	fab2 fe82 	clz	lr, r2
  411952:	f1be 0f00 	cmp.w	lr, #0
  411956:	d00b      	beq.n	411970 <__udivmoddi4+0x38>
  411958:	f1ce 0c20 	rsb	ip, lr, #32
  41195c:	fa01 f50e 	lsl.w	r5, r1, lr
  411960:	fa20 fc0c 	lsr.w	ip, r0, ip
  411964:	fa02 f70e 	lsl.w	r7, r2, lr
  411968:	ea4c 0c05 	orr.w	ip, ip, r5
  41196c:	fa00 f40e 	lsl.w	r4, r0, lr
  411970:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  411974:	0c25      	lsrs	r5, r4, #16
  411976:	fbbc f8fa 	udiv	r8, ip, sl
  41197a:	fa1f f987 	uxth.w	r9, r7
  41197e:	fb0a cc18 	mls	ip, sl, r8, ip
  411982:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  411986:	fb08 f309 	mul.w	r3, r8, r9
  41198a:	42ab      	cmp	r3, r5
  41198c:	d90a      	bls.n	4119a4 <__udivmoddi4+0x6c>
  41198e:	19ed      	adds	r5, r5, r7
  411990:	f108 32ff 	add.w	r2, r8, #4294967295
  411994:	f080 8123 	bcs.w	411bde <__udivmoddi4+0x2a6>
  411998:	42ab      	cmp	r3, r5
  41199a:	f240 8120 	bls.w	411bde <__udivmoddi4+0x2a6>
  41199e:	f1a8 0802 	sub.w	r8, r8, #2
  4119a2:	443d      	add	r5, r7
  4119a4:	1aed      	subs	r5, r5, r3
  4119a6:	b2a4      	uxth	r4, r4
  4119a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4119ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4119b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4119b4:	fb00 f909 	mul.w	r9, r0, r9
  4119b8:	45a1      	cmp	r9, r4
  4119ba:	d909      	bls.n	4119d0 <__udivmoddi4+0x98>
  4119bc:	19e4      	adds	r4, r4, r7
  4119be:	f100 33ff 	add.w	r3, r0, #4294967295
  4119c2:	f080 810a 	bcs.w	411bda <__udivmoddi4+0x2a2>
  4119c6:	45a1      	cmp	r9, r4
  4119c8:	f240 8107 	bls.w	411bda <__udivmoddi4+0x2a2>
  4119cc:	3802      	subs	r0, #2
  4119ce:	443c      	add	r4, r7
  4119d0:	eba4 0409 	sub.w	r4, r4, r9
  4119d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4119d8:	2100      	movs	r1, #0
  4119da:	2e00      	cmp	r6, #0
  4119dc:	d061      	beq.n	411aa2 <__udivmoddi4+0x16a>
  4119de:	fa24 f40e 	lsr.w	r4, r4, lr
  4119e2:	2300      	movs	r3, #0
  4119e4:	6034      	str	r4, [r6, #0]
  4119e6:	6073      	str	r3, [r6, #4]
  4119e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4119ec:	428b      	cmp	r3, r1
  4119ee:	d907      	bls.n	411a00 <__udivmoddi4+0xc8>
  4119f0:	2e00      	cmp	r6, #0
  4119f2:	d054      	beq.n	411a9e <__udivmoddi4+0x166>
  4119f4:	2100      	movs	r1, #0
  4119f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4119fa:	4608      	mov	r0, r1
  4119fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411a00:	fab3 f183 	clz	r1, r3
  411a04:	2900      	cmp	r1, #0
  411a06:	f040 808e 	bne.w	411b26 <__udivmoddi4+0x1ee>
  411a0a:	42ab      	cmp	r3, r5
  411a0c:	d302      	bcc.n	411a14 <__udivmoddi4+0xdc>
  411a0e:	4282      	cmp	r2, r0
  411a10:	f200 80fa 	bhi.w	411c08 <__udivmoddi4+0x2d0>
  411a14:	1a84      	subs	r4, r0, r2
  411a16:	eb65 0503 	sbc.w	r5, r5, r3
  411a1a:	2001      	movs	r0, #1
  411a1c:	46ac      	mov	ip, r5
  411a1e:	2e00      	cmp	r6, #0
  411a20:	d03f      	beq.n	411aa2 <__udivmoddi4+0x16a>
  411a22:	e886 1010 	stmia.w	r6, {r4, ip}
  411a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411a2a:	b912      	cbnz	r2, 411a32 <__udivmoddi4+0xfa>
  411a2c:	2701      	movs	r7, #1
  411a2e:	fbb7 f7f2 	udiv	r7, r7, r2
  411a32:	fab7 fe87 	clz	lr, r7
  411a36:	f1be 0f00 	cmp.w	lr, #0
  411a3a:	d134      	bne.n	411aa6 <__udivmoddi4+0x16e>
  411a3c:	1beb      	subs	r3, r5, r7
  411a3e:	0c3a      	lsrs	r2, r7, #16
  411a40:	fa1f fc87 	uxth.w	ip, r7
  411a44:	2101      	movs	r1, #1
  411a46:	fbb3 f8f2 	udiv	r8, r3, r2
  411a4a:	0c25      	lsrs	r5, r4, #16
  411a4c:	fb02 3318 	mls	r3, r2, r8, r3
  411a50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  411a54:	fb0c f308 	mul.w	r3, ip, r8
  411a58:	42ab      	cmp	r3, r5
  411a5a:	d907      	bls.n	411a6c <__udivmoddi4+0x134>
  411a5c:	19ed      	adds	r5, r5, r7
  411a5e:	f108 30ff 	add.w	r0, r8, #4294967295
  411a62:	d202      	bcs.n	411a6a <__udivmoddi4+0x132>
  411a64:	42ab      	cmp	r3, r5
  411a66:	f200 80d1 	bhi.w	411c0c <__udivmoddi4+0x2d4>
  411a6a:	4680      	mov	r8, r0
  411a6c:	1aed      	subs	r5, r5, r3
  411a6e:	b2a3      	uxth	r3, r4
  411a70:	fbb5 f0f2 	udiv	r0, r5, r2
  411a74:	fb02 5510 	mls	r5, r2, r0, r5
  411a78:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  411a7c:	fb0c fc00 	mul.w	ip, ip, r0
  411a80:	45a4      	cmp	ip, r4
  411a82:	d907      	bls.n	411a94 <__udivmoddi4+0x15c>
  411a84:	19e4      	adds	r4, r4, r7
  411a86:	f100 33ff 	add.w	r3, r0, #4294967295
  411a8a:	d202      	bcs.n	411a92 <__udivmoddi4+0x15a>
  411a8c:	45a4      	cmp	ip, r4
  411a8e:	f200 80b8 	bhi.w	411c02 <__udivmoddi4+0x2ca>
  411a92:	4618      	mov	r0, r3
  411a94:	eba4 040c 	sub.w	r4, r4, ip
  411a98:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  411a9c:	e79d      	b.n	4119da <__udivmoddi4+0xa2>
  411a9e:	4631      	mov	r1, r6
  411aa0:	4630      	mov	r0, r6
  411aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411aa6:	f1ce 0420 	rsb	r4, lr, #32
  411aaa:	fa05 f30e 	lsl.w	r3, r5, lr
  411aae:	fa07 f70e 	lsl.w	r7, r7, lr
  411ab2:	fa20 f804 	lsr.w	r8, r0, r4
  411ab6:	0c3a      	lsrs	r2, r7, #16
  411ab8:	fa25 f404 	lsr.w	r4, r5, r4
  411abc:	ea48 0803 	orr.w	r8, r8, r3
  411ac0:	fbb4 f1f2 	udiv	r1, r4, r2
  411ac4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  411ac8:	fb02 4411 	mls	r4, r2, r1, r4
  411acc:	fa1f fc87 	uxth.w	ip, r7
  411ad0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  411ad4:	fb01 f30c 	mul.w	r3, r1, ip
  411ad8:	42ab      	cmp	r3, r5
  411ada:	fa00 f40e 	lsl.w	r4, r0, lr
  411ade:	d909      	bls.n	411af4 <__udivmoddi4+0x1bc>
  411ae0:	19ed      	adds	r5, r5, r7
  411ae2:	f101 30ff 	add.w	r0, r1, #4294967295
  411ae6:	f080 808a 	bcs.w	411bfe <__udivmoddi4+0x2c6>
  411aea:	42ab      	cmp	r3, r5
  411aec:	f240 8087 	bls.w	411bfe <__udivmoddi4+0x2c6>
  411af0:	3902      	subs	r1, #2
  411af2:	443d      	add	r5, r7
  411af4:	1aeb      	subs	r3, r5, r3
  411af6:	fa1f f588 	uxth.w	r5, r8
  411afa:	fbb3 f0f2 	udiv	r0, r3, r2
  411afe:	fb02 3310 	mls	r3, r2, r0, r3
  411b02:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  411b06:	fb00 f30c 	mul.w	r3, r0, ip
  411b0a:	42ab      	cmp	r3, r5
  411b0c:	d907      	bls.n	411b1e <__udivmoddi4+0x1e6>
  411b0e:	19ed      	adds	r5, r5, r7
  411b10:	f100 38ff 	add.w	r8, r0, #4294967295
  411b14:	d26f      	bcs.n	411bf6 <__udivmoddi4+0x2be>
  411b16:	42ab      	cmp	r3, r5
  411b18:	d96d      	bls.n	411bf6 <__udivmoddi4+0x2be>
  411b1a:	3802      	subs	r0, #2
  411b1c:	443d      	add	r5, r7
  411b1e:	1aeb      	subs	r3, r5, r3
  411b20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  411b24:	e78f      	b.n	411a46 <__udivmoddi4+0x10e>
  411b26:	f1c1 0720 	rsb	r7, r1, #32
  411b2a:	fa22 f807 	lsr.w	r8, r2, r7
  411b2e:	408b      	lsls	r3, r1
  411b30:	fa05 f401 	lsl.w	r4, r5, r1
  411b34:	ea48 0303 	orr.w	r3, r8, r3
  411b38:	fa20 fe07 	lsr.w	lr, r0, r7
  411b3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  411b40:	40fd      	lsrs	r5, r7
  411b42:	ea4e 0e04 	orr.w	lr, lr, r4
  411b46:	fbb5 f9fc 	udiv	r9, r5, ip
  411b4a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  411b4e:	fb0c 5519 	mls	r5, ip, r9, r5
  411b52:	fa1f f883 	uxth.w	r8, r3
  411b56:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  411b5a:	fb09 f408 	mul.w	r4, r9, r8
  411b5e:	42ac      	cmp	r4, r5
  411b60:	fa02 f201 	lsl.w	r2, r2, r1
  411b64:	fa00 fa01 	lsl.w	sl, r0, r1
  411b68:	d908      	bls.n	411b7c <__udivmoddi4+0x244>
  411b6a:	18ed      	adds	r5, r5, r3
  411b6c:	f109 30ff 	add.w	r0, r9, #4294967295
  411b70:	d243      	bcs.n	411bfa <__udivmoddi4+0x2c2>
  411b72:	42ac      	cmp	r4, r5
  411b74:	d941      	bls.n	411bfa <__udivmoddi4+0x2c2>
  411b76:	f1a9 0902 	sub.w	r9, r9, #2
  411b7a:	441d      	add	r5, r3
  411b7c:	1b2d      	subs	r5, r5, r4
  411b7e:	fa1f fe8e 	uxth.w	lr, lr
  411b82:	fbb5 f0fc 	udiv	r0, r5, ip
  411b86:	fb0c 5510 	mls	r5, ip, r0, r5
  411b8a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  411b8e:	fb00 f808 	mul.w	r8, r0, r8
  411b92:	45a0      	cmp	r8, r4
  411b94:	d907      	bls.n	411ba6 <__udivmoddi4+0x26e>
  411b96:	18e4      	adds	r4, r4, r3
  411b98:	f100 35ff 	add.w	r5, r0, #4294967295
  411b9c:	d229      	bcs.n	411bf2 <__udivmoddi4+0x2ba>
  411b9e:	45a0      	cmp	r8, r4
  411ba0:	d927      	bls.n	411bf2 <__udivmoddi4+0x2ba>
  411ba2:	3802      	subs	r0, #2
  411ba4:	441c      	add	r4, r3
  411ba6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  411baa:	eba4 0408 	sub.w	r4, r4, r8
  411bae:	fba0 8902 	umull	r8, r9, r0, r2
  411bb2:	454c      	cmp	r4, r9
  411bb4:	46c6      	mov	lr, r8
  411bb6:	464d      	mov	r5, r9
  411bb8:	d315      	bcc.n	411be6 <__udivmoddi4+0x2ae>
  411bba:	d012      	beq.n	411be2 <__udivmoddi4+0x2aa>
  411bbc:	b156      	cbz	r6, 411bd4 <__udivmoddi4+0x29c>
  411bbe:	ebba 030e 	subs.w	r3, sl, lr
  411bc2:	eb64 0405 	sbc.w	r4, r4, r5
  411bc6:	fa04 f707 	lsl.w	r7, r4, r7
  411bca:	40cb      	lsrs	r3, r1
  411bcc:	431f      	orrs	r7, r3
  411bce:	40cc      	lsrs	r4, r1
  411bd0:	6037      	str	r7, [r6, #0]
  411bd2:	6074      	str	r4, [r6, #4]
  411bd4:	2100      	movs	r1, #0
  411bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411bda:	4618      	mov	r0, r3
  411bdc:	e6f8      	b.n	4119d0 <__udivmoddi4+0x98>
  411bde:	4690      	mov	r8, r2
  411be0:	e6e0      	b.n	4119a4 <__udivmoddi4+0x6c>
  411be2:	45c2      	cmp	sl, r8
  411be4:	d2ea      	bcs.n	411bbc <__udivmoddi4+0x284>
  411be6:	ebb8 0e02 	subs.w	lr, r8, r2
  411bea:	eb69 0503 	sbc.w	r5, r9, r3
  411bee:	3801      	subs	r0, #1
  411bf0:	e7e4      	b.n	411bbc <__udivmoddi4+0x284>
  411bf2:	4628      	mov	r0, r5
  411bf4:	e7d7      	b.n	411ba6 <__udivmoddi4+0x26e>
  411bf6:	4640      	mov	r0, r8
  411bf8:	e791      	b.n	411b1e <__udivmoddi4+0x1e6>
  411bfa:	4681      	mov	r9, r0
  411bfc:	e7be      	b.n	411b7c <__udivmoddi4+0x244>
  411bfe:	4601      	mov	r1, r0
  411c00:	e778      	b.n	411af4 <__udivmoddi4+0x1bc>
  411c02:	3802      	subs	r0, #2
  411c04:	443c      	add	r4, r7
  411c06:	e745      	b.n	411a94 <__udivmoddi4+0x15c>
  411c08:	4608      	mov	r0, r1
  411c0a:	e708      	b.n	411a1e <__udivmoddi4+0xe6>
  411c0c:	f1a8 0802 	sub.w	r8, r8, #2
  411c10:	443d      	add	r5, r7
  411c12:	e72b      	b.n	411a6c <__udivmoddi4+0x134>

00411c14 <__aeabi_idiv0>:
  411c14:	4770      	bx	lr
  411c16:	bf00      	nop

00411c18 <adc_interrupt_mask>:
  411c18:	0001 0000 0002 0000 0004 0000 0008 0000     ................
  411c28:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
  411c38:	0100 0000 0200 0000 0400 0000 0800 0000     ................
  411c48:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
  411c58:	0000 0001 0000 0008 0000 0080 0000 0100     ................
  411c68:	0000 0200 0000 0400 0000 0800 0000 1000     ................

00411c78 <gKVolts>:
  411c78:	12c0 4842 65e8 bec4 b082 877e 1b39 3f61     ..BH.e....~.9.a?
  411c88:	af07 a1c8 e10e bff8 38d3 23ed 8518 4089     .........8.#...@
  411c98:	b496 8a9e f22f bec4 7624 c9a4 7a32 3f61     ..../...$v..2za?
  411ca8:	c99d 20f6 2391 bff9 2987 dcfd 6cef 4089     ... .#...)...l.@
  411cb8:	3934 3b15 80cb bec5 04f0 5ab0 d96b 3f61     49.;.......Zk.a?
  411cc8:	c00a d4c5 660d bff9 b442 7739 5493 4089     .....f..B.9w.T.@
  411cd8:	6063 572b 1182 bec6 487d 7717 38a7 3f62     c`+W....}H.w.8b?
  411ce8:	e53d 243b a86b bff9 1203 31dc 3bff 4089     =.;$k......1.;.@
  411cf8:	7fe4 b61a a40f bec6 0465 f31a 97a2 3f62     ........e.....b?
  411d08:	e82a a18c ea8c bff9 e1d9 09ec 232f 4089     *.........../#.@
  411d18:	9a8c 2a4d 3820 bec7 df70 3f33 f610 3f62     ..M* 8..p.3?..b?
  411d28:	10df c56c 2c52 bffa 8626 b5d9 0a1e 4089     ..l.R,..&......@
  411d38:	39b8 bf05 cd50 bec7 311e 506c 5397 3f63     .9..P....1lP.Sc?
  411d48:	a167 a449 6d9a bffa f308 a0cb f0c9 4088     g.I..m.........@
  411d58:	d726 3f05 632c bec8 24af 6937 afd4 3f63     &..?,c...$7i..c?
  411d68:	f765 9d05 ae3d bffa 0a13 e5c5 d72a 4088     e...=.......*..@
  411d78:	a32d 910d f928 bec8 0707 bfcd 0a56 3f64     -...(.......V.d?
  411d88:	5207 00a1 ee11 bffa 9077 4a7a bd3d 4088     .R......w.zJ=..@
  411d98:	2c2d 225d 8ea4 bec9 8c5a fe17 629e 3f64     -,]"....Z....bd?
  411da8:	1a95 b26d 2ce5 bffb ff1d 39fa a2fb 4088     ..m..,.....9...@
  411db8:	6de4 37c6 22e2 beca 3029 9735 b81d 3f64     .m.7."..)05...d?
  411dc8:	12d1 c043 6a87 bffb e758 bf1a 885e 4088     ..C..j..X...^..@
  411dd8:	cecf 0b9c 93f7 becb f03d f1d7 64b2 3f65     ........=....de?
  411de8:	5c24 14ff 8d7b bffb fa42 4fd2 43a0 4088     $\..{...B..O.C.@
  411df8:	b142 9674 1c65 becd 60c7 7a20 15ef 3f66     B.t.e....` z..f?
  411e08:	ffa6 19c2 ae6a bffb 4020 e936 fe3b 4087     ....j... @6.;..@
  411e18:	4cca 9b8f be87 bece f88f 8631 cc57 3f66     .L........1.W.f?
  411e28:	0e7e adbc cd55 bffb 720f 7eae b831 4087     ~...U....r.~1..@
  411e38:	511f f427 3e88 bed0 1112 e976 888a 3f67     .Q'..>....v...g?
  411e48:	a998 0c88 ea44 bffb c28a 70b2 7181 4087     ....D......p.q.@
  411e58:	230a 7034 2d92 bed1 156a 6f4c 4b4a 3f68     .#4p.-..j.LoJKh?
  411e68:	a796 d2b4 0541 bffc c716 97d3 2a2c 4087     ....A.......,*.@
  411e78:	5010 78aa 2e30 bed2 4836 699b 157e 3f69     .P.x0...6H.i~.i?
  411e88:	1db7 2bed 1e63 bffc 3e6c 5090 e234 4086     ...+c...l>.P4..@
  411e98:	64a4 a7bf 427f bed3 4798 8aec e83e 3f69     .d...B...G..>.i?
  411ea8:	6c19 319c 35c5 bffc c0ff 87f9 999a 4086     .l.1.5.........@
  411eb8:	6e56 fd44 6cf7 bed4 b9c1 4f70 c4db 3f6a     VnD..l....pO..j?
  411ec8:	82ac 81ab 4b8f bffc 3615 c92d 5061 4086     .....K...6-.aP.@
  411ed8:	b9aa 0a05 b07f bed5 ccb4 4659 ace9 3f6b     ..........YF..k?
  411ee8:	e47b 1649 5ff6 bffc a80f 4b9d 068d 4086     {.I.._.....K...@
  411ef8:	fac8 41bb 107e bed7 b244 9da2 a24e 3f6c     ...A~...D...N.l?
  411f08:	0e9f 68d6 733b bffc a168 0227 bc21 4085     ...h;s..h.'.!..@
  411f18:	b4f7 bbe9 1a88 bed9 b80b 2358 a3dc 3f6f     ..........X#..o?
  411f28:	f25b fb3a 0489 bffe 73b7 df29 a84d 4085     [.:......s).M..@
  411f38:	6afa d541 2256 bedb b4f5 e442 4dc3 3f71     .jA.V"....B..Mq?
  411f48:	8dbd e8ab 8e81 bfff e06d e036 9223 4085     ........m.6.#..@
  411f58:	a39d 130c 1f16 bedd 4562 2ad1 c00d 3f72     ........bE.*..r?
  411f68:	29e7 e8ff 874b c000 28f5 f27d 796c 4085     .)..K....(}.ly.@
  411f78:	8d24 a1a4 0620 bedf 6e92 c8f9 2394 3f74     $... ....n...#t?
  411f88:	c144 615c 4111 c001 8b39 f44c 5df3 4085     D.\a.A..9.L..].@
  411f98:	8fdc f388 6575 bee0 bc70 4202 72a0 3f75     ....ue..p..B.ru?
  411fa8:	76f2 df23 f339 c001 ffbe a86d 3f86 4085     .v#.9.....m..?.@
  411fb8:	497d dd0a 2f89 bee1 d266 df39 a715 3f76     }I.../..f.9...v?
  411fc8:	2583 4ac0 9c7b c002 4ddb 18f2 1df8 4085     .%.J{....M.....@
  411fd8:	c7db 89ed d947 bee1 045d 7121 bab9 3f77     ....G...].!q..w?
  411fe8:	34e3 70aa 3bae c003 2df4 5a33 f923 4084     .4.p.;...-3Z#..@
  411ff8:	dc78 f2d2 5a0d bee2 0755 8fdc a783 3f78     x....Z..U.....x?
  412008:	db7e 80e7 cfe9 c003 a360 880a d0ee 4084     ~.......`......@
  412018:	51bf 69c1 a8f7 bee2 cfd3 6693 6815 3f79     .Q.i.......f.hy?
  412028:	7c18 b4eb 589e c004 68bb b95f a54d 4084     .|...X...h_.M..@
  412038:	07f9 408f bd58 bee2 18d2 b81f f847 3f79     ...@X.......G.y?
  412048:	d55c 2269 d5bd c004 0f4d 831c 7645 4084     \.i"....M...Ev.@
  412058:	9711 b479 9f97 bee5 2f2d a14f ab11 3f7c     ..y.....-/O...|?
  412068:	2295 e2fd a85e c005 a54e c3e0 4e9b 4084     ."..^...N....N.@
  412078:	70c0 09ce ecff bee8 dc32 be49 a3b3 3f7f     .p......2.I....?
  412088:	1498 ffca 8781 c006 907f 6fa7 2726 4084     ...........o&'.@
  412098:	f921 28c8 b458 beec ac72 9a7d 73b7 3f81     !..(X...r.}..s.?
  4120a8:	a859 7280 7321 c007 8dea b97f ffb6 4083     Y..r!s.........@
  4120b8:	ca3d 44f3 82c6 bef0 5c91 cf01 3d55 3f83     =..D.....\..U=.?
  4120c8:	8648 f75f 6ac8 c008 a02b bf06 d80a 4083     H._..j..+......@
  4120d8:	d4df f10c f887 bef2 5de6 bd7a 3010 3f85     .........]z..0.?
  4120e8:	6ae5 1d3b 6d5e c009 4299 f9cd afc6 4083     .j;.^m...B.....@
  4120f8:	b827 dfb0 c35f bef5 bc5f c4e0 4bc7 3f87     '..._..._....K.?
  412108:	3e6b ff9b 78d1 c00a db5b 7cd2 866d 4083     k>...x..[..|m..@
  412118:	d99d 557a e9ef bef8 2fe3 360e 8de0 3f89     ..zU...../.6...?
  412128:	e73d 1e42 89b2 c00b c0ca 4bb3 5b52 4083     =.B........KR[.@
  412138:	5a43 c3ad 6fce befc 4db1 0ba1 efc5 3f8b     CZ...o...M.....?
  412148:	959f 2d69 9a8b c00c c0b6 f127 2d8b 4083     ..i-......'..-.@
  412158:	8754 37cf 2955 bf00 eab9 4618 64a4 3f8e     T..7U).....F.d.?
  412168:	2e77 3c17 a30c c00d a809 5de9 fbdf 4082     w..<.......]...@
  412178:	9fb6 13a9 42c5 bf02 bf58 a434 6b07 3f90     .....B..X.4..k.?
  412188:	9d23 9345 96d3 c00e b25b 2629 c4a6 4082     #.E.....[.)&...@
  412198:	2df8 f73d 7d81 bf03 f68b 2ee8 3930 3f91     .-=..}......09.?
  4121a8:	6126 060b 4587 c00f 4a6f 5240 798e 4082     &a...E..oJ@R.y.@
  4121b8:	dc78 bb9d cf08 bf04 5e76 cdfa 10e4 3f92     x.......v^.....?
  4121c8:	424b 83b6 f6b1 c00f 95e6 cc3f 2d37 4082     KB........?.7-.@
  4121d8:	1757 d082 385e bf06 4b3c bc46 f20d 3f92     W...^8..<KF....?
  4121e8:	8cf7 7de6 54dc c010 66e0 e4b8 df79 4081     ...}.T...f..y..@
  4121f8:	8560 626e ba5f bf07 a6d1 0529 dc70 3f93     `.nb_.....).p..?
  412208:	ce42 6a00 aef1 c010 8f2f 0c02 9027 4081     B..j..../...'..@
  412218:	35ed bbf9 55ac bf09 06b8 4c68 cfa8 3f94     .5...U....hL...?
  412228:	a3f2 bb5e 0927 c011 86c9 18b8 3f0c 4081     ..^.'........?.@
  412238:	639e 6a5b 0aa1 bf0b ffff f77c cb25 3f95     .c[j......|.%..?
  412248:	cc6c 555d 62fa c011 a5b4 4ce5 ebef 4080     l.]U.b.....L...@
  412258:	2b06 a93a d942 bf0c dcfc a4d4 ce26 3f96     .+:.B.......&..?
  412268:	7dd6 c31a bbca c011 f4c8 f303 968e 4080     .}.............@
  412278:	7fd7 c042 c135 bf0e 4218 ffac d7b0 3f97     ..B.5....B.....?
  412288:	5d3b df89 12da c012 0136 5614 3e9f 4080     ;]......6..V.>.@
  412298:	aab9 74f1 60dc bf10 10e6 fc02 e68b 3f98     ...t.`.........?
  4122a8:	0114 2169 6742 c012 74db 7153 c78f 407f     ..i!Bg...tSq...@
  4122b8:	8f3c 22bb 6cce bf11 a3bb 4d12 f92b 3f99     <..".l.....M+..?
  4122c8:	a0a9 f796 b7da c012 4bb4 8743 0b3b 407f     .........KC.;..@
  4122d8:	7b90 ecd3 5613 bf16 d50f b8db 186e 3f9f     .{...V......n..?
  4122e8:	c270 0300 70fa c014 6950 e80a a155 407e     p....p..Pi..U.~@
  4122f8:	d4f1 016c d386 bf1c d146 7d44 b8f3 3fa2     ..l.....F.D}...?
  412308:	8e24 d9e1 73f5 c016 77f0 91f5 408c 407e     $....s...w...@~@
  412318:	abe0 d905 b99d bf22 a172 6ba2 ad7d 3fa6     ......".r..k}..?
  412328:	198b 9f87 d085 c018 35ec 8519 e9ee 407d     .........5....}@
  412338:	13de 5fa0 7cb6 bf28 f520 274e a312 3fab     ..._.|(. .N'...?
  412348:	15cb 9375 9bcd c01b a19b 22aa 9ef6 407d     ..u........"..}@
  412358:	28b2 e6e0 202a bf30 6a20 b8fd f67b 3fb0     .(..* 0. j..{..?
  412368:	2801 2417 f568 c01e 2ef0 27d5 6244 407d     .(.$h......'Db}@
  412378:	ca51 d318 72bd bf35 f9ab 3db3 0b25 3fb5     Q....r5....=%..?
  412388:	8fd6 1677 898c c021 851a 633f 393e 407d     ..w...!...?c>9}@
  412398:	c68f 539f 098a bf3d 5d8c f002 9725 3fba     ...S..=..]..%..?
  4123a8:	4ada bf25 2d07 c024 df19 1a75 2efb 407d     .J%..-$...u...}@
  4123b8:	336b 1109 5d60 bf44 c477 c27d 5f20 3fc1     k3..`]D.w.}. _.?
  4123c8:	afc1 b307 c702 c027 f7bf 1970 5793 407d     ......'...p..W}@
  4123d8:	ee0b 6c05 7665 bf4e 6b39 061d f722 3fc7     ...levN.9k.."..?
  4123e8:	09da d6c2 0485 c02d 2d8c cbbd cbe3 407d     ......-..-....}@
  4123f8:	48fe d56d ba5f bf58 e26c 60e8 9081 3fd1     .Hm._.X.l..`...?
  412408:	bcf6 3b54 52d2 c032 6565 4331 768a 407e     ..T;.R2.ee1C.v~@
  412418:	6170 7373 206f 6164 6c6c 206f 6273 616c     passo dallo sbla
  412428:	636e 6f69 0000 0000                         ncio....

00412430 <qmax_rpm>:
  412430:	f4c2 44c7 4017 44c7 8b6e 44c6 d6c3 44c5     ...D.@.Dn..D...D
  412440:	2217 44c5 6d6e 44c4 b8c3 44c3 0418 44c3     .".Dnm.D...D...D
  412450:	4f6f 44c2 9ac4 44c1 e618 44c0 c819 44be     oO.D...D...D...D
  412460:	aa19 44bc 8c1a 44ba 6e1a 44b8 501b 44b6     ...D...D.n.D.P.D
  412470:	321b 44b4 141c 44b2 f61c 44af d81d 44ad     .2.D...D...D...D
  412480:	ba1d 44ab 8cff 44aa 5fe3 44a9 32c7 44a8     ...D...D._.D.2.D
  412490:	05ab 44a7 d890 44a5 ab74 44a4 7e56 44a3     ...D...Dt..DV~.D
  4124a0:	513a 44a2 241e 44a1 f702 449f 6091 449d     :Q.D.$.D...D.`.D
  4124b0:	ca1f 449a 33ad 4498 9d3d 4495 06ca 4493     ...D.3.D=..D...D
  4124c0:	705a 4490 d9e8 448d 4377 448b ad05 4488     Zp.D...DwC.D...D
  4124d0:	1695 4486 bc5d 4483 6223 4481 0fd6 447e     ...D]..D#b.D..~D
  4124e0:	5b66 4479 a6f2 4474 f283 446f 3e13 446b     f[yD..tD..oD.>kD
  4124f0:	899f 4466 d52f 4461 20bf 445d 1213 4456     ..fD/.aD. ]D..VD
  412500:	036c 444f f4c4 4447 e618 4440 d771 4439     l.OD..GD..@Dq.9D
  412510:	c8c5 4432 ba1d 442b ab71 4424 9cca 441d     ..2D..+Dq.$D...D
  412520:	8e1e 4416 3030 3532 0000 0000 3030 3533     ...D0025....0035
  412530:	0000 0000 3030 3534 0000 0000 3030 3535     ....0045....0055
  412540:	0000 0000 6325 0000 6425 0000 5825 0000     ....%c..%d..%X..
  412550:	2e25 6631 0000 0000 0a0d 0000 4654 3d72     %.1f........TFr=
  412560:	0000 0000 5420 6552 003d 0000 5420 7553     .... TRe=... TSu
  412570:	003d 0000 5420 7845 003d 0000 2c20 4520     =... TEx=... , E
  412580:	7272 726f 7420 6568 7520 696e 7374 6320     rror the units c
  412590:	6e61 6820 7661 2065 2c32 3420 6f20 2072     an have 2, 4 or 
  4125a0:	2036 6f6d 6f74 7372 0021 0000 4520 7272     6 motors!... Err
  4125b0:	726f 202c 6874 2065 696d 696e 756d 206d     or, the minimum 
  4125c0:	6176 756c 2065 7369 3420 2130 0000 0000     value is 40!....
  4125d0:	5720 7261 696e 676e 202c 6874 2065 616d      Warning, the ma
  4125e0:	6978 756d 206d 6176 756c 2065 7369 3120     ximum value is 1
  4125f0:	3030 0021 2020 7245 6f72 2c72 7420 6568     00!.  Error, the
  412600:	7620 6c61 6575 6920 2073 6f6e 2074 6f63      value is not co
  412610:	7272 6365 2074 6d28 7861 313d 3030 202c     rrect (max=100, 
  412620:	696d 3d6e 3034 2129 0000 0000 0025 0000     min=40)!....%...
  412630:	2020 7245 6f72 2072 6874 2065 6164 6174       Error the data
  412640:	7320 7465 6920 2073 6f6e 2074 6f43 7272      set is not Corr
  412650:	6365 2174 0000 0000 6e41 6974 726f 7261     ect!....Antiorar
  412660:	6f69 0000 724f 7261 6f69 0000 6e45 6261     io..Orario..Enab
  412670:	656c 0000 6944 6173 6c62 0065 6153 6976     le..Disable.Savi
  412680:	676e 6e20 7765 7620 6c61 6575 2073 0000     ng new values ..
  412690:	4520 7272 726f 202c 6f63 666e 6769 7275      Error, configur
  4126a0:	7461 6f69 206e 7369 6920 636e 6d6f 6c70     ation is incompl
  4126b0:	7465 2165 0000 0000 0020 0000 203e 6553     ete!.... ...> Se
  4126c0:	656c 7463 7420 6568 6e20 6d75 6562 2072     lect the number 
  4126d0:	3028 2e2c 2c2e 2939 203a 0000 6e49 7469     (0,..,9): ..Init
  4126e0:	6520 7065 6f72 006d 2020 6f44 656e 0000      eeprom.  Done..
  4126f0:	4520 7272 726f 202c 6874 2065 756e 626d      Error, the numb
  412700:	7265 6920 2073 6f6e 2074 6f63 7272 6365     er is not correc
  412710:	2174 0000 203e 6553 656c 7463 5420 7365     t!..> Select Tes
  412720:	2074 3028 2e2c 2c2e 2936 203a 0000 0000     t (0,..,6): ....
  412730:	5720 6565 6c6b 2079 6e45 6261 656c 003a      Weekly Enable:.
  412740:	2020 6557 6b65 796c 4e20 544f 4520 616e       Weekly NOT Ena
  412750:	6c62 3a65 0000 0000 2020 6144 2079 0000     ble:....  Day ..
  412760:	6152 676e 2865 0000 2029 6f54 3a6e 0020     Range(..) Ton: .
  412770:	333a 2030 0000 0000 303a 2030 0000 0000     :30 ....:00 ....
  412780:	5420 666f 3a66 0020 5320 6570 6465 203a      Toff: . Speed: 
  412790:	0000 0000 5845 5254 0041 0000 4142 4953     ....EXTRA...BASI
  4127a0:	0043 0000 6559 0073 6f4e 0000 2025 0000     C...Yes.No..% ..
  4127b0:	3d31 6e41 6974 724f 7261 6f69 2820 6564     1=AntiOrario (de
  4127c0:	6166 6c75 2974 0000 3d30 724f 7261 6f69     fault)..0=Orario
  4127d0:	0000 0000 202d 202d 202d 0000 7250 4865     ....- - - ..PreH
  4127e0:	6165 6574 2072 0020 5044 5f50 3256 2020     eater  .DPP_V2  
  4127f0:	0000 0000 4f56 5f43 6553 736e 726f 2020     ....VOC_Sensor  
  412800:	0000 0000 4852 535f 6e65 6f73 2072 0020     ....RH_Sensor  .
  412810:	4f43 5f32 6553 736e 726f 2020 0000 0000     CO2_Sensor  ....
  412820:	4452 3230 4620 3a57 0000 0000 7250 7365     RD02 FW:....Pres
  412830:	2073 4b5b 5945 205d 6e61 2064 535b 4e45     s [KEY] and [SEN
  412840:	5d44 7420 206f 6873 776f 4320 6e6f 6966     D] to show Confi
  412850:	2067 654d 756e 0020 4f20 004b 202e 0000     g Menu . OK.. ..
  412860:	7453 7261 6974 676e 7020 6f72 7267 6d61     Starting program
  412870:	0000 0000 6f53 7272 2c79 7420 6568 6620     ....Sorry, the f
  412880:	6e75 7463 6f69 206e 6553 656c 7463 6920     unction Select i
  412890:	2073 6f6e 2074 7270 7365 6e65 0074 0000     s not present...

004128a0 <str_0_Row_MainMenu>:
  4128a0:	5b20 5d30 2020 7845 7469 6d20 6e65 2c75      [0]  Exit menu,
  4128b0:	6120 646e 5320 6174 7472 6e69 2067 7250      and Starting Pr
  4128c0:	676f 002e                                   og..

004128c4 <str_1_Row_MainMenu>:
  4128c4:	5b20 5d31 2020 7257 7469 2065 6565 7270      [1]  Write eepr
  4128d4:	6d6f 6420 6665 7561 746c 0000               om default..

004128e0 <str_2_Row_MainMenu>:
  4128e0:	5b20 5d32 2020 6552 6461 4320 6e6f 6966      [2]  Read Confi
  4128f0:	2e67 4420 7461 2061 6e55 7469 0000 0000     g. Data Unit....

00412900 <str_3_Row_MainMenu>:
  412900:	5b20 5d33 2020 7257 7469 2065 6553 6972      [3]  Write Seri
  412910:	6c61 4e20 6d75 6562 0072 0000               al Number...

0041291c <str_4_Row_MainMenu>:
  41291c:	5b20 5d34 2020 6553 2074 6144 6174 4d20      [4]  Set Data M
  41292c:	746f 726f 2073 2026 7942 6170 7373 0000     otors & Bypass..

0041293c <str_5_Row_MainMenu>:
  41293c:	5b20 5d35 2020 6553 7474 6e69 2067 544e      [5]  Setting NT
  41294c:	0043 0000                                   C...

00412950 <str_6_Row_MainMenu>:
  412950:	5b20 5d36 2020 6e65 6574 2072 4d5b 4e41      [6]  enter [MAN
  412960:	4155 204c 4554 5453 4e49 2047 454d 554e     UAL TESTING MENU
  412970:	005d 0000                                   ]...

00412974 <str_7_Row_MainMenu>:
  412974:	5b20 5d37 2020 7453 7261 2074 7541 6f74      [7]  Start Auto
  412984:	6944 6761 6f6e 7473 6369 0073               Diagnostics.

00412990 <str_8_Row_MainMenu>:
  412990:	5b20 5d38 2020 6956 7765 5720 6565 6c6b      [8]  View Weekl
  4129a0:	2079 7250 676f 6172 006d 0000               y Program...

004129ac <str_9_Row_MainMenu>:
  4129ac:	5b20 5d39 2020 6e49 6573 7472 5320 7274      [9]  Insert Str
  4129bc:	6e69 2067 6f43 666e 6769 202e 6e55 7469     ing Config. Unit
  4129cc:	0000 0000                                   ....

004129d0 <str_Accessory_2_Menu>:
  4129d0:	2020 2e32 3431 502d 6572 6f43 666e 412e       2.14-PreConf.A
  4129e0:	6363 7365 203a 0000                         cces: ..

004129e8 <str_Bypass_2_Menu>:
  4129e8:	2020 2e32 3331 422d 7079 7361 2073 6c43       2.13-Bypass Cl
  4129f8:	736f 2065 203a 0000                         ose : ..

00412a00 <str_Bypass_4_Menu>:
  412a00:	3420 362e 532d 7465 4220 7079 7361 2073      4.6-Set Bypass 
  412a10:	6c43 736f 2865 3d30 724f 7261 6f69 312c     Close(0=Orario,1
  412a20:	413d 746e 6f69 6172 3a29 0020               =Antiora): .

00412a2c <str_CapMotors_2_Menu>:
  412a2c:	2020 2e32 3031 432d 7061 6361 202e 6f4d       2.10-Capac. Mo
  412a3c:	6f74 7372 203a 0000                         tors: ..

00412a44 <str_CapMotors_4_Menu>:
  412a44:	3420 352e 532d 7465 4320 7061 6361 7469      4.5-Set Capacit
  412a54:	2079 6f4d 6f74 7372 3428 2530 2e2c 2c2e     y Motors(40%,..,
  412a64:	3031 2530 3a29 0020                         100%): .

00412a6c <str_Control_2_Menu>:
  412a6c:	2020 2e32 3230 542d 7079 2065 6e55 7469       2.02-Type Unit
  412a7c:	2e2e 2e2e 203a 0000                         ....: ..

00412a84 <str_EnabCAF_2_Menu>:
  412a84:	2020 2e32 3830 452d 616e 2e62 7546 636e       2.08-Enab.Func
  412a94:	432e 4641 203a 0000                         .CAF: ..

00412a9c <str_EnabCAP_2_Menu>:
  412a9c:	2020 2e32 3930 452d 616e 2e62 7546 636e       2.09-Enab.Func
  412aac:	432e 5041 203a 0000                         .CAP: ..

00412ab4 <str_Enab_CAF_4_Menu>:
  412ab4:	3420 382e 452d 616e 6c62 2065 7566 636e      4.8-Enable func
  412ac4:	6974 6e6f 4320 4641 2820 2079 726f 6e20     tion CAF (y or n
  412ad4:	3a29 0020                                   ): .

00412ad8 <str_Enab_CAP_4_Menu>:
  412ad8:	3420 372e 452d 616e 6c62 2065 7566 636e      4.7-Enable func
  412ae8:	6974 6e6f 4320 5041 2820 2079 726f 6e20     tion CAP (y or n
  412af8:	3a29 0020                                   ): .

00412afc <str_Error_9_Menu>:
  412afc:	7245 6f72 2c72 6420 7665 6369 2065 6f63     Error, device co
  412b0c:	666e 6769 7275 7461 6f69 206e 6166 6c69     nfiguration fail
  412b1c:	6465 0021                                   ed!.

00412b20 <str_Info_cfg_NTC_5_Menu>:
  412b20:	5320 7465 7420 6568 5020 736f 7469 6f69      Set the Positio
  412b30:	206e 544e 3a43 2820 4654 6572 6873 2e29     n NTC: (TFresh).
  412b40:	5428 6552 7574 6e72 2e29 5428 7553 7070     (TReturn).(TSupp
  412b50:	796c 2e29 5428 7845 6175 7473 0029 0000     ly).(TExuast)...

00412b60 <str_NumMotors_2_Menu>:
  412b60:	2020 2e32 3630 4e2d 6d75 6562 2072 6f4d       2.06-Number Mo
  412b70:	6f74 7372 203a 0000                         tors: ..

00412b78 <str_NumMotors_4_Menu>:
  412b78:	3420 312e 532d 7465 4e20 6d75 6562 2072      4.1-Set Number 
  412b88:	6f4d 6f74 7372 2820 2c32 3420 202c 2936     Motors (2, 4, 6)
  412b98:	203a 0000                                   : ..

00412b9c <str_NumNTC_2_Menu>:
  412b9c:	2020 2e32 3131 4e2d 6d75 6562 2072 544e       2.11-Number NT
  412bac:	2e43 2e2e 203a 0000                         C...: ..

00412bb4 <str_NumPulse_2_Menu>:
  412bb4:	2020 2e32 3730 4e2d 6d75 6562 2072 7570       2.07-Number pu
  412bc4:	736c 2065 203a 0000                         lse : ..

00412bcc <str_NumPulse_4_Menu>:
  412bcc:	3420 322e 532d 7465 4e20 6d75 6562 2072      4.2-Set Number 
  412bdc:	7570 736c 7365 722f 7665 6c6f 7475 6f69     pulses/revolutio
  412bec:	206e 3028 2c31 2e2e 312c 2930 203a 0000     n (01,..,10): ..

00412bfc <str_PosNTC_2_Menu>:
  412bfc:	2020 2e32 3231 502d 736f 7469 6f69 206e       2.12-Position 
  412c0c:	544e 2043 203a 0000                         NTC : ..

00412c14 <str_SerNumb_2_Menu>:
  412c14:	2020 2e32 3530 532d 7265 6169 206c 754e       2.05-Serial Nu
  412c24:	626d 7265 203a 0000                         mber: ..

00412c2c <str_Title_1_Menu>:
  412c2c:	2d2d 5b2d 3120 2020 7257 7469 2065 6565     ---[ 1  Write ee
  412c3c:	7270 6d6f 4420 6665 7561 746c 5d20 2d2d     prom Default ]--
  412c4c:	002d 0000                                   -...

00412c50 <str_Title_2_Menu>:
  412c50:	2d2d 5b2d 3220 2020 6552 6461 4320 6e6f     ---[ 2  Read Con
  412c60:	6966 2e67 4420 7461 2061 6e55 7469 5d20     fig. Data Unit ]
  412c70:	2d2d 002d                                   ---.

00412c74 <str_Title_3_Menu>:
  412c74:	2d2d 5b2d 3320 2020 7257 7469 2065 6553     ---[ 3  Write Se
  412c84:	6972 6c61 4e20 6d75 6562 2072 2d5d 2d2d     rial Number ]---
  412c94:	0000 0000                                   ....

00412c98 <str_Title_4_Menu>:
  412c98:	2d2d 5b2d 3420 2020 6553 2074 6144 6174     ---[ 4  Set Data
  412ca8:	4d20 746f 726f 2073 2026 7942 6170 7373      Motors & Bypass
  412cb8:	5d20 2d2d 002d 0000                          ]---...

00412cc0 <str_Title_5_Menu>:
  412cc0:	2d2d 5b2d 3520 2020 6553 7474 6e69 2067     ---[ 5  Setting 
  412cd0:	544e 2043 2d5d 2d2d 0000 0000               NTC ]---....

00412cdc <str_Title_6_Menu>:
  412cdc:	203d 203d 203d 5b3d 4d20 4e41 4155 204c     = = = =[ MANUAL 
  412cec:	4554 5453 4e49 2047 454d 554e 5d20 203d     TESTING MENU ]= 
  412cfc:	203d 203d 003d 0000                         = = =...

00412d04 <str_Title_8_Menu>:
  412d04:	2d2d 5b2d 3820 2020 6956 7765 5720 6565     ---[ 8  View Wee
  412d14:	6c6b 2079 7250 676f 6172 206d 2d5d 2d2d     kly Program ]---
  412d24:	0000 0000                                   ....

00412d28 <str_Title_MainMenu>:
  412d28:	203d 203d 203d 203d 203d 5b3d 4d20 4941     = = = = = =[ MAI
  412d38:	204e 454d 554e 5d20 203d 203d 203d 203d     N MENU ]= = = = 
  412d48:	203d 003d                                   = =.

00412d4c <str_VerHW_2_Menu>:
  412d4c:	2020 2e32 3330 562d 7265 6973 6e6f 4820       2.03-Version H
  412d5c:	2e57 2e2e 203a 0000                         W...: ..

00412d64 <str_VerSW_2_Menu>:
  412d64:	2020 2e32 3430 562d 7265 6973 6e6f 5320       2.04-Version S
  412d74:	2e57 2e2e 203a 0000                         W...: ..

00412d7c <str_actualy_SN_3_Menu>:
  412d7c:	4120 7463 6175 796c 5320 204e 7369 203a      Actualy SN is: 
  412d8c:	0000 0000                                   ....

00412d90 <str_addrUnit_2_Menu>:
  412d90:	2020 2e32 3130 412d 6464 6572 7373 5520       2.01-Address U
  412da0:	696e 2e74 203a 0000                         nit.: ..

00412da8 <str_confirm_1_Menu>:
  412da8:	6f44 7920 756f 7720 6e61 2074 6f74 7020     Do you want to p
  412db8:	6f72 6563 6465 7720 7469 2068 6874 2065     roceed with the 
  412dc8:	6e69 7469 6169 696c 2e7a 7420 6568 6520     initializ. the e
  412dd8:	7065 6f72 206d 7928 6e2f 3f29 0000 0000     eprom (y/n)?....

00412de8 <str_enter_NTC_5_Menu>:
  412de8:	4520 746e 7265 7420 6568 6e20 7765 7620      Enter the new v
  412df8:	6c61 6575 6f20 2066 544e 2043 3228 202c     alue of NTC (2, 
  412e08:	2c33 3420 2c29 6120 7463 6175 796c 6920     3, 4), actualy i
  412e18:	2073 0000                                   s ..

00412e1c <str_enter_SN_3_Menu>:
  412e1c:	4520 746e 7265 3120 2038 756e 626d 202e      Enter 18 numb. 
  412e2c:	6977 6874 6f20 2072 6977 6874 756f 2074     with or without 
  412e3c:	7073 6361 7365 7420 206f 6f63 706d 736f     spaces to compos
  412e4c:	2065 6874 2065 656e 2077 4e53 002e 0000     e the new SN....

00412e5c <str_enter_SN_DESC_1>:
  412e5c:	6544 6373 6972 7470 5320 3a4e 345b 533a     Descript SN:[4:S
  412e6c:	6c61 7365 724f 5d64 5b20 3a34 6953 657a     alesOrd] [4:Size
  412e7c:	205d 335b 433a 6766 205d 345b 443a 7461     ] [3:Cfg] [4:Dat
  412e8c:	5d61 5b20 3a33 504e 6f72 5d67 0000 0000     a] [3:NProg]....

00412e9c <str_enter_SN_DESC_2>:
  412e9c:	335b 433a 6766 205d 315b 3a5d 3020 4f3d     [3:Cfg] [1]: 0=O
  412eac:	4353 202c 3d31 5353 2c43 3220 453d 534f     SC, 1=SSC, 2=EOS
  412ebc:	202c 3d33 4f45 0053                         , 3=EOS.

00412ec4 <str_enter_SN_DESC_3>:
  412ec4:	2020 2020 2020 2020 325b 3a5d 3020 6e3d             [2]: 0=n
  412ed4:	6e6f 2c65 3120 413d 202c 3d32 2c42 2e20     one, 1=A, 2=B, .
  412ee4:	002e 0000                                   ....

00412ee8 <str_enter_SN_DESC_4>:
  412ee8:	2020 2020 2020 2020 335b 3a5d 3020 6e3d             [3]: 0=n
  412ef8:	6e6f 2c65 3120 313d 202c 3d32 2c32 2e20     one, 1=1, 2=2, .
  412f08:	002e 0000                                   ....

00412f0c <str_error1_3_Menu>:
  412f0c:	4520 7272 726f 202c 6854 2065 4e53 6920      Error, The SN i
  412f1c:	2073 6f6e 2074 6f63 7272 6365 2174 0000     s not correct!..

00412f2c <str_error1_4_Menu>:
  412f2c:	4520 7272 726f 202c 6874 2065 756e 626d      Error, the numb
  412f3c:	7265 6f20 2066 7570 736c 7365 722f 7665     er of pulses/rev
  412f4c:	6c6f 7475 6f69 206e 6176 6972 7365 6620     olution varies f
  412f5c:	6f72 206d 2031 6f74 3120 2130 0000 0000     rom 1 to 10!....

00412f6c <str_error1_5_Menu>:
  412f6c:	4520 7272 726f 202c 6874 2065 6e65 6574      Error, the ente
  412f7c:	6572 2064 6164 6174 6920 2073 6f6e 2074     red data is not 
  412f8c:	2061 756e 2e6d 6320 6d6f 7270 7369 6465     a num. comprised
  412f9c:	6220 7465 6577 6e65 3220 2620 3420 0000      between 2 & 4..

00412fac <str_error2_3_Menu>:
  412fac:	4520 7272 726f 202c 6874 2065 756e 626d      Error, the numb
  412fbc:	7265 6f20 2066 6964 6967 7374 6920 2073     er of digits is 
  412fcc:	656c 7373 7420 6168 206e 3831 0021 0000     less than 18!...

00412fdc <str_error3_3_Menu>:
  412fdc:	4520 7272 726f 202c 6874 2065 756e 626d      Error, the numb
  412fec:	7265 6f20 2066 6964 6967 7374 6920 2073     er of digits is 
  412ffc:	7267 6165 6574 2072 6874 6e61 3120 2138     greater than 18!
  41300c:	0000 0000                                   ....

00413010 <str_error4_4_Menu>:
  413010:	4520 7272 726f 202c 6874 2065 6176 756c      Error, the valu
  413020:	2065 666f 6320 7061 6361 7469 2079 7369     e of capacity is
  413030:	6e20 746f 6320 726f 6572 7463 0021 0000      not correct!...

00413040 <str_error_char_1_Menu>:
  413040:	6c70 6165 6573 202c 756a 7473 6520 746e     please, just ent
  413050:	7265 7420 6568 6320 6168 6172 7463 7265     er the character
  413060:	2020 7927 2027 5928 7365 2029 726f 2720       'y' (Yes) or '
  413070:	276e 2820 6f4e 0029                         n' (No).

00413078 <str_ex_1_cfg_NTC_5_Menu>:
  413078:	2020 4520 6178 706d 656c 3120 203d 2e30        Example 1= 0.
  413088:	2e31 2e32 2033 3e2d 5420 7246 3d65 2c30     1.2.3 -> TFre=0,
  413098:	5420 6552 3d74 2c31 5420 7553 3d70 2c32      TRet=1, TSup=2,
  4130a8:	5420 7845 3d61 0033                          TExa=3.

004130b0 <str_ex_2_cfg_NTC_5_Menu>:
  4130b0:	2020 4520 6178 706d 656c 3220 203d 2e31        Example 2= 1.
  4130c0:	2e32 2e30 2033 3e2d 5420 7246 3d65 2c31     2.0.3 -> TFre=1,
  4130d0:	5420 6552 3d74 2c32 5420 7553 3d70 2c30      TRet=2, TSup=0,
  4130e0:	5420 7845 3d61 0033                          TExa=3.

004130e8 <str_new_NTC_5_Menu>:
  4130e8:	4420 6769 7469 7420 6568 6e20 7765 6e20      Digit the new n
  4130f8:	6d75 6562 3a72 0020                         umber: .

00413100 <str_new_SN_3_Menu>:
  413100:	5420 6568 4e20 7765 5320 204e 7369 203a      The New SN is: 
  413110:	0000 0000                                   ....

00413114 <str_row0_6_Menu>:
  413114:	5b20 5d30 2020 6552 7574 6e72 5b20 414d      [0]  Return [MA
  413124:	4e49 4d20 4e45 5d55 0000 0000               IN MENU]....

00413130 <str_row1_6_Menu>:
  413130:	5b20 5d31 2020 6554 7473 4220 7079 7361      [1]  Test Bypas
  413140:	0073 0000                                   s...

00413144 <str_row2_6_Menu>:
  413144:	5b20 5d32 2020 6554 7473 4920 004f 0000      [2]  Test IO...

00413154 <str_row3_6_Menu>:
  413154:	5b20 5d33 2020 6554 7473 5320 656c 7065      [3]  Test Sleep
  413164:	6f4d 6564 0000 0000                         Mode....

0041316c <str_row4_6_Menu>:
  41316c:	5b20 5d34 2020 6554 7473 4d20 746f 726f      [4]  Test Motor
  41317c:	0073 0000                                   s...

00413180 <str_row5_6_Menu>:
  413180:	5b20 5d35 2020 6554 7473 5520 7261 2074      [5]  Test Uart 
  413190:	0031 0000                                   1...

00413194 <str_row6_6_Menu>:
  413194:	5b20 5d36 2020 6554 7473 4920 4332 4220      [6]  Test I2C B
  4131a4:	7375 0000                                   us..

004131a8 <str_set_cfg_NTC_5_Menu>:
  4131a8:	4420 6769 7469 6e20 7765 5020 736f 7469      Digit new Posit
  4131b8:	6f69 206e 5428 7246 542e 6552 542e 7553     ion (TFr.TRe.TSu
  4131c8:	542e 7845 3a29 0020 7245 6f72 3a72 5320     .TEx): .Error: S
  4131d8:	6174 7472 4d20 7365 6173 6567 0000 0000     tart Message....
  4131e8:	7245 6f72 3a72 4320 7261 7461 6574 6572     Error: Carattere
  4131f8:	5320 7065 7261 7461 726f 2065 3b27 0027      Separatore ';'.
  413208:	7245 6f72 3a72 4320 4352 3631 0000 0000     Error: CRC16....
  413218:	7257 7469 2065 6f43 666e 6769 5520 696e     Write Config Uni
  413228:	2074 7369 5320 6375 6563 7373 7566 6c6c     t is Successfull
  413238:	0021 0000 4453 5f41 554f 3a54 2020 0000     !...SDA_OUT:  ..
  413248:	2031 0000 2030 0000 4353 5f4c 4e49 3a20     1 ..0 ..SCL_IN :
  413258:	2020 0000 4353 5f4c 554f 3a54 2020 0000       ..SCL_OUT:  ..
  413268:	4453 5f41 4e49 3a20 2020 0000 6552 7573     SDA_IN :  ..Resu
  413278:	746c 5420 7365 2074 0000 0000 462e 4941     lt Test .....FAI
  413288:	454c 2144 0000 0000 502e 5341 4553 0044     LED!.....PASSED.

00413298 <str_1_test_BDP>:
  413298:	2020 2d2d 3c2d 5420 7365 2074 7942 6170       ---< Test Bypa
  4132a8:	7373 3e20 2d2d 002d                         ss >---.

004132b0 <str_1_test_I2C>:
  4132b0:	2020 2d2d 3c2d 5420 7365 2074 3249 2043       ---< Test I2C 
  4132c0:	2d3e 2d2d 0000 0000                         >---....

004132c8 <str_1_test_IO>:
  4132c8:	2020 2d2d 3c2d 5420 7365 2074 6e49 7570       ---< Test Inpu
  4132d8:	2f74 754f 7074 7475 3e20 2d2d 002d 0000     t/Output >---...

004132e8 <str_1_test_SM>:
  4132e8:	2020 2d2d 3c2d 5420 7365 2074 6553 7065       ---< Test Seep
  4132f8:	4d20 646f 2065 2d3e 2d2d 0000                Mode >---..

00413304 <str_1_test_motors>:
  413304:	2020 2d2d 3c2d 5420 7365 2074 6f4d 6f74       ---< Test Moto
  413314:	7372 3e20 2d2d 002d                         rs >---.

0041331c <str_1_test_uart1>:
  41331c:	2020 2d2d 3c2d 5420 7365 2074 4155 5452       ---< Test UART
  41332c:	2031 2d3e 2d2d 0000                         1 >---..

00413334 <str_2_test_BDP>:
  413334:	4220 7079 7361 2073 4f20 4550 204e 0000      Bypass  OPEN ..

00413344 <str_2_test_I2C>:
  413344:	4554 5453 4120 2054 3120 4b20 5a48 003a     TEST AT  1 KHZ:.

00413354 <str_2_test_IO>:
  413354:	6f43 6e6e 6365 2074 6874 2065 756f 7074     Connect the outp
  413364:	7475 2073 666f 7420 6568 5820 2034 6f63     uts of the X4 co
  413374:	6e6e 6365 6f74 2072 0000 0000               nnector ....

00413380 <str_2_test_SM>:
  413380:	2f31 2d32 4449 454c 2020 4f4d 4544 202c     1/2-IDLE  MODE, 
  413390:	6552 616c 2079 6f50 6577 2072 4f20 2c4e     Relay Power  ON,
  4133a0:	5220 6165 2064 7473 7461 7375 4d20 746f      Read status Mot
  4133b0:	726f 0073                                   ors.

004133b4 <str_2_test_motors>:
  4133b4:	754e 626d 7265 6f20 2066 6f4d 6f74 7372     Number of Motors
  4133c4:	6320 6e6f 6966 7567 6572 3a64 0020 0000      configured: ...

004133d4 <str_3_test_BDP>:
  4133d4:	4220 7079 7361 2073 4c43 534f 2045 0000      Bypass CLOSE ..

004133e4 <str_3_test_I2C>:
  4133e4:	4554 5453 4120 2054 3035 4b20 5a48 003a     TEST AT 50 KHZ:.

004133f4 <str_3_test_IO>:
  4133f4:	4528 3a42 4120 4c45 4245 5244 304a 2932     (EB: AELEBDRJ02)
  413404:	6120 2073 6f66 6c6c 776f 3a73 0000 0000      as follows:....

00413414 <str_3_test_SM>:
  413414:	2f32 2d32 4c53 4545 2050 4f4d 4544 202c     2/2-SLEEP MODE, 
  413424:	6552 616c 2079 6f50 6577 2072 464f 2c46     Relay Power OFF,
  413434:	5220 6165 2064 7473 7461 7375 4d20 746f      Read status Mot
  413444:	726f 0073                                   ors.

00413448 <str_3_test_motors>:
  413448:	2f31 3a33 4220 6765 6e69 696e 676e 6120     1/3: Beginning a
  413458:	2074 6874 2065 696d 696e 756d 206d 6166     t the minimum fa
  413468:	736e 7320 6570 6465 002c 0000               ns speed,...

00413474 <str_4_test_IO>:
  413474:	5b20 3031 205d 202b 385b 205d 202b 375b      [10] + [8] + [7
  413484:	205d 203d 2b28 3231 2956 0000               ] = (+12V)..

00413490 <str_4_test_motors>:
  413490:	2f32 3a33 4320 6168 676e 2065 6874 2065     2/3: Change the 
  4134a0:	6166 736e 7320 6570 6465 6120 2074 6874     fans speed at th
  4134b0:	2065 656d 6964 6d75 7320 6570 6465 002c     e medium speed,.

004134c0 <str_5_test_IO>:
  4134c0:	5b20 3131 205d 202b 365b 205d 2020 2020      [11] + [6]     
  4134d0:	2020 203d 4928 5f4e 2931 0000                 = (IN_1)..

004134dc <str_5_test_motors>:
  4134dc:	2f33 3a33 4320 6168 676e 2065 6874 2065     3/3: Change the 
  4134ec:	6166 736e 7320 6570 6465 6120 2074 6874     fans speed at th
  4134fc:	2065 616d 2078 7073 6565 2c64 0000 0000     e max speed,....

0041350c <str_6_test_IO>:
  41350c:	2020 395b 205d 202b 355b 205d 2020 2020       [9] + [5]     
  41351c:	2020 203d 4928 5f4e 2932 0000                 = (IN_2)..

00413528 <str_7_test_IO>:
  413528:	7270 7365 2073 6e65 6574 2072 6877 6e65     press enter when
  413538:	7920 756f 7220 6165 7964 0021                you ready!.

00413544 <str_8_test_IO>:
  413544:	2f31 2d32 6552 616c 7379 4f20 4646 203a     1/2-Relays OFF: 
  413554:	0000 0000                                   ....

00413558 <str_9_test_IO>:
  413558:	2f32 2d32 6552 616c 7379 2020 4e4f 203a     2/2-Relays  ON: 
  413568:	0000 0000                                   ....

0041356c <str_HW_Testing>:
  41356c:	6552 656d 626d 7265 7420 206f 5748 6320     Remember to HW c
  41357c:	6e6f 656e 7463 5220 344a 2035 756f 7074     onnect RJ45 outp
  41358c:	7475 202c 6562 6f66 6572 7420 206f 7473     ut, before to st
  41359c:	7261 5420 7365 0074                         ar Test.

004135a4 <str_msg_uart1>:
  4135a4:	7453 6972 676e 7420 7365 2074 6f74 6320     String test to c
  4135b4:	6568 6b63 7420 6568 6320 726f 6572 7463     heck the correct
  4135c4:	6f20 6570 6172 6974 6e6f 6f20 2066 6874      operation of th
  4135d4:	2065 4155 5452 0031 7720 6961 6974 676e     e UART1. waiting
  4135e4:	2e20 0000 4620 4e41 2053 2c52 4320 646d      ... FANS R, Cmd
  4135f4:	315f 5630 203a 0000 2056 0000 5220 3a31     _10V: ..V .. R1:
  413604:	0000 0000 7220 6d70 0000 0000 464f 0046     .... rpm....OFF.
  413614:	2020 3252 003a 0000 2020 3352 003a 0000       R2:...  R3:...
  413624:	4620 4e41 2053 2c46 4320 646d 315f 5630      FANS F, Cmd_10V
  413634:	203a 0000 4620 3a31 0000 0000 2020 3246     : .. F1:....  F2
  413644:	003a 0000 2020 3346 003a 0000 4c20 6e69     :...  F3:... Lin
  413654:	206b 5443 4c52 465f 4e41 203a 0000 0000     k CTRL_FAN: ....
  413664:	312f 0030 2020 452c 5252 524f 4e20 204f     /10.  ,ERROR NO 
  413674:	6f50 6577 2172 0000 2020 452c 5252 524f     Power!..  ,ERROR
  413684:	5420 6568 5220 6c65 7961 4e20 746f 4f20      The Relay Not O
  413694:	6570 216e 0000 0000 7245 6f72 2c72 4c20     pen!....Error, L
  4136a4:	6e69 206b 4f4b 4320 5254 5f4c 4146 214e     ink KO CTRL_FAN!
  4136b4:	0000 0000 5854 203a 0000 0000 5852 203a     ....TX: ....RX: 
  4136c4:	0000 0000 654c 206e 5852 4d20 7365 6173     ....Len RX Messa
  4136d4:	6567 203a 0000 0000 6241 6f73 7072 6974     ge: ....Absorpti
  4136e4:	6e6f 6320 7275 6572 746e 4820 2057 6e6f     on current HW on
  4136f4:	5220 344a 3a35 0020 6d20 0041 4920 504e      RJ45: . mA. INP
  413704:	3d31 0020 2056 4e49 3250 203d 0000 0000     1= .V INP2= ....
  413714:	0056 0000 2020 452c 5252 524f 0021 0000     V...  ,ERROR!...
  413724:	4920 696d 3d6e 0020 416d 202c 4920 616d      Imin= .mA,  Ima
  413734:	3d78 0020 416d 0000 2c20 5245 4f52 2152     x= .mA.. ,ERROR!
  413744:	0000 0000 4b43 435f 5254 3a4c 0000 0000     ....CK_CTRL:....
  413754:	6545 7270 6d6f 4620 5541 544c 2021 2e4e     Eeprom FAULT! N.
  413764:	7942 6574 4520 7272 726f 203a 0000 0000     Byte Error: ....
  413774:	6e49 7469 6520 7065 6f72 206d 0028 0000     Init eeprom (...
  413784:	2e29 2e2e 002e 0000                         ).......

0041378c <vect_default_eeprom>:
  41378c:	0101 3420 302e 3220 352e 3034 3030 3030     .. 4.0 2.5400000
  41379c:	3030 3030 3030 3030 3030 3030 0030 2d00     0000000000000..-
  4137ac:	ff2d 0000 0000 0000 0000 1c40 0000 1329     -.........@...).
  4137bc:	ffff 0303 0000 001e ffff 0200 4604 6401     .............F.d
  4137cc:	e404 28ff 5a00 9600 2800 ff00 0001 0000     ...(.Z...(......
  4137dc:	0000 fa03 9000 bc01 fa02 2800 5a00 9600     ...........(.Z..
  4137ec:	2800 0000 3c00 02ee 1432 b400 3100 3332     .(...<..2....123
  4137fc:	3534 3030 3030 0030 0000 1400 6414 0000     4500000......d..
  41380c:	0000 0000 a000 dc00 be00 0000 ec0f 280a     ...............(
  41381c:	ec32 28f6 780e 0000 0000 0000 0000 0000     2..(.x..........
	...
  413878:	0000 4530 0045 0000 7245 6f72 2072 6553     ..0EE...Error Se
  413888:	6972 6c61 4e20 6d75 6562 2172 0021 0000     rial Number!!...

00413898 <KF1_1>:
  413898:	fb22 3773                                   ".s7

0041389c <KF1_2>:
  41389c:	b7ae bc43                                   ..C.

004138a0 <KF1_3>:
  4138a0:	0adb 40a6                                   ...@

004138a4 <KF1_4>:
  4138a4:	c92d 4125                                   -.%A

004138a8 <VERSION_FW>:
  4138a8:	3220 352e 0034 0000                          2.54...

004138b0 <pAnAssorb_ByPass>:
  4138b0:	0006 0000                                   ....

004138b4 <pAnAssorb_KTS>:
  4138b4:	000a 0000                                   ....

004138b8 <pAnInp1>:
  4138b8:	0007 0000                                   ....

004138bc <pAnInp2>:
  4138bc:	0008 0000                                   ....

004138c0 <pAnSensQual_Ari1>:
  4138c0:	0004 0000 6f6c 0067                         ....log.

004138c8 <_global_impure_ptr>:
  4138c8:	0050 2000 4e49 0046 6e69 0066 414e 004e     P.. INF.inf.NAN.
  4138d8:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  4138e8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  4138f8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  413908:	296c 0000 0030 0000                         l)..0...

00413910 <blanks.7223>:
  413910:	2020 2020 2020 2020 2020 2020 2020 2020                     

00413920 <zeroes.7224>:
  413920:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  413930:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00413940 <__mprec_bigtens>:
  413940:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  413950:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  413960:	bf3c 7f73 4fdd 7515                         <.s..O.u

00413968 <__mprec_tens>:
  413968:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  413978:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  413988:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  413998:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4139a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4139b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4139c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4139d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4139e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  4139f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  413a08:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  413a18:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  413a28:	9db4 79d9 7843 44ea                         ...yCx.D

00413a30 <p05.6055>:
  413a30:	0005 0000 0019 0000 007d 0000 4f50 4953     ........}...POSI
  413a40:	0058 0000                                   X...

00413a44 <_ctype_>:
  413a44:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  413a54:	2020 2020 2020 2020 2020 2020 2020 2020                     
  413a64:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  413a74:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  413a84:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  413a94:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  413aa4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  413ab4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  413ac4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00413b48 <_init>:
  413b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413b4a:	bf00      	nop
  413b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413b4e:	bc08      	pop	{r3}
  413b50:	469e      	mov	lr, r3
  413b52:	4770      	bx	lr

00413b54 <__init_array_start>:
  413b54:	0040f3f9 	.word	0x0040f3f9

00413b58 <__frame_dummy_init_array_entry>:
  413b58:	004000e5                                ..@.

00413b5c <_fini>:
  413b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413b5e:	bf00      	nop
  413b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413b62:	bc08      	pop	{r3}
  413b64:	469e      	mov	lr, r3
  413b66:	4770      	bx	lr

00413b68 <__fini_array_start>:
  413b68:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <gUnitModels>:
2000000c:	2524 0041 012c 252c 0041 0190 2534 0041     $%A.,.,%A...4%A.
2000001c:	01c2 253c 0041 0226 0000 0000 0000 0000     ..<%A.&.........

2000002c <unbalance_deFrost>:
2000002c:	0000 3f80                                   ...?

20000030 <lenRXU2_old>:
20000030:	01ff                                             .

20000031 <g_interrupt_enabled>:
20000031:	0001 0000                                        ...

20000034 <SystemCoreClock>:
20000034:	0900 003d                                   ..=.

20000038 <RotaBypass>:
20000038:	00ff                                        ..

2000003a <count_sum>:
2000003a:	00f0                                        ..

2000003c <count_win>:
2000003c:	00f0                                        ..

2000003e <soft_start>:
2000003e:	0006                                        ..

20000040 <change_EBP2>:
20000040:	0101                                             .

20000041 <change_EBPD>:
20000041:	0101                                             .

20000042 <change_SSR>:
20000042:	ff01                                             .

20000043 <countdown_Update_EepromToShadow>:
20000043:	03ff                                             .

20000044 <i_TExaust>:
20000044:	0103                                             .

20000045 <i_TReturn>:
20000045:	0201                                             .

20000046 <i_TSupply>:
20000046:	ff02                                             .

20000047 <info_EBPD>:
20000047:	01ff                                             .

20000048 <__fdlib_version>:
20000048:	0001 0000                                   ....

2000004c <_impure_ptr>:
2000004c:	0050 2000                                   P.. 

20000050 <impure_data>:
20000050:	0000 0000 033c 2000 03a4 2000 040c 2000     ....<.. ... ... 
	...
200000f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000108:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000478 <__atexit_recursive_mutex>:
20000478:	17cc 2000                                   ... 

2000047c <__malloc_av_>:
	...
20000484:	047c 2000 047c 2000 0484 2000 0484 2000     |.. |.. ... ... 
20000494:	048c 2000 048c 2000 0494 2000 0494 2000     ... ... ... ... 
200004a4:	049c 2000 049c 2000 04a4 2000 04a4 2000     ... ... ... ... 
200004b4:	04ac 2000 04ac 2000 04b4 2000 04b4 2000     ... ... ... ... 
200004c4:	04bc 2000 04bc 2000 04c4 2000 04c4 2000     ... ... ... ... 
200004d4:	04cc 2000 04cc 2000 04d4 2000 04d4 2000     ... ... ... ... 
200004e4:	04dc 2000 04dc 2000 04e4 2000 04e4 2000     ... ... ... ... 
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 

20000884 <__malloc_sbrk_base>:
20000884:	ffff ffff                                   ....

20000888 <__malloc_trim_threshold>:
20000888:	0000 0002                                   ....

2000088c <__global_locale>:
2000088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000094c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000096c:	18ed 0041 14ad 0041 0000 0000 3a44 0041     ..A...A.....D:A.
2000097c:	3788 0041 27f0 0041 27f0 0041 27f0 0041     .7A..'A..'A..'A.
2000098c:	27f0 0041 27f0 0041 27f0 0041 27f0 0041     .'A..'A..'A..'A.
2000099c:	27f0 0041 27f0 0041 ffff ffff ffff ffff     .'A..'A.........
200009ac:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200009d4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
